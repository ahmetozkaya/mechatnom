/*
 * functions.c
 *
 *  Created on: Dec 3, 2022
 *      Author: Ahmet
 */

#include "variables.h"
#include "usart.h"
#include "functions.h"
void led_kontrol (void)
{
	if (uart_echo==stop)
	{
		if (led_durum==0 && zaman>=1000)
		{
			led_durum=1;
			zaman=0;
		}
		else if(led_durum==1 && zaman>=1000)
		{
			led_durum=0;
			zaman=0;
		}
		led_On_Off;
	}
	else if (uart_echo==start)
	{
		if (led_durum==0 && zaman>=ledOff_sure)
		{
			led_durum=1;
			zaman=0;
		}
		else if(led_durum==1 && zaman>=ledOn_sure)
		{
			led_durum=0;
			zaman=0;
		}
		led_On_Off;

	}

}

/*
 * @brief Uart iletişimi için buffer yapısı
 * @param
 *		__[16bit]__[__8bit__]__[__8bit__]___[8bit]____[8bit]_
 *		_Anahtar___Komut_______veri_hb______veri_lb___check__
 *		anahtar 0x3641 olarak belirlendi
 *		komut 0x01 ise uart veri gonderimini baslatir
 *		komut 0x02 ise uart veri gonderimini durdurur
 *		komut 0x03 ise LedOn suresinin degerini ayarlar
 *		komut 0x04 ise LedOff suresinin degerini ayarlar
 *		sure degerleri veri_hb ve veri_lb nin 16 bit veriye donusturulmesi ile elde e#dilir.
 */

void uart_veri_oku(void)
{
	IT_uart_3_kontrol++;

	if(IT_uart_3_kontrol == sizeof(RX_veri))
	{
		IT_uart_3_kontrol = 0;
		for (uint8_t i=0; i<sizeof(RX_veri); i++)
		{
			if((RX_veri[i] == 0x36) && (RX_veri[i + 1] == 0x41))
			{
				komut = RX_veri[i+2];
				veri_hb = RX_veri[i+3];
				veri_lb = RX_veri[i+4];
				veri= ((RX_veri[i+3] & 0x00FF) << 8) | (RX_veri[i+4] & 0x00FF);

				uart_baglanti_hatasi = 0;// uarttan alinan veri setinde anahtar uymuyorsa yanlis veri alındi diye uyari olusturulabilir

				i = sizeof(RX_veri);
			}
			else
				uart_baglanti_hatasi = 1;
		}

		uart_veri_ayristirma();

		if (uart_echo == start) // stop komutu gelmedigi surece her uart verisi alindiktan sonra veriyi echo yapacak
		{
			uart_veri_gonder();
		}
	}
}

/*
 * @brief 	Uart verilerini ayristirir
 * @param	komut verisinin durumuna göre ayarlamakarı yapar
 *
 * 			komut verisi 0x05 ise baudrate i veri_lb e göre ayarlar
 * 			veri_lb 0 ise 115200
 * 			veri_lb 1 ise 230400
 * 			veri_lb 2 ise 57600
 * 			veri_lb 3 ise 38400
 * 			veri_lb 4 ise 9600 diger degerlerde ise 115200 olarak secilmistir. fonksiyon güncellenebilir.
 *
 *
 */
void uart_veri_ayristirma(void)
{
	switch (komut){
			case 0x01:
			{
				uart_echo = start;
				break;
			}
			case 0x02:
			{
				uart_echo = stop;
				break;
			}
			case 0x03:
			{
				ledOn_sure = veri;
				break;
			}
			case 0x04:
			{
				ledOff_sure = veri;
				break;
			}
			case 0x05://baudrate_hizi;
			{
				if(veri_lb==0)
				{
					huart3.Init.BaudRate = 115200;
				}
				else if (veri_lb==1)
				{
					huart3.Init.BaudRate = 230400;
				}
				else if (veri_lb==2)
				{
					huart3.Init.BaudRate = 57600;
				}
				else if (veri_lb==3)
				{
					huart3.Init.BaudRate = 38400;
				}
				else if (veri_lb==4)
				{
					huart3.Init.BaudRate = 9600;
				}
				else // default değeri olarak 115200 belirlendi
				{
					huart3.Init.BaudRate = 115200;
				}

				HAL_UART_Init(&huart3);
				break;
			}

			default:
			{
				;
			}
			}
}

/*
 * @brief 	Uart veri tarnsferi için buffer yapısını belirler ve gelen veriyi echo yaptırır
 * @param	ilk iki veri anahtar setidir 0x3641
 * 			ikinci veri komut verisidir.
 * 			komut 0x01 ise uart veri gonderimini basladığını bildirir
 *			komut 0x02 ise uart veri gonderimini durdugunu bildirir
 *			komut 0x03 ise LedOn suresinin gönderildiğini belirtir
 *			komut 0x04 ise LedOff suresinin gönderildiğini belirtir
 *			3. ve 4. veriler LedOn ve ledOff suresinin degerini gönderir
 *
 *			alıcı tarafta veri kaybı olmasın diye iki kez gönderiliyor.
 */


void uart_veri_gonder(void)
{
	TX_veri[0]=0x36; // veri seti anahtar kodu
	TX_veri[1]=0x41; // veri seti anahtar kodu
	TX_veri[2]=komut;
	TX_veri[3]=veri_hb; // gonderilen verinin high biti
	TX_veri[4]=veri_lb; // gonderilen verinin low biti

	for (uint8_t i=0;i<5;i++) // Alici taraf veriyi kacirirsa diye tekrarli gonderiyor
	{
		TX_veri[i+5]=TX_veri[i];
	}

	HAL_UART_Transmit(&huart3, (uint8_t *)&TX_veri, sizeof(TX_veri), 250);
}




