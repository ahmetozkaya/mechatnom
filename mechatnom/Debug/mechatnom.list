
mechatnom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083bc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008544  08008544  00018544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008560  08008560  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008560  08008560  00018560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008568  08008568  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008568  08008568  00018568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800856c  0800856c  0001856c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000007d0  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000860  20000860  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d846  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e51  00000000  00000000  0003d906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f0  00000000  00000000  00041758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001168  00000000  00000000  00042a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024282  00000000  00000000  00043bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018af8  00000000  00000000  00067e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d05f9  00000000  00000000  0008092a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00150f23  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005040  00000000  00000000  00150f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800852c 	.word	0x0800852c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800852c 	.word	0x0800852c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <led_kontrol>:

#include "variables.h"


void led_kontrol (void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	if (uart_echo==stop)
 80004c4:	4b2d      	ldr	r3, [pc, #180]	; (800057c <led_kontrol+0xbc>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	2b02      	cmp	r3, #2
 80004ca:	d127      	bne.n	800051c <led_kontrol+0x5c>
	{
		if (led_durum==0 && zaman>=1000)
 80004cc:	4b2c      	ldr	r3, [pc, #176]	; (8000580 <led_kontrol+0xc0>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d10b      	bne.n	80004ec <led_kontrol+0x2c>
 80004d4:	4b2b      	ldr	r3, [pc, #172]	; (8000584 <led_kontrol+0xc4>)
 80004d6:	881b      	ldrh	r3, [r3, #0]
 80004d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004dc:	d306      	bcc.n	80004ec <led_kontrol+0x2c>
		{
			led_durum=1;
 80004de:	4b28      	ldr	r3, [pc, #160]	; (8000580 <led_kontrol+0xc0>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	701a      	strb	r2, [r3, #0]
			zaman=0;
 80004e4:	4b27      	ldr	r3, [pc, #156]	; (8000584 <led_kontrol+0xc4>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	801a      	strh	r2, [r3, #0]
 80004ea:	e00e      	b.n	800050a <led_kontrol+0x4a>
		}
		else if(led_durum==1 && zaman>=1000)
 80004ec:	4b24      	ldr	r3, [pc, #144]	; (8000580 <led_kontrol+0xc0>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d10a      	bne.n	800050a <led_kontrol+0x4a>
 80004f4:	4b23      	ldr	r3, [pc, #140]	; (8000584 <led_kontrol+0xc4>)
 80004f6:	881b      	ldrh	r3, [r3, #0]
 80004f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004fc:	d305      	bcc.n	800050a <led_kontrol+0x4a>
		{
			led_durum=0;
 80004fe:	4b20      	ldr	r3, [pc, #128]	; (8000580 <led_kontrol+0xc0>)
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
			zaman=0;
 8000504:	4b1f      	ldr	r3, [pc, #124]	; (8000584 <led_kontrol+0xc4>)
 8000506:	2200      	movs	r2, #0
 8000508:	801a      	strh	r2, [r3, #0]
		}
		led_On_Off;
 800050a:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <led_kontrol+0xc0>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	461a      	mov	r2, r3
 8000510:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000514:	481c      	ldr	r0, [pc, #112]	; (8000588 <led_kontrol+0xc8>)
 8000516:	f001 f859 	bl	80015cc <HAL_GPIO_WritePin>
		}
		led_On_Off;

	}

}
 800051a:	e02c      	b.n	8000576 <led_kontrol+0xb6>
	else if (uart_echo==start)
 800051c:	4b17      	ldr	r3, [pc, #92]	; (800057c <led_kontrol+0xbc>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d128      	bne.n	8000576 <led_kontrol+0xb6>
		if (led_durum==0 && zaman>=ledOff_sure)
 8000524:	4b16      	ldr	r3, [pc, #88]	; (8000580 <led_kontrol+0xc0>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d10c      	bne.n	8000546 <led_kontrol+0x86>
 800052c:	4b15      	ldr	r3, [pc, #84]	; (8000584 <led_kontrol+0xc4>)
 800052e:	881a      	ldrh	r2, [r3, #0]
 8000530:	4b16      	ldr	r3, [pc, #88]	; (800058c <led_kontrol+0xcc>)
 8000532:	881b      	ldrh	r3, [r3, #0]
 8000534:	429a      	cmp	r2, r3
 8000536:	d306      	bcc.n	8000546 <led_kontrol+0x86>
			led_durum=1;
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <led_kontrol+0xc0>)
 800053a:	2201      	movs	r2, #1
 800053c:	701a      	strb	r2, [r3, #0]
			zaman=0;
 800053e:	4b11      	ldr	r3, [pc, #68]	; (8000584 <led_kontrol+0xc4>)
 8000540:	2200      	movs	r2, #0
 8000542:	801a      	strh	r2, [r3, #0]
 8000544:	e00f      	b.n	8000566 <led_kontrol+0xa6>
		else if(led_durum==1 && zaman>=ledOn_sure)
 8000546:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <led_kontrol+0xc0>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b01      	cmp	r3, #1
 800054c:	d10b      	bne.n	8000566 <led_kontrol+0xa6>
 800054e:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <led_kontrol+0xc4>)
 8000550:	881a      	ldrh	r2, [r3, #0]
 8000552:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <led_kontrol+0xd0>)
 8000554:	881b      	ldrh	r3, [r3, #0]
 8000556:	429a      	cmp	r2, r3
 8000558:	d305      	bcc.n	8000566 <led_kontrol+0xa6>
			led_durum=0;
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <led_kontrol+0xc0>)
 800055c:	2200      	movs	r2, #0
 800055e:	701a      	strb	r2, [r3, #0]
			zaman=0;
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <led_kontrol+0xc4>)
 8000562:	2200      	movs	r2, #0
 8000564:	801a      	strh	r2, [r3, #0]
		led_On_Off;
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <led_kontrol+0xc0>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	461a      	mov	r2, r3
 800056c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000570:	4805      	ldr	r0, [pc, #20]	; (8000588 <led_kontrol+0xc8>)
 8000572:	f001 f82b 	bl	80015cc <HAL_GPIO_WritePin>
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	200000d1 	.word	0x200000d1
 8000580:	200000be 	.word	0x200000be
 8000584:	200000ca 	.word	0x200000ca
 8000588:	40020c00 	.word	0x40020c00
 800058c:	200000d6 	.word	0x200000d6
 8000590:	200000ce 	.word	0x200000ce

08000594 <uart_veri_oku>:
 *		komut 0x04 ise LedOff suresinin degerini ayarlar
 *		sure degerleri veri_hb ve veri_lb nin 16 bit veriye donusturulmesi ile elde e#dilir.
 */

void uart_veri_oku(void)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
	IT_uart_3_kontrol++;
 800059a:	4b29      	ldr	r3, [pc, #164]	; (8000640 <uart_veri_oku+0xac>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	3301      	adds	r3, #1
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	4b27      	ldr	r3, [pc, #156]	; (8000640 <uart_veri_oku+0xac>)
 80005a4:	701a      	strb	r2, [r3, #0]

	if(IT_uart_3_kontrol == sizeof(RX_veri))
 80005a6:	4b26      	ldr	r3, [pc, #152]	; (8000640 <uart_veri_oku+0xac>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b0a      	cmp	r3, #10
 80005ac:	d141      	bne.n	8000632 <uart_veri_oku+0x9e>
	{
		IT_uart_3_kontrol = 0;
 80005ae:	4b24      	ldr	r3, [pc, #144]	; (8000640 <uart_veri_oku+0xac>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	701a      	strb	r2, [r3, #0]
		for (uint8_t i=0; i<sizeof(RX_veri); i++)
 80005b4:	2300      	movs	r3, #0
 80005b6:	71fb      	strb	r3, [r7, #7]
 80005b8:	e038      	b.n	800062c <uart_veri_oku+0x98>
		{
			if((RX_veri[i] == 0x36) && (RX_veri[i + 1] == 0x41))
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	4a21      	ldr	r2, [pc, #132]	; (8000644 <uart_veri_oku+0xb0>)
 80005be:	5cd3      	ldrb	r3, [r2, r3]
 80005c0:	2b36      	cmp	r3, #54	; 0x36
 80005c2:	d12d      	bne.n	8000620 <uart_veri_oku+0x8c>
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	3301      	adds	r3, #1
 80005c8:	4a1e      	ldr	r2, [pc, #120]	; (8000644 <uart_veri_oku+0xb0>)
 80005ca:	5cd3      	ldrb	r3, [r2, r3]
 80005cc:	2b41      	cmp	r3, #65	; 0x41
 80005ce:	d127      	bne.n	8000620 <uart_veri_oku+0x8c>
			{
				komut = RX_veri[i+2];
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	3302      	adds	r3, #2
 80005d4:	4a1b      	ldr	r2, [pc, #108]	; (8000644 <uart_veri_oku+0xb0>)
 80005d6:	5cd2      	ldrb	r2, [r2, r3]
 80005d8:	4b1b      	ldr	r3, [pc, #108]	; (8000648 <uart_veri_oku+0xb4>)
 80005da:	701a      	strb	r2, [r3, #0]
				veri_hb = RX_veri[i+3];
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	3303      	adds	r3, #3
 80005e0:	4a18      	ldr	r2, [pc, #96]	; (8000644 <uart_veri_oku+0xb0>)
 80005e2:	5cd2      	ldrb	r2, [r2, r3]
 80005e4:	4b19      	ldr	r3, [pc, #100]	; (800064c <uart_veri_oku+0xb8>)
 80005e6:	701a      	strb	r2, [r3, #0]
				veri_lb = RX_veri[i+4];
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	3304      	adds	r3, #4
 80005ec:	4a15      	ldr	r2, [pc, #84]	; (8000644 <uart_veri_oku+0xb0>)
 80005ee:	5cd2      	ldrb	r2, [r2, r3]
 80005f0:	4b17      	ldr	r3, [pc, #92]	; (8000650 <uart_veri_oku+0xbc>)
 80005f2:	701a      	strb	r2, [r3, #0]

				veri= ((RX_veri[i+3] & 0x00FF) << 8) | (RX_veri[i+4] & 0x00FF);
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	3303      	adds	r3, #3
 80005f8:	4a12      	ldr	r2, [pc, #72]	; (8000644 <uart_veri_oku+0xb0>)
 80005fa:	5cd3      	ldrb	r3, [r2, r3]
 80005fc:	021b      	lsls	r3, r3, #8
 80005fe:	b21a      	sxth	r2, r3
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	3304      	adds	r3, #4
 8000604:	490f      	ldr	r1, [pc, #60]	; (8000644 <uart_veri_oku+0xb0>)
 8000606:	5ccb      	ldrb	r3, [r1, r3]
 8000608:	b21b      	sxth	r3, r3
 800060a:	4313      	orrs	r3, r2
 800060c:	b21b      	sxth	r3, r3
 800060e:	b29a      	uxth	r2, r3
 8000610:	4b10      	ldr	r3, [pc, #64]	; (8000654 <uart_veri_oku+0xc0>)
 8000612:	801a      	strh	r2, [r3, #0]

				uart_baglanti_hatasi = 0;// uarttan alinan veri setinde anahtar uymuyorsa yanlis veri alındi diye uyari olusturulabilir
 8000614:	4b10      	ldr	r3, [pc, #64]	; (8000658 <uart_veri_oku+0xc4>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]

				i = sizeof(RX_veri);
 800061a:	230a      	movs	r3, #10
 800061c:	71fb      	strb	r3, [r7, #7]
 800061e:	e002      	b.n	8000626 <uart_veri_oku+0x92>
			}
			else
				uart_baglanti_hatasi = 1;
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <uart_veri_oku+0xc4>)
 8000622:	2201      	movs	r2, #1
 8000624:	701a      	strb	r2, [r3, #0]
		for (uint8_t i=0; i<sizeof(RX_veri); i++)
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	3301      	adds	r3, #1
 800062a:	71fb      	strb	r3, [r7, #7]
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	2b09      	cmp	r3, #9
 8000630:	d9c3      	bls.n	80005ba <uart_veri_oku+0x26>
		}
	}
}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	200000d2 	.word	0x200000d2
 8000644:	200000c0 	.word	0x200000c0
 8000648:	200000d0 	.word	0x200000d0
 800064c:	200000cc 	.word	0x200000cc
 8000650:	200000bd 	.word	0x200000bd
 8000654:	200000d4 	.word	0x200000d4
 8000658:	200000bc 	.word	0x200000bc

0800065c <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08c      	sub	sp, #48	; 0x30
 8000660:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	61bb      	str	r3, [r7, #24]
 8000676:	4b93      	ldr	r3, [pc, #588]	; (80008c4 <MX_GPIO_Init+0x268>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a92      	ldr	r2, [pc, #584]	; (80008c4 <MX_GPIO_Init+0x268>)
 800067c:	f043 0310 	orr.w	r3, r3, #16
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b90      	ldr	r3, [pc, #576]	; (80008c4 <MX_GPIO_Init+0x268>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0310 	and.w	r3, r3, #16
 800068a:	61bb      	str	r3, [r7, #24]
 800068c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
 8000692:	4b8c      	ldr	r3, [pc, #560]	; (80008c4 <MX_GPIO_Init+0x268>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a8b      	ldr	r2, [pc, #556]	; (80008c4 <MX_GPIO_Init+0x268>)
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b89      	ldr	r3, [pc, #548]	; (80008c4 <MX_GPIO_Init+0x268>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0304 	and.w	r3, r3, #4
 80006a6:	617b      	str	r3, [r7, #20]
 80006a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
 80006ae:	4b85      	ldr	r3, [pc, #532]	; (80008c4 <MX_GPIO_Init+0x268>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a84      	ldr	r2, [pc, #528]	; (80008c4 <MX_GPIO_Init+0x268>)
 80006b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b82      	ldr	r3, [pc, #520]	; (80008c4 <MX_GPIO_Init+0x268>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	4b7e      	ldr	r3, [pc, #504]	; (80008c4 <MX_GPIO_Init+0x268>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a7d      	ldr	r2, [pc, #500]	; (80008c4 <MX_GPIO_Init+0x268>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b7b      	ldr	r3, [pc, #492]	; (80008c4 <MX_GPIO_Init+0x268>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	4b77      	ldr	r3, [pc, #476]	; (80008c4 <MX_GPIO_Init+0x268>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a76      	ldr	r2, [pc, #472]	; (80008c4 <MX_GPIO_Init+0x268>)
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b74      	ldr	r3, [pc, #464]	; (80008c4 <MX_GPIO_Init+0x268>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	4b70      	ldr	r3, [pc, #448]	; (80008c4 <MX_GPIO_Init+0x268>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a6f      	ldr	r2, [pc, #444]	; (80008c4 <MX_GPIO_Init+0x268>)
 8000708:	f043 0308 	orr.w	r3, r3, #8
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b6d      	ldr	r3, [pc, #436]	; (80008c4 <MX_GPIO_Init+0x268>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0308 	and.w	r3, r3, #8
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	2108      	movs	r1, #8
 800071e:	486a      	ldr	r0, [pc, #424]	; (80008c8 <MX_GPIO_Init+0x26c>)
 8000720:	f000 ff54 	bl	80015cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	2101      	movs	r1, #1
 8000728:	4868      	ldr	r0, [pc, #416]	; (80008cc <MX_GPIO_Init+0x270>)
 800072a:	f000 ff4f 	bl	80015cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800072e:	2200      	movs	r2, #0
 8000730:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000734:	4866      	ldr	r0, [pc, #408]	; (80008d0 <MX_GPIO_Init+0x274>)
 8000736:	f000 ff49 	bl	80015cc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800073a:	2308      	movs	r3, #8
 800073c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	2301      	movs	r3, #1
 8000740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2300      	movs	r3, #0
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4619      	mov	r1, r3
 8000750:	485d      	ldr	r0, [pc, #372]	; (80008c8 <MX_GPIO_Init+0x26c>)
 8000752:	f000 fd9f 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000756:	2301      	movs	r3, #1
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075a:	2301      	movs	r3, #1
 800075c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	4619      	mov	r1, r3
 800076c:	4857      	ldr	r0, [pc, #348]	; (80008cc <MX_GPIO_Init+0x270>)
 800076e:	f000 fd91 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000772:	2308      	movs	r3, #8
 8000774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2300      	movs	r3, #0
 8000780:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000782:	2305      	movs	r3, #5
 8000784:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	4619      	mov	r1, r3
 800078c:	484f      	ldr	r0, [pc, #316]	; (80008cc <MX_GPIO_Init+0x270>)
 800078e:	f000 fd81 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000792:	2301      	movs	r3, #1
 8000794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000796:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800079a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4619      	mov	r1, r3
 80007a6:	484b      	ldr	r0, [pc, #300]	; (80008d4 <MX_GPIO_Init+0x278>)
 80007a8:	f000 fd74 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80007ac:	2310      	movs	r3, #16
 80007ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b0:	2302      	movs	r3, #2
 80007b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007bc:	2306      	movs	r3, #6
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 031c 	add.w	r3, r7, #28
 80007c4:	4619      	mov	r1, r3
 80007c6:	4843      	ldr	r0, [pc, #268]	; (80008d4 <MX_GPIO_Init+0x278>)
 80007c8:	f000 fd64 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80007cc:	23e0      	movs	r3, #224	; 0xe0
 80007ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d0:	2302      	movs	r3, #2
 80007d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d8:	2300      	movs	r3, #0
 80007da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007dc:	2305      	movs	r3, #5
 80007de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e0:	f107 031c 	add.w	r3, r7, #28
 80007e4:	4619      	mov	r1, r3
 80007e6:	483b      	ldr	r0, [pc, #236]	; (80008d4 <MX_GPIO_Init+0x278>)
 80007e8:	f000 fd54 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007ec:	2304      	movs	r3, #4
 80007ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f0:	2300      	movs	r3, #0
 80007f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	4619      	mov	r1, r3
 80007fe:	4836      	ldr	r0, [pc, #216]	; (80008d8 <MX_GPIO_Init+0x27c>)
 8000800:	f000 fd48 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080a:	2302      	movs	r3, #2
 800080c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000816:	2305      	movs	r3, #5
 8000818:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	4619      	mov	r1, r3
 8000820:	482d      	ldr	r0, [pc, #180]	; (80008d8 <MX_GPIO_Init+0x27c>)
 8000822:	f000 fd37 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000826:	f24f 0310 	movw	r3, #61456	; 0xf010
 800082a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	4619      	mov	r1, r3
 800083e:	4824      	ldr	r0, [pc, #144]	; (80008d0 <MX_GPIO_Init+0x274>)
 8000840:	f000 fd28 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000844:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000856:	2306      	movs	r3, #6
 8000858:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	481a      	ldr	r0, [pc, #104]	; (80008cc <MX_GPIO_Init+0x270>)
 8000862:	f000 fd17 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000866:	2320      	movs	r3, #32
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	4815      	ldr	r0, [pc, #84]	; (80008d0 <MX_GPIO_Init+0x274>)
 800087a:	f000 fd0b 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800087e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000884:	2312      	movs	r3, #18
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000888:	2301      	movs	r3, #1
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000890:	2304      	movs	r3, #4
 8000892:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	480f      	ldr	r0, [pc, #60]	; (80008d8 <MX_GPIO_Init+0x27c>)
 800089c:	f000 fcfa 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008a0:	2302      	movs	r3, #2
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008a4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <MX_GPIO_Init+0x26c>)
 80008b6:	f000 fced 	bl	8001294 <HAL_GPIO_Init>

}
 80008ba:	bf00      	nop
 80008bc:	3730      	adds	r7, #48	; 0x30
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40021000 	.word	0x40021000
 80008cc:	40020800 	.word	0x40020800
 80008d0:	40020c00 	.word	0x40020c00
 80008d4:	40020000 	.word	0x40020000
 80008d8:	40020400 	.word	0x40020400

080008dc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80008e0:	f000 fa9e 	bl	8000e20 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80008e4:	f000 f82e 	bl	8000944 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80008e8:	f7ff feb8 	bl	800065c <MX_GPIO_Init>
	MX_USB_HOST_Init();
 80008ec:	f007 fa0c 	bl	8007d08 <MX_USB_HOST_Init>
	MX_TIM3_Init();
 80008f0:	f000 f95a 	bl	8000ba8 <MX_TIM3_Init>
	MX_USART3_UART_Init();
 80008f4:	f000 f9ce 	bl	8000c94 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim3);
 80008f8:	480d      	ldr	r0, [pc, #52]	; (8000930 <main+0x54>)
 80008fa:	f003 f8b5 	bl	8003a68 <HAL_TIM_Base_Start_IT>
	__HAL_UART_ENABLE_IT(&huart3,UART_IT_RXNE);
 80008fe:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <main+0x58>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	68da      	ldr	r2, [r3, #12]
 8000904:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <main+0x58>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f042 0220 	orr.w	r2, r2, #32
 800090c:	60da      	str	r2, [r3, #12]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	uart_echo = stop;
 800090e:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <main+0x5c>)
 8000910:	2202      	movs	r2, #2
 8000912:	701a      	strb	r2, [r3, #0]
	ledOff_sure=3000;
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <main+0x60>)
 8000916:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800091a:	801a      	strh	r2, [r3, #0]
	ledOn_sure=1000;
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <main+0x64>)
 800091e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000922:	801a      	strh	r2, [r3, #0]
	while (1)
	{
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 8000924:	f007 fa16 	bl	8007d54 <MX_USB_HOST_Process>

		/* USER CODE BEGIN 3 */
		led_kontrol();
 8000928:	f7ff fdca 	bl	80004c0 <led_kontrol>
		MX_USB_HOST_Process();
 800092c:	e7fa      	b.n	8000924 <main+0x48>
 800092e:	bf00      	nop
 8000930:	200000e4 	.word	0x200000e4
 8000934:	2000012c 	.word	0x2000012c
 8000938:	200000d1 	.word	0x200000d1
 800093c:	200000d6 	.word	0x200000d6
 8000940:	200000ce 	.word	0x200000ce

08000944 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b094      	sub	sp, #80	; 0x50
 8000948:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094a:	f107 0320 	add.w	r3, r7, #32
 800094e:	2230      	movs	r2, #48	; 0x30
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f007 fd1a 	bl	800838c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	4b28      	ldr	r3, [pc, #160]	; (8000a10 <SystemClock_Config+0xcc>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	4a27      	ldr	r2, [pc, #156]	; (8000a10 <SystemClock_Config+0xcc>)
 8000972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000976:	6413      	str	r3, [r2, #64]	; 0x40
 8000978:	4b25      	ldr	r3, [pc, #148]	; (8000a10 <SystemClock_Config+0xcc>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000984:	2300      	movs	r3, #0
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	4b22      	ldr	r3, [pc, #136]	; (8000a14 <SystemClock_Config+0xd0>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a21      	ldr	r2, [pc, #132]	; (8000a14 <SystemClock_Config+0xd0>)
 800098e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000992:	6013      	str	r3, [r2, #0]
 8000994:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <SystemClock_Config+0xd0>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009a0:	2301      	movs	r3, #1
 80009a2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009aa:	2302      	movs	r3, #2
 80009ac:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80009b4:	2304      	movs	r3, #4
 80009b6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80009b8:	23a8      	movs	r3, #168	; 0xa8
 80009ba:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009bc:	2302      	movs	r3, #2
 80009be:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80009c0:	2307      	movs	r3, #7
 80009c2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c4:	f107 0320 	add.w	r3, r7, #32
 80009c8:	4618      	mov	r0, r3
 80009ca:	f002 fb89 	bl	80030e0 <HAL_RCC_OscConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80009d4:	f000 f820 	bl	8000a18 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d8:	230f      	movs	r3, #15
 80009da:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009dc:	2302      	movs	r3, #2
 80009de:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ee:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	2102      	movs	r1, #2
 80009f6:	4618      	mov	r0, r3
 80009f8:	f002 fdea 	bl	80035d0 <HAL_RCC_ClockConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8000a02:	f000 f809 	bl	8000a18 <Error_Handler>
	}
}
 8000a06:	bf00      	nop
 8000a08:	3750      	adds	r7, #80	; 0x50
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40007000 	.word	0x40007000

08000a18 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1c:	b672      	cpsid	i
}
 8000a1e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a20:	e7fe      	b.n	8000a20 <Error_Handler+0x8>
	...

08000a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	4a0f      	ldr	r2, [pc, #60]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a38:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	4a08      	ldr	r2, [pc, #32]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a54:	6413      	str	r3, [r2, #64]	; 0x40
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a62:	2007      	movs	r0, #7
 8000a64:	f000 fb42 	bl	80010ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40023800 	.word	0x40023800

08000a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <NMI_Handler+0x4>

08000a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <HardFault_Handler+0x4>

08000a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <MemManage_Handler+0x4>

08000a86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <BusFault_Handler+0x4>

08000a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <UsageFault_Handler+0x4>

08000a92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac0:	f000 fa00 	bl	8000ec4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	zaman++;
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <TIM3_IRQHandler+0x1c>)
 8000ace:	881b      	ldrh	r3, [r3, #0]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <TIM3_IRQHandler+0x1c>)
 8000ad6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ad8:	4803      	ldr	r0, [pc, #12]	; (8000ae8 <TIM3_IRQHandler+0x20>)
 8000ada:	f003 f835 	bl	8003b48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200000ca 	.word	0x200000ca
 8000ae8:	200000e4 	.word	0x200000e4

08000aec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
uart_veri_oku();
 8000af0:	f7ff fd50 	bl	8000594 <uart_veri_oku>

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <USART3_IRQHandler+0x14>)
 8000af6:	f003 fc41 	bl	800437c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	2000012c 	.word	0x2000012c

08000b04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <OTG_FS_IRQHandler+0x10>)
 8000b0a:	f000 ffe3 	bl	8001ad4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	2000054c 	.word	0x2000054c

08000b18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b20:	4a14      	ldr	r2, [pc, #80]	; (8000b74 <_sbrk+0x5c>)
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <_sbrk+0x60>)
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b2c:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <_sbrk+0x64>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d102      	bne.n	8000b3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <_sbrk+0x64>)
 8000b36:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <_sbrk+0x68>)
 8000b38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <_sbrk+0x64>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d207      	bcs.n	8000b58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b48:	f007 fbe6 	bl	8008318 <__errno>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	220c      	movs	r2, #12
 8000b50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295
 8000b56:	e009      	b.n	8000b6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <_sbrk+0x64>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b5e:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <_sbrk+0x64>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	4a05      	ldr	r2, [pc, #20]	; (8000b7c <_sbrk+0x64>)
 8000b68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20020000 	.word	0x20020000
 8000b78:	00000400 	.word	0x00000400
 8000b7c:	200000ac 	.word	0x200000ac
 8000b80:	20000860 	.word	0x20000860

08000b84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <SystemInit+0x20>)
 8000b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b8e:	4a05      	ldr	r2, [pc, #20]	; (8000ba4 <SystemInit+0x20>)
 8000b90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bae:	f107 0308 	add.w	r3, r7, #8
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bc4:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <MX_TIM3_Init+0x94>)
 8000bc6:	4a1e      	ldr	r2, [pc, #120]	; (8000c40 <MX_TIM3_Init+0x98>)
 8000bc8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 85;
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <MX_TIM3_Init+0x94>)
 8000bcc:	2255      	movs	r2, #85	; 0x55
 8000bce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000bd0:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <MX_TIM3_Init+0x94>)
 8000bd2:	2210      	movs	r2, #16
 8000bd4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1001;
 8000bd6:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <MX_TIM3_Init+0x94>)
 8000bd8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8000bdc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bde:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <MX_TIM3_Init+0x94>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be4:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <MX_TIM3_Init+0x94>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bea:	4814      	ldr	r0, [pc, #80]	; (8000c3c <MX_TIM3_Init+0x94>)
 8000bec:	f002 feec 	bl	80039c8 <HAL_TIM_Base_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000bf6:	f7ff ff0f 	bl	8000a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bfe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c00:	f107 0308 	add.w	r3, r7, #8
 8000c04:	4619      	mov	r1, r3
 8000c06:	480d      	ldr	r0, [pc, #52]	; (8000c3c <MX_TIM3_Init+0x94>)
 8000c08:	f003 f8a6 	bl	8003d58 <HAL_TIM_ConfigClockSource>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000c12:	f7ff ff01 	bl	8000a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c16:	2300      	movs	r3, #0
 8000c18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c1e:	463b      	mov	r3, r7
 8000c20:	4619      	mov	r1, r3
 8000c22:	4806      	ldr	r0, [pc, #24]	; (8000c3c <MX_TIM3_Init+0x94>)
 8000c24:	f003 facc 	bl	80041c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000c2e:	f7ff fef3 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c32:	bf00      	nop
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200000e4 	.word	0x200000e4
 8000c40:	40000400 	.word	0x40000400

08000c44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0e      	ldr	r2, [pc, #56]	; (8000c8c <HAL_TIM_Base_MspInit+0x48>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d115      	bne.n	8000c82 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <HAL_TIM_Base_MspInit+0x4c>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	4a0c      	ldr	r2, [pc, #48]	; (8000c90 <HAL_TIM_Base_MspInit+0x4c>)
 8000c60:	f043 0302 	orr.w	r3, r3, #2
 8000c64:	6413      	str	r3, [r2, #64]	; 0x40
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <HAL_TIM_Base_MspInit+0x4c>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	201d      	movs	r0, #29
 8000c78:	f000 fa43 	bl	8001102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c7c:	201d      	movs	r0, #29
 8000c7e:	f000 fa5c 	bl	800113a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40000400 	.word	0x40000400
 8000c90:	40023800 	.word	0x40023800

08000c94 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <MX_USART3_UART_Init+0x4c>)
 8000c9a:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <MX_USART3_UART_Init+0x50>)
 8000c9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <MX_USART3_UART_Init+0x4c>)
 8000ca0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <MX_USART3_UART_Init+0x4c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <MX_USART3_UART_Init+0x4c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <MX_USART3_UART_Init+0x4c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cb8:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <MX_USART3_UART_Init+0x4c>)
 8000cba:	220c      	movs	r2, #12
 8000cbc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <MX_USART3_UART_Init+0x4c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <MX_USART3_UART_Init+0x4c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cca:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <MX_USART3_UART_Init+0x4c>)
 8000ccc:	f003 fb08 	bl	80042e0 <HAL_UART_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000cd6:	f7ff fe9f 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	2000012c 	.word	0x2000012c
 8000ce4:	40004800 	.word	0x40004800

08000ce8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a2d      	ldr	r2, [pc, #180]	; (8000dbc <HAL_UART_MspInit+0xd4>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d153      	bne.n	8000db2 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	4b2c      	ldr	r3, [pc, #176]	; (8000dc0 <HAL_UART_MspInit+0xd8>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	4a2b      	ldr	r2, [pc, #172]	; (8000dc0 <HAL_UART_MspInit+0xd8>)
 8000d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d18:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1a:	4b29      	ldr	r3, [pc, #164]	; (8000dc0 <HAL_UART_MspInit+0xd8>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	4b25      	ldr	r3, [pc, #148]	; (8000dc0 <HAL_UART_MspInit+0xd8>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a24      	ldr	r2, [pc, #144]	; (8000dc0 <HAL_UART_MspInit+0xd8>)
 8000d30:	f043 0302 	orr.w	r3, r3, #2
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <HAL_UART_MspInit+0xd8>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <HAL_UART_MspInit+0xd8>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a1d      	ldr	r2, [pc, #116]	; (8000dc0 <HAL_UART_MspInit+0xd8>)
 8000d4c:	f043 0308 	orr.w	r3, r3, #8
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <HAL_UART_MspInit+0xd8>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0308 	and.w	r3, r3, #8
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d70:	2307      	movs	r3, #7
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4812      	ldr	r0, [pc, #72]	; (8000dc4 <HAL_UART_MspInit+0xdc>)
 8000d7c:	f000 fa8a 	bl	8001294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d92:	2307      	movs	r3, #7
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	480a      	ldr	r0, [pc, #40]	; (8000dc8 <HAL_UART_MspInit+0xe0>)
 8000d9e:	f000 fa79 	bl	8001294 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2100      	movs	r1, #0
 8000da6:	2027      	movs	r0, #39	; 0x27
 8000da8:	f000 f9ab 	bl	8001102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000dac:	2027      	movs	r0, #39	; 0x27
 8000dae:	f000 f9c4 	bl	800113a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000db2:	bf00      	nop
 8000db4:	3728      	adds	r7, #40	; 0x28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40004800 	.word	0x40004800
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020400 	.word	0x40020400
 8000dc8:	40020c00 	.word	0x40020c00

08000dcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dd0:	480d      	ldr	r0, [pc, #52]	; (8000e08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dd2:	490e      	ldr	r1, [pc, #56]	; (8000e0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dd4:	4a0e      	ldr	r2, [pc, #56]	; (8000e10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd8:	e002      	b.n	8000de0 <LoopCopyDataInit>

08000dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dde:	3304      	adds	r3, #4

08000de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de4:	d3f9      	bcc.n	8000dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de6:	4a0b      	ldr	r2, [pc, #44]	; (8000e14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000de8:	4c0b      	ldr	r4, [pc, #44]	; (8000e18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dec:	e001      	b.n	8000df2 <LoopFillZerobss>

08000dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df0:	3204      	adds	r2, #4

08000df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df4:	d3fb      	bcc.n	8000dee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000df6:	f7ff fec5 	bl	8000b84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dfa:	f007 fa93 	bl	8008324 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dfe:	f7ff fd6d 	bl	80008dc <main>
  bx  lr    
 8000e02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e0c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000e10:	08008570 	.word	0x08008570
  ldr r2, =_sbss
 8000e14:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000e18:	20000860 	.word	0x20000860

08000e1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e1c:	e7fe      	b.n	8000e1c <ADC_IRQHandler>
	...

08000e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e24:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <HAL_Init+0x40>)
 8000e2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e30:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <HAL_Init+0x40>)
 8000e36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <HAL_Init+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a07      	ldr	r2, [pc, #28]	; (8000e60 <HAL_Init+0x40>)
 8000e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e48:	2003      	movs	r0, #3
 8000e4a:	f000 f94f 	bl	80010ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f000 f808 	bl	8000e64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e54:	f7ff fde6 	bl	8000a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023c00 	.word	0x40023c00

08000e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_InitTick+0x54>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_InitTick+0x58>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	4619      	mov	r1, r3
 8000e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 f967 	bl	8001156 <HAL_SYSTICK_Config>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00e      	b.n	8000eb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b0f      	cmp	r3, #15
 8000e96:	d80a      	bhi.n	8000eae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea0:	f000 f92f 	bl	8001102 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea4:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <HAL_InitTick+0x5c>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e000      	b.n	8000eb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	20000004 	.word	0x20000004

08000ec4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_IncTick+0x20>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_IncTick+0x24>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <HAL_IncTick+0x24>)
 8000ed6:	6013      	str	r3, [r2, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	20000170 	.word	0x20000170

08000eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <HAL_GetTick+0x14>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000170 	.word	0x20000170

08000f04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f0c:	f7ff ffee 	bl	8000eec <HAL_GetTick>
 8000f10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f1c:	d005      	beq.n	8000f2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <HAL_Delay+0x44>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	461a      	mov	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4413      	add	r3, r2
 8000f28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f2a:	bf00      	nop
 8000f2c:	f7ff ffde 	bl	8000eec <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d8f7      	bhi.n	8000f2c <HAL_Delay+0x28>
  {
  }
}
 8000f3c:	bf00      	nop
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000008 	.word	0x20000008

08000f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <__NVIC_SetPriorityGrouping+0x44>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f68:	4013      	ands	r3, r2
 8000f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7e:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <__NVIC_SetPriorityGrouping+0x44>)
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	60d3      	str	r3, [r2, #12]
}
 8000f84:	bf00      	nop
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <__NVIC_GetPriorityGrouping+0x18>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	0a1b      	lsrs	r3, r3, #8
 8000f9e:	f003 0307 	and.w	r3, r3, #7
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	db0b      	blt.n	8000fda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	f003 021f 	and.w	r2, r3, #31
 8000fc8:	4907      	ldr	r1, [pc, #28]	; (8000fe8 <__NVIC_EnableIRQ+0x38>)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	095b      	lsrs	r3, r3, #5
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000e100 	.word	0xe000e100

08000fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	db0a      	blt.n	8001016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	b2da      	uxtb	r2, r3
 8001004:	490c      	ldr	r1, [pc, #48]	; (8001038 <__NVIC_SetPriority+0x4c>)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	0112      	lsls	r2, r2, #4
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	440b      	add	r3, r1
 8001010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001014:	e00a      	b.n	800102c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4908      	ldr	r1, [pc, #32]	; (800103c <__NVIC_SetPriority+0x50>)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	f003 030f 	and.w	r3, r3, #15
 8001022:	3b04      	subs	r3, #4
 8001024:	0112      	lsls	r2, r2, #4
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	440b      	add	r3, r1
 800102a:	761a      	strb	r2, [r3, #24]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000e100 	.word	0xe000e100
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	; 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f1c3 0307 	rsb	r3, r3, #7
 800105a:	2b04      	cmp	r3, #4
 800105c:	bf28      	it	cs
 800105e:	2304      	movcs	r3, #4
 8001060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3304      	adds	r3, #4
 8001066:	2b06      	cmp	r3, #6
 8001068:	d902      	bls.n	8001070 <NVIC_EncodePriority+0x30>
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3b03      	subs	r3, #3
 800106e:	e000      	b.n	8001072 <NVIC_EncodePriority+0x32>
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	f04f 32ff 	mov.w	r2, #4294967295
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43da      	mvns	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	401a      	ands	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001088:	f04f 31ff 	mov.w	r1, #4294967295
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa01 f303 	lsl.w	r3, r1, r3
 8001092:	43d9      	mvns	r1, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	4313      	orrs	r3, r2
         );
}
 800109a:	4618      	mov	r0, r3
 800109c:	3724      	adds	r7, #36	; 0x24
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
	...

080010a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010b8:	d301      	bcc.n	80010be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ba:	2301      	movs	r3, #1
 80010bc:	e00f      	b.n	80010de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010be:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <SysTick_Config+0x40>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c6:	210f      	movs	r1, #15
 80010c8:	f04f 30ff 	mov.w	r0, #4294967295
 80010cc:	f7ff ff8e 	bl	8000fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <SysTick_Config+0x40>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d6:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <SysTick_Config+0x40>)
 80010d8:	2207      	movs	r2, #7
 80010da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	e000e010 	.word	0xe000e010

080010ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ff29 	bl	8000f4c <__NVIC_SetPriorityGrouping>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001102:	b580      	push	{r7, lr}
 8001104:	b086      	sub	sp, #24
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001114:	f7ff ff3e 	bl	8000f94 <__NVIC_GetPriorityGrouping>
 8001118:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	68b9      	ldr	r1, [r7, #8]
 800111e:	6978      	ldr	r0, [r7, #20]
 8001120:	f7ff ff8e 	bl	8001040 <NVIC_EncodePriority>
 8001124:	4602      	mov	r2, r0
 8001126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff5d 	bl	8000fec <__NVIC_SetPriority>
}
 8001132:	bf00      	nop
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff31 	bl	8000fb0 <__NVIC_EnableIRQ>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff ffa2 	bl	80010a8 <SysTick_Config>
 8001164:	4603      	mov	r3, r0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b084      	sub	sp, #16
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800117c:	f7ff feb6 	bl	8000eec <HAL_GetTick>
 8001180:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d008      	beq.n	80011a0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2280      	movs	r2, #128	; 0x80
 8001192:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e052      	b.n	8001246 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 0216 	bic.w	r2, r2, #22
 80011ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	695a      	ldr	r2, [r3, #20]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011be:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d103      	bne.n	80011d0 <HAL_DMA_Abort+0x62>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d007      	beq.n	80011e0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0208 	bic.w	r2, r2, #8
 80011de:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f022 0201 	bic.w	r2, r2, #1
 80011ee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011f0:	e013      	b.n	800121a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011f2:	f7ff fe7b 	bl	8000eec <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b05      	cmp	r3, #5
 80011fe:	d90c      	bls.n	800121a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2220      	movs	r2, #32
 8001204:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2203      	movs	r2, #3
 800120a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e015      	b.n	8001246 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1e4      	bne.n	80011f2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800122c:	223f      	movs	r2, #63	; 0x3f
 800122e:	409a      	lsls	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2201      	movs	r2, #1
 8001238:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d004      	beq.n	800126c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2280      	movs	r2, #128	; 0x80
 8001266:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e00c      	b.n	8001286 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2205      	movs	r2, #5
 8001270:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 0201 	bic.w	r2, r2, #1
 8001282:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001294:	b480      	push	{r7}
 8001296:	b089      	sub	sp, #36	; 0x24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
 80012ae:	e16b      	b.n	8001588 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012b0:	2201      	movs	r2, #1
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	f040 815a 	bne.w	8001582 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d005      	beq.n	80012e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d130      	bne.n	8001348 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	2203      	movs	r2, #3
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	68da      	ldr	r2, [r3, #12]
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4313      	orrs	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800131c:	2201      	movs	r2, #1
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	091b      	lsrs	r3, r3, #4
 8001332:	f003 0201 	and.w	r2, r3, #1
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 0303 	and.w	r3, r3, #3
 8001350:	2b03      	cmp	r3, #3
 8001352:	d017      	beq.n	8001384 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	2203      	movs	r2, #3
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d123      	bne.n	80013d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	08da      	lsrs	r2, r3, #3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3208      	adds	r2, #8
 8001398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	f003 0307 	and.w	r3, r3, #7
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	220f      	movs	r2, #15
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	691a      	ldr	r2, [r3, #16]
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	08da      	lsrs	r2, r3, #3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	3208      	adds	r2, #8
 80013d2:	69b9      	ldr	r1, [r7, #24]
 80013d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	2203      	movs	r2, #3
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 0203 	and.w	r2, r3, #3
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001414:	2b00      	cmp	r3, #0
 8001416:	f000 80b4 	beq.w	8001582 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	4b60      	ldr	r3, [pc, #384]	; (80015a0 <HAL_GPIO_Init+0x30c>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	4a5f      	ldr	r2, [pc, #380]	; (80015a0 <HAL_GPIO_Init+0x30c>)
 8001424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001428:	6453      	str	r3, [r2, #68]	; 0x44
 800142a:	4b5d      	ldr	r3, [pc, #372]	; (80015a0 <HAL_GPIO_Init+0x30c>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001436:	4a5b      	ldr	r2, [pc, #364]	; (80015a4 <HAL_GPIO_Init+0x310>)
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	089b      	lsrs	r3, r3, #2
 800143c:	3302      	adds	r3, #2
 800143e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001442:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	220f      	movs	r2, #15
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a52      	ldr	r2, [pc, #328]	; (80015a8 <HAL_GPIO_Init+0x314>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d02b      	beq.n	80014ba <HAL_GPIO_Init+0x226>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a51      	ldr	r2, [pc, #324]	; (80015ac <HAL_GPIO_Init+0x318>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d025      	beq.n	80014b6 <HAL_GPIO_Init+0x222>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a50      	ldr	r2, [pc, #320]	; (80015b0 <HAL_GPIO_Init+0x31c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d01f      	beq.n	80014b2 <HAL_GPIO_Init+0x21e>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a4f      	ldr	r2, [pc, #316]	; (80015b4 <HAL_GPIO_Init+0x320>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d019      	beq.n	80014ae <HAL_GPIO_Init+0x21a>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a4e      	ldr	r2, [pc, #312]	; (80015b8 <HAL_GPIO_Init+0x324>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d013      	beq.n	80014aa <HAL_GPIO_Init+0x216>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a4d      	ldr	r2, [pc, #308]	; (80015bc <HAL_GPIO_Init+0x328>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d00d      	beq.n	80014a6 <HAL_GPIO_Init+0x212>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a4c      	ldr	r2, [pc, #304]	; (80015c0 <HAL_GPIO_Init+0x32c>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d007      	beq.n	80014a2 <HAL_GPIO_Init+0x20e>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a4b      	ldr	r2, [pc, #300]	; (80015c4 <HAL_GPIO_Init+0x330>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d101      	bne.n	800149e <HAL_GPIO_Init+0x20a>
 800149a:	2307      	movs	r3, #7
 800149c:	e00e      	b.n	80014bc <HAL_GPIO_Init+0x228>
 800149e:	2308      	movs	r3, #8
 80014a0:	e00c      	b.n	80014bc <HAL_GPIO_Init+0x228>
 80014a2:	2306      	movs	r3, #6
 80014a4:	e00a      	b.n	80014bc <HAL_GPIO_Init+0x228>
 80014a6:	2305      	movs	r3, #5
 80014a8:	e008      	b.n	80014bc <HAL_GPIO_Init+0x228>
 80014aa:	2304      	movs	r3, #4
 80014ac:	e006      	b.n	80014bc <HAL_GPIO_Init+0x228>
 80014ae:	2303      	movs	r3, #3
 80014b0:	e004      	b.n	80014bc <HAL_GPIO_Init+0x228>
 80014b2:	2302      	movs	r3, #2
 80014b4:	e002      	b.n	80014bc <HAL_GPIO_Init+0x228>
 80014b6:	2301      	movs	r3, #1
 80014b8:	e000      	b.n	80014bc <HAL_GPIO_Init+0x228>
 80014ba:	2300      	movs	r3, #0
 80014bc:	69fa      	ldr	r2, [r7, #28]
 80014be:	f002 0203 	and.w	r2, r2, #3
 80014c2:	0092      	lsls	r2, r2, #2
 80014c4:	4093      	lsls	r3, r2
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014cc:	4935      	ldr	r1, [pc, #212]	; (80015a4 <HAL_GPIO_Init+0x310>)
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	089b      	lsrs	r3, r3, #2
 80014d2:	3302      	adds	r3, #2
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014da:	4b3b      	ldr	r3, [pc, #236]	; (80015c8 <HAL_GPIO_Init+0x334>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014fe:	4a32      	ldr	r2, [pc, #200]	; (80015c8 <HAL_GPIO_Init+0x334>)
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001504:	4b30      	ldr	r3, [pc, #192]	; (80015c8 <HAL_GPIO_Init+0x334>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001528:	4a27      	ldr	r2, [pc, #156]	; (80015c8 <HAL_GPIO_Init+0x334>)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800152e:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <HAL_GPIO_Init+0x334>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001552:	4a1d      	ldr	r2, [pc, #116]	; (80015c8 <HAL_GPIO_Init+0x334>)
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <HAL_GPIO_Init+0x334>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800157c:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <HAL_GPIO_Init+0x334>)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3301      	adds	r3, #1
 8001586:	61fb      	str	r3, [r7, #28]
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	2b0f      	cmp	r3, #15
 800158c:	f67f ae90 	bls.w	80012b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3724      	adds	r7, #36	; 0x24
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40013800 	.word	0x40013800
 80015a8:	40020000 	.word	0x40020000
 80015ac:	40020400 	.word	0x40020400
 80015b0:	40020800 	.word	0x40020800
 80015b4:	40020c00 	.word	0x40020c00
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40021400 	.word	0x40021400
 80015c0:	40021800 	.word	0x40021800
 80015c4:	40021c00 	.word	0x40021c00
 80015c8:	40013c00 	.word	0x40013c00

080015cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	807b      	strh	r3, [r7, #2]
 80015d8:	4613      	mov	r3, r2
 80015da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015dc:	787b      	ldrb	r3, [r7, #1]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015e2:	887a      	ldrh	r2, [r7, #2]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015e8:	e003      	b.n	80015f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015ea:	887b      	ldrh	r3, [r7, #2]
 80015ec:	041a      	lsls	r2, r3, #16
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	619a      	str	r2, [r3, #24]
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80015fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001600:	b08f      	sub	sp, #60	; 0x3c
 8001602:	af0a      	add	r7, sp, #40	; 0x28
 8001604:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d101      	bne.n	8001610 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e054      	b.n	80016ba <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d106      	bne.n	8001630 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f006 fbca 	bl	8007dc4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2203      	movs	r2, #3
 8001634:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800163c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001640:	2b00      	cmp	r3, #0
 8001642:	d102      	bne.n	800164a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f003 fd20 	bl	8005094 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	603b      	str	r3, [r7, #0]
 800165a:	687e      	ldr	r6, [r7, #4]
 800165c:	466d      	mov	r5, sp
 800165e:	f106 0410 	add.w	r4, r6, #16
 8001662:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001664:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001666:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001668:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800166a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800166e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001672:	1d33      	adds	r3, r6, #4
 8001674:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001676:	6838      	ldr	r0, [r7, #0]
 8001678:	f003 fc9a 	bl	8004fb0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2101      	movs	r1, #1
 8001682:	4618      	mov	r0, r3
 8001684:	f003 fd17 	bl	80050b6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	603b      	str	r3, [r7, #0]
 800168e:	687e      	ldr	r6, [r7, #4]
 8001690:	466d      	mov	r5, sp
 8001692:	f106 0410 	add.w	r4, r6, #16
 8001696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800169a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800169c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800169e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80016a6:	1d33      	adds	r3, r6, #4
 80016a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016aa:	6838      	ldr	r0, [r7, #0]
 80016ac:	f003 fe7e 	bl	80053ac <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016c2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80016c2:	b590      	push	{r4, r7, lr}
 80016c4:	b089      	sub	sp, #36	; 0x24
 80016c6:	af04      	add	r7, sp, #16
 80016c8:	6078      	str	r0, [r7, #4]
 80016ca:	4608      	mov	r0, r1
 80016cc:	4611      	mov	r1, r2
 80016ce:	461a      	mov	r2, r3
 80016d0:	4603      	mov	r3, r0
 80016d2:	70fb      	strb	r3, [r7, #3]
 80016d4:	460b      	mov	r3, r1
 80016d6:	70bb      	strb	r3, [r7, #2]
 80016d8:	4613      	mov	r3, r2
 80016da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d101      	bne.n	80016ea <HAL_HCD_HC_Init+0x28>
 80016e6:	2302      	movs	r3, #2
 80016e8:	e076      	b.n	80017d8 <HAL_HCD_HC_Init+0x116>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80016f2:	78fb      	ldrb	r3, [r7, #3]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	212c      	movs	r1, #44	; 0x2c
 80016f8:	fb01 f303 	mul.w	r3, r1, r3
 80016fc:	4413      	add	r3, r2
 80016fe:	333d      	adds	r3, #61	; 0x3d
 8001700:	2200      	movs	r2, #0
 8001702:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001704:	78fb      	ldrb	r3, [r7, #3]
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	212c      	movs	r1, #44	; 0x2c
 800170a:	fb01 f303 	mul.w	r3, r1, r3
 800170e:	4413      	add	r3, r2
 8001710:	3338      	adds	r3, #56	; 0x38
 8001712:	787a      	ldrb	r2, [r7, #1]
 8001714:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001716:	78fb      	ldrb	r3, [r7, #3]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	212c      	movs	r1, #44	; 0x2c
 800171c:	fb01 f303 	mul.w	r3, r1, r3
 8001720:	4413      	add	r3, r2
 8001722:	3340      	adds	r3, #64	; 0x40
 8001724:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001726:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001728:	78fb      	ldrb	r3, [r7, #3]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	212c      	movs	r1, #44	; 0x2c
 800172e:	fb01 f303 	mul.w	r3, r1, r3
 8001732:	4413      	add	r3, r2
 8001734:	3339      	adds	r3, #57	; 0x39
 8001736:	78fa      	ldrb	r2, [r7, #3]
 8001738:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800173a:	78fb      	ldrb	r3, [r7, #3]
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	212c      	movs	r1, #44	; 0x2c
 8001740:	fb01 f303 	mul.w	r3, r1, r3
 8001744:	4413      	add	r3, r2
 8001746:	333f      	adds	r3, #63	; 0x3f
 8001748:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800174c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800174e:	78fb      	ldrb	r3, [r7, #3]
 8001750:	78ba      	ldrb	r2, [r7, #2]
 8001752:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001756:	b2d0      	uxtb	r0, r2
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	212c      	movs	r1, #44	; 0x2c
 800175c:	fb01 f303 	mul.w	r3, r1, r3
 8001760:	4413      	add	r3, r2
 8001762:	333a      	adds	r3, #58	; 0x3a
 8001764:	4602      	mov	r2, r0
 8001766:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001768:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800176c:	2b00      	cmp	r3, #0
 800176e:	da09      	bge.n	8001784 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001770:	78fb      	ldrb	r3, [r7, #3]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	212c      	movs	r1, #44	; 0x2c
 8001776:	fb01 f303 	mul.w	r3, r1, r3
 800177a:	4413      	add	r3, r2
 800177c:	333b      	adds	r3, #59	; 0x3b
 800177e:	2201      	movs	r2, #1
 8001780:	701a      	strb	r2, [r3, #0]
 8001782:	e008      	b.n	8001796 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001784:	78fb      	ldrb	r3, [r7, #3]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	212c      	movs	r1, #44	; 0x2c
 800178a:	fb01 f303 	mul.w	r3, r1, r3
 800178e:	4413      	add	r3, r2
 8001790:	333b      	adds	r3, #59	; 0x3b
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001796:	78fb      	ldrb	r3, [r7, #3]
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	212c      	movs	r1, #44	; 0x2c
 800179c:	fb01 f303 	mul.w	r3, r1, r3
 80017a0:	4413      	add	r3, r2
 80017a2:	333c      	adds	r3, #60	; 0x3c
 80017a4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80017a8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6818      	ldr	r0, [r3, #0]
 80017ae:	787c      	ldrb	r4, [r7, #1]
 80017b0:	78ba      	ldrb	r2, [r7, #2]
 80017b2:	78f9      	ldrb	r1, [r7, #3]
 80017b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017b6:	9302      	str	r3, [sp, #8]
 80017b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017bc:	9301      	str	r3, [sp, #4]
 80017be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	4623      	mov	r3, r4
 80017c6:	f003 ff6b 	bl	80056a0 <USB_HC_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd90      	pop	{r4, r7, pc}

080017e0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80017ec:	2300      	movs	r3, #0
 80017ee:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d101      	bne.n	80017fe <HAL_HCD_HC_Halt+0x1e>
 80017fa:	2302      	movs	r3, #2
 80017fc:	e00f      	b.n	800181e <HAL_HCD_HC_Halt+0x3e>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	78fa      	ldrb	r2, [r7, #3]
 800180c:	4611      	mov	r1, r2
 800180e:	4618      	mov	r0, r3
 8001810:	f004 f9a7 	bl	8005b62 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800181c:	7bfb      	ldrb	r3, [r7, #15]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	4608      	mov	r0, r1
 8001832:	4611      	mov	r1, r2
 8001834:	461a      	mov	r2, r3
 8001836:	4603      	mov	r3, r0
 8001838:	70fb      	strb	r3, [r7, #3]
 800183a:	460b      	mov	r3, r1
 800183c:	70bb      	strb	r3, [r7, #2]
 800183e:	4613      	mov	r3, r2
 8001840:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001842:	78fb      	ldrb	r3, [r7, #3]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	212c      	movs	r1, #44	; 0x2c
 8001848:	fb01 f303 	mul.w	r3, r1, r3
 800184c:	4413      	add	r3, r2
 800184e:	333b      	adds	r3, #59	; 0x3b
 8001850:	78ba      	ldrb	r2, [r7, #2]
 8001852:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001854:	78fb      	ldrb	r3, [r7, #3]
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	212c      	movs	r1, #44	; 0x2c
 800185a:	fb01 f303 	mul.w	r3, r1, r3
 800185e:	4413      	add	r3, r2
 8001860:	333f      	adds	r3, #63	; 0x3f
 8001862:	787a      	ldrb	r2, [r7, #1]
 8001864:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001866:	7c3b      	ldrb	r3, [r7, #16]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d112      	bne.n	8001892 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	212c      	movs	r1, #44	; 0x2c
 8001872:	fb01 f303 	mul.w	r3, r1, r3
 8001876:	4413      	add	r3, r2
 8001878:	3342      	adds	r3, #66	; 0x42
 800187a:	2203      	movs	r2, #3
 800187c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800187e:	78fb      	ldrb	r3, [r7, #3]
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	212c      	movs	r1, #44	; 0x2c
 8001884:	fb01 f303 	mul.w	r3, r1, r3
 8001888:	4413      	add	r3, r2
 800188a:	333d      	adds	r3, #61	; 0x3d
 800188c:	7f3a      	ldrb	r2, [r7, #28]
 800188e:	701a      	strb	r2, [r3, #0]
 8001890:	e008      	b.n	80018a4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001892:	78fb      	ldrb	r3, [r7, #3]
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	212c      	movs	r1, #44	; 0x2c
 8001898:	fb01 f303 	mul.w	r3, r1, r3
 800189c:	4413      	add	r3, r2
 800189e:	3342      	adds	r3, #66	; 0x42
 80018a0:	2202      	movs	r2, #2
 80018a2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80018a4:	787b      	ldrb	r3, [r7, #1]
 80018a6:	2b03      	cmp	r3, #3
 80018a8:	f200 80c6 	bhi.w	8001a38 <HAL_HCD_HC_SubmitRequest+0x210>
 80018ac:	a201      	add	r2, pc, #4	; (adr r2, 80018b4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80018ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b2:	bf00      	nop
 80018b4:	080018c5 	.word	0x080018c5
 80018b8:	08001a25 	.word	0x08001a25
 80018bc:	08001929 	.word	0x08001929
 80018c0:	080019a7 	.word	0x080019a7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80018c4:	7c3b      	ldrb	r3, [r7, #16]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	f040 80b8 	bne.w	8001a3c <HAL_HCD_HC_SubmitRequest+0x214>
 80018cc:	78bb      	ldrb	r3, [r7, #2]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f040 80b4 	bne.w	8001a3c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80018d4:	8b3b      	ldrh	r3, [r7, #24]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d108      	bne.n	80018ec <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80018da:	78fb      	ldrb	r3, [r7, #3]
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	212c      	movs	r1, #44	; 0x2c
 80018e0:	fb01 f303 	mul.w	r3, r1, r3
 80018e4:	4413      	add	r3, r2
 80018e6:	3355      	adds	r3, #85	; 0x55
 80018e8:	2201      	movs	r2, #1
 80018ea:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018ec:	78fb      	ldrb	r3, [r7, #3]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	212c      	movs	r1, #44	; 0x2c
 80018f2:	fb01 f303 	mul.w	r3, r1, r3
 80018f6:	4413      	add	r3, r2
 80018f8:	3355      	adds	r3, #85	; 0x55
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d109      	bne.n	8001914 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001900:	78fb      	ldrb	r3, [r7, #3]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	212c      	movs	r1, #44	; 0x2c
 8001906:	fb01 f303 	mul.w	r3, r1, r3
 800190a:	4413      	add	r3, r2
 800190c:	3342      	adds	r3, #66	; 0x42
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001912:	e093      	b.n	8001a3c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001914:	78fb      	ldrb	r3, [r7, #3]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	212c      	movs	r1, #44	; 0x2c
 800191a:	fb01 f303 	mul.w	r3, r1, r3
 800191e:	4413      	add	r3, r2
 8001920:	3342      	adds	r3, #66	; 0x42
 8001922:	2202      	movs	r2, #2
 8001924:	701a      	strb	r2, [r3, #0]
      break;
 8001926:	e089      	b.n	8001a3c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001928:	78bb      	ldrb	r3, [r7, #2]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d11d      	bne.n	800196a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800192e:	78fb      	ldrb	r3, [r7, #3]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	212c      	movs	r1, #44	; 0x2c
 8001934:	fb01 f303 	mul.w	r3, r1, r3
 8001938:	4413      	add	r3, r2
 800193a:	3355      	adds	r3, #85	; 0x55
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d109      	bne.n	8001956 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001942:	78fb      	ldrb	r3, [r7, #3]
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	212c      	movs	r1, #44	; 0x2c
 8001948:	fb01 f303 	mul.w	r3, r1, r3
 800194c:	4413      	add	r3, r2
 800194e:	3342      	adds	r3, #66	; 0x42
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001954:	e073      	b.n	8001a3e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001956:	78fb      	ldrb	r3, [r7, #3]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	212c      	movs	r1, #44	; 0x2c
 800195c:	fb01 f303 	mul.w	r3, r1, r3
 8001960:	4413      	add	r3, r2
 8001962:	3342      	adds	r3, #66	; 0x42
 8001964:	2202      	movs	r2, #2
 8001966:	701a      	strb	r2, [r3, #0]
      break;
 8001968:	e069      	b.n	8001a3e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800196a:	78fb      	ldrb	r3, [r7, #3]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	212c      	movs	r1, #44	; 0x2c
 8001970:	fb01 f303 	mul.w	r3, r1, r3
 8001974:	4413      	add	r3, r2
 8001976:	3354      	adds	r3, #84	; 0x54
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d109      	bne.n	8001992 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800197e:	78fb      	ldrb	r3, [r7, #3]
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	212c      	movs	r1, #44	; 0x2c
 8001984:	fb01 f303 	mul.w	r3, r1, r3
 8001988:	4413      	add	r3, r2
 800198a:	3342      	adds	r3, #66	; 0x42
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]
      break;
 8001990:	e055      	b.n	8001a3e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001992:	78fb      	ldrb	r3, [r7, #3]
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	212c      	movs	r1, #44	; 0x2c
 8001998:	fb01 f303 	mul.w	r3, r1, r3
 800199c:	4413      	add	r3, r2
 800199e:	3342      	adds	r3, #66	; 0x42
 80019a0:	2202      	movs	r2, #2
 80019a2:	701a      	strb	r2, [r3, #0]
      break;
 80019a4:	e04b      	b.n	8001a3e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80019a6:	78bb      	ldrb	r3, [r7, #2]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d11d      	bne.n	80019e8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019ac:	78fb      	ldrb	r3, [r7, #3]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	212c      	movs	r1, #44	; 0x2c
 80019b2:	fb01 f303 	mul.w	r3, r1, r3
 80019b6:	4413      	add	r3, r2
 80019b8:	3355      	adds	r3, #85	; 0x55
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d109      	bne.n	80019d4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019c0:	78fb      	ldrb	r3, [r7, #3]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	212c      	movs	r1, #44	; 0x2c
 80019c6:	fb01 f303 	mul.w	r3, r1, r3
 80019ca:	4413      	add	r3, r2
 80019cc:	3342      	adds	r3, #66	; 0x42
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019d2:	e034      	b.n	8001a3e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019d4:	78fb      	ldrb	r3, [r7, #3]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	212c      	movs	r1, #44	; 0x2c
 80019da:	fb01 f303 	mul.w	r3, r1, r3
 80019de:	4413      	add	r3, r2
 80019e0:	3342      	adds	r3, #66	; 0x42
 80019e2:	2202      	movs	r2, #2
 80019e4:	701a      	strb	r2, [r3, #0]
      break;
 80019e6:	e02a      	b.n	8001a3e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019e8:	78fb      	ldrb	r3, [r7, #3]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	212c      	movs	r1, #44	; 0x2c
 80019ee:	fb01 f303 	mul.w	r3, r1, r3
 80019f2:	4413      	add	r3, r2
 80019f4:	3354      	adds	r3, #84	; 0x54
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d109      	bne.n	8001a10 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019fc:	78fb      	ldrb	r3, [r7, #3]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	212c      	movs	r1, #44	; 0x2c
 8001a02:	fb01 f303 	mul.w	r3, r1, r3
 8001a06:	4413      	add	r3, r2
 8001a08:	3342      	adds	r3, #66	; 0x42
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
      break;
 8001a0e:	e016      	b.n	8001a3e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a10:	78fb      	ldrb	r3, [r7, #3]
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	212c      	movs	r1, #44	; 0x2c
 8001a16:	fb01 f303 	mul.w	r3, r1, r3
 8001a1a:	4413      	add	r3, r2
 8001a1c:	3342      	adds	r3, #66	; 0x42
 8001a1e:	2202      	movs	r2, #2
 8001a20:	701a      	strb	r2, [r3, #0]
      break;
 8001a22:	e00c      	b.n	8001a3e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a24:	78fb      	ldrb	r3, [r7, #3]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	212c      	movs	r1, #44	; 0x2c
 8001a2a:	fb01 f303 	mul.w	r3, r1, r3
 8001a2e:	4413      	add	r3, r2
 8001a30:	3342      	adds	r3, #66	; 0x42
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]
      break;
 8001a36:	e002      	b.n	8001a3e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001a38:	bf00      	nop
 8001a3a:	e000      	b.n	8001a3e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001a3c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a3e:	78fb      	ldrb	r3, [r7, #3]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	212c      	movs	r1, #44	; 0x2c
 8001a44:	fb01 f303 	mul.w	r3, r1, r3
 8001a48:	4413      	add	r3, r2
 8001a4a:	3344      	adds	r3, #68	; 0x44
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a50:	78fb      	ldrb	r3, [r7, #3]
 8001a52:	8b3a      	ldrh	r2, [r7, #24]
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	202c      	movs	r0, #44	; 0x2c
 8001a58:	fb00 f303 	mul.w	r3, r0, r3
 8001a5c:	440b      	add	r3, r1
 8001a5e:	334c      	adds	r3, #76	; 0x4c
 8001a60:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a62:	78fb      	ldrb	r3, [r7, #3]
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	212c      	movs	r1, #44	; 0x2c
 8001a68:	fb01 f303 	mul.w	r3, r1, r3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	3360      	adds	r3, #96	; 0x60
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a74:	78fb      	ldrb	r3, [r7, #3]
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	212c      	movs	r1, #44	; 0x2c
 8001a7a:	fb01 f303 	mul.w	r3, r1, r3
 8001a7e:	4413      	add	r3, r2
 8001a80:	3350      	adds	r3, #80	; 0x50
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a86:	78fb      	ldrb	r3, [r7, #3]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	212c      	movs	r1, #44	; 0x2c
 8001a8c:	fb01 f303 	mul.w	r3, r1, r3
 8001a90:	4413      	add	r3, r2
 8001a92:	3339      	adds	r3, #57	; 0x39
 8001a94:	78fa      	ldrb	r2, [r7, #3]
 8001a96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a98:	78fb      	ldrb	r3, [r7, #3]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	212c      	movs	r1, #44	; 0x2c
 8001a9e:	fb01 f303 	mul.w	r3, r1, r3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	3361      	adds	r3, #97	; 0x61
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6818      	ldr	r0, [r3, #0]
 8001aae:	78fb      	ldrb	r3, [r7, #3]
 8001ab0:	222c      	movs	r2, #44	; 0x2c
 8001ab2:	fb02 f303 	mul.w	r3, r2, r3
 8001ab6:	3338      	adds	r3, #56	; 0x38
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	18d1      	adds	r1, r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	f003 fefa 	bl	80058bc <USB_HC_StartXfer>
 8001ac8:	4603      	mov	r3, r0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop

08001ad4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f003 fc1d 	bl	800532a <USB_GetMode>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	f040 80f6 	bne.w	8001ce4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f003 fc01 	bl	8005304 <USB_ReadInterrupts>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 80ec 	beq.w	8001ce2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f003 fbf8 	bl	8005304 <USB_ReadInterrupts>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b1e:	d104      	bne.n	8001b2a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b28:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f003 fbe8 	bl	8005304 <USB_ReadInterrupts>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b3e:	d104      	bne.n	8001b4a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b48:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f003 fbd8 	bl	8005304 <USB_ReadInterrupts>
 8001b54:	4603      	mov	r3, r0
 8001b56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b5e:	d104      	bne.n	8001b6a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f003 fbc8 	bl	8005304 <USB_ReadInterrupts>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d103      	bne.n	8001b86 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2202      	movs	r2, #2
 8001b84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f003 fbba 	bl	8005304 <USB_ReadInterrupts>
 8001b90:	4603      	mov	r3, r0
 8001b92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b9a:	d11c      	bne.n	8001bd6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ba4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10f      	bne.n	8001bd6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001bb6:	2110      	movs	r1, #16
 8001bb8:	6938      	ldr	r0, [r7, #16]
 8001bba:	f003 fac9 	bl	8005150 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001bbe:	6938      	ldr	r0, [r7, #16]
 8001bc0:	f003 faea 	bl	8005198 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2101      	movs	r1, #1
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f003 fca2 	bl	8005514 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f006 f975 	bl	8007ec0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f003 fb92 	bl	8005304 <USB_ReadInterrupts>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001be6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bea:	d102      	bne.n	8001bf2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f001 fa03 	bl	8002ff8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f003 fb84 	bl	8005304 <USB_ReadInterrupts>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d106      	bne.n	8001c14 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f006 f93e 	bl	8007e88 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2208      	movs	r2, #8
 8001c12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f003 fb73 	bl	8005304 <USB_ReadInterrupts>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	f003 0310 	and.w	r3, r3, #16
 8001c24:	2b10      	cmp	r3, #16
 8001c26:	d101      	bne.n	8001c2c <HAL_HCD_IRQHandler+0x158>
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e000      	b.n	8001c2e <HAL_HCD_IRQHandler+0x15a>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d012      	beq.n	8001c58 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	699a      	ldr	r2, [r3, #24]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 0210 	bic.w	r2, r2, #16
 8001c40:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f001 f906 	bl	8002e54 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	699a      	ldr	r2, [r3, #24]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0210 	orr.w	r2, r2, #16
 8001c56:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f003 fb51 	bl	8005304 <USB_ReadInterrupts>
 8001c62:	4603      	mov	r3, r0
 8001c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c6c:	d13a      	bne.n	8001ce4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f003 ff64 	bl	8005b40 <USB_HC_ReadInterrupt>
 8001c78:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	e025      	b.n	8001ccc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	fa22 f303 	lsr.w	r3, r2, r3
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d018      	beq.n	8001cc6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	015a      	lsls	r2, r3, #5
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ca6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001caa:	d106      	bne.n	8001cba <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f8ab 	bl	8001e0e <HCD_HC_IN_IRQHandler>
 8001cb8:	e005      	b.n	8001cc6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 fcc6 	bl	8002652 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d3d4      	bcc.n	8001c80 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cde:	615a      	str	r2, [r3, #20]
 8001ce0:	e000      	b.n	8001ce4 <HAL_HCD_IRQHandler+0x210>
      return;
 8001ce2:	bf00      	nop
    }
  }
}
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_HCD_Start+0x16>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e013      	b.n	8001d28 <HAL_HCD_Start+0x3e>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f003 fc64 	bl	80055dc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f003 f9aa 	bl	8005072 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d101      	bne.n	8001d46 <HAL_HCD_Stop+0x16>
 8001d42:	2302      	movs	r3, #2
 8001d44:	e00d      	b.n	8001d62 <HAL_HCD_Stop+0x32>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f004 f85e 	bl	8005e14 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f003 fc06 	bl	8005588 <USB_ResetPort>
 8001d7c:	4603      	mov	r3, r0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d92:	78fb      	ldrb	r3, [r7, #3]
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	212c      	movs	r1, #44	; 0x2c
 8001d98:	fb01 f303 	mul.w	r3, r1, r3
 8001d9c:	4413      	add	r3, r2
 8001d9e:	3360      	adds	r3, #96	; 0x60
 8001da0:	781b      	ldrb	r3, [r3, #0]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	460b      	mov	r3, r1
 8001db8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001dba:	78fb      	ldrb	r3, [r7, #3]
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	212c      	movs	r1, #44	; 0x2c
 8001dc0:	fb01 f303 	mul.w	r3, r1, r3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3350      	adds	r3, #80	; 0x50
 8001dc8:	681b      	ldr	r3, [r3, #0]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f003 fc4a 	bl	800567c <USB_GetCurrentFrame>
 8001de8:	4603      	mov	r3, r0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f003 fc25 	bl	800564e <USB_GetHostSpeed>
 8001e04:	4603      	mov	r3, r0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b086      	sub	sp, #24
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	460b      	mov	r3, r1
 8001e18:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001e24:	78fb      	ldrb	r3, [r7, #3]
 8001e26:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	015a      	lsls	r2, r3, #5
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	4413      	add	r3, r2
 8001e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d119      	bne.n	8001e72 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	015a      	lsls	r2, r3, #5
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4413      	add	r3, r2
 8001e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	2304      	movs	r3, #4
 8001e4e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	015a      	lsls	r2, r3, #5
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4413      	add	r3, r2
 8001e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	0151      	lsls	r1, r2, #5
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	440a      	add	r2, r1
 8001e66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e6a:	f043 0302 	orr.w	r3, r3, #2
 8001e6e:	60d3      	str	r3, [r2, #12]
 8001e70:	e101      	b.n	8002076 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	015a      	lsls	r2, r3, #5
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4413      	add	r3, r2
 8001e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e88:	d12b      	bne.n	8001ee2 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	015a      	lsls	r2, r3, #5
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4413      	add	r3, r2
 8001e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e96:	461a      	mov	r2, r3
 8001e98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	212c      	movs	r1, #44	; 0x2c
 8001ea4:	fb01 f303 	mul.w	r3, r1, r3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3361      	adds	r3, #97	; 0x61
 8001eac:	2207      	movs	r2, #7
 8001eae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	015a      	lsls	r2, r3, #5
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	0151      	lsls	r1, r2, #5
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	440a      	add	r2, r1
 8001ec6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001eca:	f043 0302 	orr.w	r3, r3, #2
 8001ece:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	4611      	mov	r1, r2
 8001eda:	4618      	mov	r0, r3
 8001edc:	f003 fe41 	bl	8005b62 <USB_HC_Halt>
 8001ee0:	e0c9      	b.n	8002076 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	015a      	lsls	r2, r3, #5
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	4413      	add	r3, r2
 8001eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 0320 	and.w	r3, r3, #32
 8001ef4:	2b20      	cmp	r3, #32
 8001ef6:	d109      	bne.n	8001f0c <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	015a      	lsls	r2, r3, #5
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	4413      	add	r3, r2
 8001f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f04:	461a      	mov	r2, r3
 8001f06:	2320      	movs	r3, #32
 8001f08:	6093      	str	r3, [r2, #8]
 8001f0a:	e0b4      	b.n	8002076 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	015a      	lsls	r2, r3, #5
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4413      	add	r3, r2
 8001f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d133      	bne.n	8001f8a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	015a      	lsls	r2, r3, #5
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	0151      	lsls	r1, r2, #5
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	440a      	add	r2, r1
 8001f38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f3c:	f043 0302 	orr.w	r3, r3, #2
 8001f40:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	212c      	movs	r1, #44	; 0x2c
 8001f48:	fb01 f303 	mul.w	r3, r1, r3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3361      	adds	r3, #97	; 0x61
 8001f50:	2205      	movs	r2, #5
 8001f52:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	015a      	lsls	r2, r3, #5
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f60:	461a      	mov	r2, r3
 8001f62:	2310      	movs	r3, #16
 8001f64:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	015a      	lsls	r2, r3, #5
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f72:	461a      	mov	r2, r3
 8001f74:	2308      	movs	r3, #8
 8001f76:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	4611      	mov	r1, r2
 8001f82:	4618      	mov	r0, r3
 8001f84:	f003 fded 	bl	8005b62 <USB_HC_Halt>
 8001f88:	e075      	b.n	8002076 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	015a      	lsls	r2, r3, #5
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4413      	add	r3, r2
 8001f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fa0:	d134      	bne.n	800200c <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	015a      	lsls	r2, r3, #5
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4413      	add	r3, r2
 8001faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	0151      	lsls	r1, r2, #5
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	440a      	add	r2, r1
 8001fb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fbc:	f043 0302 	orr.w	r3, r3, #2
 8001fc0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	212c      	movs	r1, #44	; 0x2c
 8001fc8:	fb01 f303 	mul.w	r3, r1, r3
 8001fcc:	4413      	add	r3, r2
 8001fce:	3361      	adds	r3, #97	; 0x61
 8001fd0:	2208      	movs	r2, #8
 8001fd2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	015a      	lsls	r2, r3, #5
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	2310      	movs	r3, #16
 8001fe4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	015a      	lsls	r2, r3, #5
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4413      	add	r3, r2
 8001fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ff8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	4611      	mov	r1, r2
 8002004:	4618      	mov	r0, r3
 8002006:	f003 fdac 	bl	8005b62 <USB_HC_Halt>
 800200a:	e034      	b.n	8002076 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	015a      	lsls	r2, r3, #5
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	4413      	add	r3, r2
 8002014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201e:	2b80      	cmp	r3, #128	; 0x80
 8002020:	d129      	bne.n	8002076 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	015a      	lsls	r2, r3, #5
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4413      	add	r3, r2
 800202a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	0151      	lsls	r1, r2, #5
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	440a      	add	r2, r1
 8002038:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	212c      	movs	r1, #44	; 0x2c
 8002048:	fb01 f303 	mul.w	r3, r1, r3
 800204c:	4413      	add	r3, r2
 800204e:	3361      	adds	r3, #97	; 0x61
 8002050:	2206      	movs	r2, #6
 8002052:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	4611      	mov	r1, r2
 800205e:	4618      	mov	r0, r3
 8002060:	f003 fd7f 	bl	8005b62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	015a      	lsls	r2, r3, #5
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4413      	add	r3, r2
 800206c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002070:	461a      	mov	r2, r3
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	015a      	lsls	r2, r3, #5
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4413      	add	r3, r2
 800207e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800208c:	d122      	bne.n	80020d4 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	015a      	lsls	r2, r3, #5
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4413      	add	r3, r2
 8002096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	0151      	lsls	r1, r2, #5
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	440a      	add	r2, r1
 80020a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020a8:	f043 0302 	orr.w	r3, r3, #2
 80020ac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	4611      	mov	r1, r2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f003 fd52 	bl	8005b62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	015a      	lsls	r2, r3, #5
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4413      	add	r3, r2
 80020c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ca:	461a      	mov	r2, r3
 80020cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020d0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80020d2:	e2ba      	b.n	800264a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	015a      	lsls	r2, r3, #5
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4413      	add	r3, r2
 80020dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	f040 811b 	bne.w	8002322 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d019      	beq.n	8002128 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	212c      	movs	r1, #44	; 0x2c
 80020fa:	fb01 f303 	mul.w	r3, r1, r3
 80020fe:	4413      	add	r3, r2
 8002100:	3348      	adds	r3, #72	; 0x48
 8002102:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	0159      	lsls	r1, r3, #5
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	440b      	add	r3, r1
 800210c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002116:	1ad2      	subs	r2, r2, r3
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	202c      	movs	r0, #44	; 0x2c
 800211e:	fb00 f303 	mul.w	r3, r0, r3
 8002122:	440b      	add	r3, r1
 8002124:	3350      	adds	r3, #80	; 0x50
 8002126:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	212c      	movs	r1, #44	; 0x2c
 800212e:	fb01 f303 	mul.w	r3, r1, r3
 8002132:	4413      	add	r3, r2
 8002134:	3361      	adds	r3, #97	; 0x61
 8002136:	2201      	movs	r2, #1
 8002138:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	212c      	movs	r1, #44	; 0x2c
 8002140:	fb01 f303 	mul.w	r3, r1, r3
 8002144:	4413      	add	r3, r2
 8002146:	335c      	adds	r3, #92	; 0x5c
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	015a      	lsls	r2, r3, #5
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4413      	add	r3, r2
 8002154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002158:	461a      	mov	r2, r3
 800215a:	2301      	movs	r3, #1
 800215c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	212c      	movs	r1, #44	; 0x2c
 8002164:	fb01 f303 	mul.w	r3, r1, r3
 8002168:	4413      	add	r3, r2
 800216a:	333f      	adds	r3, #63	; 0x3f
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d009      	beq.n	8002186 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	212c      	movs	r1, #44	; 0x2c
 8002178:	fb01 f303 	mul.w	r3, r1, r3
 800217c:	4413      	add	r3, r2
 800217e:	333f      	adds	r3, #63	; 0x3f
 8002180:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002182:	2b02      	cmp	r3, #2
 8002184:	d121      	bne.n	80021ca <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	015a      	lsls	r2, r3, #5
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4413      	add	r3, r2
 800218e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	0151      	lsls	r1, r2, #5
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	440a      	add	r2, r1
 800219c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021a0:	f043 0302 	orr.w	r3, r3, #2
 80021a4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	4611      	mov	r1, r2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f003 fcd6 	bl	8005b62 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	015a      	lsls	r2, r3, #5
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4413      	add	r3, r2
 80021be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c2:	461a      	mov	r2, r3
 80021c4:	2310      	movs	r3, #16
 80021c6:	6093      	str	r3, [r2, #8]
 80021c8:	e066      	b.n	8002298 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	212c      	movs	r1, #44	; 0x2c
 80021d0:	fb01 f303 	mul.w	r3, r1, r3
 80021d4:	4413      	add	r3, r2
 80021d6:	333f      	adds	r3, #63	; 0x3f
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d127      	bne.n	800222e <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	015a      	lsls	r2, r3, #5
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4413      	add	r3, r2
 80021e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	0151      	lsls	r1, r2, #5
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	440a      	add	r2, r1
 80021f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021fc:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	212c      	movs	r1, #44	; 0x2c
 8002204:	fb01 f303 	mul.w	r3, r1, r3
 8002208:	4413      	add	r3, r2
 800220a:	3360      	adds	r3, #96	; 0x60
 800220c:	2201      	movs	r2, #1
 800220e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	b2d9      	uxtb	r1, r3
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	202c      	movs	r0, #44	; 0x2c
 800221a:	fb00 f303 	mul.w	r3, r0, r3
 800221e:	4413      	add	r3, r2
 8002220:	3360      	adds	r3, #96	; 0x60
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	461a      	mov	r2, r3
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f005 fe58 	bl	8007edc <HAL_HCD_HC_NotifyURBChange_Callback>
 800222c:	e034      	b.n	8002298 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	212c      	movs	r1, #44	; 0x2c
 8002234:	fb01 f303 	mul.w	r3, r1, r3
 8002238:	4413      	add	r3, r2
 800223a:	333f      	adds	r3, #63	; 0x3f
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d12a      	bne.n	8002298 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	212c      	movs	r1, #44	; 0x2c
 8002248:	fb01 f303 	mul.w	r3, r1, r3
 800224c:	4413      	add	r3, r2
 800224e:	3360      	adds	r3, #96	; 0x60
 8002250:	2201      	movs	r2, #1
 8002252:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	212c      	movs	r1, #44	; 0x2c
 800225a:	fb01 f303 	mul.w	r3, r1, r3
 800225e:	4413      	add	r3, r2
 8002260:	3354      	adds	r3, #84	; 0x54
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	f083 0301 	eor.w	r3, r3, #1
 8002268:	b2d8      	uxtb	r0, r3
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	212c      	movs	r1, #44	; 0x2c
 8002270:	fb01 f303 	mul.w	r3, r1, r3
 8002274:	4413      	add	r3, r2
 8002276:	3354      	adds	r3, #84	; 0x54
 8002278:	4602      	mov	r2, r0
 800227a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	b2d9      	uxtb	r1, r3
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	202c      	movs	r0, #44	; 0x2c
 8002286:	fb00 f303 	mul.w	r3, r0, r3
 800228a:	4413      	add	r3, r2
 800228c:	3360      	adds	r3, #96	; 0x60
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	461a      	mov	r2, r3
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f005 fe22 	bl	8007edc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d12b      	bne.n	80022f8 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	212c      	movs	r1, #44	; 0x2c
 80022a6:	fb01 f303 	mul.w	r3, r1, r3
 80022aa:	4413      	add	r3, r2
 80022ac:	3348      	adds	r3, #72	; 0x48
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	202c      	movs	r0, #44	; 0x2c
 80022b6:	fb00 f202 	mul.w	r2, r0, r2
 80022ba:	440a      	add	r2, r1
 80022bc:	3240      	adds	r2, #64	; 0x40
 80022be:	8812      	ldrh	r2, [r2, #0]
 80022c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 81be 	beq.w	800264a <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	212c      	movs	r1, #44	; 0x2c
 80022d4:	fb01 f303 	mul.w	r3, r1, r3
 80022d8:	4413      	add	r3, r2
 80022da:	3354      	adds	r3, #84	; 0x54
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	f083 0301 	eor.w	r3, r3, #1
 80022e2:	b2d8      	uxtb	r0, r3
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	212c      	movs	r1, #44	; 0x2c
 80022ea:	fb01 f303 	mul.w	r3, r1, r3
 80022ee:	4413      	add	r3, r2
 80022f0:	3354      	adds	r3, #84	; 0x54
 80022f2:	4602      	mov	r2, r0
 80022f4:	701a      	strb	r2, [r3, #0]
}
 80022f6:	e1a8      	b.n	800264a <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	212c      	movs	r1, #44	; 0x2c
 80022fe:	fb01 f303 	mul.w	r3, r1, r3
 8002302:	4413      	add	r3, r2
 8002304:	3354      	adds	r3, #84	; 0x54
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	f083 0301 	eor.w	r3, r3, #1
 800230c:	b2d8      	uxtb	r0, r3
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	212c      	movs	r1, #44	; 0x2c
 8002314:	fb01 f303 	mul.w	r3, r1, r3
 8002318:	4413      	add	r3, r2
 800231a:	3354      	adds	r3, #84	; 0x54
 800231c:	4602      	mov	r2, r0
 800231e:	701a      	strb	r2, [r3, #0]
}
 8002320:	e193      	b.n	800264a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	015a      	lsls	r2, r3, #5
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4413      	add	r3, r2
 800232a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b02      	cmp	r3, #2
 8002336:	f040 8106 	bne.w	8002546 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	015a      	lsls	r2, r3, #5
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4413      	add	r3, r2
 8002342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	0151      	lsls	r1, r2, #5
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	440a      	add	r2, r1
 8002350:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002354:	f023 0302 	bic.w	r3, r3, #2
 8002358:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	212c      	movs	r1, #44	; 0x2c
 8002360:	fb01 f303 	mul.w	r3, r1, r3
 8002364:	4413      	add	r3, r2
 8002366:	3361      	adds	r3, #97	; 0x61
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d109      	bne.n	8002382 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	212c      	movs	r1, #44	; 0x2c
 8002374:	fb01 f303 	mul.w	r3, r1, r3
 8002378:	4413      	add	r3, r2
 800237a:	3360      	adds	r3, #96	; 0x60
 800237c:	2201      	movs	r2, #1
 800237e:	701a      	strb	r2, [r3, #0]
 8002380:	e0c9      	b.n	8002516 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	212c      	movs	r1, #44	; 0x2c
 8002388:	fb01 f303 	mul.w	r3, r1, r3
 800238c:	4413      	add	r3, r2
 800238e:	3361      	adds	r3, #97	; 0x61
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b05      	cmp	r3, #5
 8002394:	d109      	bne.n	80023aa <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	212c      	movs	r1, #44	; 0x2c
 800239c:	fb01 f303 	mul.w	r3, r1, r3
 80023a0:	4413      	add	r3, r2
 80023a2:	3360      	adds	r3, #96	; 0x60
 80023a4:	2205      	movs	r2, #5
 80023a6:	701a      	strb	r2, [r3, #0]
 80023a8:	e0b5      	b.n	8002516 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	212c      	movs	r1, #44	; 0x2c
 80023b0:	fb01 f303 	mul.w	r3, r1, r3
 80023b4:	4413      	add	r3, r2
 80023b6:	3361      	adds	r3, #97	; 0x61
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b06      	cmp	r3, #6
 80023bc:	d009      	beq.n	80023d2 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	212c      	movs	r1, #44	; 0x2c
 80023c4:	fb01 f303 	mul.w	r3, r1, r3
 80023c8:	4413      	add	r3, r2
 80023ca:	3361      	adds	r3, #97	; 0x61
 80023cc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d150      	bne.n	8002474 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	212c      	movs	r1, #44	; 0x2c
 80023d8:	fb01 f303 	mul.w	r3, r1, r3
 80023dc:	4413      	add	r3, r2
 80023de:	335c      	adds	r3, #92	; 0x5c
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	202c      	movs	r0, #44	; 0x2c
 80023ea:	fb00 f303 	mul.w	r3, r0, r3
 80023ee:	440b      	add	r3, r1
 80023f0:	335c      	adds	r3, #92	; 0x5c
 80023f2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	212c      	movs	r1, #44	; 0x2c
 80023fa:	fb01 f303 	mul.w	r3, r1, r3
 80023fe:	4413      	add	r3, r2
 8002400:	335c      	adds	r3, #92	; 0x5c
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b02      	cmp	r3, #2
 8002406:	d912      	bls.n	800242e <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	212c      	movs	r1, #44	; 0x2c
 800240e:	fb01 f303 	mul.w	r3, r1, r3
 8002412:	4413      	add	r3, r2
 8002414:	335c      	adds	r3, #92	; 0x5c
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	212c      	movs	r1, #44	; 0x2c
 8002420:	fb01 f303 	mul.w	r3, r1, r3
 8002424:	4413      	add	r3, r2
 8002426:	3360      	adds	r3, #96	; 0x60
 8002428:	2204      	movs	r2, #4
 800242a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800242c:	e073      	b.n	8002516 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	212c      	movs	r1, #44	; 0x2c
 8002434:	fb01 f303 	mul.w	r3, r1, r3
 8002438:	4413      	add	r3, r2
 800243a:	3360      	adds	r3, #96	; 0x60
 800243c:	2202      	movs	r2, #2
 800243e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	015a      	lsls	r2, r3, #5
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4413      	add	r3, r2
 8002448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002456:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800245e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	015a      	lsls	r2, r3, #5
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	4413      	add	r3, r2
 8002468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246c:	461a      	mov	r2, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002472:	e050      	b.n	8002516 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	212c      	movs	r1, #44	; 0x2c
 800247a:	fb01 f303 	mul.w	r3, r1, r3
 800247e:	4413      	add	r3, r2
 8002480:	3361      	adds	r3, #97	; 0x61
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b03      	cmp	r3, #3
 8002486:	d122      	bne.n	80024ce <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	212c      	movs	r1, #44	; 0x2c
 800248e:	fb01 f303 	mul.w	r3, r1, r3
 8002492:	4413      	add	r3, r2
 8002494:	3360      	adds	r3, #96	; 0x60
 8002496:	2202      	movs	r2, #2
 8002498:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	015a      	lsls	r2, r3, #5
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024b0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024b8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c6:	461a      	mov	r2, r3
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	e023      	b.n	8002516 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	212c      	movs	r1, #44	; 0x2c
 80024d4:	fb01 f303 	mul.w	r3, r1, r3
 80024d8:	4413      	add	r3, r2
 80024da:	3361      	adds	r3, #97	; 0x61
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b07      	cmp	r3, #7
 80024e0:	d119      	bne.n	8002516 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	212c      	movs	r1, #44	; 0x2c
 80024e8:	fb01 f303 	mul.w	r3, r1, r3
 80024ec:	4413      	add	r3, r2
 80024ee:	335c      	adds	r3, #92	; 0x5c
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	1c5a      	adds	r2, r3, #1
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	202c      	movs	r0, #44	; 0x2c
 80024fa:	fb00 f303 	mul.w	r3, r0, r3
 80024fe:	440b      	add	r3, r1
 8002500:	335c      	adds	r3, #92	; 0x5c
 8002502:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	212c      	movs	r1, #44	; 0x2c
 800250a:	fb01 f303 	mul.w	r3, r1, r3
 800250e:	4413      	add	r3, r2
 8002510:	3360      	adds	r3, #96	; 0x60
 8002512:	2204      	movs	r2, #4
 8002514:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	015a      	lsls	r2, r3, #5
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	4413      	add	r3, r2
 800251e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002522:	461a      	mov	r2, r3
 8002524:	2302      	movs	r3, #2
 8002526:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	b2d9      	uxtb	r1, r3
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	202c      	movs	r0, #44	; 0x2c
 8002532:	fb00 f303 	mul.w	r3, r0, r3
 8002536:	4413      	add	r3, r2
 8002538:	3360      	adds	r3, #96	; 0x60
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	461a      	mov	r2, r3
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f005 fccc 	bl	8007edc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002544:	e081      	b.n	800264a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	015a      	lsls	r2, r3, #5
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4413      	add	r3, r2
 800254e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 0310 	and.w	r3, r3, #16
 8002558:	2b10      	cmp	r3, #16
 800255a:	d176      	bne.n	800264a <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	212c      	movs	r1, #44	; 0x2c
 8002562:	fb01 f303 	mul.w	r3, r1, r3
 8002566:	4413      	add	r3, r2
 8002568:	333f      	adds	r3, #63	; 0x3f
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b03      	cmp	r3, #3
 800256e:	d121      	bne.n	80025b4 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	212c      	movs	r1, #44	; 0x2c
 8002576:	fb01 f303 	mul.w	r3, r1, r3
 800257a:	4413      	add	r3, r2
 800257c:	335c      	adds	r3, #92	; 0x5c
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	015a      	lsls	r2, r3, #5
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4413      	add	r3, r2
 800258a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	0151      	lsls	r1, r2, #5
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	440a      	add	r2, r1
 8002598:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800259c:	f043 0302 	orr.w	r3, r3, #2
 80025a0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	4611      	mov	r1, r2
 80025ac:	4618      	mov	r0, r3
 80025ae:	f003 fad8 	bl	8005b62 <USB_HC_Halt>
 80025b2:	e041      	b.n	8002638 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	212c      	movs	r1, #44	; 0x2c
 80025ba:	fb01 f303 	mul.w	r3, r1, r3
 80025be:	4413      	add	r3, r2
 80025c0:	333f      	adds	r3, #63	; 0x3f
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d009      	beq.n	80025dc <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	212c      	movs	r1, #44	; 0x2c
 80025ce:	fb01 f303 	mul.w	r3, r1, r3
 80025d2:	4413      	add	r3, r2
 80025d4:	333f      	adds	r3, #63	; 0x3f
 80025d6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d12d      	bne.n	8002638 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	212c      	movs	r1, #44	; 0x2c
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	4413      	add	r3, r2
 80025e8:	335c      	adds	r3, #92	; 0x5c
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d120      	bne.n	8002638 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	212c      	movs	r1, #44	; 0x2c
 80025fc:	fb01 f303 	mul.w	r3, r1, r3
 8002600:	4413      	add	r3, r2
 8002602:	3361      	adds	r3, #97	; 0x61
 8002604:	2203      	movs	r2, #3
 8002606:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4413      	add	r3, r2
 8002610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	0151      	lsls	r1, r2, #5
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	440a      	add	r2, r1
 800261e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002622:	f043 0302 	orr.w	r3, r3, #2
 8002626:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	4611      	mov	r1, r2
 8002632:	4618      	mov	r0, r3
 8002634:	f003 fa95 	bl	8005b62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4413      	add	r3, r2
 8002640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002644:	461a      	mov	r2, r3
 8002646:	2310      	movs	r3, #16
 8002648:	6093      	str	r3, [r2, #8]
}
 800264a:	bf00      	nop
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b088      	sub	sp, #32
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	460b      	mov	r3, r1
 800265c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002668:	78fb      	ldrb	r3, [r7, #3]
 800266a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	015a      	lsls	r2, r3, #5
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	4413      	add	r3, r2
 8002674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 0304 	and.w	r3, r3, #4
 800267e:	2b04      	cmp	r3, #4
 8002680:	d119      	bne.n	80026b6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	015a      	lsls	r2, r3, #5
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	4413      	add	r3, r2
 800268a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268e:	461a      	mov	r2, r3
 8002690:	2304      	movs	r3, #4
 8002692:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	4413      	add	r3, r2
 800269c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	0151      	lsls	r1, r2, #5
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	440a      	add	r2, r1
 80026aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026ae:	f043 0302 	orr.w	r3, r3, #2
 80026b2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80026b4:	e3ca      	b.n	8002e4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	015a      	lsls	r2, r3, #5
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	4413      	add	r3, r2
 80026be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 0320 	and.w	r3, r3, #32
 80026c8:	2b20      	cmp	r3, #32
 80026ca:	d13e      	bne.n	800274a <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	015a      	lsls	r2, r3, #5
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d8:	461a      	mov	r2, r3
 80026da:	2320      	movs	r3, #32
 80026dc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	212c      	movs	r1, #44	; 0x2c
 80026e4:	fb01 f303 	mul.w	r3, r1, r3
 80026e8:	4413      	add	r3, r2
 80026ea:	333d      	adds	r3, #61	; 0x3d
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	f040 83ac 	bne.w	8002e4c <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	212c      	movs	r1, #44	; 0x2c
 80026fa:	fb01 f303 	mul.w	r3, r1, r3
 80026fe:	4413      	add	r3, r2
 8002700:	333d      	adds	r3, #61	; 0x3d
 8002702:	2200      	movs	r2, #0
 8002704:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	212c      	movs	r1, #44	; 0x2c
 800270c:	fb01 f303 	mul.w	r3, r1, r3
 8002710:	4413      	add	r3, r2
 8002712:	3360      	adds	r3, #96	; 0x60
 8002714:	2202      	movs	r2, #2
 8002716:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	015a      	lsls	r2, r3, #5
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	4413      	add	r3, r2
 8002720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	0151      	lsls	r1, r2, #5
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	440a      	add	r2, r1
 800272e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002732:	f043 0302 	orr.w	r3, r3, #2
 8002736:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	4611      	mov	r1, r2
 8002742:	4618      	mov	r0, r3
 8002744:	f003 fa0d 	bl	8005b62 <USB_HC_Halt>
}
 8002748:	e380      	b.n	8002e4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	015a      	lsls	r2, r3, #5
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	4413      	add	r3, r2
 8002752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800275c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002760:	d122      	bne.n	80027a8 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	015a      	lsls	r2, r3, #5
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	4413      	add	r3, r2
 800276a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	0151      	lsls	r1, r2, #5
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	440a      	add	r2, r1
 8002778:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800277c:	f043 0302 	orr.w	r3, r3, #2
 8002780:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	4611      	mov	r1, r2
 800278c:	4618      	mov	r0, r3
 800278e:	f003 f9e8 	bl	8005b62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	015a      	lsls	r2, r3, #5
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	4413      	add	r3, r2
 800279a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279e:	461a      	mov	r2, r3
 80027a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027a4:	6093      	str	r3, [r2, #8]
}
 80027a6:	e351      	b.n	8002e4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d150      	bne.n	8002860 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	212c      	movs	r1, #44	; 0x2c
 80027c4:	fb01 f303 	mul.w	r3, r1, r3
 80027c8:	4413      	add	r3, r2
 80027ca:	335c      	adds	r3, #92	; 0x5c
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	015a      	lsls	r2, r3, #5
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e2:	2b40      	cmp	r3, #64	; 0x40
 80027e4:	d111      	bne.n	800280a <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	212c      	movs	r1, #44	; 0x2c
 80027ec:	fb01 f303 	mul.w	r3, r1, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	333d      	adds	r3, #61	; 0x3d
 80027f4:	2201      	movs	r2, #1
 80027f6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002804:	461a      	mov	r2, r3
 8002806:	2340      	movs	r3, #64	; 0x40
 8002808:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	015a      	lsls	r2, r3, #5
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	4413      	add	r3, r2
 8002812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	0151      	lsls	r1, r2, #5
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	440a      	add	r2, r1
 8002820:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002824:	f043 0302 	orr.w	r3, r3, #2
 8002828:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	4611      	mov	r1, r2
 8002834:	4618      	mov	r0, r3
 8002836:	f003 f994 	bl	8005b62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	015a      	lsls	r2, r3, #5
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	4413      	add	r3, r2
 8002842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002846:	461a      	mov	r2, r3
 8002848:	2301      	movs	r3, #1
 800284a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	212c      	movs	r1, #44	; 0x2c
 8002852:	fb01 f303 	mul.w	r3, r1, r3
 8002856:	4413      	add	r3, r2
 8002858:	3361      	adds	r3, #97	; 0x61
 800285a:	2201      	movs	r2, #1
 800285c:	701a      	strb	r2, [r3, #0]
}
 800285e:	e2f5      	b.n	8002e4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	015a      	lsls	r2, r3, #5
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	4413      	add	r3, r2
 8002868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002872:	2b40      	cmp	r3, #64	; 0x40
 8002874:	d13c      	bne.n	80028f0 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	212c      	movs	r1, #44	; 0x2c
 800287c:	fb01 f303 	mul.w	r3, r1, r3
 8002880:	4413      	add	r3, r2
 8002882:	3361      	adds	r3, #97	; 0x61
 8002884:	2204      	movs	r2, #4
 8002886:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	212c      	movs	r1, #44	; 0x2c
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	4413      	add	r3, r2
 8002894:	333d      	adds	r3, #61	; 0x3d
 8002896:	2201      	movs	r2, #1
 8002898:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	212c      	movs	r1, #44	; 0x2c
 80028a0:	fb01 f303 	mul.w	r3, r1, r3
 80028a4:	4413      	add	r3, r2
 80028a6:	335c      	adds	r3, #92	; 0x5c
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	015a      	lsls	r2, r3, #5
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	4413      	add	r3, r2
 80028b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	0151      	lsls	r1, r2, #5
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	440a      	add	r2, r1
 80028c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028c6:	f043 0302 	orr.w	r3, r3, #2
 80028ca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	4611      	mov	r1, r2
 80028d6:	4618      	mov	r0, r3
 80028d8:	f003 f943 	bl	8005b62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e8:	461a      	mov	r2, r3
 80028ea:	2340      	movs	r3, #64	; 0x40
 80028ec:	6093      	str	r3, [r2, #8]
}
 80028ee:	e2ad      	b.n	8002e4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	015a      	lsls	r2, r3, #5
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	4413      	add	r3, r2
 80028f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b08      	cmp	r3, #8
 8002904:	d12a      	bne.n	800295c <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	015a      	lsls	r2, r3, #5
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	4413      	add	r3, r2
 800290e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002912:	461a      	mov	r2, r3
 8002914:	2308      	movs	r3, #8
 8002916:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	015a      	lsls	r2, r3, #5
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	4413      	add	r3, r2
 8002920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	0151      	lsls	r1, r2, #5
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	440a      	add	r2, r1
 800292e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002932:	f043 0302 	orr.w	r3, r3, #2
 8002936:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f003 f90d 	bl	8005b62 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	212c      	movs	r1, #44	; 0x2c
 800294e:	fb01 f303 	mul.w	r3, r1, r3
 8002952:	4413      	add	r3, r2
 8002954:	3361      	adds	r3, #97	; 0x61
 8002956:	2205      	movs	r2, #5
 8002958:	701a      	strb	r2, [r3, #0]
}
 800295a:	e277      	b.n	8002e4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	015a      	lsls	r2, r3, #5
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	4413      	add	r3, r2
 8002964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 0310 	and.w	r3, r3, #16
 800296e:	2b10      	cmp	r3, #16
 8002970:	d150      	bne.n	8002a14 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	212c      	movs	r1, #44	; 0x2c
 8002978:	fb01 f303 	mul.w	r3, r1, r3
 800297c:	4413      	add	r3, r2
 800297e:	335c      	adds	r3, #92	; 0x5c
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	212c      	movs	r1, #44	; 0x2c
 800298a:	fb01 f303 	mul.w	r3, r1, r3
 800298e:	4413      	add	r3, r2
 8002990:	3361      	adds	r3, #97	; 0x61
 8002992:	2203      	movs	r2, #3
 8002994:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	212c      	movs	r1, #44	; 0x2c
 800299c:	fb01 f303 	mul.w	r3, r1, r3
 80029a0:	4413      	add	r3, r2
 80029a2:	333d      	adds	r3, #61	; 0x3d
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d112      	bne.n	80029d0 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	212c      	movs	r1, #44	; 0x2c
 80029b0:	fb01 f303 	mul.w	r3, r1, r3
 80029b4:	4413      	add	r3, r2
 80029b6:	333c      	adds	r3, #60	; 0x3c
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d108      	bne.n	80029d0 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	212c      	movs	r1, #44	; 0x2c
 80029c4:	fb01 f303 	mul.w	r3, r1, r3
 80029c8:	4413      	add	r3, r2
 80029ca:	333d      	adds	r3, #61	; 0x3d
 80029cc:	2201      	movs	r2, #1
 80029ce:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	0151      	lsls	r1, r2, #5
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	440a      	add	r2, r1
 80029e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029ea:	f043 0302 	orr.w	r3, r3, #2
 80029ee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	4611      	mov	r1, r2
 80029fa:	4618      	mov	r0, r3
 80029fc:	f003 f8b1 	bl	8005b62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	015a      	lsls	r2, r3, #5
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	4413      	add	r3, r2
 8002a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	2310      	movs	r3, #16
 8002a10:	6093      	str	r3, [r2, #8]
}
 8002a12:	e21b      	b.n	8002e4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a26:	2b80      	cmp	r3, #128	; 0x80
 8002a28:	d174      	bne.n	8002b14 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d121      	bne.n	8002a76 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	212c      	movs	r1, #44	; 0x2c
 8002a38:	fb01 f303 	mul.w	r3, r1, r3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3361      	adds	r3, #97	; 0x61
 8002a40:	2206      	movs	r2, #6
 8002a42:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	015a      	lsls	r2, r3, #5
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	0151      	lsls	r1, r2, #5
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	440a      	add	r2, r1
 8002a5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a5e:	f043 0302 	orr.w	r3, r3, #2
 8002a62:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f003 f877 	bl	8005b62 <USB_HC_Halt>
 8002a74:	e044      	b.n	8002b00 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	212c      	movs	r1, #44	; 0x2c
 8002a7c:	fb01 f303 	mul.w	r3, r1, r3
 8002a80:	4413      	add	r3, r2
 8002a82:	335c      	adds	r3, #92	; 0x5c
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	202c      	movs	r0, #44	; 0x2c
 8002a8e:	fb00 f303 	mul.w	r3, r0, r3
 8002a92:	440b      	add	r3, r1
 8002a94:	335c      	adds	r3, #92	; 0x5c
 8002a96:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	212c      	movs	r1, #44	; 0x2c
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	335c      	adds	r3, #92	; 0x5c
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d920      	bls.n	8002aee <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	212c      	movs	r1, #44	; 0x2c
 8002ab2:	fb01 f303 	mul.w	r3, r1, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	335c      	adds	r3, #92	; 0x5c
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	212c      	movs	r1, #44	; 0x2c
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	3360      	adds	r3, #96	; 0x60
 8002acc:	2204      	movs	r2, #4
 8002ace:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	b2d9      	uxtb	r1, r3
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	202c      	movs	r0, #44	; 0x2c
 8002ada:	fb00 f303 	mul.w	r3, r0, r3
 8002ade:	4413      	add	r3, r2
 8002ae0:	3360      	adds	r3, #96	; 0x60
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f005 f9f8 	bl	8007edc <HAL_HCD_HC_NotifyURBChange_Callback>
 8002aec:	e008      	b.n	8002b00 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	212c      	movs	r1, #44	; 0x2c
 8002af4:	fb01 f303 	mul.w	r3, r1, r3
 8002af8:	4413      	add	r3, r2
 8002afa:	3360      	adds	r3, #96	; 0x60
 8002afc:	2202      	movs	r2, #2
 8002afe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	015a      	lsls	r2, r3, #5
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	2380      	movs	r3, #128	; 0x80
 8002b10:	6093      	str	r3, [r2, #8]
}
 8002b12:	e19b      	b.n	8002e4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b2a:	d134      	bne.n	8002b96 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	015a      	lsls	r2, r3, #5
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	4413      	add	r3, r2
 8002b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	0151      	lsls	r1, r2, #5
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	440a      	add	r2, r1
 8002b42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b46:	f043 0302 	orr.w	r3, r3, #2
 8002b4a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	4611      	mov	r1, r2
 8002b56:	4618      	mov	r0, r3
 8002b58:	f003 f803 	bl	8005b62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	015a      	lsls	r2, r3, #5
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	4413      	add	r3, r2
 8002b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b68:	461a      	mov	r2, r3
 8002b6a:	2310      	movs	r3, #16
 8002b6c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	015a      	lsls	r2, r3, #5
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	4413      	add	r3, r2
 8002b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b80:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	212c      	movs	r1, #44	; 0x2c
 8002b88:	fb01 f303 	mul.w	r3, r1, r3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	3361      	adds	r3, #97	; 0x61
 8002b90:	2208      	movs	r2, #8
 8002b92:	701a      	strb	r2, [r3, #0]
}
 8002b94:	e15a      	b.n	8002e4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	015a      	lsls	r2, r3, #5
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	f040 814f 	bne.w	8002e4c <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	015a      	lsls	r2, r3, #5
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	0151      	lsls	r1, r2, #5
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	440a      	add	r2, r1
 8002bc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bc8:	f023 0302 	bic.w	r3, r3, #2
 8002bcc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	212c      	movs	r1, #44	; 0x2c
 8002bd4:	fb01 f303 	mul.w	r3, r1, r3
 8002bd8:	4413      	add	r3, r2
 8002bda:	3361      	adds	r3, #97	; 0x61
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d17d      	bne.n	8002cde <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	212c      	movs	r1, #44	; 0x2c
 8002be8:	fb01 f303 	mul.w	r3, r1, r3
 8002bec:	4413      	add	r3, r2
 8002bee:	3360      	adds	r3, #96	; 0x60
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	212c      	movs	r1, #44	; 0x2c
 8002bfa:	fb01 f303 	mul.w	r3, r1, r3
 8002bfe:	4413      	add	r3, r2
 8002c00:	333f      	adds	r3, #63	; 0x3f
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d00a      	beq.n	8002c1e <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	212c      	movs	r1, #44	; 0x2c
 8002c0e:	fb01 f303 	mul.w	r3, r1, r3
 8002c12:	4413      	add	r3, r2
 8002c14:	333f      	adds	r3, #63	; 0x3f
 8002c16:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	f040 8100 	bne.w	8002e1e <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d113      	bne.n	8002c4e <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	212c      	movs	r1, #44	; 0x2c
 8002c2c:	fb01 f303 	mul.w	r3, r1, r3
 8002c30:	4413      	add	r3, r2
 8002c32:	3355      	adds	r3, #85	; 0x55
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	f083 0301 	eor.w	r3, r3, #1
 8002c3a:	b2d8      	uxtb	r0, r3
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	212c      	movs	r1, #44	; 0x2c
 8002c42:	fb01 f303 	mul.w	r3, r1, r3
 8002c46:	4413      	add	r3, r2
 8002c48:	3355      	adds	r3, #85	; 0x55
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	f040 80e3 	bne.w	8002e1e <HCD_HC_OUT_IRQHandler+0x7cc>
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	212c      	movs	r1, #44	; 0x2c
 8002c5e:	fb01 f303 	mul.w	r3, r1, r3
 8002c62:	4413      	add	r3, r2
 8002c64:	334c      	adds	r3, #76	; 0x4c
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 80d8 	beq.w	8002e1e <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	212c      	movs	r1, #44	; 0x2c
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	4413      	add	r3, r2
 8002c7a:	334c      	adds	r3, #76	; 0x4c
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	202c      	movs	r0, #44	; 0x2c
 8002c84:	fb00 f202 	mul.w	r2, r0, r2
 8002c88:	440a      	add	r2, r1
 8002c8a:	3240      	adds	r2, #64	; 0x40
 8002c8c:	8812      	ldrh	r2, [r2, #0]
 8002c8e:	4413      	add	r3, r2
 8002c90:	3b01      	subs	r3, #1
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	202c      	movs	r0, #44	; 0x2c
 8002c98:	fb00 f202 	mul.w	r2, r0, r2
 8002c9c:	440a      	add	r2, r1
 8002c9e:	3240      	adds	r2, #64	; 0x40
 8002ca0:	8812      	ldrh	r2, [r2, #0]
 8002ca2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 80b5 	beq.w	8002e1e <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	212c      	movs	r1, #44	; 0x2c
 8002cba:	fb01 f303 	mul.w	r3, r1, r3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3355      	adds	r3, #85	; 0x55
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	f083 0301 	eor.w	r3, r3, #1
 8002cc8:	b2d8      	uxtb	r0, r3
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	212c      	movs	r1, #44	; 0x2c
 8002cd0:	fb01 f303 	mul.w	r3, r1, r3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3355      	adds	r3, #85	; 0x55
 8002cd8:	4602      	mov	r2, r0
 8002cda:	701a      	strb	r2, [r3, #0]
 8002cdc:	e09f      	b.n	8002e1e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	212c      	movs	r1, #44	; 0x2c
 8002ce4:	fb01 f303 	mul.w	r3, r1, r3
 8002ce8:	4413      	add	r3, r2
 8002cea:	3361      	adds	r3, #97	; 0x61
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b03      	cmp	r3, #3
 8002cf0:	d109      	bne.n	8002d06 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	212c      	movs	r1, #44	; 0x2c
 8002cf8:	fb01 f303 	mul.w	r3, r1, r3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	3360      	adds	r3, #96	; 0x60
 8002d00:	2202      	movs	r2, #2
 8002d02:	701a      	strb	r2, [r3, #0]
 8002d04:	e08b      	b.n	8002e1e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	212c      	movs	r1, #44	; 0x2c
 8002d0c:	fb01 f303 	mul.w	r3, r1, r3
 8002d10:	4413      	add	r3, r2
 8002d12:	3361      	adds	r3, #97	; 0x61
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d109      	bne.n	8002d2e <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	212c      	movs	r1, #44	; 0x2c
 8002d20:	fb01 f303 	mul.w	r3, r1, r3
 8002d24:	4413      	add	r3, r2
 8002d26:	3360      	adds	r3, #96	; 0x60
 8002d28:	2202      	movs	r2, #2
 8002d2a:	701a      	strb	r2, [r3, #0]
 8002d2c:	e077      	b.n	8002e1e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	212c      	movs	r1, #44	; 0x2c
 8002d34:	fb01 f303 	mul.w	r3, r1, r3
 8002d38:	4413      	add	r3, r2
 8002d3a:	3361      	adds	r3, #97	; 0x61
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b05      	cmp	r3, #5
 8002d40:	d109      	bne.n	8002d56 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	212c      	movs	r1, #44	; 0x2c
 8002d48:	fb01 f303 	mul.w	r3, r1, r3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3360      	adds	r3, #96	; 0x60
 8002d50:	2205      	movs	r2, #5
 8002d52:	701a      	strb	r2, [r3, #0]
 8002d54:	e063      	b.n	8002e1e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	212c      	movs	r1, #44	; 0x2c
 8002d5c:	fb01 f303 	mul.w	r3, r1, r3
 8002d60:	4413      	add	r3, r2
 8002d62:	3361      	adds	r3, #97	; 0x61
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b06      	cmp	r3, #6
 8002d68:	d009      	beq.n	8002d7e <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	212c      	movs	r1, #44	; 0x2c
 8002d70:	fb01 f303 	mul.w	r3, r1, r3
 8002d74:	4413      	add	r3, r2
 8002d76:	3361      	adds	r3, #97	; 0x61
 8002d78:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	d14f      	bne.n	8002e1e <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	212c      	movs	r1, #44	; 0x2c
 8002d84:	fb01 f303 	mul.w	r3, r1, r3
 8002d88:	4413      	add	r3, r2
 8002d8a:	335c      	adds	r3, #92	; 0x5c
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	1c5a      	adds	r2, r3, #1
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	202c      	movs	r0, #44	; 0x2c
 8002d96:	fb00 f303 	mul.w	r3, r0, r3
 8002d9a:	440b      	add	r3, r1
 8002d9c:	335c      	adds	r3, #92	; 0x5c
 8002d9e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	212c      	movs	r1, #44	; 0x2c
 8002da6:	fb01 f303 	mul.w	r3, r1, r3
 8002daa:	4413      	add	r3, r2
 8002dac:	335c      	adds	r3, #92	; 0x5c
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d912      	bls.n	8002dda <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	212c      	movs	r1, #44	; 0x2c
 8002dba:	fb01 f303 	mul.w	r3, r1, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	335c      	adds	r3, #92	; 0x5c
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	212c      	movs	r1, #44	; 0x2c
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3360      	adds	r3, #96	; 0x60
 8002dd4:	2204      	movs	r2, #4
 8002dd6:	701a      	strb	r2, [r3, #0]
 8002dd8:	e021      	b.n	8002e1e <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	212c      	movs	r1, #44	; 0x2c
 8002de0:	fb01 f303 	mul.w	r3, r1, r3
 8002de4:	4413      	add	r3, r2
 8002de6:	3360      	adds	r3, #96	; 0x60
 8002de8:	2202      	movs	r2, #2
 8002dea:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	015a      	lsls	r2, r3, #5
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e02:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e0a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	015a      	lsls	r2, r3, #5
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	4413      	add	r3, r2
 8002e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e18:	461a      	mov	r2, r3
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	015a      	lsls	r2, r3, #5
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	4413      	add	r3, r2
 8002e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	b2d9      	uxtb	r1, r3
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	202c      	movs	r0, #44	; 0x2c
 8002e3a:	fb00 f303 	mul.w	r3, r0, r3
 8002e3e:	4413      	add	r3, r2
 8002e40:	3360      	adds	r3, #96	; 0x60
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f005 f848 	bl	8007edc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e4c:	bf00      	nop
 8002e4e:	3720      	adds	r7, #32
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08a      	sub	sp, #40	; 0x28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	f003 030f 	and.w	r3, r3, #15
 8002e74:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	0c5b      	lsrs	r3, r3, #17
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	091b      	lsrs	r3, r3, #4
 8002e84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e88:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d004      	beq.n	8002e9a <HCD_RXQLVL_IRQHandler+0x46>
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	2b05      	cmp	r3, #5
 8002e94:	f000 80a9 	beq.w	8002fea <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002e98:	e0aa      	b.n	8002ff0 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 80a6 	beq.w	8002fee <HCD_RXQLVL_IRQHandler+0x19a>
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	212c      	movs	r1, #44	; 0x2c
 8002ea8:	fb01 f303 	mul.w	r3, r1, r3
 8002eac:	4413      	add	r3, r2
 8002eae:	3344      	adds	r3, #68	; 0x44
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 809b 	beq.w	8002fee <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	212c      	movs	r1, #44	; 0x2c
 8002ebe:	fb01 f303 	mul.w	r3, r1, r3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	3350      	adds	r3, #80	; 0x50
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	441a      	add	r2, r3
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	202c      	movs	r0, #44	; 0x2c
 8002ed2:	fb00 f303 	mul.w	r3, r0, r3
 8002ed6:	440b      	add	r3, r1
 8002ed8:	334c      	adds	r3, #76	; 0x4c
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d87a      	bhi.n	8002fd6 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6818      	ldr	r0, [r3, #0]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	212c      	movs	r1, #44	; 0x2c
 8002eea:	fb01 f303 	mul.w	r3, r1, r3
 8002eee:	4413      	add	r3, r2
 8002ef0:	3344      	adds	r3, #68	; 0x44
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	b292      	uxth	r2, r2
 8002ef8:	4619      	mov	r1, r3
 8002efa:	f002 f9ab 	bl	8005254 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	212c      	movs	r1, #44	; 0x2c
 8002f04:	fb01 f303 	mul.w	r3, r1, r3
 8002f08:	4413      	add	r3, r2
 8002f0a:	3344      	adds	r3, #68	; 0x44
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	441a      	add	r2, r3
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	202c      	movs	r0, #44	; 0x2c
 8002f18:	fb00 f303 	mul.w	r3, r0, r3
 8002f1c:	440b      	add	r3, r1
 8002f1e:	3344      	adds	r3, #68	; 0x44
 8002f20:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	212c      	movs	r1, #44	; 0x2c
 8002f28:	fb01 f303 	mul.w	r3, r1, r3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	3350      	adds	r3, #80	; 0x50
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	441a      	add	r2, r3
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	202c      	movs	r0, #44	; 0x2c
 8002f3c:	fb00 f303 	mul.w	r3, r0, r3
 8002f40:	440b      	add	r3, r1
 8002f42:	3350      	adds	r3, #80	; 0x50
 8002f44:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	015a      	lsls	r2, r3, #5
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	0cdb      	lsrs	r3, r3, #19
 8002f56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f5a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	212c      	movs	r1, #44	; 0x2c
 8002f62:	fb01 f303 	mul.w	r3, r1, r3
 8002f66:	4413      	add	r3, r2
 8002f68:	3340      	adds	r3, #64	; 0x40
 8002f6a:	881b      	ldrh	r3, [r3, #0]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d13c      	bne.n	8002fee <HCD_RXQLVL_IRQHandler+0x19a>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d039      	beq.n	8002fee <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f90:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f98:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	212c      	movs	r1, #44	; 0x2c
 8002fb2:	fb01 f303 	mul.w	r3, r1, r3
 8002fb6:	4413      	add	r3, r2
 8002fb8:	3354      	adds	r3, #84	; 0x54
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	f083 0301 	eor.w	r3, r3, #1
 8002fc0:	b2d8      	uxtb	r0, r3
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	212c      	movs	r1, #44	; 0x2c
 8002fc8:	fb01 f303 	mul.w	r3, r1, r3
 8002fcc:	4413      	add	r3, r2
 8002fce:	3354      	adds	r3, #84	; 0x54
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	701a      	strb	r2, [r3, #0]
      break;
 8002fd4:	e00b      	b.n	8002fee <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	212c      	movs	r1, #44	; 0x2c
 8002fdc:	fb01 f303 	mul.w	r3, r1, r3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	3360      	adds	r3, #96	; 0x60
 8002fe4:	2204      	movs	r2, #4
 8002fe6:	701a      	strb	r2, [r3, #0]
      break;
 8002fe8:	e001      	b.n	8002fee <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002fea:	bf00      	nop
 8002fec:	e000      	b.n	8002ff0 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002fee:	bf00      	nop
  }
}
 8002ff0:	bf00      	nop
 8002ff2:	3728      	adds	r7, #40	; 0x28
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003024:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b02      	cmp	r3, #2
 800302e:	d10b      	bne.n	8003048 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b01      	cmp	r3, #1
 8003038:	d102      	bne.n	8003040 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f004 ff32 	bl	8007ea4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f043 0302 	orr.w	r3, r3, #2
 8003046:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b08      	cmp	r3, #8
 8003050:	d132      	bne.n	80030b8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	f043 0308 	orr.w	r3, r3, #8
 8003058:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b04      	cmp	r3, #4
 8003062:	d126      	bne.n	80030b2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	2b02      	cmp	r3, #2
 800306a:	d113      	bne.n	8003094 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003072:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003076:	d106      	bne.n	8003086 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2102      	movs	r1, #2
 800307e:	4618      	mov	r0, r3
 8003080:	f002 fa48 	bl	8005514 <USB_InitFSLSPClkSel>
 8003084:	e011      	b.n	80030aa <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2101      	movs	r1, #1
 800308c:	4618      	mov	r0, r3
 800308e:	f002 fa41 	bl	8005514 <USB_InitFSLSPClkSel>
 8003092:	e00a      	b.n	80030aa <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d106      	bne.n	80030aa <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030a2:	461a      	mov	r2, r3
 80030a4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80030a8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f004 ff24 	bl	8007ef8 <HAL_HCD_PortEnabled_Callback>
 80030b0:	e002      	b.n	80030b8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f004 ff2e 	bl	8007f14 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f003 0320 	and.w	r3, r3, #32
 80030be:	2b20      	cmp	r3, #32
 80030c0:	d103      	bne.n	80030ca <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	f043 0320 	orr.w	r3, r3, #32
 80030c8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030d0:	461a      	mov	r2, r3
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	6013      	str	r3, [r2, #0]
}
 80030d6:	bf00      	nop
 80030d8:	3718      	adds	r7, #24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
	...

080030e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e264      	b.n	80035bc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d075      	beq.n	80031ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030fe:	4ba3      	ldr	r3, [pc, #652]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b04      	cmp	r3, #4
 8003108:	d00c      	beq.n	8003124 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800310a:	4ba0      	ldr	r3, [pc, #640]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003112:	2b08      	cmp	r3, #8
 8003114:	d112      	bne.n	800313c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003116:	4b9d      	ldr	r3, [pc, #628]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003122:	d10b      	bne.n	800313c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003124:	4b99      	ldr	r3, [pc, #612]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d05b      	beq.n	80031e8 <HAL_RCC_OscConfig+0x108>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d157      	bne.n	80031e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e23f      	b.n	80035bc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003144:	d106      	bne.n	8003154 <HAL_RCC_OscConfig+0x74>
 8003146:	4b91      	ldr	r3, [pc, #580]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a90      	ldr	r2, [pc, #576]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 800314c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003150:	6013      	str	r3, [r2, #0]
 8003152:	e01d      	b.n	8003190 <HAL_RCC_OscConfig+0xb0>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800315c:	d10c      	bne.n	8003178 <HAL_RCC_OscConfig+0x98>
 800315e:	4b8b      	ldr	r3, [pc, #556]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a8a      	ldr	r2, [pc, #552]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	4b88      	ldr	r3, [pc, #544]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a87      	ldr	r2, [pc, #540]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	e00b      	b.n	8003190 <HAL_RCC_OscConfig+0xb0>
 8003178:	4b84      	ldr	r3, [pc, #528]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a83      	ldr	r2, [pc, #524]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 800317e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	4b81      	ldr	r3, [pc, #516]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a80      	ldr	r2, [pc, #512]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 800318a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800318e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d013      	beq.n	80031c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003198:	f7fd fea8 	bl	8000eec <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031a0:	f7fd fea4 	bl	8000eec <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b64      	cmp	r3, #100	; 0x64
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e204      	b.n	80035bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b2:	4b76      	ldr	r3, [pc, #472]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0f0      	beq.n	80031a0 <HAL_RCC_OscConfig+0xc0>
 80031be:	e014      	b.n	80031ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c0:	f7fd fe94 	bl	8000eec <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031c8:	f7fd fe90 	bl	8000eec <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b64      	cmp	r3, #100	; 0x64
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e1f0      	b.n	80035bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031da:	4b6c      	ldr	r3, [pc, #432]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1f0      	bne.n	80031c8 <HAL_RCC_OscConfig+0xe8>
 80031e6:	e000      	b.n	80031ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d063      	beq.n	80032be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031f6:	4b65      	ldr	r3, [pc, #404]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00b      	beq.n	800321a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003202:	4b62      	ldr	r3, [pc, #392]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800320a:	2b08      	cmp	r3, #8
 800320c:	d11c      	bne.n	8003248 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800320e:	4b5f      	ldr	r3, [pc, #380]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d116      	bne.n	8003248 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800321a:	4b5c      	ldr	r3, [pc, #368]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d005      	beq.n	8003232 <HAL_RCC_OscConfig+0x152>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d001      	beq.n	8003232 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e1c4      	b.n	80035bc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003232:	4b56      	ldr	r3, [pc, #344]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4952      	ldr	r1, [pc, #328]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003242:	4313      	orrs	r3, r2
 8003244:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003246:	e03a      	b.n	80032be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d020      	beq.n	8003292 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003250:	4b4f      	ldr	r3, [pc, #316]	; (8003390 <HAL_RCC_OscConfig+0x2b0>)
 8003252:	2201      	movs	r2, #1
 8003254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003256:	f7fd fe49 	bl	8000eec <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800325e:	f7fd fe45 	bl	8000eec <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e1a5      	b.n	80035bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003270:	4b46      	ldr	r3, [pc, #280]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0f0      	beq.n	800325e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800327c:	4b43      	ldr	r3, [pc, #268]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	4940      	ldr	r1, [pc, #256]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 800328c:	4313      	orrs	r3, r2
 800328e:	600b      	str	r3, [r1, #0]
 8003290:	e015      	b.n	80032be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003292:	4b3f      	ldr	r3, [pc, #252]	; (8003390 <HAL_RCC_OscConfig+0x2b0>)
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003298:	f7fd fe28 	bl	8000eec <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032a0:	f7fd fe24 	bl	8000eec <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e184      	b.n	80035bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032b2:	4b36      	ldr	r3, [pc, #216]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f0      	bne.n	80032a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d030      	beq.n	800332c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d016      	beq.n	8003300 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032d2:	4b30      	ldr	r3, [pc, #192]	; (8003394 <HAL_RCC_OscConfig+0x2b4>)
 80032d4:	2201      	movs	r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d8:	f7fd fe08 	bl	8000eec <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032e0:	f7fd fe04 	bl	8000eec <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e164      	b.n	80035bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032f2:	4b26      	ldr	r3, [pc, #152]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 80032f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0f0      	beq.n	80032e0 <HAL_RCC_OscConfig+0x200>
 80032fe:	e015      	b.n	800332c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003300:	4b24      	ldr	r3, [pc, #144]	; (8003394 <HAL_RCC_OscConfig+0x2b4>)
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003306:	f7fd fdf1 	bl	8000eec <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800330e:	f7fd fded 	bl	8000eec <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e14d      	b.n	80035bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003320:	4b1a      	ldr	r3, [pc, #104]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1f0      	bne.n	800330e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 80a0 	beq.w	800347a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800333a:	2300      	movs	r3, #0
 800333c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800333e:	4b13      	ldr	r3, [pc, #76]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10f      	bne.n	800336a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800334a:	2300      	movs	r3, #0
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	4b0f      	ldr	r3, [pc, #60]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	4a0e      	ldr	r2, [pc, #56]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 8003354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003358:	6413      	str	r3, [r2, #64]	; 0x40
 800335a:	4b0c      	ldr	r3, [pc, #48]	; (800338c <HAL_RCC_OscConfig+0x2ac>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003362:	60bb      	str	r3, [r7, #8]
 8003364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003366:	2301      	movs	r3, #1
 8003368:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336a:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <HAL_RCC_OscConfig+0x2b8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003372:	2b00      	cmp	r3, #0
 8003374:	d121      	bne.n	80033ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003376:	4b08      	ldr	r3, [pc, #32]	; (8003398 <HAL_RCC_OscConfig+0x2b8>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a07      	ldr	r2, [pc, #28]	; (8003398 <HAL_RCC_OscConfig+0x2b8>)
 800337c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003380:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003382:	f7fd fdb3 	bl	8000eec <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003388:	e011      	b.n	80033ae <HAL_RCC_OscConfig+0x2ce>
 800338a:	bf00      	nop
 800338c:	40023800 	.word	0x40023800
 8003390:	42470000 	.word	0x42470000
 8003394:	42470e80 	.word	0x42470e80
 8003398:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800339c:	f7fd fda6 	bl	8000eec <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e106      	b.n	80035bc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ae:	4b85      	ldr	r3, [pc, #532]	; (80035c4 <HAL_RCC_OscConfig+0x4e4>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d106      	bne.n	80033d0 <HAL_RCC_OscConfig+0x2f0>
 80033c2:	4b81      	ldr	r3, [pc, #516]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 80033c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c6:	4a80      	ldr	r2, [pc, #512]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 80033c8:	f043 0301 	orr.w	r3, r3, #1
 80033cc:	6713      	str	r3, [r2, #112]	; 0x70
 80033ce:	e01c      	b.n	800340a <HAL_RCC_OscConfig+0x32a>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b05      	cmp	r3, #5
 80033d6:	d10c      	bne.n	80033f2 <HAL_RCC_OscConfig+0x312>
 80033d8:	4b7b      	ldr	r3, [pc, #492]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 80033da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033dc:	4a7a      	ldr	r2, [pc, #488]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 80033de:	f043 0304 	orr.w	r3, r3, #4
 80033e2:	6713      	str	r3, [r2, #112]	; 0x70
 80033e4:	4b78      	ldr	r3, [pc, #480]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 80033e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e8:	4a77      	ldr	r2, [pc, #476]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 80033ea:	f043 0301 	orr.w	r3, r3, #1
 80033ee:	6713      	str	r3, [r2, #112]	; 0x70
 80033f0:	e00b      	b.n	800340a <HAL_RCC_OscConfig+0x32a>
 80033f2:	4b75      	ldr	r3, [pc, #468]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 80033f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f6:	4a74      	ldr	r2, [pc, #464]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 80033f8:	f023 0301 	bic.w	r3, r3, #1
 80033fc:	6713      	str	r3, [r2, #112]	; 0x70
 80033fe:	4b72      	ldr	r3, [pc, #456]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 8003400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003402:	4a71      	ldr	r2, [pc, #452]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 8003404:	f023 0304 	bic.w	r3, r3, #4
 8003408:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d015      	beq.n	800343e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003412:	f7fd fd6b 	bl	8000eec <HAL_GetTick>
 8003416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003418:	e00a      	b.n	8003430 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800341a:	f7fd fd67 	bl	8000eec <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	f241 3288 	movw	r2, #5000	; 0x1388
 8003428:	4293      	cmp	r3, r2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e0c5      	b.n	80035bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003430:	4b65      	ldr	r3, [pc, #404]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 8003432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0ee      	beq.n	800341a <HAL_RCC_OscConfig+0x33a>
 800343c:	e014      	b.n	8003468 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800343e:	f7fd fd55 	bl	8000eec <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003444:	e00a      	b.n	800345c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003446:	f7fd fd51 	bl	8000eec <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	f241 3288 	movw	r2, #5000	; 0x1388
 8003454:	4293      	cmp	r3, r2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e0af      	b.n	80035bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800345c:	4b5a      	ldr	r3, [pc, #360]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 800345e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1ee      	bne.n	8003446 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003468:	7dfb      	ldrb	r3, [r7, #23]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d105      	bne.n	800347a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800346e:	4b56      	ldr	r3, [pc, #344]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	4a55      	ldr	r2, [pc, #340]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 8003474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003478:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 809b 	beq.w	80035ba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003484:	4b50      	ldr	r3, [pc, #320]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 030c 	and.w	r3, r3, #12
 800348c:	2b08      	cmp	r3, #8
 800348e:	d05c      	beq.n	800354a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	2b02      	cmp	r3, #2
 8003496:	d141      	bne.n	800351c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003498:	4b4c      	ldr	r3, [pc, #304]	; (80035cc <HAL_RCC_OscConfig+0x4ec>)
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349e:	f7fd fd25 	bl	8000eec <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a6:	f7fd fd21 	bl	8000eec <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e081      	b.n	80035bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034b8:	4b43      	ldr	r3, [pc, #268]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1f0      	bne.n	80034a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	69da      	ldr	r2, [r3, #28]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	431a      	orrs	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d2:	019b      	lsls	r3, r3, #6
 80034d4:	431a      	orrs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034da:	085b      	lsrs	r3, r3, #1
 80034dc:	3b01      	subs	r3, #1
 80034de:	041b      	lsls	r3, r3, #16
 80034e0:	431a      	orrs	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e6:	061b      	lsls	r3, r3, #24
 80034e8:	4937      	ldr	r1, [pc, #220]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034ee:	4b37      	ldr	r3, [pc, #220]	; (80035cc <HAL_RCC_OscConfig+0x4ec>)
 80034f0:	2201      	movs	r2, #1
 80034f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f4:	f7fd fcfa 	bl	8000eec <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034fc:	f7fd fcf6 	bl	8000eec <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e056      	b.n	80035bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800350e:	4b2e      	ldr	r3, [pc, #184]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0f0      	beq.n	80034fc <HAL_RCC_OscConfig+0x41c>
 800351a:	e04e      	b.n	80035ba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351c:	4b2b      	ldr	r3, [pc, #172]	; (80035cc <HAL_RCC_OscConfig+0x4ec>)
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003522:	f7fd fce3 	bl	8000eec <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003528:	e008      	b.n	800353c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800352a:	f7fd fcdf 	bl	8000eec <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e03f      	b.n	80035bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800353c:	4b22      	ldr	r3, [pc, #136]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1f0      	bne.n	800352a <HAL_RCC_OscConfig+0x44a>
 8003548:	e037      	b.n	80035ba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d101      	bne.n	8003556 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e032      	b.n	80035bc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003556:	4b1c      	ldr	r3, [pc, #112]	; (80035c8 <HAL_RCC_OscConfig+0x4e8>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d028      	beq.n	80035b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800356e:	429a      	cmp	r2, r3
 8003570:	d121      	bne.n	80035b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357c:	429a      	cmp	r2, r3
 800357e:	d11a      	bne.n	80035b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003586:	4013      	ands	r3, r2
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800358c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800358e:	4293      	cmp	r3, r2
 8003590:	d111      	bne.n	80035b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359c:	085b      	lsrs	r3, r3, #1
 800359e:	3b01      	subs	r3, #1
 80035a0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d107      	bne.n	80035b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d001      	beq.n	80035ba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40007000 	.word	0x40007000
 80035c8:	40023800 	.word	0x40023800
 80035cc:	42470060 	.word	0x42470060

080035d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0cc      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035e4:	4b68      	ldr	r3, [pc, #416]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d90c      	bls.n	800360c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f2:	4b65      	ldr	r3, [pc, #404]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fa:	4b63      	ldr	r3, [pc, #396]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d001      	beq.n	800360c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e0b8      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d020      	beq.n	800365a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d005      	beq.n	8003630 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003624:	4b59      	ldr	r3, [pc, #356]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	4a58      	ldr	r2, [pc, #352]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800362e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0308 	and.w	r3, r3, #8
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800363c:	4b53      	ldr	r3, [pc, #332]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	4a52      	ldr	r2, [pc, #328]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003646:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003648:	4b50      	ldr	r3, [pc, #320]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	494d      	ldr	r1, [pc, #308]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003656:	4313      	orrs	r3, r2
 8003658:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d044      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d107      	bne.n	800367e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800366e:	4b47      	ldr	r3, [pc, #284]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d119      	bne.n	80036ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e07f      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b02      	cmp	r3, #2
 8003684:	d003      	beq.n	800368e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800368a:	2b03      	cmp	r3, #3
 800368c:	d107      	bne.n	800369e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800368e:	4b3f      	ldr	r3, [pc, #252]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d109      	bne.n	80036ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e06f      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800369e:	4b3b      	ldr	r3, [pc, #236]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e067      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ae:	4b37      	ldr	r3, [pc, #220]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f023 0203 	bic.w	r2, r3, #3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	4934      	ldr	r1, [pc, #208]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036c0:	f7fd fc14 	bl	8000eec <HAL_GetTick>
 80036c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c6:	e00a      	b.n	80036de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c8:	f7fd fc10 	bl	8000eec <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e04f      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036de:	4b2b      	ldr	r3, [pc, #172]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 020c 	and.w	r2, r3, #12
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d1eb      	bne.n	80036c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036f0:	4b25      	ldr	r3, [pc, #148]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d20c      	bcs.n	8003718 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fe:	4b22      	ldr	r3, [pc, #136]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003706:	4b20      	ldr	r3, [pc, #128]	; (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d001      	beq.n	8003718 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e032      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d008      	beq.n	8003736 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003724:	4b19      	ldr	r3, [pc, #100]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	4916      	ldr	r1, [pc, #88]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	4313      	orrs	r3, r2
 8003734:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d009      	beq.n	8003756 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003742:	4b12      	ldr	r3, [pc, #72]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	490e      	ldr	r1, [pc, #56]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003752:	4313      	orrs	r3, r2
 8003754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003756:	f000 f821 	bl	800379c <HAL_RCC_GetSysClockFreq>
 800375a:	4602      	mov	r2, r0
 800375c:	4b0b      	ldr	r3, [pc, #44]	; (800378c <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	091b      	lsrs	r3, r3, #4
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	490a      	ldr	r1, [pc, #40]	; (8003790 <HAL_RCC_ClockConfig+0x1c0>)
 8003768:	5ccb      	ldrb	r3, [r1, r3]
 800376a:	fa22 f303 	lsr.w	r3, r2, r3
 800376e:	4a09      	ldr	r2, [pc, #36]	; (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 8003770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003772:	4b09      	ldr	r3, [pc, #36]	; (8003798 <HAL_RCC_ClockConfig+0x1c8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f7fd fb74 	bl	8000e64 <HAL_InitTick>

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	40023c00 	.word	0x40023c00
 800378c:	40023800 	.word	0x40023800
 8003790:	08008548 	.word	0x08008548
 8003794:	20000000 	.word	0x20000000
 8003798:	20000004 	.word	0x20000004

0800379c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800379c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037a0:	b084      	sub	sp, #16
 80037a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	607b      	str	r3, [r7, #4]
 80037a8:	2300      	movs	r3, #0
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	2300      	movs	r3, #0
 80037ae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037b4:	4b67      	ldr	r3, [pc, #412]	; (8003954 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 030c 	and.w	r3, r3, #12
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d00d      	beq.n	80037dc <HAL_RCC_GetSysClockFreq+0x40>
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	f200 80bd 	bhi.w	8003940 <HAL_RCC_GetSysClockFreq+0x1a4>
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d002      	beq.n	80037d0 <HAL_RCC_GetSysClockFreq+0x34>
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d003      	beq.n	80037d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80037ce:	e0b7      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037d0:	4b61      	ldr	r3, [pc, #388]	; (8003958 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80037d2:	60bb      	str	r3, [r7, #8]
       break;
 80037d4:	e0b7      	b.n	8003946 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037d6:	4b61      	ldr	r3, [pc, #388]	; (800395c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80037d8:	60bb      	str	r3, [r7, #8]
      break;
 80037da:	e0b4      	b.n	8003946 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037dc:	4b5d      	ldr	r3, [pc, #372]	; (8003954 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037e6:	4b5b      	ldr	r3, [pc, #364]	; (8003954 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d04d      	beq.n	800388e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037f2:	4b58      	ldr	r3, [pc, #352]	; (8003954 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	099b      	lsrs	r3, r3, #6
 80037f8:	461a      	mov	r2, r3
 80037fa:	f04f 0300 	mov.w	r3, #0
 80037fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003802:	f04f 0100 	mov.w	r1, #0
 8003806:	ea02 0800 	and.w	r8, r2, r0
 800380a:	ea03 0901 	and.w	r9, r3, r1
 800380e:	4640      	mov	r0, r8
 8003810:	4649      	mov	r1, r9
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	f04f 0300 	mov.w	r3, #0
 800381a:	014b      	lsls	r3, r1, #5
 800381c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003820:	0142      	lsls	r2, r0, #5
 8003822:	4610      	mov	r0, r2
 8003824:	4619      	mov	r1, r3
 8003826:	ebb0 0008 	subs.w	r0, r0, r8
 800382a:	eb61 0109 	sbc.w	r1, r1, r9
 800382e:	f04f 0200 	mov.w	r2, #0
 8003832:	f04f 0300 	mov.w	r3, #0
 8003836:	018b      	lsls	r3, r1, #6
 8003838:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800383c:	0182      	lsls	r2, r0, #6
 800383e:	1a12      	subs	r2, r2, r0
 8003840:	eb63 0301 	sbc.w	r3, r3, r1
 8003844:	f04f 0000 	mov.w	r0, #0
 8003848:	f04f 0100 	mov.w	r1, #0
 800384c:	00d9      	lsls	r1, r3, #3
 800384e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003852:	00d0      	lsls	r0, r2, #3
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	eb12 0208 	adds.w	r2, r2, r8
 800385c:	eb43 0309 	adc.w	r3, r3, r9
 8003860:	f04f 0000 	mov.w	r0, #0
 8003864:	f04f 0100 	mov.w	r1, #0
 8003868:	0259      	lsls	r1, r3, #9
 800386a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800386e:	0250      	lsls	r0, r2, #9
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4610      	mov	r0, r2
 8003876:	4619      	mov	r1, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	461a      	mov	r2, r3
 800387c:	f04f 0300 	mov.w	r3, #0
 8003880:	f7fc fca2 	bl	80001c8 <__aeabi_uldivmod>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4613      	mov	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	e04a      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800388e:	4b31      	ldr	r3, [pc, #196]	; (8003954 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	099b      	lsrs	r3, r3, #6
 8003894:	461a      	mov	r2, r3
 8003896:	f04f 0300 	mov.w	r3, #0
 800389a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800389e:	f04f 0100 	mov.w	r1, #0
 80038a2:	ea02 0400 	and.w	r4, r2, r0
 80038a6:	ea03 0501 	and.w	r5, r3, r1
 80038aa:	4620      	mov	r0, r4
 80038ac:	4629      	mov	r1, r5
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	f04f 0300 	mov.w	r3, #0
 80038b6:	014b      	lsls	r3, r1, #5
 80038b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80038bc:	0142      	lsls	r2, r0, #5
 80038be:	4610      	mov	r0, r2
 80038c0:	4619      	mov	r1, r3
 80038c2:	1b00      	subs	r0, r0, r4
 80038c4:	eb61 0105 	sbc.w	r1, r1, r5
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	f04f 0300 	mov.w	r3, #0
 80038d0:	018b      	lsls	r3, r1, #6
 80038d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80038d6:	0182      	lsls	r2, r0, #6
 80038d8:	1a12      	subs	r2, r2, r0
 80038da:	eb63 0301 	sbc.w	r3, r3, r1
 80038de:	f04f 0000 	mov.w	r0, #0
 80038e2:	f04f 0100 	mov.w	r1, #0
 80038e6:	00d9      	lsls	r1, r3, #3
 80038e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038ec:	00d0      	lsls	r0, r2, #3
 80038ee:	4602      	mov	r2, r0
 80038f0:	460b      	mov	r3, r1
 80038f2:	1912      	adds	r2, r2, r4
 80038f4:	eb45 0303 	adc.w	r3, r5, r3
 80038f8:	f04f 0000 	mov.w	r0, #0
 80038fc:	f04f 0100 	mov.w	r1, #0
 8003900:	0299      	lsls	r1, r3, #10
 8003902:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003906:	0290      	lsls	r0, r2, #10
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	4610      	mov	r0, r2
 800390e:	4619      	mov	r1, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	461a      	mov	r2, r3
 8003914:	f04f 0300 	mov.w	r3, #0
 8003918:	f7fc fc56 	bl	80001c8 <__aeabi_uldivmod>
 800391c:	4602      	mov	r2, r0
 800391e:	460b      	mov	r3, r1
 8003920:	4613      	mov	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003924:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	0c1b      	lsrs	r3, r3, #16
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	3301      	adds	r3, #1
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	fbb2 f3f3 	udiv	r3, r2, r3
 800393c:	60bb      	str	r3, [r7, #8]
      break;
 800393e:	e002      	b.n	8003946 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003940:	4b05      	ldr	r3, [pc, #20]	; (8003958 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003942:	60bb      	str	r3, [r7, #8]
      break;
 8003944:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003946:	68bb      	ldr	r3, [r7, #8]
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003952:	bf00      	nop
 8003954:	40023800 	.word	0x40023800
 8003958:	00f42400 	.word	0x00f42400
 800395c:	007a1200 	.word	0x007a1200

08003960 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003964:	4b03      	ldr	r3, [pc, #12]	; (8003974 <HAL_RCC_GetHCLKFreq+0x14>)
 8003966:	681b      	ldr	r3, [r3, #0]
}
 8003968:	4618      	mov	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	20000000 	.word	0x20000000

08003978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800397c:	f7ff fff0 	bl	8003960 <HAL_RCC_GetHCLKFreq>
 8003980:	4602      	mov	r2, r0
 8003982:	4b05      	ldr	r3, [pc, #20]	; (8003998 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	0a9b      	lsrs	r3, r3, #10
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	4903      	ldr	r1, [pc, #12]	; (800399c <HAL_RCC_GetPCLK1Freq+0x24>)
 800398e:	5ccb      	ldrb	r3, [r1, r3]
 8003990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003994:	4618      	mov	r0, r3
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40023800 	.word	0x40023800
 800399c:	08008558 	.word	0x08008558

080039a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039a4:	f7ff ffdc 	bl	8003960 <HAL_RCC_GetHCLKFreq>
 80039a8:	4602      	mov	r2, r0
 80039aa:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	0b5b      	lsrs	r3, r3, #13
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	4903      	ldr	r1, [pc, #12]	; (80039c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039b6:	5ccb      	ldrb	r3, [r1, r3]
 80039b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039bc:	4618      	mov	r0, r3
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40023800 	.word	0x40023800
 80039c4:	08008558 	.word	0x08008558

080039c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e041      	b.n	8003a5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d106      	bne.n	80039f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7fd f928 	bl	8000c44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2202      	movs	r2, #2
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3304      	adds	r3, #4
 8003a04:	4619      	mov	r1, r3
 8003a06:	4610      	mov	r0, r2
 8003a08:	f000 faa0 	bl	8003f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d001      	beq.n	8003a80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e04e      	b.n	8003b1e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68da      	ldr	r2, [r3, #12]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0201 	orr.w	r2, r2, #1
 8003a96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a23      	ldr	r2, [pc, #140]	; (8003b2c <HAL_TIM_Base_Start_IT+0xc4>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d022      	beq.n	8003ae8 <HAL_TIM_Base_Start_IT+0x80>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aaa:	d01d      	beq.n	8003ae8 <HAL_TIM_Base_Start_IT+0x80>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a1f      	ldr	r2, [pc, #124]	; (8003b30 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d018      	beq.n	8003ae8 <HAL_TIM_Base_Start_IT+0x80>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a1e      	ldr	r2, [pc, #120]	; (8003b34 <HAL_TIM_Base_Start_IT+0xcc>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d013      	beq.n	8003ae8 <HAL_TIM_Base_Start_IT+0x80>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a1c      	ldr	r2, [pc, #112]	; (8003b38 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d00e      	beq.n	8003ae8 <HAL_TIM_Base_Start_IT+0x80>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a1b      	ldr	r2, [pc, #108]	; (8003b3c <HAL_TIM_Base_Start_IT+0xd4>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d009      	beq.n	8003ae8 <HAL_TIM_Base_Start_IT+0x80>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a19      	ldr	r2, [pc, #100]	; (8003b40 <HAL_TIM_Base_Start_IT+0xd8>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d004      	beq.n	8003ae8 <HAL_TIM_Base_Start_IT+0x80>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a18      	ldr	r2, [pc, #96]	; (8003b44 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d111      	bne.n	8003b0c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2b06      	cmp	r3, #6
 8003af8:	d010      	beq.n	8003b1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f042 0201 	orr.w	r2, r2, #1
 8003b08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b0a:	e007      	b.n	8003b1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0201 	orr.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	40010000 	.word	0x40010000
 8003b30:	40000400 	.word	0x40000400
 8003b34:	40000800 	.word	0x40000800
 8003b38:	40000c00 	.word	0x40000c00
 8003b3c:	40010400 	.word	0x40010400
 8003b40:	40014000 	.word	0x40014000
 8003b44:	40001800 	.word	0x40001800

08003b48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d122      	bne.n	8003ba4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d11b      	bne.n	8003ba4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f06f 0202 	mvn.w	r2, #2
 8003b74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f9bf 	bl	8003f0e <HAL_TIM_IC_CaptureCallback>
 8003b90:	e005      	b.n	8003b9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f9b1 	bl	8003efa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f9c2 	bl	8003f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	f003 0304 	and.w	r3, r3, #4
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	d122      	bne.n	8003bf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b04      	cmp	r3, #4
 8003bbe:	d11b      	bne.n	8003bf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f06f 0204 	mvn.w	r2, #4
 8003bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2202      	movs	r2, #2
 8003bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f995 	bl	8003f0e <HAL_TIM_IC_CaptureCallback>
 8003be4:	e005      	b.n	8003bf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f987 	bl	8003efa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f998 	bl	8003f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d122      	bne.n	8003c4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f003 0308 	and.w	r3, r3, #8
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d11b      	bne.n	8003c4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f06f 0208 	mvn.w	r2, #8
 8003c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2204      	movs	r2, #4
 8003c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	f003 0303 	and.w	r3, r3, #3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f96b 	bl	8003f0e <HAL_TIM_IC_CaptureCallback>
 8003c38:	e005      	b.n	8003c46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f95d 	bl	8003efa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f96e 	bl	8003f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	f003 0310 	and.w	r3, r3, #16
 8003c56:	2b10      	cmp	r3, #16
 8003c58:	d122      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	f003 0310 	and.w	r3, r3, #16
 8003c64:	2b10      	cmp	r3, #16
 8003c66:	d11b      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f06f 0210 	mvn.w	r2, #16
 8003c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2208      	movs	r2, #8
 8003c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f941 	bl	8003f0e <HAL_TIM_IC_CaptureCallback>
 8003c8c:	e005      	b.n	8003c9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f933 	bl	8003efa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f944 	bl	8003f22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d10e      	bne.n	8003ccc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d107      	bne.n	8003ccc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f06f 0201 	mvn.w	r2, #1
 8003cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f90d 	bl	8003ee6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd6:	2b80      	cmp	r3, #128	; 0x80
 8003cd8:	d10e      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce4:	2b80      	cmp	r3, #128	; 0x80
 8003ce6:	d107      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 faea 	bl	80042cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d02:	2b40      	cmp	r3, #64	; 0x40
 8003d04:	d10e      	bne.n	8003d24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d10:	2b40      	cmp	r3, #64	; 0x40
 8003d12:	d107      	bne.n	8003d24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f909 	bl	8003f36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f003 0320 	and.w	r3, r3, #32
 8003d2e:	2b20      	cmp	r3, #32
 8003d30:	d10e      	bne.n	8003d50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f003 0320 	and.w	r3, r3, #32
 8003d3c:	2b20      	cmp	r3, #32
 8003d3e:	d107      	bne.n	8003d50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f06f 0220 	mvn.w	r2, #32
 8003d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fab4 	bl	80042b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d50:	bf00      	nop
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d62:	2300      	movs	r3, #0
 8003d64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d101      	bne.n	8003d74 <HAL_TIM_ConfigClockSource+0x1c>
 8003d70:	2302      	movs	r3, #2
 8003d72:	e0b4      	b.n	8003ede <HAL_TIM_ConfigClockSource+0x186>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dac:	d03e      	beq.n	8003e2c <HAL_TIM_ConfigClockSource+0xd4>
 8003dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db2:	f200 8087 	bhi.w	8003ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8003db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dba:	f000 8086 	beq.w	8003eca <HAL_TIM_ConfigClockSource+0x172>
 8003dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc2:	d87f      	bhi.n	8003ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc4:	2b70      	cmp	r3, #112	; 0x70
 8003dc6:	d01a      	beq.n	8003dfe <HAL_TIM_ConfigClockSource+0xa6>
 8003dc8:	2b70      	cmp	r3, #112	; 0x70
 8003dca:	d87b      	bhi.n	8003ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8003dcc:	2b60      	cmp	r3, #96	; 0x60
 8003dce:	d050      	beq.n	8003e72 <HAL_TIM_ConfigClockSource+0x11a>
 8003dd0:	2b60      	cmp	r3, #96	; 0x60
 8003dd2:	d877      	bhi.n	8003ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd4:	2b50      	cmp	r3, #80	; 0x50
 8003dd6:	d03c      	beq.n	8003e52 <HAL_TIM_ConfigClockSource+0xfa>
 8003dd8:	2b50      	cmp	r3, #80	; 0x50
 8003dda:	d873      	bhi.n	8003ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ddc:	2b40      	cmp	r3, #64	; 0x40
 8003dde:	d058      	beq.n	8003e92 <HAL_TIM_ConfigClockSource+0x13a>
 8003de0:	2b40      	cmp	r3, #64	; 0x40
 8003de2:	d86f      	bhi.n	8003ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8003de4:	2b30      	cmp	r3, #48	; 0x30
 8003de6:	d064      	beq.n	8003eb2 <HAL_TIM_ConfigClockSource+0x15a>
 8003de8:	2b30      	cmp	r3, #48	; 0x30
 8003dea:	d86b      	bhi.n	8003ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8003dec:	2b20      	cmp	r3, #32
 8003dee:	d060      	beq.n	8003eb2 <HAL_TIM_ConfigClockSource+0x15a>
 8003df0:	2b20      	cmp	r3, #32
 8003df2:	d867      	bhi.n	8003ec4 <HAL_TIM_ConfigClockSource+0x16c>
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d05c      	beq.n	8003eb2 <HAL_TIM_ConfigClockSource+0x15a>
 8003df8:	2b10      	cmp	r3, #16
 8003dfa:	d05a      	beq.n	8003eb2 <HAL_TIM_ConfigClockSource+0x15a>
 8003dfc:	e062      	b.n	8003ec4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6818      	ldr	r0, [r3, #0]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	6899      	ldr	r1, [r3, #8]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f000 f9b7 	bl	8004180 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	609a      	str	r2, [r3, #8]
      break;
 8003e2a:	e04f      	b.n	8003ecc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6818      	ldr	r0, [r3, #0]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	6899      	ldr	r1, [r3, #8]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	f000 f9a0 	bl	8004180 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e4e:	609a      	str	r2, [r3, #8]
      break;
 8003e50:	e03c      	b.n	8003ecc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6818      	ldr	r0, [r3, #0]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	6859      	ldr	r1, [r3, #4]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	f000 f914 	bl	800408c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2150      	movs	r1, #80	; 0x50
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 f96d 	bl	800414a <TIM_ITRx_SetConfig>
      break;
 8003e70:	e02c      	b.n	8003ecc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6818      	ldr	r0, [r3, #0]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	6859      	ldr	r1, [r3, #4]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	f000 f933 	bl	80040ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2160      	movs	r1, #96	; 0x60
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 f95d 	bl	800414a <TIM_ITRx_SetConfig>
      break;
 8003e90:	e01c      	b.n	8003ecc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6818      	ldr	r0, [r3, #0]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	6859      	ldr	r1, [r3, #4]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	f000 f8f4 	bl	800408c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2140      	movs	r1, #64	; 0x40
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 f94d 	bl	800414a <TIM_ITRx_SetConfig>
      break;
 8003eb0:	e00c      	b.n	8003ecc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4619      	mov	r1, r3
 8003ebc:	4610      	mov	r0, r2
 8003ebe:	f000 f944 	bl	800414a <TIM_ITRx_SetConfig>
      break;
 8003ec2:	e003      	b.n	8003ecc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ec8:	e000      	b.n	8003ecc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003eca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b083      	sub	sp, #12
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003eee:	bf00      	nop
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f02:	bf00      	nop
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b083      	sub	sp, #12
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f16:	bf00      	nop
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f36:	b480      	push	{r7}
 8003f38:	b083      	sub	sp, #12
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f3e:	bf00      	nop
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
	...

08003f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a40      	ldr	r2, [pc, #256]	; (8004060 <TIM_Base_SetConfig+0x114>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d013      	beq.n	8003f8c <TIM_Base_SetConfig+0x40>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f6a:	d00f      	beq.n	8003f8c <TIM_Base_SetConfig+0x40>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a3d      	ldr	r2, [pc, #244]	; (8004064 <TIM_Base_SetConfig+0x118>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d00b      	beq.n	8003f8c <TIM_Base_SetConfig+0x40>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a3c      	ldr	r2, [pc, #240]	; (8004068 <TIM_Base_SetConfig+0x11c>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d007      	beq.n	8003f8c <TIM_Base_SetConfig+0x40>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a3b      	ldr	r2, [pc, #236]	; (800406c <TIM_Base_SetConfig+0x120>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d003      	beq.n	8003f8c <TIM_Base_SetConfig+0x40>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a3a      	ldr	r2, [pc, #232]	; (8004070 <TIM_Base_SetConfig+0x124>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d108      	bne.n	8003f9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a2f      	ldr	r2, [pc, #188]	; (8004060 <TIM_Base_SetConfig+0x114>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d02b      	beq.n	8003ffe <TIM_Base_SetConfig+0xb2>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fac:	d027      	beq.n	8003ffe <TIM_Base_SetConfig+0xb2>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a2c      	ldr	r2, [pc, #176]	; (8004064 <TIM_Base_SetConfig+0x118>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d023      	beq.n	8003ffe <TIM_Base_SetConfig+0xb2>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a2b      	ldr	r2, [pc, #172]	; (8004068 <TIM_Base_SetConfig+0x11c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d01f      	beq.n	8003ffe <TIM_Base_SetConfig+0xb2>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a2a      	ldr	r2, [pc, #168]	; (800406c <TIM_Base_SetConfig+0x120>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d01b      	beq.n	8003ffe <TIM_Base_SetConfig+0xb2>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a29      	ldr	r2, [pc, #164]	; (8004070 <TIM_Base_SetConfig+0x124>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d017      	beq.n	8003ffe <TIM_Base_SetConfig+0xb2>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a28      	ldr	r2, [pc, #160]	; (8004074 <TIM_Base_SetConfig+0x128>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d013      	beq.n	8003ffe <TIM_Base_SetConfig+0xb2>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a27      	ldr	r2, [pc, #156]	; (8004078 <TIM_Base_SetConfig+0x12c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d00f      	beq.n	8003ffe <TIM_Base_SetConfig+0xb2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a26      	ldr	r2, [pc, #152]	; (800407c <TIM_Base_SetConfig+0x130>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d00b      	beq.n	8003ffe <TIM_Base_SetConfig+0xb2>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a25      	ldr	r2, [pc, #148]	; (8004080 <TIM_Base_SetConfig+0x134>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d007      	beq.n	8003ffe <TIM_Base_SetConfig+0xb2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a24      	ldr	r2, [pc, #144]	; (8004084 <TIM_Base_SetConfig+0x138>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d003      	beq.n	8003ffe <TIM_Base_SetConfig+0xb2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a23      	ldr	r2, [pc, #140]	; (8004088 <TIM_Base_SetConfig+0x13c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d108      	bne.n	8004010 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004004:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	4313      	orrs	r3, r2
 800400e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a0a      	ldr	r2, [pc, #40]	; (8004060 <TIM_Base_SetConfig+0x114>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d003      	beq.n	8004044 <TIM_Base_SetConfig+0xf8>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a0c      	ldr	r2, [pc, #48]	; (8004070 <TIM_Base_SetConfig+0x124>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d103      	bne.n	800404c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	691a      	ldr	r2, [r3, #16]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	615a      	str	r2, [r3, #20]
}
 8004052:	bf00      	nop
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	40010000 	.word	0x40010000
 8004064:	40000400 	.word	0x40000400
 8004068:	40000800 	.word	0x40000800
 800406c:	40000c00 	.word	0x40000c00
 8004070:	40010400 	.word	0x40010400
 8004074:	40014000 	.word	0x40014000
 8004078:	40014400 	.word	0x40014400
 800407c:	40014800 	.word	0x40014800
 8004080:	40001800 	.word	0x40001800
 8004084:	40001c00 	.word	0x40001c00
 8004088:	40002000 	.word	0x40002000

0800408c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	f023 0201 	bic.w	r2, r3, #1
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	011b      	lsls	r3, r3, #4
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	4313      	orrs	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f023 030a 	bic.w	r3, r3, #10
 80040c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	621a      	str	r2, [r3, #32]
}
 80040de:	bf00      	nop
 80040e0:	371c      	adds	r7, #28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b087      	sub	sp, #28
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	60f8      	str	r0, [r7, #12]
 80040f2:	60b9      	str	r1, [r7, #8]
 80040f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	f023 0210 	bic.w	r2, r3, #16
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004114:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	031b      	lsls	r3, r3, #12
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	4313      	orrs	r3, r2
 800411e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004126:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	011b      	lsls	r3, r3, #4
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	4313      	orrs	r3, r2
 8004130:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	621a      	str	r2, [r3, #32]
}
 800413e:	bf00      	nop
 8004140:	371c      	adds	r7, #28
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800414a:	b480      	push	{r7}
 800414c:	b085      	sub	sp, #20
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
 8004152:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004160:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	4313      	orrs	r3, r2
 8004168:	f043 0307 	orr.w	r3, r3, #7
 800416c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	609a      	str	r2, [r3, #8]
}
 8004174:	bf00      	nop
 8004176:	3714      	adds	r7, #20
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004180:	b480      	push	{r7}
 8004182:	b087      	sub	sp, #28
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
 800418c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800419a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	021a      	lsls	r2, r3, #8
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	431a      	orrs	r2, r3
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	609a      	str	r2, [r3, #8]
}
 80041b4:	bf00      	nop
 80041b6:	371c      	adds	r7, #28
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d101      	bne.n	80041d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041d4:	2302      	movs	r3, #2
 80041d6:	e05a      	b.n	800428e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2202      	movs	r2, #2
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	4313      	orrs	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a21      	ldr	r2, [pc, #132]	; (800429c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d022      	beq.n	8004262 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004224:	d01d      	beq.n	8004262 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a1d      	ldr	r2, [pc, #116]	; (80042a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d018      	beq.n	8004262 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a1b      	ldr	r2, [pc, #108]	; (80042a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d013      	beq.n	8004262 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a1a      	ldr	r2, [pc, #104]	; (80042a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d00e      	beq.n	8004262 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a18      	ldr	r2, [pc, #96]	; (80042ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d009      	beq.n	8004262 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a17      	ldr	r2, [pc, #92]	; (80042b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d004      	beq.n	8004262 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a15      	ldr	r2, [pc, #84]	; (80042b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d10c      	bne.n	800427c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004268:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	4313      	orrs	r3, r2
 8004272:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	40010000 	.word	0x40010000
 80042a0:	40000400 	.word	0x40000400
 80042a4:	40000800 	.word	0x40000800
 80042a8:	40000c00 	.word	0x40000c00
 80042ac:	40010400 	.word	0x40010400
 80042b0:	40014000 	.word	0x40014000
 80042b4:	40001800 	.word	0x40001800

080042b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e03f      	b.n	8004372 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d106      	bne.n	800430c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7fc fcee 	bl	8000ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2224      	movs	r2, #36	; 0x24
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004322:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 fc7b 	bl	8004c20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	691a      	ldr	r2, [r3, #16]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004338:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	695a      	ldr	r2, [r3, #20]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004348:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68da      	ldr	r2, [r3, #12]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004358:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2220      	movs	r2, #32
 800436c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
	...

0800437c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b0ba      	sub	sp, #232	; 0xe8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80043ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043b2:	f003 030f 	and.w	r3, r3, #15
 80043b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80043ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10f      	bne.n	80043e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c6:	f003 0320 	and.w	r3, r3, #32
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d009      	beq.n	80043e2 <HAL_UART_IRQHandler+0x66>
 80043ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043d2:	f003 0320 	and.w	r3, r3, #32
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 fb65 	bl	8004aaa <UART_Receive_IT>
      return;
 80043e0:	e256      	b.n	8004890 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80043e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f000 80de 	beq.w	80045a8 <HAL_UART_IRQHandler+0x22c>
 80043ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d106      	bne.n	8004406 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80043f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 80d1 	beq.w	80045a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00b      	beq.n	800442a <HAL_UART_IRQHandler+0xae>
 8004412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441a:	2b00      	cmp	r3, #0
 800441c:	d005      	beq.n	800442a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	f043 0201 	orr.w	r2, r3, #1
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800442a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800442e:	f003 0304 	and.w	r3, r3, #4
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00b      	beq.n	800444e <HAL_UART_IRQHandler+0xd2>
 8004436:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d005      	beq.n	800444e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	f043 0202 	orr.w	r2, r3, #2
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800444e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00b      	beq.n	8004472 <HAL_UART_IRQHandler+0xf6>
 800445a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	f043 0204 	orr.w	r2, r3, #4
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	2b00      	cmp	r3, #0
 800447c:	d011      	beq.n	80044a2 <HAL_UART_IRQHandler+0x126>
 800447e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004482:	f003 0320 	and.w	r3, r3, #32
 8004486:	2b00      	cmp	r3, #0
 8004488:	d105      	bne.n	8004496 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800448a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b00      	cmp	r3, #0
 8004494:	d005      	beq.n	80044a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	f043 0208 	orr.w	r2, r3, #8
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 81ed 	beq.w	8004886 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044b0:	f003 0320 	and.w	r3, r3, #32
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d008      	beq.n	80044ca <HAL_UART_IRQHandler+0x14e>
 80044b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044bc:	f003 0320 	and.w	r3, r3, #32
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d002      	beq.n	80044ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 faf0 	bl	8004aaa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d4:	2b40      	cmp	r3, #64	; 0x40
 80044d6:	bf0c      	ite	eq
 80044d8:	2301      	moveq	r3, #1
 80044da:	2300      	movne	r3, #0
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	f003 0308 	and.w	r3, r3, #8
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d103      	bne.n	80044f6 <HAL_UART_IRQHandler+0x17a>
 80044ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d04f      	beq.n	8004596 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f9f8 	bl	80048ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004506:	2b40      	cmp	r3, #64	; 0x40
 8004508:	d141      	bne.n	800458e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3314      	adds	r3, #20
 8004510:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004514:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004518:	e853 3f00 	ldrex	r3, [r3]
 800451c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004520:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004528:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	3314      	adds	r3, #20
 8004532:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004536:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800453a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004542:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004546:	e841 2300 	strex	r3, r2, [r1]
 800454a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800454e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1d9      	bne.n	800450a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455a:	2b00      	cmp	r3, #0
 800455c:	d013      	beq.n	8004586 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004562:	4a7d      	ldr	r2, [pc, #500]	; (8004758 <HAL_UART_IRQHandler+0x3dc>)
 8004564:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456a:	4618      	mov	r0, r3
 800456c:	f7fc fe6f 	bl	800124e <HAL_DMA_Abort_IT>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d016      	beq.n	80045a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004580:	4610      	mov	r0, r2
 8004582:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004584:	e00e      	b.n	80045a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f99a 	bl	80048c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800458c:	e00a      	b.n	80045a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f996 	bl	80048c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004594:	e006      	b.n	80045a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f992 	bl	80048c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80045a2:	e170      	b.n	8004886 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045a4:	bf00      	nop
    return;
 80045a6:	e16e      	b.n	8004886 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	f040 814a 	bne.w	8004846 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80045b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045b6:	f003 0310 	and.w	r3, r3, #16
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f000 8143 	beq.w	8004846 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80045c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045c4:	f003 0310 	and.w	r3, r3, #16
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 813c 	beq.w	8004846 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045ce:	2300      	movs	r3, #0
 80045d0:	60bb      	str	r3, [r7, #8]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	60bb      	str	r3, [r7, #8]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	60bb      	str	r3, [r7, #8]
 80045e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ee:	2b40      	cmp	r3, #64	; 0x40
 80045f0:	f040 80b4 	bne.w	800475c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004600:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 8140 	beq.w	800488a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800460e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004612:	429a      	cmp	r2, r3
 8004614:	f080 8139 	bcs.w	800488a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800461e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800462a:	f000 8088 	beq.w	800473e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	330c      	adds	r3, #12
 8004634:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004638:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800463c:	e853 3f00 	ldrex	r3, [r3]
 8004640:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004644:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004648:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800464c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	330c      	adds	r3, #12
 8004656:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800465a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800465e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004662:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004666:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800466a:	e841 2300 	strex	r3, r2, [r1]
 800466e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004672:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1d9      	bne.n	800462e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	3314      	adds	r3, #20
 8004680:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004682:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004684:	e853 3f00 	ldrex	r3, [r3]
 8004688:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800468a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800468c:	f023 0301 	bic.w	r3, r3, #1
 8004690:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	3314      	adds	r3, #20
 800469a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800469e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80046a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80046a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80046aa:	e841 2300 	strex	r3, r2, [r1]
 80046ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80046b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1e1      	bne.n	800467a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3314      	adds	r3, #20
 80046bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046c0:	e853 3f00 	ldrex	r3, [r3]
 80046c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80046c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3314      	adds	r3, #20
 80046d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80046da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80046dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80046e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046e2:	e841 2300 	strex	r3, r2, [r1]
 80046e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80046e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1e3      	bne.n	80046b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2220      	movs	r2, #32
 80046f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	330c      	adds	r3, #12
 8004702:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004706:	e853 3f00 	ldrex	r3, [r3]
 800470a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800470c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800470e:	f023 0310 	bic.w	r3, r3, #16
 8004712:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	330c      	adds	r3, #12
 800471c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004720:	65ba      	str	r2, [r7, #88]	; 0x58
 8004722:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004724:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004726:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004728:	e841 2300 	strex	r3, r2, [r1]
 800472c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800472e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1e3      	bne.n	80046fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004738:	4618      	mov	r0, r3
 800473a:	f7fc fd18 	bl	800116e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004746:	b29b      	uxth	r3, r3
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	b29b      	uxth	r3, r3
 800474c:	4619      	mov	r1, r3
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f8c0 	bl	80048d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004754:	e099      	b.n	800488a <HAL_UART_IRQHandler+0x50e>
 8004756:	bf00      	nop
 8004758:	080049b3 	.word	0x080049b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004764:	b29b      	uxth	r3, r3
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004770:	b29b      	uxth	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 808b 	beq.w	800488e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004778:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 8086 	beq.w	800488e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	330c      	adds	r3, #12
 8004788:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800478c:	e853 3f00 	ldrex	r3, [r3]
 8004790:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004794:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004798:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	330c      	adds	r3, #12
 80047a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80047a6:	647a      	str	r2, [r7, #68]	; 0x44
 80047a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047ae:	e841 2300 	strex	r3, r2, [r1]
 80047b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1e3      	bne.n	8004782 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	3314      	adds	r3, #20
 80047c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	e853 3f00 	ldrex	r3, [r3]
 80047c8:	623b      	str	r3, [r7, #32]
   return(result);
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	f023 0301 	bic.w	r3, r3, #1
 80047d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	3314      	adds	r3, #20
 80047da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80047de:	633a      	str	r2, [r7, #48]	; 0x30
 80047e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047e6:	e841 2300 	strex	r3, r2, [r1]
 80047ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1e3      	bne.n	80047ba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	330c      	adds	r3, #12
 8004806:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	e853 3f00 	ldrex	r3, [r3]
 800480e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f023 0310 	bic.w	r3, r3, #16
 8004816:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	330c      	adds	r3, #12
 8004820:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004824:	61fa      	str	r2, [r7, #28]
 8004826:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004828:	69b9      	ldr	r1, [r7, #24]
 800482a:	69fa      	ldr	r2, [r7, #28]
 800482c:	e841 2300 	strex	r3, r2, [r1]
 8004830:	617b      	str	r3, [r7, #20]
   return(result);
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1e3      	bne.n	8004800 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004838:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800483c:	4619      	mov	r1, r3
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f848 	bl	80048d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004844:	e023      	b.n	800488e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800484a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484e:	2b00      	cmp	r3, #0
 8004850:	d009      	beq.n	8004866 <HAL_UART_IRQHandler+0x4ea>
 8004852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f8bb 	bl	80049da <UART_Transmit_IT>
    return;
 8004864:	e014      	b.n	8004890 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800486a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00e      	beq.n	8004890 <HAL_UART_IRQHandler+0x514>
 8004872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487a:	2b00      	cmp	r3, #0
 800487c:	d008      	beq.n	8004890 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f8fb 	bl	8004a7a <UART_EndTransmit_IT>
    return;
 8004884:	e004      	b.n	8004890 <HAL_UART_IRQHandler+0x514>
    return;
 8004886:	bf00      	nop
 8004888:	e002      	b.n	8004890 <HAL_UART_IRQHandler+0x514>
      return;
 800488a:	bf00      	nop
 800488c:	e000      	b.n	8004890 <HAL_UART_IRQHandler+0x514>
      return;
 800488e:	bf00      	nop
  }
}
 8004890:	37e8      	adds	r7, #232	; 0xe8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop

08004898 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	460b      	mov	r3, r1
 80048de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b095      	sub	sp, #84	; 0x54
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	330c      	adds	r3, #12
 80048fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048fe:	e853 3f00 	ldrex	r3, [r3]
 8004902:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004906:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800490a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	330c      	adds	r3, #12
 8004912:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004914:	643a      	str	r2, [r7, #64]	; 0x40
 8004916:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004918:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800491a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800491c:	e841 2300 	strex	r3, r2, [r1]
 8004920:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1e5      	bne.n	80048f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3314      	adds	r3, #20
 800492e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	e853 3f00 	ldrex	r3, [r3]
 8004936:	61fb      	str	r3, [r7, #28]
   return(result);
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	f023 0301 	bic.w	r3, r3, #1
 800493e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	3314      	adds	r3, #20
 8004946:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004948:	62fa      	str	r2, [r7, #44]	; 0x2c
 800494a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800494e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004950:	e841 2300 	strex	r3, r2, [r1]
 8004954:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1e5      	bne.n	8004928 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004960:	2b01      	cmp	r3, #1
 8004962:	d119      	bne.n	8004998 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	330c      	adds	r3, #12
 800496a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	e853 3f00 	ldrex	r3, [r3]
 8004972:	60bb      	str	r3, [r7, #8]
   return(result);
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	f023 0310 	bic.w	r3, r3, #16
 800497a:	647b      	str	r3, [r7, #68]	; 0x44
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	330c      	adds	r3, #12
 8004982:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004984:	61ba      	str	r2, [r7, #24]
 8004986:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004988:	6979      	ldr	r1, [r7, #20]
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	e841 2300 	strex	r3, r2, [r1]
 8004990:	613b      	str	r3, [r7, #16]
   return(result);
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1e5      	bne.n	8004964 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2220      	movs	r2, #32
 800499c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80049a6:	bf00      	nop
 80049a8:	3754      	adds	r7, #84	; 0x54
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b084      	sub	sp, #16
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f7ff ff77 	bl	80048c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049d2:	bf00      	nop
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049da:	b480      	push	{r7}
 80049dc:	b085      	sub	sp, #20
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b21      	cmp	r3, #33	; 0x21
 80049ec:	d13e      	bne.n	8004a6c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f6:	d114      	bne.n	8004a22 <UART_Transmit_IT+0x48>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d110      	bne.n	8004a22 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a14:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	1c9a      	adds	r2, r3, #2
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	621a      	str	r2, [r3, #32]
 8004a20:	e008      	b.n	8004a34 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	1c59      	adds	r1, r3, #1
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6211      	str	r1, [r2, #32]
 8004a2c:	781a      	ldrb	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	4619      	mov	r1, r3
 8004a42:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d10f      	bne.n	8004a68 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68da      	ldr	r2, [r3, #12]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a56:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a66:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	e000      	b.n	8004a6e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a6c:	2302      	movs	r3, #2
  }
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b082      	sub	sp, #8
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68da      	ldr	r2, [r3, #12]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a90:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2220      	movs	r2, #32
 8004a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7ff fefc 	bl	8004898 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b08c      	sub	sp, #48	; 0x30
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b22      	cmp	r3, #34	; 0x22
 8004abc:	f040 80ab 	bne.w	8004c16 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac8:	d117      	bne.n	8004afa <UART_Receive_IT+0x50>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d113      	bne.n	8004afa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ada:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af2:	1c9a      	adds	r2, r3, #2
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	629a      	str	r2, [r3, #40]	; 0x28
 8004af8:	e026      	b.n	8004b48 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004b00:	2300      	movs	r3, #0
 8004b02:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b0c:	d007      	beq.n	8004b1e <UART_Receive_IT+0x74>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10a      	bne.n	8004b2c <UART_Receive_IT+0x82>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d106      	bne.n	8004b2c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b28:	701a      	strb	r2, [r3, #0]
 8004b2a:	e008      	b.n	8004b3e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	4619      	mov	r1, r3
 8004b56:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d15a      	bne.n	8004c12 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 0220 	bic.w	r2, r2, #32
 8004b6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68da      	ldr	r2, [r3, #12]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	695a      	ldr	r2, [r3, #20]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0201 	bic.w	r2, r2, #1
 8004b8a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d135      	bne.n	8004c08 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	330c      	adds	r3, #12
 8004ba8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	e853 3f00 	ldrex	r3, [r3]
 8004bb0:	613b      	str	r3, [r7, #16]
   return(result);
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f023 0310 	bic.w	r3, r3, #16
 8004bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	330c      	adds	r3, #12
 8004bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc2:	623a      	str	r2, [r7, #32]
 8004bc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc6:	69f9      	ldr	r1, [r7, #28]
 8004bc8:	6a3a      	ldr	r2, [r7, #32]
 8004bca:	e841 2300 	strex	r3, r2, [r1]
 8004bce:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1e5      	bne.n	8004ba2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0310 	and.w	r3, r3, #16
 8004be0:	2b10      	cmp	r3, #16
 8004be2:	d10a      	bne.n	8004bfa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004be4:	2300      	movs	r3, #0
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bfe:	4619      	mov	r1, r3
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f7ff fe67 	bl	80048d4 <HAL_UARTEx_RxEventCallback>
 8004c06:	e002      	b.n	8004c0e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7ff fe4f 	bl	80048ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	e002      	b.n	8004c18 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	e000      	b.n	8004c18 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004c16:	2302      	movs	r3, #2
  }
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3730      	adds	r7, #48	; 0x30
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c24:	b09f      	sub	sp, #124	; 0x7c
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c36:	68d9      	ldr	r1, [r3, #12]
 8004c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	ea40 0301 	orr.w	r3, r0, r1
 8004c40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c44:	689a      	ldr	r2, [r3, #8]
 8004c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	431a      	orrs	r2, r3
 8004c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c64:	f021 010c 	bic.w	r1, r1, #12
 8004c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c6e:	430b      	orrs	r3, r1
 8004c70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c7e:	6999      	ldr	r1, [r3, #24]
 8004c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	ea40 0301 	orr.w	r3, r0, r1
 8004c88:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	4bc5      	ldr	r3, [pc, #788]	; (8004fa4 <UART_SetConfig+0x384>)
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d004      	beq.n	8004c9e <UART_SetConfig+0x7e>
 8004c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	4bc3      	ldr	r3, [pc, #780]	; (8004fa8 <UART_SetConfig+0x388>)
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d103      	bne.n	8004ca6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c9e:	f7fe fe7f 	bl	80039a0 <HAL_RCC_GetPCLK2Freq>
 8004ca2:	6778      	str	r0, [r7, #116]	; 0x74
 8004ca4:	e002      	b.n	8004cac <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ca6:	f7fe fe67 	bl	8003978 <HAL_RCC_GetPCLK1Freq>
 8004caa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cb4:	f040 80b6 	bne.w	8004e24 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004cb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cba:	461c      	mov	r4, r3
 8004cbc:	f04f 0500 	mov.w	r5, #0
 8004cc0:	4622      	mov	r2, r4
 8004cc2:	462b      	mov	r3, r5
 8004cc4:	1891      	adds	r1, r2, r2
 8004cc6:	6439      	str	r1, [r7, #64]	; 0x40
 8004cc8:	415b      	adcs	r3, r3
 8004cca:	647b      	str	r3, [r7, #68]	; 0x44
 8004ccc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004cd0:	1912      	adds	r2, r2, r4
 8004cd2:	eb45 0303 	adc.w	r3, r5, r3
 8004cd6:	f04f 0000 	mov.w	r0, #0
 8004cda:	f04f 0100 	mov.w	r1, #0
 8004cde:	00d9      	lsls	r1, r3, #3
 8004ce0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ce4:	00d0      	lsls	r0, r2, #3
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	460b      	mov	r3, r1
 8004cea:	1911      	adds	r1, r2, r4
 8004cec:	6639      	str	r1, [r7, #96]	; 0x60
 8004cee:	416b      	adcs	r3, r5
 8004cf0:	667b      	str	r3, [r7, #100]	; 0x64
 8004cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	f04f 0300 	mov.w	r3, #0
 8004cfc:	1891      	adds	r1, r2, r2
 8004cfe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d00:	415b      	adcs	r3, r3
 8004d02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d08:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004d0c:	f7fb fa5c 	bl	80001c8 <__aeabi_uldivmod>
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	4ba5      	ldr	r3, [pc, #660]	; (8004fac <UART_SetConfig+0x38c>)
 8004d16:	fba3 2302 	umull	r2, r3, r3, r2
 8004d1a:	095b      	lsrs	r3, r3, #5
 8004d1c:	011e      	lsls	r6, r3, #4
 8004d1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d20:	461c      	mov	r4, r3
 8004d22:	f04f 0500 	mov.w	r5, #0
 8004d26:	4622      	mov	r2, r4
 8004d28:	462b      	mov	r3, r5
 8004d2a:	1891      	adds	r1, r2, r2
 8004d2c:	6339      	str	r1, [r7, #48]	; 0x30
 8004d2e:	415b      	adcs	r3, r3
 8004d30:	637b      	str	r3, [r7, #52]	; 0x34
 8004d32:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004d36:	1912      	adds	r2, r2, r4
 8004d38:	eb45 0303 	adc.w	r3, r5, r3
 8004d3c:	f04f 0000 	mov.w	r0, #0
 8004d40:	f04f 0100 	mov.w	r1, #0
 8004d44:	00d9      	lsls	r1, r3, #3
 8004d46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d4a:	00d0      	lsls	r0, r2, #3
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	1911      	adds	r1, r2, r4
 8004d52:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d54:	416b      	adcs	r3, r5
 8004d56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	f04f 0300 	mov.w	r3, #0
 8004d62:	1891      	adds	r1, r2, r2
 8004d64:	62b9      	str	r1, [r7, #40]	; 0x28
 8004d66:	415b      	adcs	r3, r3
 8004d68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d6e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004d72:	f7fb fa29 	bl	80001c8 <__aeabi_uldivmod>
 8004d76:	4602      	mov	r2, r0
 8004d78:	460b      	mov	r3, r1
 8004d7a:	4b8c      	ldr	r3, [pc, #560]	; (8004fac <UART_SetConfig+0x38c>)
 8004d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d80:	095b      	lsrs	r3, r3, #5
 8004d82:	2164      	movs	r1, #100	; 0x64
 8004d84:	fb01 f303 	mul.w	r3, r1, r3
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	3332      	adds	r3, #50	; 0x32
 8004d8e:	4a87      	ldr	r2, [pc, #540]	; (8004fac <UART_SetConfig+0x38c>)
 8004d90:	fba2 2303 	umull	r2, r3, r2, r3
 8004d94:	095b      	lsrs	r3, r3, #5
 8004d96:	005b      	lsls	r3, r3, #1
 8004d98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d9c:	441e      	add	r6, r3
 8004d9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004da0:	4618      	mov	r0, r3
 8004da2:	f04f 0100 	mov.w	r1, #0
 8004da6:	4602      	mov	r2, r0
 8004da8:	460b      	mov	r3, r1
 8004daa:	1894      	adds	r4, r2, r2
 8004dac:	623c      	str	r4, [r7, #32]
 8004dae:	415b      	adcs	r3, r3
 8004db0:	627b      	str	r3, [r7, #36]	; 0x24
 8004db2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004db6:	1812      	adds	r2, r2, r0
 8004db8:	eb41 0303 	adc.w	r3, r1, r3
 8004dbc:	f04f 0400 	mov.w	r4, #0
 8004dc0:	f04f 0500 	mov.w	r5, #0
 8004dc4:	00dd      	lsls	r5, r3, #3
 8004dc6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004dca:	00d4      	lsls	r4, r2, #3
 8004dcc:	4622      	mov	r2, r4
 8004dce:	462b      	mov	r3, r5
 8004dd0:	1814      	adds	r4, r2, r0
 8004dd2:	653c      	str	r4, [r7, #80]	; 0x50
 8004dd4:	414b      	adcs	r3, r1
 8004dd6:	657b      	str	r3, [r7, #84]	; 0x54
 8004dd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	461a      	mov	r2, r3
 8004dde:	f04f 0300 	mov.w	r3, #0
 8004de2:	1891      	adds	r1, r2, r2
 8004de4:	61b9      	str	r1, [r7, #24]
 8004de6:	415b      	adcs	r3, r3
 8004de8:	61fb      	str	r3, [r7, #28]
 8004dea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004df2:	f7fb f9e9 	bl	80001c8 <__aeabi_uldivmod>
 8004df6:	4602      	mov	r2, r0
 8004df8:	460b      	mov	r3, r1
 8004dfa:	4b6c      	ldr	r3, [pc, #432]	; (8004fac <UART_SetConfig+0x38c>)
 8004dfc:	fba3 1302 	umull	r1, r3, r3, r2
 8004e00:	095b      	lsrs	r3, r3, #5
 8004e02:	2164      	movs	r1, #100	; 0x64
 8004e04:	fb01 f303 	mul.w	r3, r1, r3
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	3332      	adds	r3, #50	; 0x32
 8004e0e:	4a67      	ldr	r2, [pc, #412]	; (8004fac <UART_SetConfig+0x38c>)
 8004e10:	fba2 2303 	umull	r2, r3, r2, r3
 8004e14:	095b      	lsrs	r3, r3, #5
 8004e16:	f003 0207 	and.w	r2, r3, #7
 8004e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4432      	add	r2, r6
 8004e20:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e22:	e0b9      	b.n	8004f98 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e26:	461c      	mov	r4, r3
 8004e28:	f04f 0500 	mov.w	r5, #0
 8004e2c:	4622      	mov	r2, r4
 8004e2e:	462b      	mov	r3, r5
 8004e30:	1891      	adds	r1, r2, r2
 8004e32:	6139      	str	r1, [r7, #16]
 8004e34:	415b      	adcs	r3, r3
 8004e36:	617b      	str	r3, [r7, #20]
 8004e38:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004e3c:	1912      	adds	r2, r2, r4
 8004e3e:	eb45 0303 	adc.w	r3, r5, r3
 8004e42:	f04f 0000 	mov.w	r0, #0
 8004e46:	f04f 0100 	mov.w	r1, #0
 8004e4a:	00d9      	lsls	r1, r3, #3
 8004e4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e50:	00d0      	lsls	r0, r2, #3
 8004e52:	4602      	mov	r2, r0
 8004e54:	460b      	mov	r3, r1
 8004e56:	eb12 0804 	adds.w	r8, r2, r4
 8004e5a:	eb43 0905 	adc.w	r9, r3, r5
 8004e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f04f 0100 	mov.w	r1, #0
 8004e68:	f04f 0200 	mov.w	r2, #0
 8004e6c:	f04f 0300 	mov.w	r3, #0
 8004e70:	008b      	lsls	r3, r1, #2
 8004e72:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e76:	0082      	lsls	r2, r0, #2
 8004e78:	4640      	mov	r0, r8
 8004e7a:	4649      	mov	r1, r9
 8004e7c:	f7fb f9a4 	bl	80001c8 <__aeabi_uldivmod>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4b49      	ldr	r3, [pc, #292]	; (8004fac <UART_SetConfig+0x38c>)
 8004e86:	fba3 2302 	umull	r2, r3, r3, r2
 8004e8a:	095b      	lsrs	r3, r3, #5
 8004e8c:	011e      	lsls	r6, r3, #4
 8004e8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e90:	4618      	mov	r0, r3
 8004e92:	f04f 0100 	mov.w	r1, #0
 8004e96:	4602      	mov	r2, r0
 8004e98:	460b      	mov	r3, r1
 8004e9a:	1894      	adds	r4, r2, r2
 8004e9c:	60bc      	str	r4, [r7, #8]
 8004e9e:	415b      	adcs	r3, r3
 8004ea0:	60fb      	str	r3, [r7, #12]
 8004ea2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ea6:	1812      	adds	r2, r2, r0
 8004ea8:	eb41 0303 	adc.w	r3, r1, r3
 8004eac:	f04f 0400 	mov.w	r4, #0
 8004eb0:	f04f 0500 	mov.w	r5, #0
 8004eb4:	00dd      	lsls	r5, r3, #3
 8004eb6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004eba:	00d4      	lsls	r4, r2, #3
 8004ebc:	4622      	mov	r2, r4
 8004ebe:	462b      	mov	r3, r5
 8004ec0:	1814      	adds	r4, r2, r0
 8004ec2:	64bc      	str	r4, [r7, #72]	; 0x48
 8004ec4:	414b      	adcs	r3, r1
 8004ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f04f 0100 	mov.w	r1, #0
 8004ed2:	f04f 0200 	mov.w	r2, #0
 8004ed6:	f04f 0300 	mov.w	r3, #0
 8004eda:	008b      	lsls	r3, r1, #2
 8004edc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ee0:	0082      	lsls	r2, r0, #2
 8004ee2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004ee6:	f7fb f96f 	bl	80001c8 <__aeabi_uldivmod>
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	4b2f      	ldr	r3, [pc, #188]	; (8004fac <UART_SetConfig+0x38c>)
 8004ef0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ef4:	095b      	lsrs	r3, r3, #5
 8004ef6:	2164      	movs	r1, #100	; 0x64
 8004ef8:	fb01 f303 	mul.w	r3, r1, r3
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	011b      	lsls	r3, r3, #4
 8004f00:	3332      	adds	r3, #50	; 0x32
 8004f02:	4a2a      	ldr	r2, [pc, #168]	; (8004fac <UART_SetConfig+0x38c>)
 8004f04:	fba2 2303 	umull	r2, r3, r2, r3
 8004f08:	095b      	lsrs	r3, r3, #5
 8004f0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f0e:	441e      	add	r6, r3
 8004f10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f12:	4618      	mov	r0, r3
 8004f14:	f04f 0100 	mov.w	r1, #0
 8004f18:	4602      	mov	r2, r0
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	1894      	adds	r4, r2, r2
 8004f1e:	603c      	str	r4, [r7, #0]
 8004f20:	415b      	adcs	r3, r3
 8004f22:	607b      	str	r3, [r7, #4]
 8004f24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f28:	1812      	adds	r2, r2, r0
 8004f2a:	eb41 0303 	adc.w	r3, r1, r3
 8004f2e:	f04f 0400 	mov.w	r4, #0
 8004f32:	f04f 0500 	mov.w	r5, #0
 8004f36:	00dd      	lsls	r5, r3, #3
 8004f38:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f3c:	00d4      	lsls	r4, r2, #3
 8004f3e:	4622      	mov	r2, r4
 8004f40:	462b      	mov	r3, r5
 8004f42:	eb12 0a00 	adds.w	sl, r2, r0
 8004f46:	eb43 0b01 	adc.w	fp, r3, r1
 8004f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f04f 0100 	mov.w	r1, #0
 8004f54:	f04f 0200 	mov.w	r2, #0
 8004f58:	f04f 0300 	mov.w	r3, #0
 8004f5c:	008b      	lsls	r3, r1, #2
 8004f5e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f62:	0082      	lsls	r2, r0, #2
 8004f64:	4650      	mov	r0, sl
 8004f66:	4659      	mov	r1, fp
 8004f68:	f7fb f92e 	bl	80001c8 <__aeabi_uldivmod>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	4b0e      	ldr	r3, [pc, #56]	; (8004fac <UART_SetConfig+0x38c>)
 8004f72:	fba3 1302 	umull	r1, r3, r3, r2
 8004f76:	095b      	lsrs	r3, r3, #5
 8004f78:	2164      	movs	r1, #100	; 0x64
 8004f7a:	fb01 f303 	mul.w	r3, r1, r3
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	3332      	adds	r3, #50	; 0x32
 8004f84:	4a09      	ldr	r2, [pc, #36]	; (8004fac <UART_SetConfig+0x38c>)
 8004f86:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8a:	095b      	lsrs	r3, r3, #5
 8004f8c:	f003 020f 	and.w	r2, r3, #15
 8004f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4432      	add	r2, r6
 8004f96:	609a      	str	r2, [r3, #8]
}
 8004f98:	bf00      	nop
 8004f9a:	377c      	adds	r7, #124	; 0x7c
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fa2:	bf00      	nop
 8004fa4:	40011000 	.word	0x40011000
 8004fa8:	40011400 	.word	0x40011400
 8004fac:	51eb851f 	.word	0x51eb851f

08004fb0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fb0:	b084      	sub	sp, #16
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b084      	sub	sp, #16
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	f107 001c 	add.w	r0, r7, #28
 8004fbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d122      	bne.n	800500e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004fdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d105      	bne.n	8005002 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f9a0 	bl	8005348 <USB_CoreReset>
 8005008:	4603      	mov	r3, r0
 800500a:	73fb      	strb	r3, [r7, #15]
 800500c:	e01a      	b.n	8005044 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f994 	bl	8005348 <USB_CoreReset>
 8005020:	4603      	mov	r3, r0
 8005022:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005026:	2b00      	cmp	r3, #0
 8005028:	d106      	bne.n	8005038 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	639a      	str	r2, [r3, #56]	; 0x38
 8005036:	e005      	b.n	8005044 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005046:	2b01      	cmp	r3, #1
 8005048:	d10b      	bne.n	8005062 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f043 0206 	orr.w	r2, r3, #6
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f043 0220 	orr.w	r2, r3, #32
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005062:	7bfb      	ldrb	r3, [r7, #15]
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800506e:	b004      	add	sp, #16
 8005070:	4770      	bx	lr

08005072 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005072:	b480      	push	{r7}
 8005074:	b083      	sub	sp, #12
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f043 0201 	orr.w	r2, r3, #1
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f023 0201 	bic.w	r2, r3, #1
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b084      	sub	sp, #16
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
 80050be:	460b      	mov	r3, r1
 80050c0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80050c2:	2300      	movs	r3, #0
 80050c4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050d2:	78fb      	ldrb	r3, [r7, #3]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d115      	bne.n	8005104 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050e4:	2001      	movs	r0, #1
 80050e6:	f7fb ff0d 	bl	8000f04 <HAL_Delay>
      ms++;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	3301      	adds	r3, #1
 80050ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 f91a 	bl	800532a <USB_GetMode>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d01e      	beq.n	800513a <USB_SetCurrentMode+0x84>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2b31      	cmp	r3, #49	; 0x31
 8005100:	d9f0      	bls.n	80050e4 <USB_SetCurrentMode+0x2e>
 8005102:	e01a      	b.n	800513a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005104:	78fb      	ldrb	r3, [r7, #3]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d115      	bne.n	8005136 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005116:	2001      	movs	r0, #1
 8005118:	f7fb fef4 	bl	8000f04 <HAL_Delay>
      ms++;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	3301      	adds	r3, #1
 8005120:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f901 	bl	800532a <USB_GetMode>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d005      	beq.n	800513a <USB_SetCurrentMode+0x84>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2b31      	cmp	r3, #49	; 0x31
 8005132:	d9f0      	bls.n	8005116 <USB_SetCurrentMode+0x60>
 8005134:	e001      	b.n	800513a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e005      	b.n	8005146 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2b32      	cmp	r3, #50	; 0x32
 800513e:	d101      	bne.n	8005144 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e000      	b.n	8005146 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
	...

08005150 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800515a:	2300      	movs	r3, #0
 800515c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	019b      	lsls	r3, r3, #6
 8005162:	f043 0220 	orr.w	r2, r3, #32
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	3301      	adds	r3, #1
 800516e:	60fb      	str	r3, [r7, #12]
 8005170:	4a08      	ldr	r2, [pc, #32]	; (8005194 <USB_FlushTxFifo+0x44>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d901      	bls.n	800517a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e006      	b.n	8005188 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	f003 0320 	and.w	r3, r3, #32
 8005182:	2b20      	cmp	r3, #32
 8005184:	d0f1      	beq.n	800516a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3714      	adds	r7, #20
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr
 8005194:	00030d40 	.word	0x00030d40

08005198 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051a0:	2300      	movs	r3, #0
 80051a2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2210      	movs	r2, #16
 80051a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	3301      	adds	r3, #1
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	4a08      	ldr	r2, [pc, #32]	; (80051d4 <USB_FlushRxFifo+0x3c>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d901      	bls.n	80051ba <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e006      	b.n	80051c8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	f003 0310 	and.w	r3, r3, #16
 80051c2:	2b10      	cmp	r3, #16
 80051c4:	d0f1      	beq.n	80051aa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3714      	adds	r7, #20
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	00030d40 	.word	0x00030d40

080051d8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80051d8:	b480      	push	{r7}
 80051da:	b089      	sub	sp, #36	; 0x24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	4611      	mov	r1, r2
 80051e4:	461a      	mov	r2, r3
 80051e6:	460b      	mov	r3, r1
 80051e8:	71fb      	strb	r3, [r7, #7]
 80051ea:	4613      	mov	r3, r2
 80051ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80051f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d123      	bne.n	8005246 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80051fe:	88bb      	ldrh	r3, [r7, #4]
 8005200:	3303      	adds	r3, #3
 8005202:	089b      	lsrs	r3, r3, #2
 8005204:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005206:	2300      	movs	r3, #0
 8005208:	61bb      	str	r3, [r7, #24]
 800520a:	e018      	b.n	800523e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800520c:	79fb      	ldrb	r3, [r7, #7]
 800520e:	031a      	lsls	r2, r3, #12
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	4413      	add	r3, r2
 8005214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005218:	461a      	mov	r2, r3
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	3301      	adds	r3, #1
 8005224:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	3301      	adds	r3, #1
 800522a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	3301      	adds	r3, #1
 8005230:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	3301      	adds	r3, #1
 8005236:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	3301      	adds	r3, #1
 800523c:	61bb      	str	r3, [r7, #24]
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	429a      	cmp	r2, r3
 8005244:	d3e2      	bcc.n	800520c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3724      	adds	r7, #36	; 0x24
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005254:	b480      	push	{r7}
 8005256:	b08b      	sub	sp, #44	; 0x2c
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	4613      	mov	r3, r2
 8005260:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800526a:	88fb      	ldrh	r3, [r7, #6]
 800526c:	089b      	lsrs	r3, r3, #2
 800526e:	b29b      	uxth	r3, r3
 8005270:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005272:	88fb      	ldrh	r3, [r7, #6]
 8005274:	f003 0303 	and.w	r3, r3, #3
 8005278:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800527a:	2300      	movs	r3, #0
 800527c:	623b      	str	r3, [r7, #32]
 800527e:	e014      	b.n	80052aa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	601a      	str	r2, [r3, #0]
    pDest++;
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	3301      	adds	r3, #1
 8005290:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	3301      	adds	r3, #1
 8005296:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529a:	3301      	adds	r3, #1
 800529c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	3301      	adds	r3, #1
 80052a2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80052a4:	6a3b      	ldr	r3, [r7, #32]
 80052a6:	3301      	adds	r3, #1
 80052a8:	623b      	str	r3, [r7, #32]
 80052aa:	6a3a      	ldr	r2, [r7, #32]
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d3e6      	bcc.n	8005280 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80052b2:	8bfb      	ldrh	r3, [r7, #30]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d01e      	beq.n	80052f6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80052b8:	2300      	movs	r3, #0
 80052ba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052c2:	461a      	mov	r2, r3
 80052c4:	f107 0310 	add.w	r3, r7, #16
 80052c8:	6812      	ldr	r2, [r2, #0]
 80052ca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	6a3b      	ldr	r3, [r7, #32]
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	fa22 f303 	lsr.w	r3, r2, r3
 80052d8:	b2da      	uxtb	r2, r3
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	701a      	strb	r2, [r3, #0]
      i++;
 80052de:	6a3b      	ldr	r3, [r7, #32]
 80052e0:	3301      	adds	r3, #1
 80052e2:	623b      	str	r3, [r7, #32]
      pDest++;
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	3301      	adds	r3, #1
 80052e8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80052ea:	8bfb      	ldrh	r3, [r7, #30]
 80052ec:	3b01      	subs	r3, #1
 80052ee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80052f0:	8bfb      	ldrh	r3, [r7, #30]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1ea      	bne.n	80052cc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	372c      	adds	r7, #44	; 0x2c
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	4013      	ands	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800531c:	68fb      	ldr	r3, [r7, #12]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800532a:	b480      	push	{r7}
 800532c:	b083      	sub	sp, #12
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	f003 0301 	and.w	r3, r3, #1
}
 800533a:	4618      	mov	r0, r3
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
	...

08005348 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	3301      	adds	r3, #1
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	4a13      	ldr	r2, [pc, #76]	; (80053a8 <USB_CoreReset+0x60>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d901      	bls.n	8005364 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e01a      	b.n	800539a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	2b00      	cmp	r3, #0
 800536a:	daf3      	bge.n	8005354 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800536c:	2300      	movs	r3, #0
 800536e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	f043 0201 	orr.w	r2, r3, #1
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	3301      	adds	r3, #1
 8005380:	60fb      	str	r3, [r7, #12]
 8005382:	4a09      	ldr	r2, [pc, #36]	; (80053a8 <USB_CoreReset+0x60>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d901      	bls.n	800538c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e006      	b.n	800539a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	2b01      	cmp	r3, #1
 8005396:	d0f1      	beq.n	800537c <USB_CoreReset+0x34>

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	00030d40 	.word	0x00030d40

080053ac <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053ac:	b084      	sub	sp, #16
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b084      	sub	sp, #16
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
 80053b6:	f107 001c 	add.w	r0, r7, #28
 80053ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053c8:	461a      	mov	r2, r3
 80053ca:	2300      	movs	r3, #0
 80053cc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053de:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ea:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d018      	beq.n	8005430 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80053fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005400:	2b01      	cmp	r3, #1
 8005402:	d10a      	bne.n	800541a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005412:	f043 0304 	orr.w	r3, r3, #4
 8005416:	6013      	str	r3, [r2, #0]
 8005418:	e014      	b.n	8005444 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005428:	f023 0304 	bic.w	r3, r3, #4
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	e009      	b.n	8005444 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800543e:	f023 0304 	bic.w	r3, r3, #4
 8005442:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005444:	2110      	movs	r1, #16
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f7ff fe82 	bl	8005150 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7ff fea3 	bl	8005198 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005452:	2300      	movs	r3, #0
 8005454:	60fb      	str	r3, [r7, #12]
 8005456:	e015      	b.n	8005484 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	4413      	add	r3, r2
 8005460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005464:	461a      	mov	r2, r3
 8005466:	f04f 33ff 	mov.w	r3, #4294967295
 800546a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	4413      	add	r3, r2
 8005474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005478:	461a      	mov	r2, r3
 800547a:	2300      	movs	r3, #0
 800547c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	3301      	adds	r3, #1
 8005482:	60fb      	str	r3, [r7, #12]
 8005484:	6a3b      	ldr	r3, [r7, #32]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	429a      	cmp	r2, r3
 800548a:	d3e5      	bcc.n	8005458 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f04f 32ff 	mov.w	r2, #4294967295
 8005498:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00b      	beq.n	80054be <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054ac:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a13      	ldr	r2, [pc, #76]	; (8005500 <USB_HostInit+0x154>)
 80054b2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a13      	ldr	r2, [pc, #76]	; (8005504 <USB_HostInit+0x158>)
 80054b8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80054bc:	e009      	b.n	80054d2 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2280      	movs	r2, #128	; 0x80
 80054c2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a10      	ldr	r2, [pc, #64]	; (8005508 <USB_HostInit+0x15c>)
 80054c8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a0f      	ldr	r2, [pc, #60]	; (800550c <USB_HostInit+0x160>)
 80054ce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80054d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d105      	bne.n	80054e4 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	f043 0210 	orr.w	r2, r3, #16
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	699a      	ldr	r2, [r3, #24]
 80054e8:	4b09      	ldr	r3, [pc, #36]	; (8005510 <USB_HostInit+0x164>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054fc:	b004      	add	sp, #16
 80054fe:	4770      	bx	lr
 8005500:	01000200 	.word	0x01000200
 8005504:	00e00300 	.word	0x00e00300
 8005508:	00600080 	.word	0x00600080
 800550c:	004000e0 	.word	0x004000e0
 8005510:	a3200008 	.word	0xa3200008

08005514 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	460b      	mov	r3, r1
 800551e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005532:	f023 0303 	bic.w	r3, r3, #3
 8005536:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	78fb      	ldrb	r3, [r7, #3]
 8005542:	f003 0303 	and.w	r3, r3, #3
 8005546:	68f9      	ldr	r1, [r7, #12]
 8005548:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800554c:	4313      	orrs	r3, r2
 800554e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005550:	78fb      	ldrb	r3, [r7, #3]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d107      	bne.n	8005566 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800555c:	461a      	mov	r2, r3
 800555e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005562:	6053      	str	r3, [r2, #4]
 8005564:	e009      	b.n	800557a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005566:	78fb      	ldrb	r3, [r7, #3]
 8005568:	2b02      	cmp	r3, #2
 800556a:	d106      	bne.n	800557a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005572:	461a      	mov	r2, r3
 8005574:	f241 7370 	movw	r3, #6000	; 0x1770
 8005578:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005594:	2300      	movs	r3, #0
 8005596:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80055a8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80055b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055b6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80055b8:	2064      	movs	r0, #100	; 0x64
 80055ba:	f7fb fca3 	bl	8000f04 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80055c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055ca:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80055cc:	200a      	movs	r0, #10
 80055ce:	f7fb fc99 	bl	8000f04 <HAL_Delay>

  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	460b      	mov	r3, r1
 80055e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80055ec:	2300      	movs	r3, #0
 80055ee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005600:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d109      	bne.n	8005620 <USB_DriveVbus+0x44>
 800560c:	78fb      	ldrb	r3, [r7, #3]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d106      	bne.n	8005620 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800561a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800561e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800562a:	d109      	bne.n	8005640 <USB_DriveVbus+0x64>
 800562c:	78fb      	ldrb	r3, [r7, #3]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d106      	bne.n	8005640 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800563a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800563e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800564e:	b480      	push	{r7}
 8005650:	b085      	sub	sp, #20
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800565a:	2300      	movs	r3, #0
 800565c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	0c5b      	lsrs	r3, r3, #17
 800566c:	f003 0303 	and.w	r3, r3, #3
}
 8005670:	4618      	mov	r0, r3
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	b29b      	uxth	r3, r3
}
 8005692:	4618      	mov	r0, r3
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
	...

080056a0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b088      	sub	sp, #32
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	4608      	mov	r0, r1
 80056aa:	4611      	mov	r1, r2
 80056ac:	461a      	mov	r2, r3
 80056ae:	4603      	mov	r3, r0
 80056b0:	70fb      	strb	r3, [r7, #3]
 80056b2:	460b      	mov	r3, r1
 80056b4:	70bb      	strb	r3, [r7, #2]
 80056b6:	4613      	mov	r3, r2
 80056b8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80056c2:	78fb      	ldrb	r3, [r7, #3]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ce:	461a      	mov	r2, r3
 80056d0:	f04f 33ff 	mov.w	r3, #4294967295
 80056d4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80056d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80056da:	2b03      	cmp	r3, #3
 80056dc:	d87e      	bhi.n	80057dc <USB_HC_Init+0x13c>
 80056de:	a201      	add	r2, pc, #4	; (adr r2, 80056e4 <USB_HC_Init+0x44>)
 80056e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e4:	080056f5 	.word	0x080056f5
 80056e8:	0800579f 	.word	0x0800579f
 80056ec:	080056f5 	.word	0x080056f5
 80056f0:	08005761 	.word	0x08005761
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80056f4:	78fb      	ldrb	r3, [r7, #3]
 80056f6:	015a      	lsls	r2, r3, #5
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	4413      	add	r3, r2
 80056fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005700:	461a      	mov	r2, r3
 8005702:	f240 439d 	movw	r3, #1181	; 0x49d
 8005706:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005708:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800570c:	2b00      	cmp	r3, #0
 800570e:	da10      	bge.n	8005732 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005710:	78fb      	ldrb	r3, [r7, #3]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	4413      	add	r3, r2
 8005718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	78fa      	ldrb	r2, [r7, #3]
 8005720:	0151      	lsls	r1, r2, #5
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	440a      	add	r2, r1
 8005726:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800572a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800572e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005730:	e057      	b.n	80057e2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573a:	2b00      	cmp	r3, #0
 800573c:	d051      	beq.n	80057e2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800573e:	78fb      	ldrb	r3, [r7, #3]
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	4413      	add	r3, r2
 8005746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	78fa      	ldrb	r2, [r7, #3]
 800574e:	0151      	lsls	r1, r2, #5
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	440a      	add	r2, r1
 8005754:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005758:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800575c:	60d3      	str	r3, [r2, #12]
      break;
 800575e:	e040      	b.n	80057e2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005760:	78fb      	ldrb	r3, [r7, #3]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	4413      	add	r3, r2
 8005768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800576c:	461a      	mov	r2, r3
 800576e:	f240 639d 	movw	r3, #1693	; 0x69d
 8005772:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005774:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005778:	2b00      	cmp	r3, #0
 800577a:	da34      	bge.n	80057e6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800577c:	78fb      	ldrb	r3, [r7, #3]
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	4413      	add	r3, r2
 8005784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	78fa      	ldrb	r2, [r7, #3]
 800578c:	0151      	lsls	r1, r2, #5
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	440a      	add	r2, r1
 8005792:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800579a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800579c:	e023      	b.n	80057e6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800579e:	78fb      	ldrb	r3, [r7, #3]
 80057a0:	015a      	lsls	r2, r3, #5
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	4413      	add	r3, r2
 80057a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057aa:	461a      	mov	r2, r3
 80057ac:	f240 2325 	movw	r3, #549	; 0x225
 80057b0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80057b2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	da17      	bge.n	80057ea <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80057ba:	78fb      	ldrb	r3, [r7, #3]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	78fa      	ldrb	r2, [r7, #3]
 80057ca:	0151      	lsls	r1, r2, #5
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	440a      	add	r2, r1
 80057d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057d4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80057d8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80057da:	e006      	b.n	80057ea <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	77fb      	strb	r3, [r7, #31]
      break;
 80057e0:	e004      	b.n	80057ec <USB_HC_Init+0x14c>
      break;
 80057e2:	bf00      	nop
 80057e4:	e002      	b.n	80057ec <USB_HC_Init+0x14c>
      break;
 80057e6:	bf00      	nop
 80057e8:	e000      	b.n	80057ec <USB_HC_Init+0x14c>
      break;
 80057ea:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057f2:	699a      	ldr	r2, [r3, #24]
 80057f4:	78fb      	ldrb	r3, [r7, #3]
 80057f6:	f003 030f 	and.w	r3, r3, #15
 80057fa:	2101      	movs	r1, #1
 80057fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005800:	6939      	ldr	r1, [r7, #16]
 8005802:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005806:	4313      	orrs	r3, r2
 8005808:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005816:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800581a:	2b00      	cmp	r3, #0
 800581c:	da03      	bge.n	8005826 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800581e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005822:	61bb      	str	r3, [r7, #24]
 8005824:	e001      	b.n	800582a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005826:	2300      	movs	r3, #0
 8005828:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f7ff ff0f 	bl	800564e <USB_GetHostSpeed>
 8005830:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005832:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005836:	2b02      	cmp	r3, #2
 8005838:	d106      	bne.n	8005848 <USB_HC_Init+0x1a8>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2b02      	cmp	r3, #2
 800583e:	d003      	beq.n	8005848 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005840:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005844:	617b      	str	r3, [r7, #20]
 8005846:	e001      	b.n	800584c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005848:	2300      	movs	r3, #0
 800584a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800584c:	787b      	ldrb	r3, [r7, #1]
 800584e:	059b      	lsls	r3, r3, #22
 8005850:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005854:	78bb      	ldrb	r3, [r7, #2]
 8005856:	02db      	lsls	r3, r3, #11
 8005858:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800585c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800585e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005862:	049b      	lsls	r3, r3, #18
 8005864:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005868:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800586a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800586c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005870:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005876:	78fb      	ldrb	r3, [r7, #3]
 8005878:	0159      	lsls	r1, r3, #5
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	440b      	add	r3, r1
 800587e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005882:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005888:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800588a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800588e:	2b03      	cmp	r3, #3
 8005890:	d10f      	bne.n	80058b2 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005892:	78fb      	ldrb	r3, [r7, #3]
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	4413      	add	r3, r2
 800589a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	78fa      	ldrb	r2, [r7, #3]
 80058a2:	0151      	lsls	r1, r2, #5
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	440a      	add	r2, r1
 80058a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058b0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80058b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3720      	adds	r7, #32
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b08c      	sub	sp, #48	; 0x30
 80058c0:	af02      	add	r7, sp, #8
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	4613      	mov	r3, r2
 80058c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	785b      	ldrb	r3, [r3, #1]
 80058d2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80058d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058d8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d02d      	beq.n	8005942 <USB_HC_StartXfer+0x86>
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	791b      	ldrb	r3, [r3, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d129      	bne.n	8005942 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80058ee:	79fb      	ldrb	r3, [r7, #7]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d117      	bne.n	8005924 <USB_HC_StartXfer+0x68>
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	79db      	ldrb	r3, [r3, #7]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d003      	beq.n	8005904 <USB_HC_StartXfer+0x48>
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	79db      	ldrb	r3, [r3, #7]
 8005900:	2b02      	cmp	r3, #2
 8005902:	d10f      	bne.n	8005924 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	015a      	lsls	r2, r3, #5
 8005908:	6a3b      	ldr	r3, [r7, #32]
 800590a:	4413      	add	r3, r2
 800590c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	69fa      	ldr	r2, [r7, #28]
 8005914:	0151      	lsls	r1, r2, #5
 8005916:	6a3a      	ldr	r2, [r7, #32]
 8005918:	440a      	add	r2, r1
 800591a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800591e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005922:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005924:	79fb      	ldrb	r3, [r7, #7]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10b      	bne.n	8005942 <USB_HC_StartXfer+0x86>
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	795b      	ldrb	r3, [r3, #5]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d107      	bne.n	8005942 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	785b      	ldrb	r3, [r3, #1]
 8005936:	4619      	mov	r1, r3
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f000 fa2f 	bl	8005d9c <USB_DoPing>
      return HAL_OK;
 800593e:	2300      	movs	r3, #0
 8005940:	e0f8      	b.n	8005b34 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d018      	beq.n	800597c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	8912      	ldrh	r2, [r2, #8]
 8005952:	4413      	add	r3, r2
 8005954:	3b01      	subs	r3, #1
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	8912      	ldrh	r2, [r2, #8]
 800595a:	fbb3 f3f2 	udiv	r3, r3, r2
 800595e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005960:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005962:	8b7b      	ldrh	r3, [r7, #26]
 8005964:	429a      	cmp	r2, r3
 8005966:	d90b      	bls.n	8005980 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005968:	8b7b      	ldrh	r3, [r7, #26]
 800596a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800596c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	8912      	ldrh	r2, [r2, #8]
 8005972:	fb02 f203 	mul.w	r2, r2, r3
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	611a      	str	r2, [r3, #16]
 800597a:	e001      	b.n	8005980 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800597c:	2301      	movs	r3, #1
 800597e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	78db      	ldrb	r3, [r3, #3]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d007      	beq.n	8005998 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005988:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	8912      	ldrh	r2, [r2, #8]
 800598e:	fb02 f203 	mul.w	r2, r2, r3
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	611a      	str	r2, [r3, #16]
 8005996:	e003      	b.n	80059a0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	695a      	ldr	r2, [r3, #20]
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80059a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059aa:	04d9      	lsls	r1, r3, #19
 80059ac:	4b63      	ldr	r3, [pc, #396]	; (8005b3c <USB_HC_StartXfer+0x280>)
 80059ae:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80059b0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	7a9b      	ldrb	r3, [r3, #10]
 80059b6:	075b      	lsls	r3, r3, #29
 80059b8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80059bc:	69f9      	ldr	r1, [r7, #28]
 80059be:	0148      	lsls	r0, r1, #5
 80059c0:	6a39      	ldr	r1, [r7, #32]
 80059c2:	4401      	add	r1, r0
 80059c4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80059c8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80059ca:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80059cc:	79fb      	ldrb	r3, [r7, #7]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d009      	beq.n	80059e6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	68d9      	ldr	r1, [r3, #12]
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	6a3b      	ldr	r3, [r7, #32]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e2:	460a      	mov	r2, r1
 80059e4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	bf0c      	ite	eq
 80059f6:	2301      	moveq	r3, #1
 80059f8:	2300      	movne	r3, #0
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	6a3b      	ldr	r3, [r7, #32]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	69fa      	ldr	r2, [r7, #28]
 8005a0e:	0151      	lsls	r1, r2, #5
 8005a10:	6a3a      	ldr	r2, [r7, #32]
 8005a12:	440a      	add	r2, r1
 8005a14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a18:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005a1c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	015a      	lsls	r2, r3, #5
 8005a22:	6a3b      	ldr	r3, [r7, #32]
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	7e7b      	ldrb	r3, [r7, #25]
 8005a2e:	075b      	lsls	r3, r3, #29
 8005a30:	69f9      	ldr	r1, [r7, #28]
 8005a32:	0148      	lsls	r0, r1, #5
 8005a34:	6a39      	ldr	r1, [r7, #32]
 8005a36:	4401      	add	r1, r0
 8005a38:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	6a3b      	ldr	r3, [r7, #32]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a56:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	78db      	ldrb	r3, [r3, #3]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d004      	beq.n	8005a6a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a66:	613b      	str	r3, [r7, #16]
 8005a68:	e003      	b.n	8005a72 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a70:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a78:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	015a      	lsls	r2, r3, #5
 8005a7e:	6a3b      	ldr	r3, [r7, #32]
 8005a80:	4413      	add	r3, r2
 8005a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a86:	461a      	mov	r2, r3
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005a8c:	79fb      	ldrb	r3, [r7, #7]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005a92:	2300      	movs	r3, #0
 8005a94:	e04e      	b.n	8005b34 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	78db      	ldrb	r3, [r3, #3]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d149      	bne.n	8005b32 <USB_HC_StartXfer+0x276>
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d045      	beq.n	8005b32 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	79db      	ldrb	r3, [r3, #7]
 8005aaa:	2b03      	cmp	r3, #3
 8005aac:	d830      	bhi.n	8005b10 <USB_HC_StartXfer+0x254>
 8005aae:	a201      	add	r2, pc, #4	; (adr r2, 8005ab4 <USB_HC_StartXfer+0x1f8>)
 8005ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab4:	08005ac5 	.word	0x08005ac5
 8005ab8:	08005ae9 	.word	0x08005ae9
 8005abc:	08005ac5 	.word	0x08005ac5
 8005ac0:	08005ae9 	.word	0x08005ae9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	695b      	ldr	r3, [r3, #20]
 8005ac8:	3303      	adds	r3, #3
 8005aca:	089b      	lsrs	r3, r3, #2
 8005acc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005ace:	8afa      	ldrh	r2, [r7, #22]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d91c      	bls.n	8005b14 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	f043 0220 	orr.w	r2, r3, #32
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	619a      	str	r2, [r3, #24]
        }
        break;
 8005ae6:	e015      	b.n	8005b14 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	3303      	adds	r3, #3
 8005aee:	089b      	lsrs	r3, r3, #2
 8005af0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005af2:	8afa      	ldrh	r2, [r7, #22]
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d90a      	bls.n	8005b18 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	619a      	str	r2, [r3, #24]
        }
        break;
 8005b0e:	e003      	b.n	8005b18 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005b10:	bf00      	nop
 8005b12:	e002      	b.n	8005b1a <USB_HC_StartXfer+0x25e>
        break;
 8005b14:	bf00      	nop
 8005b16:	e000      	b.n	8005b1a <USB_HC_StartXfer+0x25e>
        break;
 8005b18:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	68d9      	ldr	r1, [r3, #12]
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	785a      	ldrb	r2, [r3, #1]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	2000      	movs	r0, #0
 8005b2a:	9000      	str	r0, [sp, #0]
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f7ff fb53 	bl	80051d8 <USB_WritePacket>
  }

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3728      	adds	r7, #40	; 0x28
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	1ff80000 	.word	0x1ff80000

08005b40 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	b29b      	uxth	r3, r3
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b089      	sub	sp, #36	; 0x24
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8005b72:	78fb      	ldrb	r3, [r7, #3]
 8005b74:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8005b76:	2300      	movs	r3, #0
 8005b78:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	015a      	lsls	r2, r3, #5
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	4413      	add	r3, r2
 8005b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	0c9b      	lsrs	r3, r3, #18
 8005b8a:	f003 0303 	and.w	r3, r3, #3
 8005b8e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	0fdb      	lsrs	r3, r3, #31
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f003 0320 	and.w	r3, r3, #32
 8005bae:	2b20      	cmp	r3, #32
 8005bb0:	d104      	bne.n	8005bbc <USB_HC_Halt+0x5a>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	e0e8      	b.n	8005d8e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <USB_HC_Halt+0x66>
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d173      	bne.n	8005cb0 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	0151      	lsls	r1, r2, #5
 8005bda:	69ba      	ldr	r2, [r7, #24]
 8005bdc:	440a      	add	r2, r1
 8005bde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005be2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005be6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f003 0320 	and.w	r3, r3, #32
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f040 80cb 	bne.w	8005d8c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d143      	bne.n	8005c8a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	015a      	lsls	r2, r3, #5
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	0151      	lsls	r1, r2, #5
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	440a      	add	r2, r1
 8005c18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c20:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	0151      	lsls	r1, r2, #5
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	440a      	add	r2, r1
 8005c38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c40:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	0151      	lsls	r1, r2, #5
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	440a      	add	r2, r1
 8005c58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c60:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	3301      	adds	r3, #1
 8005c66:	61fb      	str	r3, [r7, #28]
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c6e:	d81d      	bhi.n	8005cac <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c86:	d0ec      	beq.n	8005c62 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005c88:	e080      	b.n	8005d8c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	0151      	lsls	r1, r2, #5
 8005c9c:	69ba      	ldr	r2, [r7, #24]
 8005c9e:	440a      	add	r2, r1
 8005ca0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ca4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ca8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005caa:	e06f      	b.n	8005d8c <USB_HC_Halt+0x22a>
            break;
 8005cac:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005cae:	e06d      	b.n	8005d8c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	0151      	lsls	r1, r2, #5
 8005cc2:	69ba      	ldr	r2, [r7, #24]
 8005cc4:	440a      	add	r2, r1
 8005cc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cce:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d143      	bne.n	8005d68 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	015a      	lsls	r2, r3, #5
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	0151      	lsls	r1, r2, #5
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	440a      	add	r2, r1
 8005cf6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cfa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005cfe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	0151      	lsls	r1, r2, #5
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	440a      	add	r2, r1
 8005d16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d1e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	0151      	lsls	r1, r2, #5
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	440a      	add	r2, r1
 8005d36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d3a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d3e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	3301      	adds	r3, #1
 8005d44:	61fb      	str	r3, [r7, #28]
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d4c:	d81d      	bhi.n	8005d8a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d64:	d0ec      	beq.n	8005d40 <USB_HC_Halt+0x1de>
 8005d66:	e011      	b.n	8005d8c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	015a      	lsls	r2, r3, #5
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	0151      	lsls	r1, r2, #5
 8005d7a:	69ba      	ldr	r2, [r7, #24]
 8005d7c:	440a      	add	r2, r1
 8005d7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d86:	6013      	str	r3, [r2, #0]
 8005d88:	e000      	b.n	8005d8c <USB_HC_Halt+0x22a>
          break;
 8005d8a:	bf00      	nop
    }
  }

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3724      	adds	r7, #36	; 0x24
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
	...

08005d9c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b087      	sub	sp, #28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	460b      	mov	r3, r1
 8005da6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005dac:	78fb      	ldrb	r3, [r7, #3]
 8005dae:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005db0:	2301      	movs	r3, #1
 8005db2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	04da      	lsls	r2, r3, #19
 8005db8:	4b15      	ldr	r3, [pc, #84]	; (8005e10 <USB_DoPing+0x74>)
 8005dba:	4013      	ands	r3, r2
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	0151      	lsls	r1, r2, #5
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	440a      	add	r2, r1
 8005dc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dcc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005de4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dec:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	015a      	lsls	r2, r3, #5
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	4413      	add	r3, r2
 8005df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	371c      	adds	r7, #28
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	1ff80000 	.word	0x1ff80000

08005e14 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b086      	sub	sp, #24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005e20:	2300      	movs	r3, #0
 8005e22:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f7ff f935 	bl	8005094 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005e2a:	2110      	movs	r1, #16
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f7ff f98f 	bl	8005150 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f7ff f9b0 	bl	8005198 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005e38:	2300      	movs	r3, #0
 8005e3a:	613b      	str	r3, [r7, #16]
 8005e3c:	e01f      	b.n	8005e7e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	015a      	lsls	r2, r3, #5
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	4413      	add	r3, r2
 8005e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e54:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e5c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e64:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e72:	461a      	mov	r2, r3
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	613b      	str	r3, [r7, #16]
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	2b0f      	cmp	r3, #15
 8005e82:	d9dc      	bls.n	8005e3e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005e84:	2300      	movs	r3, #0
 8005e86:	613b      	str	r3, [r7, #16]
 8005e88:	e034      	b.n	8005ef4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ea0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ea8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005eb0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	015a      	lsls	r2, r3, #5
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	617b      	str	r3, [r7, #20]
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ed0:	d80c      	bhi.n	8005eec <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	015a      	lsls	r2, r3, #5
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ee8:	d0ec      	beq.n	8005ec4 <USB_StopHost+0xb0>
 8005eea:	e000      	b.n	8005eee <USB_StopHost+0xda>
        break;
 8005eec:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	613b      	str	r3, [r7, #16]
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	2b0f      	cmp	r3, #15
 8005ef8:	d9c7      	bls.n	8005e8a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f00:	461a      	mov	r2, r3
 8005f02:	f04f 33ff 	mov.w	r3, #4294967295
 8005f06:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f0e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f7ff f8ae 	bl	8005072 <USB_EnableGlobalInt>

  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3718      	adds	r7, #24
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005f20:	b590      	push	{r4, r7, lr}
 8005f22:	b089      	sub	sp, #36	; 0x24
 8005f24:	af04      	add	r7, sp, #16
 8005f26:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005f28:	2301      	movs	r3, #1
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	2102      	movs	r1, #2
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fc66 	bl	8006800 <USBH_FindInterface>
 8005f34:	4603      	mov	r3, r0
 8005f36:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005f38:	7bfb      	ldrb	r3, [r7, #15]
 8005f3a:	2bff      	cmp	r3, #255	; 0xff
 8005f3c:	d002      	beq.n	8005f44 <USBH_CDC_InterfaceInit+0x24>
 8005f3e:	7bfb      	ldrb	r3, [r7, #15]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d901      	bls.n	8005f48 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005f44:	2302      	movs	r3, #2
 8005f46:	e13d      	b.n	80061c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005f48:	7bfb      	ldrb	r3, [r7, #15]
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fc3b 	bl	80067c8 <USBH_SelectInterface>
 8005f52:	4603      	mov	r3, r0
 8005f54:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005f56:	7bbb      	ldrb	r3, [r7, #14]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d001      	beq.n	8005f60 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	e131      	b.n	80061c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005f66:	2050      	movs	r0, #80	; 0x50
 8005f68:	f002 fa00 	bl	800836c <malloc>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f76:	69db      	ldr	r3, [r3, #28]
 8005f78:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d101      	bne.n	8005f84 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005f80:	2302      	movs	r3, #2
 8005f82:	e11f      	b.n	80061c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005f84:	2250      	movs	r2, #80	; 0x50
 8005f86:	2100      	movs	r1, #0
 8005f88:	68b8      	ldr	r0, [r7, #8]
 8005f8a:	f002 f9ff 	bl	800838c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005f8e:	7bfb      	ldrb	r3, [r7, #15]
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	211a      	movs	r1, #26
 8005f94:	fb01 f303 	mul.w	r3, r1, r3
 8005f98:	4413      	add	r3, r2
 8005f9a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	b25b      	sxtb	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	da15      	bge.n	8005fd2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005fa6:	7bfb      	ldrb	r3, [r7, #15]
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	211a      	movs	r1, #26
 8005fac:	fb01 f303 	mul.w	r3, r1, r3
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005fb6:	781a      	ldrb	r2, [r3, #0]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005fbc:	7bfb      	ldrb	r3, [r7, #15]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	211a      	movs	r1, #26
 8005fc2:	fb01 f303 	mul.w	r3, r1, r3
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005fcc:	881a      	ldrh	r2, [r3, #0]
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	785b      	ldrb	r3, [r3, #1]
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f001 fe32 	bl	8007c42 <USBH_AllocPipe>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	7819      	ldrb	r1, [r3, #0]
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	7858      	ldrb	r0, [r3, #1]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	8952      	ldrh	r2, [r2, #10]
 8005ffe:	9202      	str	r2, [sp, #8]
 8006000:	2203      	movs	r2, #3
 8006002:	9201      	str	r2, [sp, #4]
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	4623      	mov	r3, r4
 8006008:	4602      	mov	r2, r0
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f001 fdea 	bl	8007be4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	2200      	movs	r2, #0
 8006016:	4619      	mov	r1, r3
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f002 f8f9 	bl	8008210 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800601e:	2300      	movs	r3, #0
 8006020:	2200      	movs	r2, #0
 8006022:	210a      	movs	r1, #10
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 fbeb 	bl	8006800 <USBH_FindInterface>
 800602a:	4603      	mov	r3, r0
 800602c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800602e:	7bfb      	ldrb	r3, [r7, #15]
 8006030:	2bff      	cmp	r3, #255	; 0xff
 8006032:	d002      	beq.n	800603a <USBH_CDC_InterfaceInit+0x11a>
 8006034:	7bfb      	ldrb	r3, [r7, #15]
 8006036:	2b01      	cmp	r3, #1
 8006038:	d901      	bls.n	800603e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800603a:	2302      	movs	r3, #2
 800603c:	e0c2      	b.n	80061c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800603e:	7bfb      	ldrb	r3, [r7, #15]
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	211a      	movs	r1, #26
 8006044:	fb01 f303 	mul.w	r3, r1, r3
 8006048:	4413      	add	r3, r2
 800604a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	b25b      	sxtb	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	da16      	bge.n	8006084 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006056:	7bfb      	ldrb	r3, [r7, #15]
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	211a      	movs	r1, #26
 800605c:	fb01 f303 	mul.w	r3, r1, r3
 8006060:	4413      	add	r3, r2
 8006062:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006066:	781a      	ldrb	r2, [r3, #0]
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800606c:	7bfb      	ldrb	r3, [r7, #15]
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	211a      	movs	r1, #26
 8006072:	fb01 f303 	mul.w	r3, r1, r3
 8006076:	4413      	add	r3, r2
 8006078:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800607c:	881a      	ldrh	r2, [r3, #0]
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	835a      	strh	r2, [r3, #26]
 8006082:	e015      	b.n	80060b0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006084:	7bfb      	ldrb	r3, [r7, #15]
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	211a      	movs	r1, #26
 800608a:	fb01 f303 	mul.w	r3, r1, r3
 800608e:	4413      	add	r3, r2
 8006090:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006094:	781a      	ldrb	r2, [r3, #0]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800609a:	7bfb      	ldrb	r3, [r7, #15]
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	211a      	movs	r1, #26
 80060a0:	fb01 f303 	mul.w	r3, r1, r3
 80060a4:	4413      	add	r3, r2
 80060a6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80060aa:	881a      	ldrh	r2, [r3, #0]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80060b0:	7bfb      	ldrb	r3, [r7, #15]
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	211a      	movs	r1, #26
 80060b6:	fb01 f303 	mul.w	r3, r1, r3
 80060ba:	4413      	add	r3, r2
 80060bc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	b25b      	sxtb	r3, r3
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	da16      	bge.n	80060f6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	211a      	movs	r1, #26
 80060ce:	fb01 f303 	mul.w	r3, r1, r3
 80060d2:	4413      	add	r3, r2
 80060d4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80060d8:	781a      	ldrb	r2, [r3, #0]
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80060de:	7bfb      	ldrb	r3, [r7, #15]
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	211a      	movs	r1, #26
 80060e4:	fb01 f303 	mul.w	r3, r1, r3
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80060ee:	881a      	ldrh	r2, [r3, #0]
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	835a      	strh	r2, [r3, #26]
 80060f4:	e015      	b.n	8006122 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80060f6:	7bfb      	ldrb	r3, [r7, #15]
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	211a      	movs	r1, #26
 80060fc:	fb01 f303 	mul.w	r3, r1, r3
 8006100:	4413      	add	r3, r2
 8006102:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006106:	781a      	ldrb	r2, [r3, #0]
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800610c:	7bfb      	ldrb	r3, [r7, #15]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	211a      	movs	r1, #26
 8006112:	fb01 f303 	mul.w	r3, r1, r3
 8006116:	4413      	add	r3, r2
 8006118:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800611c:	881a      	ldrh	r2, [r3, #0]
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	7b9b      	ldrb	r3, [r3, #14]
 8006126:	4619      	mov	r1, r3
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f001 fd8a 	bl	8007c42 <USBH_AllocPipe>
 800612e:	4603      	mov	r3, r0
 8006130:	461a      	mov	r2, r3
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	7bdb      	ldrb	r3, [r3, #15]
 800613a:	4619      	mov	r1, r3
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f001 fd80 	bl	8007c42 <USBH_AllocPipe>
 8006142:	4603      	mov	r3, r0
 8006144:	461a      	mov	r2, r3
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	7b59      	ldrb	r1, [r3, #13]
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	7b98      	ldrb	r0, [r3, #14]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	8b12      	ldrh	r2, [r2, #24]
 8006162:	9202      	str	r2, [sp, #8]
 8006164:	2202      	movs	r2, #2
 8006166:	9201      	str	r2, [sp, #4]
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	4623      	mov	r3, r4
 800616c:	4602      	mov	r2, r0
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f001 fd38 	bl	8007be4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	7b19      	ldrb	r1, [r3, #12]
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	7bd8      	ldrb	r0, [r3, #15]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	8b52      	ldrh	r2, [r2, #26]
 800618c:	9202      	str	r2, [sp, #8]
 800618e:	2202      	movs	r2, #2
 8006190:	9201      	str	r2, [sp, #4]
 8006192:	9300      	str	r3, [sp, #0]
 8006194:	4623      	mov	r3, r4
 8006196:	4602      	mov	r2, r0
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f001 fd23 	bl	8007be4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	7b5b      	ldrb	r3, [r3, #13]
 80061aa:	2200      	movs	r2, #0
 80061ac:	4619      	mov	r1, r3
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f002 f82e 	bl	8008210 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	7b1b      	ldrb	r3, [r3, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	4619      	mov	r1, r3
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f002 f827 	bl	8008210 <USBH_LL_SetToggle>

  return USBH_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3714      	adds	r7, #20
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd90      	pop	{r4, r7, pc}

080061cc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061da:	69db      	ldr	r3, [r3, #28]
 80061dc:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00e      	beq.n	8006204 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	4619      	mov	r1, r3
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f001 fd18 	bl	8007c22 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	4619      	mov	r1, r3
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f001 fd43 	bl	8007c84 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	7b1b      	ldrb	r3, [r3, #12]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00e      	beq.n	800622a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	7b1b      	ldrb	r3, [r3, #12]
 8006210:	4619      	mov	r1, r3
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f001 fd05 	bl	8007c22 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	7b1b      	ldrb	r3, [r3, #12]
 800621c:	4619      	mov	r1, r3
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f001 fd30 	bl	8007c84 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	7b5b      	ldrb	r3, [r3, #13]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00e      	beq.n	8006250 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	7b5b      	ldrb	r3, [r3, #13]
 8006236:	4619      	mov	r1, r3
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f001 fcf2 	bl	8007c22 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	7b5b      	ldrb	r3, [r3, #13]
 8006242:	4619      	mov	r1, r3
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f001 fd1d 	bl	8007c84 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00b      	beq.n	8006274 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006262:	69db      	ldr	r3, [r3, #28]
 8006264:	4618      	mov	r0, r3
 8006266:	f002 f889 	bl	800837c <free>
    phost->pActiveClass->pData = 0U;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006270:	2200      	movs	r2, #0
 8006272:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b084      	sub	sp, #16
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	3340      	adds	r3, #64	; 0x40
 8006294:	4619      	mov	r1, r3
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f8b1 	bl	80063fe <GetLineCoding>
 800629c:	4603      	mov	r3, r0
 800629e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80062a0:	7afb      	ldrb	r3, [r7, #11]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d105      	bne.n	80062b2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062ac:	2102      	movs	r1, #2
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80062b2:	7afb      	ldrb	r3, [r7, #11]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80062c4:	2301      	movs	r3, #1
 80062c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80062c8:	2300      	movs	r3, #0
 80062ca:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062d2:	69db      	ldr	r3, [r3, #28]
 80062d4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80062dc:	2b04      	cmp	r3, #4
 80062de:	d877      	bhi.n	80063d0 <USBH_CDC_Process+0x114>
 80062e0:	a201      	add	r2, pc, #4	; (adr r2, 80062e8 <USBH_CDC_Process+0x2c>)
 80062e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e6:	bf00      	nop
 80062e8:	080062fd 	.word	0x080062fd
 80062ec:	08006303 	.word	0x08006303
 80062f0:	08006333 	.word	0x08006333
 80062f4:	080063a7 	.word	0x080063a7
 80062f8:	080063b5 	.word	0x080063b5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80062fc:	2300      	movs	r3, #0
 80062fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006300:	e06d      	b.n	80063de <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006306:	4619      	mov	r1, r3
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f897 	bl	800643c <SetLineCoding>
 800630e:	4603      	mov	r3, r0
 8006310:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006312:	7bbb      	ldrb	r3, [r7, #14]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d104      	bne.n	8006322 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	2202      	movs	r2, #2
 800631c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006320:	e058      	b.n	80063d4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006322:	7bbb      	ldrb	r3, [r7, #14]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d055      	beq.n	80063d4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2204      	movs	r2, #4
 800632c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006330:	e050      	b.n	80063d4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	3340      	adds	r3, #64	; 0x40
 8006336:	4619      	mov	r1, r3
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 f860 	bl	80063fe <GetLineCoding>
 800633e:	4603      	mov	r3, r0
 8006340:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006342:	7bbb      	ldrb	r3, [r7, #14]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d126      	bne.n	8006396 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800635a:	791b      	ldrb	r3, [r3, #4]
 800635c:	429a      	cmp	r2, r3
 800635e:	d13b      	bne.n	80063d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800636a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800636c:	429a      	cmp	r2, r3
 800636e:	d133      	bne.n	80063d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800637a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800637c:	429a      	cmp	r2, r3
 800637e:	d12b      	bne.n	80063d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006388:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800638a:	429a      	cmp	r2, r3
 800638c:	d124      	bne.n	80063d8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f958 	bl	8006644 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006394:	e020      	b.n	80063d8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006396:	7bbb      	ldrb	r3, [r7, #14]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d01d      	beq.n	80063d8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	2204      	movs	r2, #4
 80063a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80063a4:	e018      	b.n	80063d8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f867 	bl	800647a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 f8da 	bl	8006566 <CDC_ProcessReception>
      break;
 80063b2:	e014      	b.n	80063de <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80063b4:	2100      	movs	r1, #0
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 ffe3 	bl	8007382 <USBH_ClrFeature>
 80063bc:	4603      	mov	r3, r0
 80063be:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80063c0:	7bbb      	ldrb	r3, [r7, #14]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10a      	bne.n	80063dc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80063ce:	e005      	b.n	80063dc <USBH_CDC_Process+0x120>

    default:
      break;
 80063d0:	bf00      	nop
 80063d2:	e004      	b.n	80063de <USBH_CDC_Process+0x122>
      break;
 80063d4:	bf00      	nop
 80063d6:	e002      	b.n	80063de <USBH_CDC_Process+0x122>
      break;
 80063d8:	bf00      	nop
 80063da:	e000      	b.n	80063de <USBH_CDC_Process+0x122>
      break;
 80063dc:	bf00      	nop

  }

  return status;
 80063de:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b082      	sub	sp, #8
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	22a1      	movs	r2, #161	; 0xa1
 800640c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2221      	movs	r2, #33	; 0x21
 8006412:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2207      	movs	r2, #7
 8006424:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2207      	movs	r2, #7
 800642a:	4619      	mov	r1, r3
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f001 f988 	bl	8007742 <USBH_CtlReq>
 8006432:	4603      	mov	r3, r0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2221      	movs	r2, #33	; 0x21
 800644a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2220      	movs	r2, #32
 8006450:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2207      	movs	r2, #7
 8006462:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	2207      	movs	r2, #7
 8006468:	4619      	mov	r1, r3
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f001 f969 	bl	8007742 <USBH_CtlReq>
 8006470:	4603      	mov	r3, r0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3708      	adds	r7, #8
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b086      	sub	sp, #24
 800647e:	af02      	add	r7, sp, #8
 8006480:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800648c:	2300      	movs	r3, #0
 800648e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006496:	2b01      	cmp	r3, #1
 8006498:	d002      	beq.n	80064a0 <CDC_ProcessTransmission+0x26>
 800649a:	2b02      	cmp	r3, #2
 800649c:	d023      	beq.n	80064e6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800649e:	e05e      	b.n	800655e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	8b12      	ldrh	r2, [r2, #24]
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d90b      	bls.n	80064c4 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	69d9      	ldr	r1, [r3, #28]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	8b1a      	ldrh	r2, [r3, #24]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	7b5b      	ldrb	r3, [r3, #13]
 80064b8:	2001      	movs	r0, #1
 80064ba:	9000      	str	r0, [sp, #0]
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f001 fb4e 	bl	8007b5e <USBH_BulkSendData>
 80064c2:	e00b      	b.n	80064dc <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	7b5b      	ldrb	r3, [r3, #13]
 80064d2:	2001      	movs	r0, #1
 80064d4:	9000      	str	r0, [sp, #0]
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f001 fb41 	bl	8007b5e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2202      	movs	r2, #2
 80064e0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80064e4:	e03b      	b.n	800655e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	7b5b      	ldrb	r3, [r3, #13]
 80064ea:	4619      	mov	r1, r3
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f001 fe65 	bl	80081bc <USBH_LL_GetURBState>
 80064f2:	4603      	mov	r3, r0
 80064f4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80064f6:	7afb      	ldrb	r3, [r7, #11]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d128      	bne.n	800654e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	8b12      	ldrh	r2, [r2, #24]
 8006504:	4293      	cmp	r3, r2
 8006506:	d90e      	bls.n	8006526 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	8b12      	ldrh	r2, [r2, #24]
 8006510:	1a9a      	subs	r2, r3, r2
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	8b12      	ldrh	r2, [r2, #24]
 800651e:	441a      	add	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	61da      	str	r2, [r3, #28]
 8006524:	e002      	b.n	800652c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006530:	2b00      	cmp	r3, #0
 8006532:	d004      	beq.n	800653e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800653c:	e00e      	b.n	800655c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f868 	bl	800661c <USBH_CDC_TransmitCallback>
      break;
 800654c:	e006      	b.n	800655c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800654e:	7afb      	ldrb	r3, [r7, #11]
 8006550:	2b02      	cmp	r3, #2
 8006552:	d103      	bne.n	800655c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800655c:	bf00      	nop
  }
}
 800655e:	bf00      	nop
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b086      	sub	sp, #24
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006578:	2300      	movs	r3, #0
 800657a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006582:	2b03      	cmp	r3, #3
 8006584:	d002      	beq.n	800658c <CDC_ProcessReception+0x26>
 8006586:	2b04      	cmp	r3, #4
 8006588:	d00e      	beq.n	80065a8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800658a:	e043      	b.n	8006614 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	6a19      	ldr	r1, [r3, #32]
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	8b5a      	ldrh	r2, [r3, #26]
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	7b1b      	ldrb	r3, [r3, #12]
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f001 fb05 	bl	8007ba8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	2204      	movs	r2, #4
 80065a2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80065a6:	e035      	b.n	8006614 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	7b1b      	ldrb	r3, [r3, #12]
 80065ac:	4619      	mov	r1, r3
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f001 fe04 	bl	80081bc <USBH_LL_GetURBState>
 80065b4:	4603      	mov	r3, r0
 80065b6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80065b8:	7cfb      	ldrb	r3, [r7, #19]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d129      	bne.n	8006612 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	7b1b      	ldrb	r3, [r3, #12]
 80065c2:	4619      	mov	r1, r3
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f001 fd67 	bl	8008098 <USBH_LL_GetLastXferSize>
 80065ca:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d016      	beq.n	8006604 <CDC_ProcessReception+0x9e>
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	8b5b      	ldrh	r3, [r3, #26]
 80065da:	461a      	mov	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4293      	cmp	r3, r2
 80065e0:	d910      	bls.n	8006604 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	1ad2      	subs	r2, r2, r3
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	6a1a      	ldr	r2, [r3, #32]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	441a      	add	r2, r3
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	2203      	movs	r2, #3
 80065fe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006602:	e006      	b.n	8006612 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f80f 	bl	8006630 <USBH_CDC_ReceiveCallback>
      break;
 8006612:	bf00      	nop
  }
}
 8006614:	bf00      	nop
 8006616:	3718      	adds	r7, #24
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006624:	bf00      	nop
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006638:	bf00      	nop
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	4613      	mov	r3, r2
 8006664:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d101      	bne.n	8006670 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800666c:	2302      	movs	r3, #2
 800666e:	e029      	b.n	80066c4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	79fa      	ldrb	r2, [r7, #7]
 8006674:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f000 f81f 	bl	80066cc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d003      	beq.n	80066bc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f001 fc37 	bl	8007f30 <USBH_LL_Init>

  return USBH_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80066d4:	2300      	movs	r3, #0
 80066d6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80066d8:	2300      	movs	r3, #0
 80066da:	60fb      	str	r3, [r7, #12]
 80066dc:	e009      	b.n	80066f2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	33e0      	adds	r3, #224	; 0xe0
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4413      	add	r3, r2
 80066e8:	2200      	movs	r2, #0
 80066ea:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	3301      	adds	r3, #1
 80066f0:	60fb      	str	r3, [r7, #12]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2b0e      	cmp	r3, #14
 80066f6:	d9f2      	bls.n	80066de <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80066f8:	2300      	movs	r3, #0
 80066fa:	60fb      	str	r3, [r7, #12]
 80066fc:	e009      	b.n	8006712 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4413      	add	r3, r2
 8006704:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006708:	2200      	movs	r2, #0
 800670a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	3301      	adds	r3, #1
 8006710:	60fb      	str	r3, [r7, #12]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006718:	d3f1      	bcc.n	80066fe <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2201      	movs	r2, #1
 800672a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2240      	movs	r2, #64	; 0x40
 800673e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800677e:	2300      	movs	r3, #0
 8006780:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d016      	beq.n	80067b6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10e      	bne.n	80067b0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006798:	1c59      	adds	r1, r3, #1
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	33de      	adds	r3, #222	; 0xde
 80067a4:	6839      	ldr	r1, [r7, #0]
 80067a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80067aa:	2300      	movs	r3, #0
 80067ac:	73fb      	strb	r3, [r7, #15]
 80067ae:	e004      	b.n	80067ba <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80067b0:	2302      	movs	r3, #2
 80067b2:	73fb      	strb	r3, [r7, #15]
 80067b4:	e001      	b.n	80067ba <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80067b6:	2302      	movs	r3, #2
 80067b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80067ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3714      	adds	r7, #20
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	460b      	mov	r3, r1
 80067d2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80067de:	78fa      	ldrb	r2, [r7, #3]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d204      	bcs.n	80067ee <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	78fa      	ldrb	r2, [r7, #3]
 80067e8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80067ec:	e001      	b.n	80067f2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80067ee:	2302      	movs	r3, #2
 80067f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80067f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3714      	adds	r7, #20
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006800:	b480      	push	{r7}
 8006802:	b087      	sub	sp, #28
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	4608      	mov	r0, r1
 800680a:	4611      	mov	r1, r2
 800680c:	461a      	mov	r2, r3
 800680e:	4603      	mov	r3, r0
 8006810:	70fb      	strb	r3, [r7, #3]
 8006812:	460b      	mov	r3, r1
 8006814:	70bb      	strb	r3, [r7, #2]
 8006816:	4613      	mov	r3, r2
 8006818:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800681a:	2300      	movs	r3, #0
 800681c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800681e:	2300      	movs	r3, #0
 8006820:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006828:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800682a:	e025      	b.n	8006878 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800682c:	7dfb      	ldrb	r3, [r7, #23]
 800682e:	221a      	movs	r2, #26
 8006830:	fb02 f303 	mul.w	r3, r2, r3
 8006834:	3308      	adds	r3, #8
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	4413      	add	r3, r2
 800683a:	3302      	adds	r3, #2
 800683c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	795b      	ldrb	r3, [r3, #5]
 8006842:	78fa      	ldrb	r2, [r7, #3]
 8006844:	429a      	cmp	r2, r3
 8006846:	d002      	beq.n	800684e <USBH_FindInterface+0x4e>
 8006848:	78fb      	ldrb	r3, [r7, #3]
 800684a:	2bff      	cmp	r3, #255	; 0xff
 800684c:	d111      	bne.n	8006872 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006852:	78ba      	ldrb	r2, [r7, #2]
 8006854:	429a      	cmp	r2, r3
 8006856:	d002      	beq.n	800685e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006858:	78bb      	ldrb	r3, [r7, #2]
 800685a:	2bff      	cmp	r3, #255	; 0xff
 800685c:	d109      	bne.n	8006872 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006862:	787a      	ldrb	r2, [r7, #1]
 8006864:	429a      	cmp	r2, r3
 8006866:	d002      	beq.n	800686e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006868:	787b      	ldrb	r3, [r7, #1]
 800686a:	2bff      	cmp	r3, #255	; 0xff
 800686c:	d101      	bne.n	8006872 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800686e:	7dfb      	ldrb	r3, [r7, #23]
 8006870:	e006      	b.n	8006880 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006872:	7dfb      	ldrb	r3, [r7, #23]
 8006874:	3301      	adds	r3, #1
 8006876:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006878:	7dfb      	ldrb	r3, [r7, #23]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d9d6      	bls.n	800682c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800687e:	23ff      	movs	r3, #255	; 0xff
}
 8006880:	4618      	mov	r0, r3
 8006882:	371c      	adds	r7, #28
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f001 fb87 	bl	8007fa8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800689a:	2101      	movs	r1, #1
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f001 fca0 	bl	80081e2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b088      	sub	sp, #32
 80068b0:	af04      	add	r7, sp, #16
 80068b2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80068b4:	2302      	movs	r3, #2
 80068b6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80068b8:	2300      	movs	r3, #0
 80068ba:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d102      	bne.n	80068ce <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2203      	movs	r2, #3
 80068cc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	2b0b      	cmp	r3, #11
 80068d6:	f200 81b3 	bhi.w	8006c40 <USBH_Process+0x394>
 80068da:	a201      	add	r2, pc, #4	; (adr r2, 80068e0 <USBH_Process+0x34>)
 80068dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e0:	08006911 	.word	0x08006911
 80068e4:	08006943 	.word	0x08006943
 80068e8:	080069ab 	.word	0x080069ab
 80068ec:	08006bdb 	.word	0x08006bdb
 80068f0:	08006c41 	.word	0x08006c41
 80068f4:	08006a4f 	.word	0x08006a4f
 80068f8:	08006b81 	.word	0x08006b81
 80068fc:	08006a85 	.word	0x08006a85
 8006900:	08006aa5 	.word	0x08006aa5
 8006904:	08006ac5 	.word	0x08006ac5
 8006908:	08006af3 	.word	0x08006af3
 800690c:	08006bc3 	.word	0x08006bc3
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006916:	b2db      	uxtb	r3, r3
 8006918:	2b00      	cmp	r3, #0
 800691a:	f000 8193 	beq.w	8006c44 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006924:	20c8      	movs	r0, #200	; 0xc8
 8006926:	f001 fca3 	bl	8008270 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f001 fb99 	bl	8008062 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006940:	e180      	b.n	8006c44 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006948:	2b01      	cmp	r3, #1
 800694a:	d107      	bne.n	800695c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2202      	movs	r2, #2
 8006958:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800695a:	e182      	b.n	8006c62 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006962:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006966:	d914      	bls.n	8006992 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800696e:	3301      	adds	r3, #1
 8006970:	b2da      	uxtb	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800697e:	2b03      	cmp	r3, #3
 8006980:	d903      	bls.n	800698a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	220d      	movs	r2, #13
 8006986:	701a      	strb	r2, [r3, #0]
      break;
 8006988:	e16b      	b.n	8006c62 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	701a      	strb	r2, [r3, #0]
      break;
 8006990:	e167      	b.n	8006c62 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006998:	f103 020a 	add.w	r2, r3, #10
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80069a2:	200a      	movs	r0, #10
 80069a4:	f001 fc64 	bl	8008270 <USBH_Delay>
      break;
 80069a8:	e15b      	b.n	8006c62 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d005      	beq.n	80069c0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069ba:	2104      	movs	r1, #4
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80069c0:	2064      	movs	r0, #100	; 0x64
 80069c2:	f001 fc55 	bl	8008270 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f001 fb24 	bl	8008014 <USBH_LL_GetSpeed>
 80069cc:	4603      	mov	r3, r0
 80069ce:	461a      	mov	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2205      	movs	r2, #5
 80069da:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80069dc:	2100      	movs	r1, #0
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f001 f92f 	bl	8007c42 <USBH_AllocPipe>
 80069e4:	4603      	mov	r3, r0
 80069e6:	461a      	mov	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80069ec:	2180      	movs	r1, #128	; 0x80
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f001 f927 	bl	8007c42 <USBH_AllocPipe>
 80069f4:	4603      	mov	r3, r0
 80069f6:	461a      	mov	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	7919      	ldrb	r1, [r3, #4]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006a10:	b292      	uxth	r2, r2
 8006a12:	9202      	str	r2, [sp, #8]
 8006a14:	2200      	movs	r2, #0
 8006a16:	9201      	str	r2, [sp, #4]
 8006a18:	9300      	str	r3, [sp, #0]
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2280      	movs	r2, #128	; 0x80
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f001 f8e0 	bl	8007be4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	7959      	ldrb	r1, [r3, #5]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006a38:	b292      	uxth	r2, r2
 8006a3a:	9202      	str	r2, [sp, #8]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	9201      	str	r2, [sp, #4]
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	4603      	mov	r3, r0
 8006a44:	2200      	movs	r2, #0
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f001 f8cc 	bl	8007be4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006a4c:	e109      	b.n	8006c62 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f90c 	bl	8006c6c <USBH_HandleEnum>
 8006a54:	4603      	mov	r3, r0
 8006a56:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006a58:	7bbb      	ldrb	r3, [r7, #14]
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f040 80f3 	bne.w	8006c48 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d103      	bne.n	8006a7c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2208      	movs	r2, #8
 8006a78:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006a7a:	e0e5      	b.n	8006c48 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2207      	movs	r2, #7
 8006a80:	701a      	strb	r2, [r3, #0]
      break;
 8006a82:	e0e1      	b.n	8006c48 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f000 80de 	beq.w	8006c4c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a96:	2101      	movs	r1, #1
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2208      	movs	r2, #8
 8006aa0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006aa2:	e0d3      	b.n	8006c4c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	4619      	mov	r1, r3
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 fc20 	bl	80072f4 <USBH_SetCfg>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f040 80ca 	bne.w	8006c50 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2209      	movs	r2, #9
 8006ac0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006ac2:	e0c5      	b.n	8006c50 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006aca:	f003 0320 	and.w	r3, r3, #32
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00b      	beq.n	8006aea <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006ad2:	2101      	movs	r1, #1
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 fc30 	bl	800733a <USBH_SetFeature>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f040 80b9 	bne.w	8006c54 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	220a      	movs	r2, #10
 8006ae6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006ae8:	e0b4      	b.n	8006c54 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	220a      	movs	r2, #10
 8006aee:	701a      	strb	r2, [r3, #0]
      break;
 8006af0:	e0b0      	b.n	8006c54 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f000 80ad 	beq.w	8006c58 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006b06:	2300      	movs	r3, #0
 8006b08:	73fb      	strb	r3, [r7, #15]
 8006b0a:	e016      	b.n	8006b3a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006b0c:	7bfa      	ldrb	r2, [r7, #15]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	32de      	adds	r2, #222	; 0xde
 8006b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b16:	791a      	ldrb	r2, [r3, #4]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d108      	bne.n	8006b34 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006b22:	7bfa      	ldrb	r2, [r7, #15]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	32de      	adds	r2, #222	; 0xde
 8006b28:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006b32:	e005      	b.n	8006b40 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
 8006b36:	3301      	adds	r3, #1
 8006b38:	73fb      	strb	r3, [r7, #15]
 8006b3a:	7bfb      	ldrb	r3, [r7, #15]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d0e5      	beq.n	8006b0c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d016      	beq.n	8006b78 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	4798      	blx	r3
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d109      	bne.n	8006b70 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2206      	movs	r2, #6
 8006b60:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b68:	2103      	movs	r1, #3
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006b6e:	e073      	b.n	8006c58 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	220d      	movs	r2, #13
 8006b74:	701a      	strb	r2, [r3, #0]
      break;
 8006b76:	e06f      	b.n	8006c58 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	220d      	movs	r2, #13
 8006b7c:	701a      	strb	r2, [r3, #0]
      break;
 8006b7e:	e06b      	b.n	8006c58 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d017      	beq.n	8006bba <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	4798      	blx	r3
 8006b96:	4603      	mov	r3, r0
 8006b98:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006b9a:	7bbb      	ldrb	r3, [r7, #14]
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d103      	bne.n	8006baa <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	220b      	movs	r2, #11
 8006ba6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006ba8:	e058      	b.n	8006c5c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8006baa:	7bbb      	ldrb	r3, [r7, #14]
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d154      	bne.n	8006c5c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	220d      	movs	r2, #13
 8006bb6:	701a      	strb	r2, [r3, #0]
      break;
 8006bb8:	e050      	b.n	8006c5c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	220d      	movs	r2, #13
 8006bbe:	701a      	strb	r2, [r3, #0]
      break;
 8006bc0:	e04c      	b.n	8006c5c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d049      	beq.n	8006c60 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bd2:	695b      	ldr	r3, [r3, #20]
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	4798      	blx	r3
      }
      break;
 8006bd8:	e042      	b.n	8006c60 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f7ff fd72 	bl	80066cc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d009      	beq.n	8006c06 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d005      	beq.n	8006c1c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c16:	2105      	movs	r1, #5
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d107      	bne.n	8006c38 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f7ff fe2b 	bl	800688c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c36:	e014      	b.n	8006c62 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f001 f9b5 	bl	8007fa8 <USBH_LL_Start>
      break;
 8006c3e:	e010      	b.n	8006c62 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006c40:	bf00      	nop
 8006c42:	e00e      	b.n	8006c62 <USBH_Process+0x3b6>
      break;
 8006c44:	bf00      	nop
 8006c46:	e00c      	b.n	8006c62 <USBH_Process+0x3b6>
      break;
 8006c48:	bf00      	nop
 8006c4a:	e00a      	b.n	8006c62 <USBH_Process+0x3b6>
    break;
 8006c4c:	bf00      	nop
 8006c4e:	e008      	b.n	8006c62 <USBH_Process+0x3b6>
      break;
 8006c50:	bf00      	nop
 8006c52:	e006      	b.n	8006c62 <USBH_Process+0x3b6>
      break;
 8006c54:	bf00      	nop
 8006c56:	e004      	b.n	8006c62 <USBH_Process+0x3b6>
      break;
 8006c58:	bf00      	nop
 8006c5a:	e002      	b.n	8006c62 <USBH_Process+0x3b6>
      break;
 8006c5c:	bf00      	nop
 8006c5e:	e000      	b.n	8006c62 <USBH_Process+0x3b6>
      break;
 8006c60:	bf00      	nop
  }
  return USBH_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3710      	adds	r7, #16
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b088      	sub	sp, #32
 8006c70:	af04      	add	r7, sp, #16
 8006c72:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006c74:	2301      	movs	r3, #1
 8006c76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	785b      	ldrb	r3, [r3, #1]
 8006c80:	2b07      	cmp	r3, #7
 8006c82:	f200 81c1 	bhi.w	8007008 <USBH_HandleEnum+0x39c>
 8006c86:	a201      	add	r2, pc, #4	; (adr r2, 8006c8c <USBH_HandleEnum+0x20>)
 8006c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8c:	08006cad 	.word	0x08006cad
 8006c90:	08006d6b 	.word	0x08006d6b
 8006c94:	08006dd5 	.word	0x08006dd5
 8006c98:	08006e63 	.word	0x08006e63
 8006c9c:	08006ecd 	.word	0x08006ecd
 8006ca0:	08006f3d 	.word	0x08006f3d
 8006ca4:	08006f83 	.word	0x08006f83
 8006ca8:	08006fc9 	.word	0x08006fc9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006cac:	2108      	movs	r1, #8
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fa50 	bl	8007154 <USBH_Get_DevDesc>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006cb8:	7bbb      	ldrb	r3, [r7, #14]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d130      	bne.n	8006d20 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	7919      	ldrb	r1, [r3, #4]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006ce2:	b292      	uxth	r2, r2
 8006ce4:	9202      	str	r2, [sp, #8]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	9201      	str	r2, [sp, #4]
 8006cea:	9300      	str	r3, [sp, #0]
 8006cec:	4603      	mov	r3, r0
 8006cee:	2280      	movs	r2, #128	; 0x80
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 ff77 	bl	8007be4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	7959      	ldrb	r1, [r3, #5]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d0a:	b292      	uxth	r2, r2
 8006d0c:	9202      	str	r2, [sp, #8]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	9201      	str	r2, [sp, #4]
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	4603      	mov	r3, r0
 8006d16:	2200      	movs	r2, #0
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 ff63 	bl	8007be4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006d1e:	e175      	b.n	800700c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d20:	7bbb      	ldrb	r3, [r7, #14]
 8006d22:	2b03      	cmp	r3, #3
 8006d24:	f040 8172 	bne.w	800700c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d2e:	3301      	adds	r3, #1
 8006d30:	b2da      	uxtb	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d3e:	2b03      	cmp	r3, #3
 8006d40:	d903      	bls.n	8006d4a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	220d      	movs	r2, #13
 8006d46:	701a      	strb	r2, [r3, #0]
      break;
 8006d48:	e160      	b.n	800700c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	795b      	ldrb	r3, [r3, #5]
 8006d4e:	4619      	mov	r1, r3
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 ff97 	bl	8007c84 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	791b      	ldrb	r3, [r3, #4]
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 ff91 	bl	8007c84 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	701a      	strb	r2, [r3, #0]
      break;
 8006d68:	e150      	b.n	800700c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006d6a:	2112      	movs	r1, #18
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f9f1 	bl	8007154 <USBH_Get_DevDesc>
 8006d72:	4603      	mov	r3, r0
 8006d74:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d76:	7bbb      	ldrb	r3, [r7, #14]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d103      	bne.n	8006d84 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006d82:	e145      	b.n	8007010 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d84:	7bbb      	ldrb	r3, [r7, #14]
 8006d86:	2b03      	cmp	r3, #3
 8006d88:	f040 8142 	bne.w	8007010 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d92:	3301      	adds	r3, #1
 8006d94:	b2da      	uxtb	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006da2:	2b03      	cmp	r3, #3
 8006da4:	d903      	bls.n	8006dae <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	220d      	movs	r2, #13
 8006daa:	701a      	strb	r2, [r3, #0]
      break;
 8006dac:	e130      	b.n	8007010 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	795b      	ldrb	r3, [r3, #5]
 8006db2:	4619      	mov	r1, r3
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 ff65 	bl	8007c84 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	791b      	ldrb	r3, [r3, #4]
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 ff5f 	bl	8007c84 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	701a      	strb	r2, [r3, #0]
      break;
 8006dd2:	e11d      	b.n	8007010 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fa68 	bl	80072ac <USBH_SetAddress>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006de0:	7bbb      	ldrb	r3, [r7, #14]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d132      	bne.n	8006e4c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006de6:	2002      	movs	r0, #2
 8006de8:	f001 fa42 	bl	8008270 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2203      	movs	r2, #3
 8006df8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	7919      	ldrb	r1, [r3, #4]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006e0e:	b292      	uxth	r2, r2
 8006e10:	9202      	str	r2, [sp, #8]
 8006e12:	2200      	movs	r2, #0
 8006e14:	9201      	str	r2, [sp, #4]
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2280      	movs	r2, #128	; 0x80
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 fee1 	bl	8007be4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	7959      	ldrb	r1, [r3, #5]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006e36:	b292      	uxth	r2, r2
 8006e38:	9202      	str	r2, [sp, #8]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	9201      	str	r2, [sp, #4]
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	4603      	mov	r3, r0
 8006e42:	2200      	movs	r2, #0
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 fecd 	bl	8007be4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006e4a:	e0e3      	b.n	8007014 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e4c:	7bbb      	ldrb	r3, [r7, #14]
 8006e4e:	2b03      	cmp	r3, #3
 8006e50:	f040 80e0 	bne.w	8007014 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	220d      	movs	r2, #13
 8006e58:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	705a      	strb	r2, [r3, #1]
      break;
 8006e60:	e0d8      	b.n	8007014 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006e62:	2109      	movs	r1, #9
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f99d 	bl	80071a4 <USBH_Get_CfgDesc>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e6e:	7bbb      	ldrb	r3, [r7, #14]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d103      	bne.n	8006e7c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2204      	movs	r2, #4
 8006e78:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006e7a:	e0cd      	b.n	8007018 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e7c:	7bbb      	ldrb	r3, [r7, #14]
 8006e7e:	2b03      	cmp	r3, #3
 8006e80:	f040 80ca 	bne.w	8007018 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	b2da      	uxtb	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e9a:	2b03      	cmp	r3, #3
 8006e9c:	d903      	bls.n	8006ea6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	220d      	movs	r2, #13
 8006ea2:	701a      	strb	r2, [r3, #0]
      break;
 8006ea4:	e0b8      	b.n	8007018 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	795b      	ldrb	r3, [r3, #5]
 8006eaa:	4619      	mov	r1, r3
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fee9 	bl	8007c84 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	791b      	ldrb	r3, [r3, #4]
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fee3 	bl	8007c84 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	701a      	strb	r2, [r3, #0]
      break;
 8006eca:	e0a5      	b.n	8007018 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f965 	bl	80071a4 <USBH_Get_CfgDesc>
 8006eda:	4603      	mov	r3, r0
 8006edc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006ede:	7bbb      	ldrb	r3, [r7, #14]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d103      	bne.n	8006eec <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2205      	movs	r2, #5
 8006ee8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006eea:	e097      	b.n	800701c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006eec:	7bbb      	ldrb	r3, [r7, #14]
 8006eee:	2b03      	cmp	r3, #3
 8006ef0:	f040 8094 	bne.w	800701c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006efa:	3301      	adds	r3, #1
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f0a:	2b03      	cmp	r3, #3
 8006f0c:	d903      	bls.n	8006f16 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	220d      	movs	r2, #13
 8006f12:	701a      	strb	r2, [r3, #0]
      break;
 8006f14:	e082      	b.n	800701c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	795b      	ldrb	r3, [r3, #5]
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 feb1 	bl	8007c84 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	791b      	ldrb	r3, [r3, #4]
 8006f26:	4619      	mov	r1, r3
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 feab 	bl	8007c84 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	701a      	strb	r2, [r3, #0]
      break;
 8006f3a:	e06f      	b.n	800701c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d019      	beq.n	8006f7a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006f52:	23ff      	movs	r3, #255	; 0xff
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f949 	bl	80071ec <USBH_Get_StringDesc>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006f5e:	7bbb      	ldrb	r3, [r7, #14]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d103      	bne.n	8006f6c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2206      	movs	r2, #6
 8006f68:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006f6a:	e059      	b.n	8007020 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f6c:	7bbb      	ldrb	r3, [r7, #14]
 8006f6e:	2b03      	cmp	r3, #3
 8006f70:	d156      	bne.n	8007020 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2206      	movs	r2, #6
 8006f76:	705a      	strb	r2, [r3, #1]
      break;
 8006f78:	e052      	b.n	8007020 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2206      	movs	r2, #6
 8006f7e:	705a      	strb	r2, [r3, #1]
      break;
 8006f80:	e04e      	b.n	8007020 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d019      	beq.n	8006fc0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006f98:	23ff      	movs	r3, #255	; 0xff
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f926 	bl	80071ec <USBH_Get_StringDesc>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006fa4:	7bbb      	ldrb	r3, [r7, #14]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d103      	bne.n	8006fb2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2207      	movs	r2, #7
 8006fae:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006fb0:	e038      	b.n	8007024 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006fb2:	7bbb      	ldrb	r3, [r7, #14]
 8006fb4:	2b03      	cmp	r3, #3
 8006fb6:	d135      	bne.n	8007024 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2207      	movs	r2, #7
 8006fbc:	705a      	strb	r2, [r3, #1]
      break;
 8006fbe:	e031      	b.n	8007024 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2207      	movs	r2, #7
 8006fc4:	705a      	strb	r2, [r3, #1]
      break;
 8006fc6:	e02d      	b.n	8007024 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d017      	beq.n	8007002 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006fde:	23ff      	movs	r3, #255	; 0xff
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 f903 	bl	80071ec <USBH_Get_StringDesc>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006fea:	7bbb      	ldrb	r3, [r7, #14]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d102      	bne.n	8006ff6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006ff4:	e018      	b.n	8007028 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ff6:	7bbb      	ldrb	r3, [r7, #14]
 8006ff8:	2b03      	cmp	r3, #3
 8006ffa:	d115      	bne.n	8007028 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8007000:	e012      	b.n	8007028 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007002:	2300      	movs	r3, #0
 8007004:	73fb      	strb	r3, [r7, #15]
      break;
 8007006:	e00f      	b.n	8007028 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007008:	bf00      	nop
 800700a:	e00e      	b.n	800702a <USBH_HandleEnum+0x3be>
      break;
 800700c:	bf00      	nop
 800700e:	e00c      	b.n	800702a <USBH_HandleEnum+0x3be>
      break;
 8007010:	bf00      	nop
 8007012:	e00a      	b.n	800702a <USBH_HandleEnum+0x3be>
      break;
 8007014:	bf00      	nop
 8007016:	e008      	b.n	800702a <USBH_HandleEnum+0x3be>
      break;
 8007018:	bf00      	nop
 800701a:	e006      	b.n	800702a <USBH_HandleEnum+0x3be>
      break;
 800701c:	bf00      	nop
 800701e:	e004      	b.n	800702a <USBH_HandleEnum+0x3be>
      break;
 8007020:	bf00      	nop
 8007022:	e002      	b.n	800702a <USBH_HandleEnum+0x3be>
      break;
 8007024:	bf00      	nop
 8007026:	e000      	b.n	800702a <USBH_HandleEnum+0x3be>
      break;
 8007028:	bf00      	nop
  }
  return Status;
 800702a:	7bfb      	ldrb	r3, [r7, #15]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	683a      	ldr	r2, [r7, #0]
 8007042:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007046:	bf00      	nop
 8007048:	370c      	adds	r7, #12
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr

08007052 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b082      	sub	sp, #8
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007060:	1c5a      	adds	r2, r3, #1
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f804 	bl	8007076 <USBH_HandleSof>
}
 800706e:	bf00      	nop
 8007070:	3708      	adds	r7, #8
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b082      	sub	sp, #8
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	b2db      	uxtb	r3, r3
 8007084:	2b0b      	cmp	r3, #11
 8007086:	d10a      	bne.n	800709e <USBH_HandleSof+0x28>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800708e:	2b00      	cmp	r3, #0
 8007090:	d005      	beq.n	800709e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	4798      	blx	r3
  }
}
 800709e:	bf00      	nop
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80070a6:	b480      	push	{r7}
 80070a8:	b083      	sub	sp, #12
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80070b6:	bf00      	nop
}
 80070b8:	370c      	adds	r7, #12
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr

080070c2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b083      	sub	sp, #12
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80070d2:	bf00      	nop
}
 80070d4:	370c      	adds	r7, #12
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr

080070de <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80070de:	b480      	push	{r7}
 80070e0:	b083      	sub	sp, #12
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2201      	movs	r2, #1
 80070ea:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 ff56 	bl	8007fde <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	791b      	ldrb	r3, [r3, #4]
 8007136:	4619      	mov	r1, r3
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 fda3 	bl	8007c84 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	795b      	ldrb	r3, [r3, #5]
 8007142:	4619      	mov	r1, r3
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 fd9d 	bl	8007c84 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3708      	adds	r7, #8
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b086      	sub	sp, #24
 8007158:	af02      	add	r7, sp, #8
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	460b      	mov	r3, r1
 800715e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007166:	78fb      	ldrb	r3, [r7, #3]
 8007168:	b29b      	uxth	r3, r3
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	4613      	mov	r3, r2
 800716e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007172:	2100      	movs	r1, #0
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 f864 	bl	8007242 <USBH_GetDescriptor>
 800717a:	4603      	mov	r3, r0
 800717c:	73fb      	strb	r3, [r7, #15]
 800717e:	7bfb      	ldrb	r3, [r7, #15]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10a      	bne.n	800719a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f203 3026 	addw	r0, r3, #806	; 0x326
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007190:	78fa      	ldrb	r2, [r7, #3]
 8007192:	b292      	uxth	r2, r2
 8007194:	4619      	mov	r1, r3
 8007196:	f000 f918 	bl	80073ca <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800719a:	7bfb      	ldrb	r3, [r7, #15]
}
 800719c:	4618      	mov	r0, r3
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af02      	add	r7, sp, #8
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	460b      	mov	r3, r1
 80071ae:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	331c      	adds	r3, #28
 80071b4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80071b6:	887b      	ldrh	r3, [r7, #2]
 80071b8:	9300      	str	r3, [sp, #0]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071c0:	2100      	movs	r1, #0
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 f83d 	bl	8007242 <USBH_GetDescriptor>
 80071c8:	4603      	mov	r3, r0
 80071ca:	72fb      	strb	r3, [r7, #11]
 80071cc:	7afb      	ldrb	r3, [r7, #11]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d107      	bne.n	80071e2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80071d8:	887a      	ldrh	r2, [r7, #2]
 80071da:	68f9      	ldr	r1, [r7, #12]
 80071dc:	4618      	mov	r0, r3
 80071de:	f000 f964 	bl	80074aa <USBH_ParseCfgDesc>
  }

  return status;
 80071e2:	7afb      	ldrb	r3, [r7, #11]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b088      	sub	sp, #32
 80071f0:	af02      	add	r7, sp, #8
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	607a      	str	r2, [r7, #4]
 80071f6:	461a      	mov	r2, r3
 80071f8:	460b      	mov	r3, r1
 80071fa:	72fb      	strb	r3, [r7, #11]
 80071fc:	4613      	mov	r3, r2
 80071fe:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007200:	7afb      	ldrb	r3, [r7, #11]
 8007202:	b29b      	uxth	r3, r3
 8007204:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007208:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007210:	893b      	ldrh	r3, [r7, #8]
 8007212:	9300      	str	r3, [sp, #0]
 8007214:	460b      	mov	r3, r1
 8007216:	2100      	movs	r1, #0
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f000 f812 	bl	8007242 <USBH_GetDescriptor>
 800721e:	4603      	mov	r3, r0
 8007220:	75fb      	strb	r3, [r7, #23]
 8007222:	7dfb      	ldrb	r3, [r7, #23]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d107      	bne.n	8007238 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800722e:	893a      	ldrh	r2, [r7, #8]
 8007230:	6879      	ldr	r1, [r7, #4]
 8007232:	4618      	mov	r0, r3
 8007234:	f000 fa37 	bl	80076a6 <USBH_ParseStringDesc>
  }

  return status;
 8007238:	7dfb      	ldrb	r3, [r7, #23]
}
 800723a:	4618      	mov	r0, r3
 800723c:	3718      	adds	r7, #24
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b084      	sub	sp, #16
 8007246:	af00      	add	r7, sp, #0
 8007248:	60f8      	str	r0, [r7, #12]
 800724a:	607b      	str	r3, [r7, #4]
 800724c:	460b      	mov	r3, r1
 800724e:	72fb      	strb	r3, [r7, #11]
 8007250:	4613      	mov	r3, r2
 8007252:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	789b      	ldrb	r3, [r3, #2]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d11c      	bne.n	8007296 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800725c:	7afb      	ldrb	r3, [r7, #11]
 800725e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007262:	b2da      	uxtb	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2206      	movs	r2, #6
 800726c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	893a      	ldrh	r2, [r7, #8]
 8007272:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007274:	893b      	ldrh	r3, [r7, #8]
 8007276:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800727a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800727e:	d104      	bne.n	800728a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f240 4209 	movw	r2, #1033	; 0x409
 8007286:	829a      	strh	r2, [r3, #20]
 8007288:	e002      	b.n	8007290 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2200      	movs	r2, #0
 800728e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	8b3a      	ldrh	r2, [r7, #24]
 8007294:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007296:	8b3b      	ldrh	r3, [r7, #24]
 8007298:	461a      	mov	r2, r3
 800729a:	6879      	ldr	r1, [r7, #4]
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f000 fa50 	bl	8007742 <USBH_CtlReq>
 80072a2:	4603      	mov	r3, r0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	460b      	mov	r3, r1
 80072b6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	789b      	ldrb	r3, [r3, #2]
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d10f      	bne.n	80072e0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2205      	movs	r2, #5
 80072ca:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80072cc:	78fb      	ldrb	r3, [r7, #3]
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80072e0:	2200      	movs	r2, #0
 80072e2:	2100      	movs	r1, #0
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 fa2c 	bl	8007742 <USBH_CtlReq>
 80072ea:	4603      	mov	r3, r0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3708      	adds	r7, #8
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	460b      	mov	r3, r1
 80072fe:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	789b      	ldrb	r3, [r3, #2]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d10e      	bne.n	8007326 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2209      	movs	r2, #9
 8007312:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	887a      	ldrh	r2, [r7, #2]
 8007318:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007326:	2200      	movs	r2, #0
 8007328:	2100      	movs	r1, #0
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 fa09 	bl	8007742 <USBH_CtlReq>
 8007330:	4603      	mov	r3, r0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3708      	adds	r7, #8
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b082      	sub	sp, #8
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
 8007342:	460b      	mov	r3, r1
 8007344:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	789b      	ldrb	r3, [r3, #2]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d10f      	bne.n	800736e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2203      	movs	r2, #3
 8007358:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800735a:	78fb      	ldrb	r3, [r7, #3]
 800735c:	b29a      	uxth	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800736e:	2200      	movs	r2, #0
 8007370:	2100      	movs	r1, #0
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f9e5 	bl	8007742 <USBH_CtlReq>
 8007378:	4603      	mov	r3, r0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3708      	adds	r7, #8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b082      	sub	sp, #8
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
 800738a:	460b      	mov	r3, r1
 800738c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	789b      	ldrb	r3, [r3, #2]
 8007392:	2b01      	cmp	r3, #1
 8007394:	d10f      	bne.n	80073b6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2202      	movs	r2, #2
 800739a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80073a8:	78fb      	ldrb	r3, [r7, #3]
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80073b6:	2200      	movs	r2, #0
 80073b8:	2100      	movs	r1, #0
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f9c1 	bl	8007742 <USBH_CtlReq>
 80073c0:	4603      	mov	r3, r0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3708      	adds	r7, #8
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80073ca:	b480      	push	{r7}
 80073cc:	b085      	sub	sp, #20
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	60f8      	str	r0, [r7, #12]
 80073d2:	60b9      	str	r1, [r7, #8]
 80073d4:	4613      	mov	r3, r2
 80073d6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	781a      	ldrb	r2, [r3, #0]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	785a      	ldrb	r2, [r3, #1]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	3302      	adds	r3, #2
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	3303      	adds	r3, #3
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	021b      	lsls	r3, r3, #8
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	4313      	orrs	r3, r2
 80073fe:	b29a      	uxth	r2, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	791a      	ldrb	r2, [r3, #4]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	795a      	ldrb	r2, [r3, #5]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	799a      	ldrb	r2, [r3, #6]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	79da      	ldrb	r2, [r3, #7]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007424:	88fb      	ldrh	r3, [r7, #6]
 8007426:	2b08      	cmp	r3, #8
 8007428:	d939      	bls.n	800749e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	3308      	adds	r3, #8
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	b29a      	uxth	r2, r3
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	3309      	adds	r3, #9
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	b29b      	uxth	r3, r3
 800743a:	021b      	lsls	r3, r3, #8
 800743c:	b29b      	uxth	r3, r3
 800743e:	4313      	orrs	r3, r2
 8007440:	b29a      	uxth	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	330a      	adds	r3, #10
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	b29a      	uxth	r2, r3
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	330b      	adds	r3, #11
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	b29b      	uxth	r3, r3
 8007456:	021b      	lsls	r3, r3, #8
 8007458:	b29b      	uxth	r3, r3
 800745a:	4313      	orrs	r3, r2
 800745c:	b29a      	uxth	r2, r3
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	330c      	adds	r3, #12
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	b29a      	uxth	r2, r3
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	330d      	adds	r3, #13
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	b29b      	uxth	r3, r3
 8007472:	021b      	lsls	r3, r3, #8
 8007474:	b29b      	uxth	r3, r3
 8007476:	4313      	orrs	r3, r2
 8007478:	b29a      	uxth	r2, r3
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	7b9a      	ldrb	r2, [r3, #14]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	7bda      	ldrb	r2, [r3, #15]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	7c1a      	ldrb	r2, [r3, #16]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	7c5a      	ldrb	r2, [r3, #17]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	745a      	strb	r2, [r3, #17]
  }
}
 800749e:	bf00      	nop
 80074a0:	3714      	adds	r7, #20
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr

080074aa <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b08a      	sub	sp, #40	; 0x28
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	60f8      	str	r0, [r7, #12]
 80074b2:	60b9      	str	r1, [r7, #8]
 80074b4:	4613      	mov	r3, r2
 80074b6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80074bc:	2300      	movs	r3, #0
 80074be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80074c2:	2300      	movs	r3, #0
 80074c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	781a      	ldrb	r2, [r3, #0]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	785a      	ldrb	r2, [r3, #1]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	3302      	adds	r3, #2
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	3303      	adds	r3, #3
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	021b      	lsls	r3, r3, #8
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	4313      	orrs	r3, r2
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	791a      	ldrb	r2, [r3, #4]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	795a      	ldrb	r2, [r3, #5]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	799a      	ldrb	r2, [r3, #6]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	79da      	ldrb	r2, [r3, #7]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	7a1a      	ldrb	r2, [r3, #8]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007520:	88fb      	ldrh	r3, [r7, #6]
 8007522:	2b09      	cmp	r3, #9
 8007524:	d95f      	bls.n	80075e6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007526:	2309      	movs	r3, #9
 8007528:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800752a:	2300      	movs	r3, #0
 800752c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800752e:	e051      	b.n	80075d4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007530:	f107 0316 	add.w	r3, r7, #22
 8007534:	4619      	mov	r1, r3
 8007536:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007538:	f000 f8e8 	bl	800770c <USBH_GetNextDesc>
 800753c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007540:	785b      	ldrb	r3, [r3, #1]
 8007542:	2b04      	cmp	r3, #4
 8007544:	d146      	bne.n	80075d4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007546:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800754a:	221a      	movs	r2, #26
 800754c:	fb02 f303 	mul.w	r3, r2, r3
 8007550:	3308      	adds	r3, #8
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	4413      	add	r3, r2
 8007556:	3302      	adds	r3, #2
 8007558:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800755a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800755c:	69f8      	ldr	r0, [r7, #28]
 800755e:	f000 f846 	bl	80075ee <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007562:	2300      	movs	r3, #0
 8007564:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007568:	2300      	movs	r3, #0
 800756a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800756c:	e022      	b.n	80075b4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800756e:	f107 0316 	add.w	r3, r7, #22
 8007572:	4619      	mov	r1, r3
 8007574:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007576:	f000 f8c9 	bl	800770c <USBH_GetNextDesc>
 800757a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800757c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757e:	785b      	ldrb	r3, [r3, #1]
 8007580:	2b05      	cmp	r3, #5
 8007582:	d117      	bne.n	80075b4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007584:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007588:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800758c:	3201      	adds	r2, #1
 800758e:	00d2      	lsls	r2, r2, #3
 8007590:	211a      	movs	r1, #26
 8007592:	fb01 f303 	mul.w	r3, r1, r3
 8007596:	4413      	add	r3, r2
 8007598:	3308      	adds	r3, #8
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	4413      	add	r3, r2
 800759e:	3304      	adds	r3, #4
 80075a0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80075a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075a4:	69b8      	ldr	r0, [r7, #24]
 80075a6:	f000 f851 	bl	800764c <USBH_ParseEPDesc>
            ep_ix++;
 80075aa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80075ae:	3301      	adds	r3, #1
 80075b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	791b      	ldrb	r3, [r3, #4]
 80075b8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80075bc:	429a      	cmp	r2, r3
 80075be:	d204      	bcs.n	80075ca <USBH_ParseCfgDesc+0x120>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	885a      	ldrh	r2, [r3, #2]
 80075c4:	8afb      	ldrh	r3, [r7, #22]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d8d1      	bhi.n	800756e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80075ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075ce:	3301      	adds	r3, #1
 80075d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80075d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d804      	bhi.n	80075e6 <USBH_ParseCfgDesc+0x13c>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	885a      	ldrh	r2, [r3, #2]
 80075e0:	8afb      	ldrh	r3, [r7, #22]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d8a4      	bhi.n	8007530 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80075e6:	bf00      	nop
 80075e8:	3728      	adds	r7, #40	; 0x28
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80075ee:	b480      	push	{r7}
 80075f0:	b083      	sub	sp, #12
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	781a      	ldrb	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	785a      	ldrb	r2, [r3, #1]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	789a      	ldrb	r2, [r3, #2]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	78da      	ldrb	r2, [r3, #3]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	791a      	ldrb	r2, [r3, #4]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	795a      	ldrb	r2, [r3, #5]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	799a      	ldrb	r2, [r3, #6]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	79da      	ldrb	r2, [r3, #7]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	7a1a      	ldrb	r2, [r3, #8]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	721a      	strb	r2, [r3, #8]
}
 8007640:	bf00      	nop
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	781a      	ldrb	r2, [r3, #0]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	785a      	ldrb	r2, [r3, #1]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	789a      	ldrb	r2, [r3, #2]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	78da      	ldrb	r2, [r3, #3]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	3304      	adds	r3, #4
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	b29a      	uxth	r2, r3
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	3305      	adds	r3, #5
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	b29b      	uxth	r3, r3
 8007686:	021b      	lsls	r3, r3, #8
 8007688:	b29b      	uxth	r3, r3
 800768a:	4313      	orrs	r3, r2
 800768c:	b29a      	uxth	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	799a      	ldrb	r2, [r3, #6]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	719a      	strb	r2, [r3, #6]
}
 800769a:	bf00      	nop
 800769c:	370c      	adds	r7, #12
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr

080076a6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80076a6:	b480      	push	{r7}
 80076a8:	b087      	sub	sp, #28
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	60f8      	str	r0, [r7, #12]
 80076ae:	60b9      	str	r1, [r7, #8]
 80076b0:	4613      	mov	r3, r2
 80076b2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	3301      	adds	r3, #1
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	2b03      	cmp	r3, #3
 80076bc:	d120      	bne.n	8007700 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	1e9a      	subs	r2, r3, #2
 80076c4:	88fb      	ldrh	r3, [r7, #6]
 80076c6:	4293      	cmp	r3, r2
 80076c8:	bf28      	it	cs
 80076ca:	4613      	movcs	r3, r2
 80076cc:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	3302      	adds	r3, #2
 80076d2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80076d4:	2300      	movs	r3, #0
 80076d6:	82fb      	strh	r3, [r7, #22]
 80076d8:	e00b      	b.n	80076f2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80076da:	8afb      	ldrh	r3, [r7, #22]
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	4413      	add	r3, r2
 80076e0:	781a      	ldrb	r2, [r3, #0]
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	701a      	strb	r2, [r3, #0]
      pdest++;
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	3301      	adds	r3, #1
 80076ea:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80076ec:	8afb      	ldrh	r3, [r7, #22]
 80076ee:	3302      	adds	r3, #2
 80076f0:	82fb      	strh	r3, [r7, #22]
 80076f2:	8afa      	ldrh	r2, [r7, #22]
 80076f4:	8abb      	ldrh	r3, [r7, #20]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d3ef      	bcc.n	80076da <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	2200      	movs	r2, #0
 80076fe:	701a      	strb	r2, [r3, #0]
  }
}
 8007700:	bf00      	nop
 8007702:	371c      	adds	r7, #28
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	881a      	ldrh	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	b29b      	uxth	r3, r3
 8007720:	4413      	add	r3, r2
 8007722:	b29a      	uxth	r2, r3
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4413      	add	r3, r2
 8007732:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007734:	68fb      	ldr	r3, [r7, #12]
}
 8007736:	4618      	mov	r0, r3
 8007738:	3714      	adds	r7, #20
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr

08007742 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b086      	sub	sp, #24
 8007746:	af00      	add	r7, sp, #0
 8007748:	60f8      	str	r0, [r7, #12]
 800774a:	60b9      	str	r1, [r7, #8]
 800774c:	4613      	mov	r3, r2
 800774e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007750:	2301      	movs	r3, #1
 8007752:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	789b      	ldrb	r3, [r3, #2]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d002      	beq.n	8007762 <USBH_CtlReq+0x20>
 800775c:	2b02      	cmp	r3, #2
 800775e:	d00f      	beq.n	8007780 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007760:	e027      	b.n	80077b2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	88fa      	ldrh	r2, [r7, #6]
 800776c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2201      	movs	r2, #1
 8007772:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2202      	movs	r2, #2
 8007778:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800777a:	2301      	movs	r3, #1
 800777c:	75fb      	strb	r3, [r7, #23]
      break;
 800777e:	e018      	b.n	80077b2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f000 f81b 	bl	80077bc <USBH_HandleControl>
 8007786:	4603      	mov	r3, r0
 8007788:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800778a:	7dfb      	ldrb	r3, [r7, #23]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d002      	beq.n	8007796 <USBH_CtlReq+0x54>
 8007790:	7dfb      	ldrb	r3, [r7, #23]
 8007792:	2b03      	cmp	r3, #3
 8007794:	d106      	bne.n	80077a4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2201      	movs	r2, #1
 800779a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2200      	movs	r2, #0
 80077a0:	761a      	strb	r2, [r3, #24]
      break;
 80077a2:	e005      	b.n	80077b0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80077a4:	7dfb      	ldrb	r3, [r7, #23]
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d102      	bne.n	80077b0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2201      	movs	r2, #1
 80077ae:	709a      	strb	r2, [r3, #2]
      break;
 80077b0:	bf00      	nop
  }
  return status;
 80077b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3718      	adds	r7, #24
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b086      	sub	sp, #24
 80077c0:	af02      	add	r7, sp, #8
 80077c2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80077c4:	2301      	movs	r3, #1
 80077c6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80077c8:	2300      	movs	r3, #0
 80077ca:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	7e1b      	ldrb	r3, [r3, #24]
 80077d0:	3b01      	subs	r3, #1
 80077d2:	2b0a      	cmp	r3, #10
 80077d4:	f200 8156 	bhi.w	8007a84 <USBH_HandleControl+0x2c8>
 80077d8:	a201      	add	r2, pc, #4	; (adr r2, 80077e0 <USBH_HandleControl+0x24>)
 80077da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077de:	bf00      	nop
 80077e0:	0800780d 	.word	0x0800780d
 80077e4:	08007827 	.word	0x08007827
 80077e8:	08007891 	.word	0x08007891
 80077ec:	080078b7 	.word	0x080078b7
 80077f0:	080078ef 	.word	0x080078ef
 80077f4:	08007919 	.word	0x08007919
 80077f8:	0800796b 	.word	0x0800796b
 80077fc:	0800798d 	.word	0x0800798d
 8007800:	080079c9 	.word	0x080079c9
 8007804:	080079ef 	.word	0x080079ef
 8007808:	08007a2d 	.word	0x08007a2d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f103 0110 	add.w	r1, r3, #16
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	795b      	ldrb	r3, [r3, #5]
 8007816:	461a      	mov	r2, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f943 	bl	8007aa4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2202      	movs	r2, #2
 8007822:	761a      	strb	r2, [r3, #24]
      break;
 8007824:	e139      	b.n	8007a9a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	795b      	ldrb	r3, [r3, #5]
 800782a:	4619      	mov	r1, r3
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fcc5 	bl	80081bc <USBH_LL_GetURBState>
 8007832:	4603      	mov	r3, r0
 8007834:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007836:	7bbb      	ldrb	r3, [r7, #14]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d11e      	bne.n	800787a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	7c1b      	ldrb	r3, [r3, #16]
 8007840:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007844:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	8adb      	ldrh	r3, [r3, #22]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00a      	beq.n	8007864 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800784e:	7b7b      	ldrb	r3, [r7, #13]
 8007850:	2b80      	cmp	r3, #128	; 0x80
 8007852:	d103      	bne.n	800785c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2203      	movs	r2, #3
 8007858:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800785a:	e115      	b.n	8007a88 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2205      	movs	r2, #5
 8007860:	761a      	strb	r2, [r3, #24]
      break;
 8007862:	e111      	b.n	8007a88 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007864:	7b7b      	ldrb	r3, [r7, #13]
 8007866:	2b80      	cmp	r3, #128	; 0x80
 8007868:	d103      	bne.n	8007872 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2209      	movs	r2, #9
 800786e:	761a      	strb	r2, [r3, #24]
      break;
 8007870:	e10a      	b.n	8007a88 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2207      	movs	r2, #7
 8007876:	761a      	strb	r2, [r3, #24]
      break;
 8007878:	e106      	b.n	8007a88 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800787a:	7bbb      	ldrb	r3, [r7, #14]
 800787c:	2b04      	cmp	r3, #4
 800787e:	d003      	beq.n	8007888 <USBH_HandleControl+0xcc>
 8007880:	7bbb      	ldrb	r3, [r7, #14]
 8007882:	2b02      	cmp	r3, #2
 8007884:	f040 8100 	bne.w	8007a88 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	220b      	movs	r2, #11
 800788c:	761a      	strb	r2, [r3, #24]
      break;
 800788e:	e0fb      	b.n	8007a88 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007896:	b29a      	uxth	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6899      	ldr	r1, [r3, #8]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	899a      	ldrh	r2, [r3, #12]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	791b      	ldrb	r3, [r3, #4]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f93a 	bl	8007b22 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2204      	movs	r2, #4
 80078b2:	761a      	strb	r2, [r3, #24]
      break;
 80078b4:	e0f1      	b.n	8007a9a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	791b      	ldrb	r3, [r3, #4]
 80078ba:	4619      	mov	r1, r3
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fc7d 	bl	80081bc <USBH_LL_GetURBState>
 80078c2:	4603      	mov	r3, r0
 80078c4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80078c6:	7bbb      	ldrb	r3, [r7, #14]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d102      	bne.n	80078d2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2209      	movs	r2, #9
 80078d0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80078d2:	7bbb      	ldrb	r3, [r7, #14]
 80078d4:	2b05      	cmp	r3, #5
 80078d6:	d102      	bne.n	80078de <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80078d8:	2303      	movs	r3, #3
 80078da:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80078dc:	e0d6      	b.n	8007a8c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80078de:	7bbb      	ldrb	r3, [r7, #14]
 80078e0:	2b04      	cmp	r3, #4
 80078e2:	f040 80d3 	bne.w	8007a8c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	220b      	movs	r2, #11
 80078ea:	761a      	strb	r2, [r3, #24]
      break;
 80078ec:	e0ce      	b.n	8007a8c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6899      	ldr	r1, [r3, #8]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	899a      	ldrh	r2, [r3, #12]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	795b      	ldrb	r3, [r3, #5]
 80078fa:	2001      	movs	r0, #1
 80078fc:	9000      	str	r0, [sp, #0]
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f8ea 	bl	8007ad8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800790a:	b29a      	uxth	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2206      	movs	r2, #6
 8007914:	761a      	strb	r2, [r3, #24]
      break;
 8007916:	e0c0      	b.n	8007a9a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	795b      	ldrb	r3, [r3, #5]
 800791c:	4619      	mov	r1, r3
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fc4c 	bl	80081bc <USBH_LL_GetURBState>
 8007924:	4603      	mov	r3, r0
 8007926:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007928:	7bbb      	ldrb	r3, [r7, #14]
 800792a:	2b01      	cmp	r3, #1
 800792c:	d103      	bne.n	8007936 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2207      	movs	r2, #7
 8007932:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007934:	e0ac      	b.n	8007a90 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007936:	7bbb      	ldrb	r3, [r7, #14]
 8007938:	2b05      	cmp	r3, #5
 800793a:	d105      	bne.n	8007948 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	220c      	movs	r2, #12
 8007940:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007942:	2303      	movs	r3, #3
 8007944:	73fb      	strb	r3, [r7, #15]
      break;
 8007946:	e0a3      	b.n	8007a90 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007948:	7bbb      	ldrb	r3, [r7, #14]
 800794a:	2b02      	cmp	r3, #2
 800794c:	d103      	bne.n	8007956 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2205      	movs	r2, #5
 8007952:	761a      	strb	r2, [r3, #24]
      break;
 8007954:	e09c      	b.n	8007a90 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007956:	7bbb      	ldrb	r3, [r7, #14]
 8007958:	2b04      	cmp	r3, #4
 800795a:	f040 8099 	bne.w	8007a90 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	220b      	movs	r2, #11
 8007962:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007964:	2302      	movs	r3, #2
 8007966:	73fb      	strb	r3, [r7, #15]
      break;
 8007968:	e092      	b.n	8007a90 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	791b      	ldrb	r3, [r3, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	2100      	movs	r1, #0
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f8d5 	bl	8007b22 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800797e:	b29a      	uxth	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2208      	movs	r2, #8
 8007988:	761a      	strb	r2, [r3, #24]

      break;
 800798a:	e086      	b.n	8007a9a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	791b      	ldrb	r3, [r3, #4]
 8007990:	4619      	mov	r1, r3
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fc12 	bl	80081bc <USBH_LL_GetURBState>
 8007998:	4603      	mov	r3, r0
 800799a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800799c:	7bbb      	ldrb	r3, [r7, #14]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d105      	bne.n	80079ae <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	220d      	movs	r2, #13
 80079a6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80079a8:	2300      	movs	r3, #0
 80079aa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80079ac:	e072      	b.n	8007a94 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80079ae:	7bbb      	ldrb	r3, [r7, #14]
 80079b0:	2b04      	cmp	r3, #4
 80079b2:	d103      	bne.n	80079bc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	220b      	movs	r2, #11
 80079b8:	761a      	strb	r2, [r3, #24]
      break;
 80079ba:	e06b      	b.n	8007a94 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80079bc:	7bbb      	ldrb	r3, [r7, #14]
 80079be:	2b05      	cmp	r3, #5
 80079c0:	d168      	bne.n	8007a94 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80079c2:	2303      	movs	r3, #3
 80079c4:	73fb      	strb	r3, [r7, #15]
      break;
 80079c6:	e065      	b.n	8007a94 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	795b      	ldrb	r3, [r3, #5]
 80079cc:	2201      	movs	r2, #1
 80079ce:	9200      	str	r2, [sp, #0]
 80079d0:	2200      	movs	r2, #0
 80079d2:	2100      	movs	r1, #0
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 f87f 	bl	8007ad8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	220a      	movs	r2, #10
 80079ea:	761a      	strb	r2, [r3, #24]
      break;
 80079ec:	e055      	b.n	8007a9a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	795b      	ldrb	r3, [r3, #5]
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fbe1 	bl	80081bc <USBH_LL_GetURBState>
 80079fa:	4603      	mov	r3, r0
 80079fc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80079fe:	7bbb      	ldrb	r3, [r7, #14]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d105      	bne.n	8007a10 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007a04:	2300      	movs	r3, #0
 8007a06:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	220d      	movs	r2, #13
 8007a0c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007a0e:	e043      	b.n	8007a98 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007a10:	7bbb      	ldrb	r3, [r7, #14]
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d103      	bne.n	8007a1e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2209      	movs	r2, #9
 8007a1a:	761a      	strb	r2, [r3, #24]
      break;
 8007a1c:	e03c      	b.n	8007a98 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007a1e:	7bbb      	ldrb	r3, [r7, #14]
 8007a20:	2b04      	cmp	r3, #4
 8007a22:	d139      	bne.n	8007a98 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	220b      	movs	r2, #11
 8007a28:	761a      	strb	r2, [r3, #24]
      break;
 8007a2a:	e035      	b.n	8007a98 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	7e5b      	ldrb	r3, [r3, #25]
 8007a30:	3301      	adds	r3, #1
 8007a32:	b2da      	uxtb	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	765a      	strb	r2, [r3, #25]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	7e5b      	ldrb	r3, [r3, #25]
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	d806      	bhi.n	8007a4e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007a4c:	e025      	b.n	8007a9a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a54:	2106      	movs	r1, #6
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	795b      	ldrb	r3, [r3, #5]
 8007a64:	4619      	mov	r1, r3
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f90c 	bl	8007c84 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	791b      	ldrb	r3, [r3, #4]
 8007a70:	4619      	mov	r1, r3
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f906 	bl	8007c84 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007a7e:	2302      	movs	r3, #2
 8007a80:	73fb      	strb	r3, [r7, #15]
      break;
 8007a82:	e00a      	b.n	8007a9a <USBH_HandleControl+0x2de>

    default:
      break;
 8007a84:	bf00      	nop
 8007a86:	e008      	b.n	8007a9a <USBH_HandleControl+0x2de>
      break;
 8007a88:	bf00      	nop
 8007a8a:	e006      	b.n	8007a9a <USBH_HandleControl+0x2de>
      break;
 8007a8c:	bf00      	nop
 8007a8e:	e004      	b.n	8007a9a <USBH_HandleControl+0x2de>
      break;
 8007a90:	bf00      	nop
 8007a92:	e002      	b.n	8007a9a <USBH_HandleControl+0x2de>
      break;
 8007a94:	bf00      	nop
 8007a96:	e000      	b.n	8007a9a <USBH_HandleControl+0x2de>
      break;
 8007a98:	bf00      	nop
  }

  return status;
 8007a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b088      	sub	sp, #32
 8007aa8:	af04      	add	r7, sp, #16
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007ab2:	79f9      	ldrb	r1, [r7, #7]
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	9303      	str	r3, [sp, #12]
 8007ab8:	2308      	movs	r3, #8
 8007aba:	9302      	str	r3, [sp, #8]
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	9301      	str	r3, [sp, #4]
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	9300      	str	r3, [sp, #0]
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f000 fb46 	bl	800815a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3710      	adds	r7, #16
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b088      	sub	sp, #32
 8007adc:	af04      	add	r7, sp, #16
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	4611      	mov	r1, r2
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	80fb      	strh	r3, [r7, #6]
 8007aea:	4613      	mov	r3, r2
 8007aec:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d001      	beq.n	8007afc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007af8:	2300      	movs	r3, #0
 8007afa:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007afc:	7979      	ldrb	r1, [r7, #5]
 8007afe:	7e3b      	ldrb	r3, [r7, #24]
 8007b00:	9303      	str	r3, [sp, #12]
 8007b02:	88fb      	ldrh	r3, [r7, #6]
 8007b04:	9302      	str	r3, [sp, #8]
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	9301      	str	r3, [sp, #4]
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	2300      	movs	r3, #0
 8007b10:	2200      	movs	r2, #0
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f000 fb21 	bl	800815a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b088      	sub	sp, #32
 8007b26:	af04      	add	r7, sp, #16
 8007b28:	60f8      	str	r0, [r7, #12]
 8007b2a:	60b9      	str	r1, [r7, #8]
 8007b2c:	4611      	mov	r1, r2
 8007b2e:	461a      	mov	r2, r3
 8007b30:	460b      	mov	r3, r1
 8007b32:	80fb      	strh	r3, [r7, #6]
 8007b34:	4613      	mov	r3, r2
 8007b36:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007b38:	7979      	ldrb	r1, [r7, #5]
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	9303      	str	r3, [sp, #12]
 8007b3e:	88fb      	ldrh	r3, [r7, #6]
 8007b40:	9302      	str	r3, [sp, #8]
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	9301      	str	r3, [sp, #4]
 8007b46:	2301      	movs	r3, #1
 8007b48:	9300      	str	r3, [sp, #0]
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f000 fb03 	bl	800815a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007b54:	2300      	movs	r3, #0

}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b088      	sub	sp, #32
 8007b62:	af04      	add	r7, sp, #16
 8007b64:	60f8      	str	r0, [r7, #12]
 8007b66:	60b9      	str	r1, [r7, #8]
 8007b68:	4611      	mov	r1, r2
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	80fb      	strh	r3, [r7, #6]
 8007b70:	4613      	mov	r3, r2
 8007b72:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d001      	beq.n	8007b82 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007b82:	7979      	ldrb	r1, [r7, #5]
 8007b84:	7e3b      	ldrb	r3, [r7, #24]
 8007b86:	9303      	str	r3, [sp, #12]
 8007b88:	88fb      	ldrh	r3, [r7, #6]
 8007b8a:	9302      	str	r3, [sp, #8]
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	9301      	str	r3, [sp, #4]
 8007b90:	2301      	movs	r3, #1
 8007b92:	9300      	str	r3, [sp, #0]
 8007b94:	2302      	movs	r3, #2
 8007b96:	2200      	movs	r2, #0
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f000 fade 	bl	800815a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3710      	adds	r7, #16
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b088      	sub	sp, #32
 8007bac:	af04      	add	r7, sp, #16
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	4611      	mov	r1, r2
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	80fb      	strh	r3, [r7, #6]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007bbe:	7979      	ldrb	r1, [r7, #5]
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	9303      	str	r3, [sp, #12]
 8007bc4:	88fb      	ldrh	r3, [r7, #6]
 8007bc6:	9302      	str	r3, [sp, #8]
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	9301      	str	r3, [sp, #4]
 8007bcc:	2301      	movs	r3, #1
 8007bce:	9300      	str	r3, [sp, #0]
 8007bd0:	2302      	movs	r3, #2
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	68f8      	ldr	r0, [r7, #12]
 8007bd6:	f000 fac0 	bl	800815a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af04      	add	r7, sp, #16
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	4608      	mov	r0, r1
 8007bee:	4611      	mov	r1, r2
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	70fb      	strb	r3, [r7, #3]
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	70bb      	strb	r3, [r7, #2]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007bfe:	7878      	ldrb	r0, [r7, #1]
 8007c00:	78ba      	ldrb	r2, [r7, #2]
 8007c02:	78f9      	ldrb	r1, [r7, #3]
 8007c04:	8b3b      	ldrh	r3, [r7, #24]
 8007c06:	9302      	str	r3, [sp, #8]
 8007c08:	7d3b      	ldrb	r3, [r7, #20]
 8007c0a:	9301      	str	r3, [sp, #4]
 8007c0c:	7c3b      	ldrb	r3, [r7, #16]
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	4603      	mov	r3, r0
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 fa53 	bl	80080be <USBH_LL_OpenPipe>

  return USBH_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b082      	sub	sp, #8
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007c2e:	78fb      	ldrb	r3, [r7, #3]
 8007c30:	4619      	mov	r1, r3
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 fa72 	bl	800811c <USBH_LL_ClosePipe>

  return USBH_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3708      	adds	r7, #8
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b084      	sub	sp, #16
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 f836 	bl	8007cc0 <USBH_GetFreePipe>
 8007c54:	4603      	mov	r3, r0
 8007c56:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007c58:	89fb      	ldrh	r3, [r7, #14]
 8007c5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d00a      	beq.n	8007c78 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007c62:	78fa      	ldrb	r2, [r7, #3]
 8007c64:	89fb      	ldrh	r3, [r7, #14]
 8007c66:	f003 030f 	and.w	r3, r3, #15
 8007c6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c6e:	6879      	ldr	r1, [r7, #4]
 8007c70:	33e0      	adds	r3, #224	; 0xe0
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	440b      	add	r3, r1
 8007c76:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007c78:	89fb      	ldrh	r3, [r7, #14]
 8007c7a:	b2db      	uxtb	r3, r3
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007c90:	78fb      	ldrb	r3, [r7, #3]
 8007c92:	2b0a      	cmp	r3, #10
 8007c94:	d80d      	bhi.n	8007cb2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007c96:	78fb      	ldrb	r3, [r7, #3]
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	33e0      	adds	r3, #224	; 0xe0
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	4413      	add	r3, r2
 8007ca0:	685a      	ldr	r2, [r3, #4]
 8007ca2:	78fb      	ldrb	r3, [r7, #3]
 8007ca4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007ca8:	6879      	ldr	r1, [r7, #4]
 8007caa:	33e0      	adds	r3, #224	; 0xe0
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	440b      	add	r3, r1
 8007cb0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007ccc:	2300      	movs	r3, #0
 8007cce:	73fb      	strb	r3, [r7, #15]
 8007cd0:	e00f      	b.n	8007cf2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007cd2:	7bfb      	ldrb	r3, [r7, #15]
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	33e0      	adds	r3, #224	; 0xe0
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	4413      	add	r3, r2
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d102      	bne.n	8007cec <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007ce6:	7bfb      	ldrb	r3, [r7, #15]
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	e007      	b.n	8007cfc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007cec:	7bfb      	ldrb	r3, [r7, #15]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	73fb      	strb	r3, [r7, #15]
 8007cf2:	7bfb      	ldrb	r3, [r7, #15]
 8007cf4:	2b0a      	cmp	r3, #10
 8007cf6:	d9ec      	bls.n	8007cd2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007cf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3714      	adds	r7, #20
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	490e      	ldr	r1, [pc, #56]	; (8007d48 <MX_USB_HOST_Init+0x40>)
 8007d10:	480e      	ldr	r0, [pc, #56]	; (8007d4c <MX_USB_HOST_Init+0x44>)
 8007d12:	f7fe fca1 	bl	8006658 <USBH_Init>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d001      	beq.n	8007d20 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007d1c:	f7f8 fe7c 	bl	8000a18 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007d20:	490b      	ldr	r1, [pc, #44]	; (8007d50 <MX_USB_HOST_Init+0x48>)
 8007d22:	480a      	ldr	r0, [pc, #40]	; (8007d4c <MX_USB_HOST_Init+0x44>)
 8007d24:	f7fe fd26 	bl	8006774 <USBH_RegisterClass>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d001      	beq.n	8007d32 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007d2e:	f7f8 fe73 	bl	8000a18 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007d32:	4806      	ldr	r0, [pc, #24]	; (8007d4c <MX_USB_HOST_Init+0x44>)
 8007d34:	f7fe fdaa 	bl	800688c <USBH_Start>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d001      	beq.n	8007d42 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007d3e:	f7f8 fe6b 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007d42:	bf00      	nop
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	08007d69 	.word	0x08007d69
 8007d4c:	20000174 	.word	0x20000174
 8007d50:	2000000c 	.word	0x2000000c

08007d54 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007d58:	4802      	ldr	r0, [pc, #8]	; (8007d64 <MX_USB_HOST_Process+0x10>)
 8007d5a:	f7fe fda7 	bl	80068ac <USBH_Process>
}
 8007d5e:	bf00      	nop
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	20000174 	.word	0x20000174

08007d68 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	460b      	mov	r3, r1
 8007d72:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007d74:	78fb      	ldrb	r3, [r7, #3]
 8007d76:	3b01      	subs	r3, #1
 8007d78:	2b04      	cmp	r3, #4
 8007d7a:	d819      	bhi.n	8007db0 <USBH_UserProcess+0x48>
 8007d7c:	a201      	add	r2, pc, #4	; (adr r2, 8007d84 <USBH_UserProcess+0x1c>)
 8007d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d82:	bf00      	nop
 8007d84:	08007db1 	.word	0x08007db1
 8007d88:	08007da1 	.word	0x08007da1
 8007d8c:	08007db1 	.word	0x08007db1
 8007d90:	08007da9 	.word	0x08007da9
 8007d94:	08007d99 	.word	0x08007d99
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007d98:	4b09      	ldr	r3, [pc, #36]	; (8007dc0 <USBH_UserProcess+0x58>)
 8007d9a:	2203      	movs	r2, #3
 8007d9c:	701a      	strb	r2, [r3, #0]
  break;
 8007d9e:	e008      	b.n	8007db2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007da0:	4b07      	ldr	r3, [pc, #28]	; (8007dc0 <USBH_UserProcess+0x58>)
 8007da2:	2202      	movs	r2, #2
 8007da4:	701a      	strb	r2, [r3, #0]
  break;
 8007da6:	e004      	b.n	8007db2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007da8:	4b05      	ldr	r3, [pc, #20]	; (8007dc0 <USBH_UserProcess+0x58>)
 8007daa:	2201      	movs	r2, #1
 8007dac:	701a      	strb	r2, [r3, #0]
  break;
 8007dae:	e000      	b.n	8007db2 <USBH_UserProcess+0x4a>

  default:
  break;
 8007db0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007db2:	bf00      	nop
 8007db4:	370c      	adds	r7, #12
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	200000b0 	.word	0x200000b0

08007dc4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b08a      	sub	sp, #40	; 0x28
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007dcc:	f107 0314 	add.w	r3, r7, #20
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	605a      	str	r2, [r3, #4]
 8007dd6:	609a      	str	r2, [r3, #8]
 8007dd8:	60da      	str	r2, [r3, #12]
 8007dda:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007de4:	d147      	bne.n	8007e76 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007de6:	2300      	movs	r3, #0
 8007de8:	613b      	str	r3, [r7, #16]
 8007dea:	4b25      	ldr	r3, [pc, #148]	; (8007e80 <HAL_HCD_MspInit+0xbc>)
 8007dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dee:	4a24      	ldr	r2, [pc, #144]	; (8007e80 <HAL_HCD_MspInit+0xbc>)
 8007df0:	f043 0301 	orr.w	r3, r3, #1
 8007df4:	6313      	str	r3, [r2, #48]	; 0x30
 8007df6:	4b22      	ldr	r3, [pc, #136]	; (8007e80 <HAL_HCD_MspInit+0xbc>)
 8007df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dfa:	f003 0301 	and.w	r3, r3, #1
 8007dfe:	613b      	str	r3, [r7, #16]
 8007e00:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007e02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007e10:	f107 0314 	add.w	r3, r7, #20
 8007e14:	4619      	mov	r1, r3
 8007e16:	481b      	ldr	r0, [pc, #108]	; (8007e84 <HAL_HCD_MspInit+0xc0>)
 8007e18:	f7f9 fa3c 	bl	8001294 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007e1c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e22:	2302      	movs	r3, #2
 8007e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e26:	2300      	movs	r3, #0
 8007e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007e2e:	230a      	movs	r3, #10
 8007e30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e32:	f107 0314 	add.w	r3, r7, #20
 8007e36:	4619      	mov	r1, r3
 8007e38:	4812      	ldr	r0, [pc, #72]	; (8007e84 <HAL_HCD_MspInit+0xc0>)
 8007e3a:	f7f9 fa2b 	bl	8001294 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007e3e:	4b10      	ldr	r3, [pc, #64]	; (8007e80 <HAL_HCD_MspInit+0xbc>)
 8007e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e42:	4a0f      	ldr	r2, [pc, #60]	; (8007e80 <HAL_HCD_MspInit+0xbc>)
 8007e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e48:	6353      	str	r3, [r2, #52]	; 0x34
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	60fb      	str	r3, [r7, #12]
 8007e4e:	4b0c      	ldr	r3, [pc, #48]	; (8007e80 <HAL_HCD_MspInit+0xbc>)
 8007e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e52:	4a0b      	ldr	r2, [pc, #44]	; (8007e80 <HAL_HCD_MspInit+0xbc>)
 8007e54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e58:	6453      	str	r3, [r2, #68]	; 0x44
 8007e5a:	4b09      	ldr	r3, [pc, #36]	; (8007e80 <HAL_HCD_MspInit+0xbc>)
 8007e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e62:	60fb      	str	r3, [r7, #12]
 8007e64:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007e66:	2200      	movs	r2, #0
 8007e68:	2100      	movs	r1, #0
 8007e6a:	2043      	movs	r0, #67	; 0x43
 8007e6c:	f7f9 f949 	bl	8001102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007e70:	2043      	movs	r0, #67	; 0x43
 8007e72:	f7f9 f962 	bl	800113a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007e76:	bf00      	nop
 8007e78:	3728      	adds	r7, #40	; 0x28
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	40023800 	.word	0x40023800
 8007e84:	40020000 	.word	0x40020000

08007e88 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7ff f8db 	bl	8007052 <USBH_LL_IncTimer>
}
 8007e9c:	bf00      	nop
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7ff f913 	bl	80070de <USBH_LL_Connect>
}
 8007eb8:	bf00      	nop
 8007eba:	3708      	adds	r7, #8
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7ff f91c 	bl	800710c <USBH_LL_Disconnect>
}
 8007ed4:	bf00      	nop
 8007ed6:	3708      	adds	r7, #8
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	70fb      	strb	r3, [r7, #3]
 8007ee8:	4613      	mov	r3, r2
 8007eea:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007eec:	bf00      	nop
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7ff f8cd 	bl	80070a6 <USBH_LL_PortEnabled>
}
 8007f0c:	bf00      	nop
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7ff f8cd 	bl	80070c2 <USBH_LL_PortDisabled>
}
 8007f28:	bf00      	nop
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d12a      	bne.n	8007f98 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007f42:	4a18      	ldr	r2, [pc, #96]	; (8007fa4 <USBH_LL_Init+0x74>)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a15      	ldr	r2, [pc, #84]	; (8007fa4 <USBH_LL_Init+0x74>)
 8007f4e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007f52:	4b14      	ldr	r3, [pc, #80]	; (8007fa4 <USBH_LL_Init+0x74>)
 8007f54:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007f58:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007f5a:	4b12      	ldr	r3, [pc, #72]	; (8007fa4 <USBH_LL_Init+0x74>)
 8007f5c:	2208      	movs	r2, #8
 8007f5e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007f60:	4b10      	ldr	r3, [pc, #64]	; (8007fa4 <USBH_LL_Init+0x74>)
 8007f62:	2201      	movs	r2, #1
 8007f64:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007f66:	4b0f      	ldr	r3, [pc, #60]	; (8007fa4 <USBH_LL_Init+0x74>)
 8007f68:	2200      	movs	r2, #0
 8007f6a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007f6c:	4b0d      	ldr	r3, [pc, #52]	; (8007fa4 <USBH_LL_Init+0x74>)
 8007f6e:	2202      	movs	r2, #2
 8007f70:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007f72:	4b0c      	ldr	r3, [pc, #48]	; (8007fa4 <USBH_LL_Init+0x74>)
 8007f74:	2200      	movs	r2, #0
 8007f76:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007f78:	480a      	ldr	r0, [pc, #40]	; (8007fa4 <USBH_LL_Init+0x74>)
 8007f7a:	f7f9 fb40 	bl	80015fe <HAL_HCD_Init>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d001      	beq.n	8007f88 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007f84:	f7f8 fd48 	bl	8000a18 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007f88:	4806      	ldr	r0, [pc, #24]	; (8007fa4 <USBH_LL_Init+0x74>)
 8007f8a:	f7f9 ff24 	bl	8001dd6 <HAL_HCD_GetCurrentFrame>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	4619      	mov	r1, r3
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f7ff f84e 	bl	8007034 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	2000054c 	.word	0x2000054c

08007fa8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7f9 fe93 	bl	8001cea <HAL_HCD_Start>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007fc8:	7bfb      	ldrb	r3, [r7, #15]
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f000 f95c 	bl	8008288 <USBH_Get_USB_Status>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b084      	sub	sp, #16
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007fea:	2300      	movs	r3, #0
 8007fec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7f9 fe9b 	bl	8001d30 <HAL_HCD_Stop>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007ffe:	7bfb      	ldrb	r3, [r7, #15]
 8008000:	4618      	mov	r0, r3
 8008002:	f000 f941 	bl	8008288 <USBH_Get_USB_Status>
 8008006:	4603      	mov	r3, r0
 8008008:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800800a:	7bbb      	ldrb	r3, [r7, #14]
}
 800800c:	4618      	mov	r0, r3
 800800e:	3710      	adds	r7, #16
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800801c:	2301      	movs	r3, #1
 800801e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008026:	4618      	mov	r0, r3
 8008028:	f7f9 fee3 	bl	8001df2 <HAL_HCD_GetCurrentSpeed>
 800802c:	4603      	mov	r3, r0
 800802e:	2b02      	cmp	r3, #2
 8008030:	d00c      	beq.n	800804c <USBH_LL_GetSpeed+0x38>
 8008032:	2b02      	cmp	r3, #2
 8008034:	d80d      	bhi.n	8008052 <USBH_LL_GetSpeed+0x3e>
 8008036:	2b00      	cmp	r3, #0
 8008038:	d002      	beq.n	8008040 <USBH_LL_GetSpeed+0x2c>
 800803a:	2b01      	cmp	r3, #1
 800803c:	d003      	beq.n	8008046 <USBH_LL_GetSpeed+0x32>
 800803e:	e008      	b.n	8008052 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008040:	2300      	movs	r3, #0
 8008042:	73fb      	strb	r3, [r7, #15]
    break;
 8008044:	e008      	b.n	8008058 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008046:	2301      	movs	r3, #1
 8008048:	73fb      	strb	r3, [r7, #15]
    break;
 800804a:	e005      	b.n	8008058 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800804c:	2302      	movs	r3, #2
 800804e:	73fb      	strb	r3, [r7, #15]
    break;
 8008050:	e002      	b.n	8008058 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008052:	2301      	movs	r3, #1
 8008054:	73fb      	strb	r3, [r7, #15]
    break;
 8008056:	bf00      	nop
  }
  return  speed;
 8008058:	7bfb      	ldrb	r3, [r7, #15]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b084      	sub	sp, #16
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800806a:	2300      	movs	r3, #0
 800806c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800806e:	2300      	movs	r3, #0
 8008070:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008078:	4618      	mov	r0, r3
 800807a:	f7f9 fe76 	bl	8001d6a <HAL_HCD_ResetPort>
 800807e:	4603      	mov	r3, r0
 8008080:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008082:	7bfb      	ldrb	r3, [r7, #15]
 8008084:	4618      	mov	r0, r3
 8008086:	f000 f8ff 	bl	8008288 <USBH_Get_USB_Status>
 800808a:	4603      	mov	r3, r0
 800808c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800808e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008090:	4618      	mov	r0, r3
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	460b      	mov	r3, r1
 80080a2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080aa:	78fa      	ldrb	r2, [r7, #3]
 80080ac:	4611      	mov	r1, r2
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7f9 fe7d 	bl	8001dae <HAL_HCD_HC_GetXferCount>
 80080b4:	4603      	mov	r3, r0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80080be:	b590      	push	{r4, r7, lr}
 80080c0:	b089      	sub	sp, #36	; 0x24
 80080c2:	af04      	add	r7, sp, #16
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	4608      	mov	r0, r1
 80080c8:	4611      	mov	r1, r2
 80080ca:	461a      	mov	r2, r3
 80080cc:	4603      	mov	r3, r0
 80080ce:	70fb      	strb	r3, [r7, #3]
 80080d0:	460b      	mov	r3, r1
 80080d2:	70bb      	strb	r3, [r7, #2]
 80080d4:	4613      	mov	r3, r2
 80080d6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080d8:	2300      	movs	r3, #0
 80080da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080dc:	2300      	movs	r3, #0
 80080de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80080e6:	787c      	ldrb	r4, [r7, #1]
 80080e8:	78ba      	ldrb	r2, [r7, #2]
 80080ea:	78f9      	ldrb	r1, [r7, #3]
 80080ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80080ee:	9302      	str	r3, [sp, #8]
 80080f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80080f4:	9301      	str	r3, [sp, #4]
 80080f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80080fa:	9300      	str	r3, [sp, #0]
 80080fc:	4623      	mov	r3, r4
 80080fe:	f7f9 fae0 	bl	80016c2 <HAL_HCD_HC_Init>
 8008102:	4603      	mov	r3, r0
 8008104:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008106:	7bfb      	ldrb	r3, [r7, #15]
 8008108:	4618      	mov	r0, r3
 800810a:	f000 f8bd 	bl	8008288 <USBH_Get_USB_Status>
 800810e:	4603      	mov	r3, r0
 8008110:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008112:	7bbb      	ldrb	r3, [r7, #14]
}
 8008114:	4618      	mov	r0, r3
 8008116:	3714      	adds	r7, #20
 8008118:	46bd      	mov	sp, r7
 800811a:	bd90      	pop	{r4, r7, pc}

0800811c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	460b      	mov	r3, r1
 8008126:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008128:	2300      	movs	r3, #0
 800812a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800812c:	2300      	movs	r3, #0
 800812e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008136:	78fa      	ldrb	r2, [r7, #3]
 8008138:	4611      	mov	r1, r2
 800813a:	4618      	mov	r0, r3
 800813c:	f7f9 fb50 	bl	80017e0 <HAL_HCD_HC_Halt>
 8008140:	4603      	mov	r3, r0
 8008142:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008144:	7bfb      	ldrb	r3, [r7, #15]
 8008146:	4618      	mov	r0, r3
 8008148:	f000 f89e 	bl	8008288 <USBH_Get_USB_Status>
 800814c:	4603      	mov	r3, r0
 800814e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008150:	7bbb      	ldrb	r3, [r7, #14]
}
 8008152:	4618      	mov	r0, r3
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800815a:	b590      	push	{r4, r7, lr}
 800815c:	b089      	sub	sp, #36	; 0x24
 800815e:	af04      	add	r7, sp, #16
 8008160:	6078      	str	r0, [r7, #4]
 8008162:	4608      	mov	r0, r1
 8008164:	4611      	mov	r1, r2
 8008166:	461a      	mov	r2, r3
 8008168:	4603      	mov	r3, r0
 800816a:	70fb      	strb	r3, [r7, #3]
 800816c:	460b      	mov	r3, r1
 800816e:	70bb      	strb	r3, [r7, #2]
 8008170:	4613      	mov	r3, r2
 8008172:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008174:	2300      	movs	r3, #0
 8008176:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008178:	2300      	movs	r3, #0
 800817a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008182:	787c      	ldrb	r4, [r7, #1]
 8008184:	78ba      	ldrb	r2, [r7, #2]
 8008186:	78f9      	ldrb	r1, [r7, #3]
 8008188:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800818c:	9303      	str	r3, [sp, #12]
 800818e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008190:	9302      	str	r3, [sp, #8]
 8008192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008194:	9301      	str	r3, [sp, #4]
 8008196:	f897 3020 	ldrb.w	r3, [r7, #32]
 800819a:	9300      	str	r3, [sp, #0]
 800819c:	4623      	mov	r3, r4
 800819e:	f7f9 fb43 	bl	8001828 <HAL_HCD_HC_SubmitRequest>
 80081a2:	4603      	mov	r3, r0
 80081a4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80081a6:	7bfb      	ldrb	r3, [r7, #15]
 80081a8:	4618      	mov	r0, r3
 80081aa:	f000 f86d 	bl	8008288 <USBH_Get_USB_Status>
 80081ae:	4603      	mov	r3, r0
 80081b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3714      	adds	r7, #20
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd90      	pop	{r4, r7, pc}

080081bc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	460b      	mov	r3, r1
 80081c6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081ce:	78fa      	ldrb	r2, [r7, #3]
 80081d0:	4611      	mov	r1, r2
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7f9 fdd7 	bl	8001d86 <HAL_HCD_HC_GetURBState>
 80081d8:	4603      	mov	r3, r0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3708      	adds	r7, #8
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b082      	sub	sp, #8
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
 80081ea:	460b      	mov	r3, r1
 80081ec:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d103      	bne.n	8008200 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80081f8:	78fb      	ldrb	r3, [r7, #3]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f000 f870 	bl	80082e0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008200:	20c8      	movs	r0, #200	; 0xc8
 8008202:	f7f8 fe7f 	bl	8000f04 <HAL_Delay>
  return USBH_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	3708      	adds	r7, #8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	460b      	mov	r3, r1
 800821a:	70fb      	strb	r3, [r7, #3]
 800821c:	4613      	mov	r3, r2
 800821e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008226:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008228:	78fb      	ldrb	r3, [r7, #3]
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	212c      	movs	r1, #44	; 0x2c
 800822e:	fb01 f303 	mul.w	r3, r1, r3
 8008232:	4413      	add	r3, r2
 8008234:	333b      	adds	r3, #59	; 0x3b
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d009      	beq.n	8008250 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800823c:	78fb      	ldrb	r3, [r7, #3]
 800823e:	68fa      	ldr	r2, [r7, #12]
 8008240:	212c      	movs	r1, #44	; 0x2c
 8008242:	fb01 f303 	mul.w	r3, r1, r3
 8008246:	4413      	add	r3, r2
 8008248:	3354      	adds	r3, #84	; 0x54
 800824a:	78ba      	ldrb	r2, [r7, #2]
 800824c:	701a      	strb	r2, [r3, #0]
 800824e:	e008      	b.n	8008262 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008250:	78fb      	ldrb	r3, [r7, #3]
 8008252:	68fa      	ldr	r2, [r7, #12]
 8008254:	212c      	movs	r1, #44	; 0x2c
 8008256:	fb01 f303 	mul.w	r3, r1, r3
 800825a:	4413      	add	r3, r2
 800825c:	3355      	adds	r3, #85	; 0x55
 800825e:	78ba      	ldrb	r2, [r7, #2]
 8008260:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	3714      	adds	r7, #20
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f7f8 fe43 	bl	8000f04 <HAL_Delay>
}
 800827e:	bf00      	nop
 8008280:	3708      	adds	r7, #8
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
	...

08008288 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
 800828e:	4603      	mov	r3, r0
 8008290:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008292:	2300      	movs	r3, #0
 8008294:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008296:	79fb      	ldrb	r3, [r7, #7]
 8008298:	2b03      	cmp	r3, #3
 800829a:	d817      	bhi.n	80082cc <USBH_Get_USB_Status+0x44>
 800829c:	a201      	add	r2, pc, #4	; (adr r2, 80082a4 <USBH_Get_USB_Status+0x1c>)
 800829e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a2:	bf00      	nop
 80082a4:	080082b5 	.word	0x080082b5
 80082a8:	080082bb 	.word	0x080082bb
 80082ac:	080082c1 	.word	0x080082c1
 80082b0:	080082c7 	.word	0x080082c7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80082b4:	2300      	movs	r3, #0
 80082b6:	73fb      	strb	r3, [r7, #15]
    break;
 80082b8:	e00b      	b.n	80082d2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80082ba:	2302      	movs	r3, #2
 80082bc:	73fb      	strb	r3, [r7, #15]
    break;
 80082be:	e008      	b.n	80082d2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80082c0:	2301      	movs	r3, #1
 80082c2:	73fb      	strb	r3, [r7, #15]
    break;
 80082c4:	e005      	b.n	80082d2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80082c6:	2302      	movs	r3, #2
 80082c8:	73fb      	strb	r3, [r7, #15]
    break;
 80082ca:	e002      	b.n	80082d2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80082cc:	2302      	movs	r3, #2
 80082ce:	73fb      	strb	r3, [r7, #15]
    break;
 80082d0:	bf00      	nop
  }
  return usb_status;
 80082d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3714      	adds	r7, #20
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	4603      	mov	r3, r0
 80082e8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80082ea:	79fb      	ldrb	r3, [r7, #7]
 80082ec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80082ee:	79fb      	ldrb	r3, [r7, #7]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d102      	bne.n	80082fa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80082f4:	2301      	movs	r3, #1
 80082f6:	73fb      	strb	r3, [r7, #15]
 80082f8:	e001      	b.n	80082fe <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80082fa:	2300      	movs	r3, #0
 80082fc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80082fe:	7bfb      	ldrb	r3, [r7, #15]
 8008300:	461a      	mov	r2, r3
 8008302:	2101      	movs	r1, #1
 8008304:	4803      	ldr	r0, [pc, #12]	; (8008314 <MX_DriverVbusFS+0x34>)
 8008306:	f7f9 f961 	bl	80015cc <HAL_GPIO_WritePin>
}
 800830a:	bf00      	nop
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	40020800 	.word	0x40020800

08008318 <__errno>:
 8008318:	4b01      	ldr	r3, [pc, #4]	; (8008320 <__errno+0x8>)
 800831a:	6818      	ldr	r0, [r3, #0]
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	2000002c 	.word	0x2000002c

08008324 <__libc_init_array>:
 8008324:	b570      	push	{r4, r5, r6, lr}
 8008326:	4d0d      	ldr	r5, [pc, #52]	; (800835c <__libc_init_array+0x38>)
 8008328:	4c0d      	ldr	r4, [pc, #52]	; (8008360 <__libc_init_array+0x3c>)
 800832a:	1b64      	subs	r4, r4, r5
 800832c:	10a4      	asrs	r4, r4, #2
 800832e:	2600      	movs	r6, #0
 8008330:	42a6      	cmp	r6, r4
 8008332:	d109      	bne.n	8008348 <__libc_init_array+0x24>
 8008334:	4d0b      	ldr	r5, [pc, #44]	; (8008364 <__libc_init_array+0x40>)
 8008336:	4c0c      	ldr	r4, [pc, #48]	; (8008368 <__libc_init_array+0x44>)
 8008338:	f000 f8f8 	bl	800852c <_init>
 800833c:	1b64      	subs	r4, r4, r5
 800833e:	10a4      	asrs	r4, r4, #2
 8008340:	2600      	movs	r6, #0
 8008342:	42a6      	cmp	r6, r4
 8008344:	d105      	bne.n	8008352 <__libc_init_array+0x2e>
 8008346:	bd70      	pop	{r4, r5, r6, pc}
 8008348:	f855 3b04 	ldr.w	r3, [r5], #4
 800834c:	4798      	blx	r3
 800834e:	3601      	adds	r6, #1
 8008350:	e7ee      	b.n	8008330 <__libc_init_array+0xc>
 8008352:	f855 3b04 	ldr.w	r3, [r5], #4
 8008356:	4798      	blx	r3
 8008358:	3601      	adds	r6, #1
 800835a:	e7f2      	b.n	8008342 <__libc_init_array+0x1e>
 800835c:	08008568 	.word	0x08008568
 8008360:	08008568 	.word	0x08008568
 8008364:	08008568 	.word	0x08008568
 8008368:	0800856c 	.word	0x0800856c

0800836c <malloc>:
 800836c:	4b02      	ldr	r3, [pc, #8]	; (8008378 <malloc+0xc>)
 800836e:	4601      	mov	r1, r0
 8008370:	6818      	ldr	r0, [r3, #0]
 8008372:	f000 b863 	b.w	800843c <_malloc_r>
 8008376:	bf00      	nop
 8008378:	2000002c 	.word	0x2000002c

0800837c <free>:
 800837c:	4b02      	ldr	r3, [pc, #8]	; (8008388 <free+0xc>)
 800837e:	4601      	mov	r1, r0
 8008380:	6818      	ldr	r0, [r3, #0]
 8008382:	f000 b80b 	b.w	800839c <_free_r>
 8008386:	bf00      	nop
 8008388:	2000002c 	.word	0x2000002c

0800838c <memset>:
 800838c:	4402      	add	r2, r0
 800838e:	4603      	mov	r3, r0
 8008390:	4293      	cmp	r3, r2
 8008392:	d100      	bne.n	8008396 <memset+0xa>
 8008394:	4770      	bx	lr
 8008396:	f803 1b01 	strb.w	r1, [r3], #1
 800839a:	e7f9      	b.n	8008390 <memset+0x4>

0800839c <_free_r>:
 800839c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800839e:	2900      	cmp	r1, #0
 80083a0:	d048      	beq.n	8008434 <_free_r+0x98>
 80083a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083a6:	9001      	str	r0, [sp, #4]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f1a1 0404 	sub.w	r4, r1, #4
 80083ae:	bfb8      	it	lt
 80083b0:	18e4      	addlt	r4, r4, r3
 80083b2:	f000 f8ad 	bl	8008510 <__malloc_lock>
 80083b6:	4a20      	ldr	r2, [pc, #128]	; (8008438 <_free_r+0x9c>)
 80083b8:	9801      	ldr	r0, [sp, #4]
 80083ba:	6813      	ldr	r3, [r2, #0]
 80083bc:	4615      	mov	r5, r2
 80083be:	b933      	cbnz	r3, 80083ce <_free_r+0x32>
 80083c0:	6063      	str	r3, [r4, #4]
 80083c2:	6014      	str	r4, [r2, #0]
 80083c4:	b003      	add	sp, #12
 80083c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083ca:	f000 b8a7 	b.w	800851c <__malloc_unlock>
 80083ce:	42a3      	cmp	r3, r4
 80083d0:	d90b      	bls.n	80083ea <_free_r+0x4e>
 80083d2:	6821      	ldr	r1, [r4, #0]
 80083d4:	1862      	adds	r2, r4, r1
 80083d6:	4293      	cmp	r3, r2
 80083d8:	bf04      	itt	eq
 80083da:	681a      	ldreq	r2, [r3, #0]
 80083dc:	685b      	ldreq	r3, [r3, #4]
 80083de:	6063      	str	r3, [r4, #4]
 80083e0:	bf04      	itt	eq
 80083e2:	1852      	addeq	r2, r2, r1
 80083e4:	6022      	streq	r2, [r4, #0]
 80083e6:	602c      	str	r4, [r5, #0]
 80083e8:	e7ec      	b.n	80083c4 <_free_r+0x28>
 80083ea:	461a      	mov	r2, r3
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	b10b      	cbz	r3, 80083f4 <_free_r+0x58>
 80083f0:	42a3      	cmp	r3, r4
 80083f2:	d9fa      	bls.n	80083ea <_free_r+0x4e>
 80083f4:	6811      	ldr	r1, [r2, #0]
 80083f6:	1855      	adds	r5, r2, r1
 80083f8:	42a5      	cmp	r5, r4
 80083fa:	d10b      	bne.n	8008414 <_free_r+0x78>
 80083fc:	6824      	ldr	r4, [r4, #0]
 80083fe:	4421      	add	r1, r4
 8008400:	1854      	adds	r4, r2, r1
 8008402:	42a3      	cmp	r3, r4
 8008404:	6011      	str	r1, [r2, #0]
 8008406:	d1dd      	bne.n	80083c4 <_free_r+0x28>
 8008408:	681c      	ldr	r4, [r3, #0]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	6053      	str	r3, [r2, #4]
 800840e:	4421      	add	r1, r4
 8008410:	6011      	str	r1, [r2, #0]
 8008412:	e7d7      	b.n	80083c4 <_free_r+0x28>
 8008414:	d902      	bls.n	800841c <_free_r+0x80>
 8008416:	230c      	movs	r3, #12
 8008418:	6003      	str	r3, [r0, #0]
 800841a:	e7d3      	b.n	80083c4 <_free_r+0x28>
 800841c:	6825      	ldr	r5, [r4, #0]
 800841e:	1961      	adds	r1, r4, r5
 8008420:	428b      	cmp	r3, r1
 8008422:	bf04      	itt	eq
 8008424:	6819      	ldreq	r1, [r3, #0]
 8008426:	685b      	ldreq	r3, [r3, #4]
 8008428:	6063      	str	r3, [r4, #4]
 800842a:	bf04      	itt	eq
 800842c:	1949      	addeq	r1, r1, r5
 800842e:	6021      	streq	r1, [r4, #0]
 8008430:	6054      	str	r4, [r2, #4]
 8008432:	e7c7      	b.n	80083c4 <_free_r+0x28>
 8008434:	b003      	add	sp, #12
 8008436:	bd30      	pop	{r4, r5, pc}
 8008438:	200000b4 	.word	0x200000b4

0800843c <_malloc_r>:
 800843c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800843e:	1ccd      	adds	r5, r1, #3
 8008440:	f025 0503 	bic.w	r5, r5, #3
 8008444:	3508      	adds	r5, #8
 8008446:	2d0c      	cmp	r5, #12
 8008448:	bf38      	it	cc
 800844a:	250c      	movcc	r5, #12
 800844c:	2d00      	cmp	r5, #0
 800844e:	4606      	mov	r6, r0
 8008450:	db01      	blt.n	8008456 <_malloc_r+0x1a>
 8008452:	42a9      	cmp	r1, r5
 8008454:	d903      	bls.n	800845e <_malloc_r+0x22>
 8008456:	230c      	movs	r3, #12
 8008458:	6033      	str	r3, [r6, #0]
 800845a:	2000      	movs	r0, #0
 800845c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800845e:	f000 f857 	bl	8008510 <__malloc_lock>
 8008462:	4921      	ldr	r1, [pc, #132]	; (80084e8 <_malloc_r+0xac>)
 8008464:	680a      	ldr	r2, [r1, #0]
 8008466:	4614      	mov	r4, r2
 8008468:	b99c      	cbnz	r4, 8008492 <_malloc_r+0x56>
 800846a:	4f20      	ldr	r7, [pc, #128]	; (80084ec <_malloc_r+0xb0>)
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	b923      	cbnz	r3, 800847a <_malloc_r+0x3e>
 8008470:	4621      	mov	r1, r4
 8008472:	4630      	mov	r0, r6
 8008474:	f000 f83c 	bl	80084f0 <_sbrk_r>
 8008478:	6038      	str	r0, [r7, #0]
 800847a:	4629      	mov	r1, r5
 800847c:	4630      	mov	r0, r6
 800847e:	f000 f837 	bl	80084f0 <_sbrk_r>
 8008482:	1c43      	adds	r3, r0, #1
 8008484:	d123      	bne.n	80084ce <_malloc_r+0x92>
 8008486:	230c      	movs	r3, #12
 8008488:	6033      	str	r3, [r6, #0]
 800848a:	4630      	mov	r0, r6
 800848c:	f000 f846 	bl	800851c <__malloc_unlock>
 8008490:	e7e3      	b.n	800845a <_malloc_r+0x1e>
 8008492:	6823      	ldr	r3, [r4, #0]
 8008494:	1b5b      	subs	r3, r3, r5
 8008496:	d417      	bmi.n	80084c8 <_malloc_r+0x8c>
 8008498:	2b0b      	cmp	r3, #11
 800849a:	d903      	bls.n	80084a4 <_malloc_r+0x68>
 800849c:	6023      	str	r3, [r4, #0]
 800849e:	441c      	add	r4, r3
 80084a0:	6025      	str	r5, [r4, #0]
 80084a2:	e004      	b.n	80084ae <_malloc_r+0x72>
 80084a4:	6863      	ldr	r3, [r4, #4]
 80084a6:	42a2      	cmp	r2, r4
 80084a8:	bf0c      	ite	eq
 80084aa:	600b      	streq	r3, [r1, #0]
 80084ac:	6053      	strne	r3, [r2, #4]
 80084ae:	4630      	mov	r0, r6
 80084b0:	f000 f834 	bl	800851c <__malloc_unlock>
 80084b4:	f104 000b 	add.w	r0, r4, #11
 80084b8:	1d23      	adds	r3, r4, #4
 80084ba:	f020 0007 	bic.w	r0, r0, #7
 80084be:	1ac2      	subs	r2, r0, r3
 80084c0:	d0cc      	beq.n	800845c <_malloc_r+0x20>
 80084c2:	1a1b      	subs	r3, r3, r0
 80084c4:	50a3      	str	r3, [r4, r2]
 80084c6:	e7c9      	b.n	800845c <_malloc_r+0x20>
 80084c8:	4622      	mov	r2, r4
 80084ca:	6864      	ldr	r4, [r4, #4]
 80084cc:	e7cc      	b.n	8008468 <_malloc_r+0x2c>
 80084ce:	1cc4      	adds	r4, r0, #3
 80084d0:	f024 0403 	bic.w	r4, r4, #3
 80084d4:	42a0      	cmp	r0, r4
 80084d6:	d0e3      	beq.n	80084a0 <_malloc_r+0x64>
 80084d8:	1a21      	subs	r1, r4, r0
 80084da:	4630      	mov	r0, r6
 80084dc:	f000 f808 	bl	80084f0 <_sbrk_r>
 80084e0:	3001      	adds	r0, #1
 80084e2:	d1dd      	bne.n	80084a0 <_malloc_r+0x64>
 80084e4:	e7cf      	b.n	8008486 <_malloc_r+0x4a>
 80084e6:	bf00      	nop
 80084e8:	200000b4 	.word	0x200000b4
 80084ec:	200000b8 	.word	0x200000b8

080084f0 <_sbrk_r>:
 80084f0:	b538      	push	{r3, r4, r5, lr}
 80084f2:	4d06      	ldr	r5, [pc, #24]	; (800850c <_sbrk_r+0x1c>)
 80084f4:	2300      	movs	r3, #0
 80084f6:	4604      	mov	r4, r0
 80084f8:	4608      	mov	r0, r1
 80084fa:	602b      	str	r3, [r5, #0]
 80084fc:	f7f8 fb0c 	bl	8000b18 <_sbrk>
 8008500:	1c43      	adds	r3, r0, #1
 8008502:	d102      	bne.n	800850a <_sbrk_r+0x1a>
 8008504:	682b      	ldr	r3, [r5, #0]
 8008506:	b103      	cbz	r3, 800850a <_sbrk_r+0x1a>
 8008508:	6023      	str	r3, [r4, #0]
 800850a:	bd38      	pop	{r3, r4, r5, pc}
 800850c:	20000850 	.word	0x20000850

08008510 <__malloc_lock>:
 8008510:	4801      	ldr	r0, [pc, #4]	; (8008518 <__malloc_lock+0x8>)
 8008512:	f000 b809 	b.w	8008528 <__retarget_lock_acquire_recursive>
 8008516:	bf00      	nop
 8008518:	20000858 	.word	0x20000858

0800851c <__malloc_unlock>:
 800851c:	4801      	ldr	r0, [pc, #4]	; (8008524 <__malloc_unlock+0x8>)
 800851e:	f000 b804 	b.w	800852a <__retarget_lock_release_recursive>
 8008522:	bf00      	nop
 8008524:	20000858 	.word	0x20000858

08008528 <__retarget_lock_acquire_recursive>:
 8008528:	4770      	bx	lr

0800852a <__retarget_lock_release_recursive>:
 800852a:	4770      	bx	lr

0800852c <_init>:
 800852c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800852e:	bf00      	nop
 8008530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008532:	bc08      	pop	{r3}
 8008534:	469e      	mov	lr, r3
 8008536:	4770      	bx	lr

08008538 <_fini>:
 8008538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800853a:	bf00      	nop
 800853c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800853e:	bc08      	pop	{r3}
 8008540:	469e      	mov	lr, r3
 8008542:	4770      	bx	lr
