
mechatnom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000880c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008994  08008994  00018994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089b0  080089b0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080089b0  080089b0  000189b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089b8  080089b8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089b8  080089b8  000189b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089bc  080089bc  000189bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080089c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000007d0  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000860  20000860  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dd47  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ea2  00000000  00000000  0003de07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001300  00000000  00000000  00041cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001178  00000000  00000000  00042fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002429c  00000000  00000000  00044128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018bcd  00000000  00000000  000683c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0632  00000000  00000000  00080f91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001515c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000507c  00000000  00000000  00151618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800897c 	.word	0x0800897c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800897c 	.word	0x0800897c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <led_kontrol>:
#include "usart.h"
#include "functions.h"


void led_kontrol (void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	if (uart_echo==stop)
 80004c4:	4b2d      	ldr	r3, [pc, #180]	; (800057c <led_kontrol+0xbc>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	2b02      	cmp	r3, #2
 80004ca:	d127      	bne.n	800051c <led_kontrol+0x5c>
	{
		if (led_durum==0 && zaman>=1000)
 80004cc:	4b2c      	ldr	r3, [pc, #176]	; (8000580 <led_kontrol+0xc0>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d10b      	bne.n	80004ec <led_kontrol+0x2c>
 80004d4:	4b2b      	ldr	r3, [pc, #172]	; (8000584 <led_kontrol+0xc4>)
 80004d6:	881b      	ldrh	r3, [r3, #0]
 80004d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004dc:	d306      	bcc.n	80004ec <led_kontrol+0x2c>
		{
			led_durum=1;
 80004de:	4b28      	ldr	r3, [pc, #160]	; (8000580 <led_kontrol+0xc0>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	701a      	strb	r2, [r3, #0]
			zaman=0;
 80004e4:	4b27      	ldr	r3, [pc, #156]	; (8000584 <led_kontrol+0xc4>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	801a      	strh	r2, [r3, #0]
 80004ea:	e00e      	b.n	800050a <led_kontrol+0x4a>
		}
		else if(led_durum==1 && zaman>=1000)
 80004ec:	4b24      	ldr	r3, [pc, #144]	; (8000580 <led_kontrol+0xc0>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d10a      	bne.n	800050a <led_kontrol+0x4a>
 80004f4:	4b23      	ldr	r3, [pc, #140]	; (8000584 <led_kontrol+0xc4>)
 80004f6:	881b      	ldrh	r3, [r3, #0]
 80004f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004fc:	d305      	bcc.n	800050a <led_kontrol+0x4a>
		{
			led_durum=0;
 80004fe:	4b20      	ldr	r3, [pc, #128]	; (8000580 <led_kontrol+0xc0>)
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
			zaman=0;
 8000504:	4b1f      	ldr	r3, [pc, #124]	; (8000584 <led_kontrol+0xc4>)
 8000506:	2200      	movs	r2, #0
 8000508:	801a      	strh	r2, [r3, #0]
		}
		led_On_Off;
 800050a:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <led_kontrol+0xc0>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	461a      	mov	r2, r3
 8000510:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000514:	481c      	ldr	r0, [pc, #112]	; (8000588 <led_kontrol+0xc8>)
 8000516:	f001 f917 	bl	8001748 <HAL_GPIO_WritePin>
		}
		led_On_Off;

	}

}
 800051a:	e02c      	b.n	8000576 <led_kontrol+0xb6>
	else if (uart_echo==start)
 800051c:	4b17      	ldr	r3, [pc, #92]	; (800057c <led_kontrol+0xbc>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d128      	bne.n	8000576 <led_kontrol+0xb6>
		if (led_durum==0 && zaman>=ledOff_sure)
 8000524:	4b16      	ldr	r3, [pc, #88]	; (8000580 <led_kontrol+0xc0>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d10c      	bne.n	8000546 <led_kontrol+0x86>
 800052c:	4b15      	ldr	r3, [pc, #84]	; (8000584 <led_kontrol+0xc4>)
 800052e:	881a      	ldrh	r2, [r3, #0]
 8000530:	4b16      	ldr	r3, [pc, #88]	; (800058c <led_kontrol+0xcc>)
 8000532:	881b      	ldrh	r3, [r3, #0]
 8000534:	429a      	cmp	r2, r3
 8000536:	d306      	bcc.n	8000546 <led_kontrol+0x86>
			led_durum=1;
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <led_kontrol+0xc0>)
 800053a:	2201      	movs	r2, #1
 800053c:	701a      	strb	r2, [r3, #0]
			zaman=0;
 800053e:	4b11      	ldr	r3, [pc, #68]	; (8000584 <led_kontrol+0xc4>)
 8000540:	2200      	movs	r2, #0
 8000542:	801a      	strh	r2, [r3, #0]
 8000544:	e00f      	b.n	8000566 <led_kontrol+0xa6>
		else if(led_durum==1 && zaman>=ledOn_sure)
 8000546:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <led_kontrol+0xc0>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b01      	cmp	r3, #1
 800054c:	d10b      	bne.n	8000566 <led_kontrol+0xa6>
 800054e:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <led_kontrol+0xc4>)
 8000550:	881a      	ldrh	r2, [r3, #0]
 8000552:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <led_kontrol+0xd0>)
 8000554:	881b      	ldrh	r3, [r3, #0]
 8000556:	429a      	cmp	r2, r3
 8000558:	d305      	bcc.n	8000566 <led_kontrol+0xa6>
			led_durum=0;
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <led_kontrol+0xc0>)
 800055c:	2200      	movs	r2, #0
 800055e:	701a      	strb	r2, [r3, #0]
			zaman=0;
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <led_kontrol+0xc4>)
 8000562:	2200      	movs	r2, #0
 8000564:	801a      	strh	r2, [r3, #0]
		led_On_Off;
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <led_kontrol+0xc0>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	461a      	mov	r2, r3
 800056c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000570:	4805      	ldr	r0, [pc, #20]	; (8000588 <led_kontrol+0xc8>)
 8000572:	f001 f8e9 	bl	8001748 <HAL_GPIO_WritePin>
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	200000d1 	.word	0x200000d1
 8000580:	200000be 	.word	0x200000be
 8000584:	200000ca 	.word	0x200000ca
 8000588:	40020c00 	.word	0x40020c00
 800058c:	200000d6 	.word	0x200000d6
 8000590:	200000ce 	.word	0x200000ce

08000594 <uart_veri_oku>:
 *		komut 0x04 ise LedOff suresinin degerini ayarlar
 *		sure degerleri veri_hb ve veri_lb nin 16 bit veriye donusturulmesi ile elde edilir.
 *		En son veri check verisi olarak oluşturulup eklenebilir. Bu durumda toplam buffer RX_veri[12] olarak güncellenmelidir.
 */
void uart_veri_oku(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
	IT_uart_3_kontrol++;
 800059a:	4b2c      	ldr	r3, [pc, #176]	; (800064c <uart_veri_oku+0xb8>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	3301      	adds	r3, #1
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	4b2a      	ldr	r3, [pc, #168]	; (800064c <uart_veri_oku+0xb8>)
 80005a4:	701a      	strb	r2, [r3, #0]
	if(IT_uart_3_kontrol == sizeof(RX_veri))
 80005a6:	4b29      	ldr	r3, [pc, #164]	; (800064c <uart_veri_oku+0xb8>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b0a      	cmp	r3, #10
 80005ac:	d149      	bne.n	8000642 <uart_veri_oku+0xae>
	{
		IT_uart_3_kontrol = 0;
 80005ae:	4b27      	ldr	r3, [pc, #156]	; (800064c <uart_veri_oku+0xb8>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	701a      	strb	r2, [r3, #0]
		for (uint8_t i=0; i<sizeof(RX_veri); i++)
 80005b4:	2300      	movs	r3, #0
 80005b6:	71fb      	strb	r3, [r7, #7]
 80005b8:	e038      	b.n	800062c <uart_veri_oku+0x98>
		{
			if((RX_veri[i] == 0x36) && (RX_veri[i + 1] == 0x41))
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	4a24      	ldr	r2, [pc, #144]	; (8000650 <uart_veri_oku+0xbc>)
 80005be:	5cd3      	ldrb	r3, [r2, r3]
 80005c0:	2b36      	cmp	r3, #54	; 0x36
 80005c2:	d12d      	bne.n	8000620 <uart_veri_oku+0x8c>
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	3301      	adds	r3, #1
 80005c8:	4a21      	ldr	r2, [pc, #132]	; (8000650 <uart_veri_oku+0xbc>)
 80005ca:	5cd3      	ldrb	r3, [r2, r3]
 80005cc:	2b41      	cmp	r3, #65	; 0x41
 80005ce:	d127      	bne.n	8000620 <uart_veri_oku+0x8c>
			{
				komut = RX_veri[i+2];
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	3302      	adds	r3, #2
 80005d4:	4a1e      	ldr	r2, [pc, #120]	; (8000650 <uart_veri_oku+0xbc>)
 80005d6:	5cd2      	ldrb	r2, [r2, r3]
 80005d8:	4b1e      	ldr	r3, [pc, #120]	; (8000654 <uart_veri_oku+0xc0>)
 80005da:	701a      	strb	r2, [r3, #0]
				veri_hb = RX_veri[i+3];
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	3303      	adds	r3, #3
 80005e0:	4a1b      	ldr	r2, [pc, #108]	; (8000650 <uart_veri_oku+0xbc>)
 80005e2:	5cd2      	ldrb	r2, [r2, r3]
 80005e4:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <uart_veri_oku+0xc4>)
 80005e6:	701a      	strb	r2, [r3, #0]
				veri_lb = RX_veri[i+4];
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	3304      	adds	r3, #4
 80005ec:	4a18      	ldr	r2, [pc, #96]	; (8000650 <uart_veri_oku+0xbc>)
 80005ee:	5cd2      	ldrb	r2, [r2, r3]
 80005f0:	4b1a      	ldr	r3, [pc, #104]	; (800065c <uart_veri_oku+0xc8>)
 80005f2:	701a      	strb	r2, [r3, #0]
				veri= ((RX_veri[i+3] & 0x00FF) << 8) | (RX_veri[i+4] & 0x00FF);
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	3303      	adds	r3, #3
 80005f8:	4a15      	ldr	r2, [pc, #84]	; (8000650 <uart_veri_oku+0xbc>)
 80005fa:	5cd3      	ldrb	r3, [r2, r3]
 80005fc:	021b      	lsls	r3, r3, #8
 80005fe:	b21a      	sxth	r2, r3
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	3304      	adds	r3, #4
 8000604:	4912      	ldr	r1, [pc, #72]	; (8000650 <uart_veri_oku+0xbc>)
 8000606:	5ccb      	ldrb	r3, [r1, r3]
 8000608:	b21b      	sxth	r3, r3
 800060a:	4313      	orrs	r3, r2
 800060c:	b21b      	sxth	r3, r3
 800060e:	b29a      	uxth	r2, r3
 8000610:	4b13      	ldr	r3, [pc, #76]	; (8000660 <uart_veri_oku+0xcc>)
 8000612:	801a      	strh	r2, [r3, #0]

				uart_baglanti_hatasi = 0;// uarttan alinan veri setinde anahtar uymuyorsa yanlis veri alındi diye uyari olusturulabilir
 8000614:	4b13      	ldr	r3, [pc, #76]	; (8000664 <uart_veri_oku+0xd0>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]

				i = sizeof(RX_veri);
 800061a:	230a      	movs	r3, #10
 800061c:	71fb      	strb	r3, [r7, #7]
 800061e:	e002      	b.n	8000626 <uart_veri_oku+0x92>
			}
			else
				uart_baglanti_hatasi = 1;
 8000620:	4b10      	ldr	r3, [pc, #64]	; (8000664 <uart_veri_oku+0xd0>)
 8000622:	2201      	movs	r2, #1
 8000624:	701a      	strb	r2, [r3, #0]
		for (uint8_t i=0; i<sizeof(RX_veri); i++)
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	3301      	adds	r3, #1
 800062a:	71fb      	strb	r3, [r7, #7]
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	2b09      	cmp	r3, #9
 8000630:	d9c3      	bls.n	80005ba <uart_veri_oku+0x26>
		}

		uart_veri_ayristirma();
 8000632:	f000 f81b 	bl	800066c <uart_veri_ayristirma>

		if (uart_echo == start) // stop komutu gelmedigi surece her uart verisi alindiktan sonra veriyi echo yapacak
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <uart_veri_oku+0xd4>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d101      	bne.n	8000642 <uart_veri_oku+0xae>
		{
			uart_veri_gonder();
 800063e:	f000 f881 	bl	8000744 <uart_veri_gonder>
		}
	}
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200000d2 	.word	0x200000d2
 8000650:	200000c0 	.word	0x200000c0
 8000654:	200000d0 	.word	0x200000d0
 8000658:	200000cc 	.word	0x200000cc
 800065c:	200000bd 	.word	0x200000bd
 8000660:	200000d4 	.word	0x200000d4
 8000664:	200000bc 	.word	0x200000bc
 8000668:	200000d1 	.word	0x200000d1

0800066c <uart_veri_ayristirma>:
 * 			veri_lb 4 ise 9600 diger degerlerde ise 115200 olarak secilmistir. fonksiyon güncellenebilir.
 *
 *
 */
void uart_veri_ayristirma(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	switch (komut){
 8000670:	4b2d      	ldr	r3, [pc, #180]	; (8000728 <uart_veri_ayristirma+0xbc>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	3b01      	subs	r3, #1
 8000676:	2b04      	cmp	r3, #4
 8000678:	d853      	bhi.n	8000722 <uart_veri_ayristirma+0xb6>
 800067a:	a201      	add	r2, pc, #4	; (adr r2, 8000680 <uart_veri_ayristirma+0x14>)
 800067c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000680:	08000695 	.word	0x08000695
 8000684:	0800069d 	.word	0x0800069d
 8000688:	080006a5 	.word	0x080006a5
 800068c:	080006af 	.word	0x080006af
 8000690:	080006b9 	.word	0x080006b9
	case 0x01:
	{
		uart_echo = start;
 8000694:	4b25      	ldr	r3, [pc, #148]	; (800072c <uart_veri_ayristirma+0xc0>)
 8000696:	2201      	movs	r2, #1
 8000698:	701a      	strb	r2, [r3, #0]
		break;
 800069a:	e042      	b.n	8000722 <uart_veri_ayristirma+0xb6>
	}
	case 0x02:
	{
		uart_echo = stop;
 800069c:	4b23      	ldr	r3, [pc, #140]	; (800072c <uart_veri_ayristirma+0xc0>)
 800069e:	2202      	movs	r2, #2
 80006a0:	701a      	strb	r2, [r3, #0]
		break;
 80006a2:	e03e      	b.n	8000722 <uart_veri_ayristirma+0xb6>
	}
	case 0x03:
	{
		ledOn_sure = veri;
 80006a4:	4b22      	ldr	r3, [pc, #136]	; (8000730 <uart_veri_ayristirma+0xc4>)
 80006a6:	881a      	ldrh	r2, [r3, #0]
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <uart_veri_ayristirma+0xc8>)
 80006aa:	801a      	strh	r2, [r3, #0]
		break;
 80006ac:	e039      	b.n	8000722 <uart_veri_ayristirma+0xb6>
	}
	case 0x04:
	{
		ledOff_sure = veri;
 80006ae:	4b20      	ldr	r3, [pc, #128]	; (8000730 <uart_veri_ayristirma+0xc4>)
 80006b0:	881a      	ldrh	r2, [r3, #0]
 80006b2:	4b21      	ldr	r3, [pc, #132]	; (8000738 <uart_veri_ayristirma+0xcc>)
 80006b4:	801a      	strh	r2, [r3, #0]
		break;
 80006b6:	e034      	b.n	8000722 <uart_veri_ayristirma+0xb6>
	}
	case 0x05://baudrate_hizi;
	{
		if(veri_lb==0)
 80006b8:	4b20      	ldr	r3, [pc, #128]	; (800073c <uart_veri_ayristirma+0xd0>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d104      	bne.n	80006ca <uart_veri_ayristirma+0x5e>
		{
			huart3.Init.BaudRate = 115200;
 80006c0:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <uart_veri_ayristirma+0xd4>)
 80006c2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	e027      	b.n	800071a <uart_veri_ayristirma+0xae>
		}
		else if (veri_lb==1)
 80006ca:	4b1c      	ldr	r3, [pc, #112]	; (800073c <uart_veri_ayristirma+0xd0>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d104      	bne.n	80006dc <uart_veri_ayristirma+0x70>
		{
			huart3.Init.BaudRate = 230400;
 80006d2:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <uart_veri_ayristirma+0xd4>)
 80006d4:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	e01e      	b.n	800071a <uart_veri_ayristirma+0xae>
		}
		else if (veri_lb==2)
 80006dc:	4b17      	ldr	r3, [pc, #92]	; (800073c <uart_veri_ayristirma+0xd0>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b02      	cmp	r3, #2
 80006e2:	d104      	bne.n	80006ee <uart_veri_ayristirma+0x82>
		{
			huart3.Init.BaudRate = 57600;
 80006e4:	4b16      	ldr	r3, [pc, #88]	; (8000740 <uart_veri_ayristirma+0xd4>)
 80006e6:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	e015      	b.n	800071a <uart_veri_ayristirma+0xae>
		}
		else if (veri_lb==3)
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <uart_veri_ayristirma+0xd0>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b03      	cmp	r3, #3
 80006f4:	d104      	bne.n	8000700 <uart_veri_ayristirma+0x94>
		{
			huart3.Init.BaudRate = 38400;
 80006f6:	4b12      	ldr	r3, [pc, #72]	; (8000740 <uart_veri_ayristirma+0xd4>)
 80006f8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	e00c      	b.n	800071a <uart_veri_ayristirma+0xae>
		}
		else if (veri_lb==4)
 8000700:	4b0e      	ldr	r3, [pc, #56]	; (800073c <uart_veri_ayristirma+0xd0>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b04      	cmp	r3, #4
 8000706:	d104      	bne.n	8000712 <uart_veri_ayristirma+0xa6>
		{
			huart3.Init.BaudRate = 9600;
 8000708:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <uart_veri_ayristirma+0xd4>)
 800070a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	e003      	b.n	800071a <uart_veri_ayristirma+0xae>
		}
		else // default değeri olarak 115200 belirlendi
		{
			huart3.Init.BaudRate = 115200;
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <uart_veri_ayristirma+0xd4>)
 8000714:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000718:	605a      	str	r2, [r3, #4]
		}

		HAL_UART_Init(&huart3);
 800071a:	4809      	ldr	r0, [pc, #36]	; (8000740 <uart_veri_ayristirma+0xd4>)
 800071c:	f003 fe9e 	bl	800445c <HAL_UART_Init>
		break;
 8000720:	bf00      	nop
	default:
	{
		;
	}
	}
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200000d0 	.word	0x200000d0
 800072c:	200000d1 	.word	0x200000d1
 8000730:	200000d4 	.word	0x200000d4
 8000734:	200000ce 	.word	0x200000ce
 8000738:	200000d6 	.word	0x200000d6
 800073c:	200000bd 	.word	0x200000bd
 8000740:	2000012c 	.word	0x2000012c

08000744 <uart_veri_gonder>:
 *			3. ve 4. veriler LedOn ve ledOff suresinin degerini gönderir
 *
 *			alıcı tarafta veri kaybı olmasın diye iki kez gönderiliyor.
 */
void uart_veri_gonder(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
	TX_veri[0]=0x36; // veri seti anahtar kodu
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <uart_veri_gonder+0x60>)
 800074c:	2236      	movs	r2, #54	; 0x36
 800074e:	701a      	strb	r2, [r3, #0]
	TX_veri[1]=0x41; // veri seti anahtar kodu
 8000750:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <uart_veri_gonder+0x60>)
 8000752:	2241      	movs	r2, #65	; 0x41
 8000754:	705a      	strb	r2, [r3, #1]
	TX_veri[2]=komut;
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <uart_veri_gonder+0x64>)
 8000758:	781a      	ldrb	r2, [r3, #0]
 800075a:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <uart_veri_gonder+0x60>)
 800075c:	709a      	strb	r2, [r3, #2]
	TX_veri[3]=veri_hb; // gonderilen verinin high biti
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <uart_veri_gonder+0x68>)
 8000760:	781a      	ldrb	r2, [r3, #0]
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <uart_veri_gonder+0x60>)
 8000764:	70da      	strb	r2, [r3, #3]
	TX_veri[4]=veri_lb; // gonderilen verinin low biti
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <uart_veri_gonder+0x6c>)
 8000768:	781a      	ldrb	r2, [r3, #0]
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <uart_veri_gonder+0x60>)
 800076c:	711a      	strb	r2, [r3, #4]

	for (uint8_t i=0;i<5;i++) // Alici taraf veriyi kacirirsa diye tekrarli gonderiyor
 800076e:	2300      	movs	r3, #0
 8000770:	71fb      	strb	r3, [r7, #7]
 8000772:	e009      	b.n	8000788 <uart_veri_gonder+0x44>
	{
		TX_veri[i+5]=TX_veri[i];
 8000774:	79fa      	ldrb	r2, [r7, #7]
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	3305      	adds	r3, #5
 800077a:	490a      	ldr	r1, [pc, #40]	; (80007a4 <uart_veri_gonder+0x60>)
 800077c:	5c89      	ldrb	r1, [r1, r2]
 800077e:	4a09      	ldr	r2, [pc, #36]	; (80007a4 <uart_veri_gonder+0x60>)
 8000780:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0;i<5;i++) // Alici taraf veriyi kacirirsa diye tekrarli gonderiyor
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	3301      	adds	r3, #1
 8000786:	71fb      	strb	r3, [r7, #7]
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	2b04      	cmp	r3, #4
 800078c:	d9f2      	bls.n	8000774 <uart_veri_gonder+0x30>
	}

	HAL_UART_Transmit(&huart3, (uint8_t *)&TX_veri, sizeof(TX_veri), 250);
 800078e:	23fa      	movs	r3, #250	; 0xfa
 8000790:	220a      	movs	r2, #10
 8000792:	4904      	ldr	r1, [pc, #16]	; (80007a4 <uart_veri_gonder+0x60>)
 8000794:	4807      	ldr	r0, [pc, #28]	; (80007b4 <uart_veri_gonder+0x70>)
 8000796:	f003 feae 	bl	80044f6 <HAL_UART_Transmit>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200000d8 	.word	0x200000d8
 80007a8:	200000d0 	.word	0x200000d0
 80007ac:	200000cc 	.word	0x200000cc
 80007b0:	200000bd 	.word	0x200000bd
 80007b4:	2000012c 	.word	0x2000012c

080007b8 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08c      	sub	sp, #48	; 0x30
 80007bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	61bb      	str	r3, [r7, #24]
 80007d2:	4b93      	ldr	r3, [pc, #588]	; (8000a20 <MX_GPIO_Init+0x268>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a92      	ldr	r2, [pc, #584]	; (8000a20 <MX_GPIO_Init+0x268>)
 80007d8:	f043 0310 	orr.w	r3, r3, #16
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b90      	ldr	r3, [pc, #576]	; (8000a20 <MX_GPIO_Init+0x268>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0310 	and.w	r3, r3, #16
 80007e6:	61bb      	str	r3, [r7, #24]
 80007e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
 80007ee:	4b8c      	ldr	r3, [pc, #560]	; (8000a20 <MX_GPIO_Init+0x268>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a8b      	ldr	r2, [pc, #556]	; (8000a20 <MX_GPIO_Init+0x268>)
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b89      	ldr	r3, [pc, #548]	; (8000a20 <MX_GPIO_Init+0x268>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0304 	and.w	r3, r3, #4
 8000802:	617b      	str	r3, [r7, #20]
 8000804:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
 800080a:	4b85      	ldr	r3, [pc, #532]	; (8000a20 <MX_GPIO_Init+0x268>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a84      	ldr	r2, [pc, #528]	; (8000a20 <MX_GPIO_Init+0x268>)
 8000810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b82      	ldr	r3, [pc, #520]	; (8000a20 <MX_GPIO_Init+0x268>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	4b7e      	ldr	r3, [pc, #504]	; (8000a20 <MX_GPIO_Init+0x268>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a7d      	ldr	r2, [pc, #500]	; (8000a20 <MX_GPIO_Init+0x268>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b7b      	ldr	r3, [pc, #492]	; (8000a20 <MX_GPIO_Init+0x268>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	4b77      	ldr	r3, [pc, #476]	; (8000a20 <MX_GPIO_Init+0x268>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a76      	ldr	r2, [pc, #472]	; (8000a20 <MX_GPIO_Init+0x268>)
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b74      	ldr	r3, [pc, #464]	; (8000a20 <MX_GPIO_Init+0x268>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b70      	ldr	r3, [pc, #448]	; (8000a20 <MX_GPIO_Init+0x268>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a6f      	ldr	r2, [pc, #444]	; (8000a20 <MX_GPIO_Init+0x268>)
 8000864:	f043 0308 	orr.w	r3, r3, #8
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b6d      	ldr	r3, [pc, #436]	; (8000a20 <MX_GPIO_Init+0x268>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0308 	and.w	r3, r3, #8
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	2108      	movs	r1, #8
 800087a:	486a      	ldr	r0, [pc, #424]	; (8000a24 <MX_GPIO_Init+0x26c>)
 800087c:	f000 ff64 	bl	8001748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000880:	2201      	movs	r2, #1
 8000882:	2101      	movs	r1, #1
 8000884:	4868      	ldr	r0, [pc, #416]	; (8000a28 <MX_GPIO_Init+0x270>)
 8000886:	f000 ff5f 	bl	8001748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800088a:	2200      	movs	r2, #0
 800088c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000890:	4866      	ldr	r0, [pc, #408]	; (8000a2c <MX_GPIO_Init+0x274>)
 8000892:	f000 ff59 	bl	8001748 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000896:	2308      	movs	r3, #8
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	485d      	ldr	r0, [pc, #372]	; (8000a24 <MX_GPIO_Init+0x26c>)
 80008ae:	f000 fdaf 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008b2:	2301      	movs	r3, #1
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	4857      	ldr	r0, [pc, #348]	; (8000a28 <MX_GPIO_Init+0x270>)
 80008ca:	f000 fda1 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008ce:	2308      	movs	r3, #8
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008de:	2305      	movs	r3, #5
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	484f      	ldr	r0, [pc, #316]	; (8000a28 <MX_GPIO_Init+0x270>)
 80008ea:	f000 fd91 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ee:	2301      	movs	r3, #1
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008f2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	484b      	ldr	r0, [pc, #300]	; (8000a30 <MX_GPIO_Init+0x278>)
 8000904:	f000 fd84 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000908:	2310      	movs	r3, #16
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000918:	2306      	movs	r3, #6
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	4843      	ldr	r0, [pc, #268]	; (8000a30 <MX_GPIO_Init+0x278>)
 8000924:	f000 fd74 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000928:	23e0      	movs	r3, #224	; 0xe0
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000938:	2305      	movs	r3, #5
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	483b      	ldr	r0, [pc, #236]	; (8000a30 <MX_GPIO_Init+0x278>)
 8000944:	f000 fd64 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000948:	2304      	movs	r3, #4
 800094a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094c:	2300      	movs	r3, #0
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	4836      	ldr	r0, [pc, #216]	; (8000a34 <MX_GPIO_Init+0x27c>)
 800095c:	f000 fd58 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000960:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000972:	2305      	movs	r3, #5
 8000974:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	482d      	ldr	r0, [pc, #180]	; (8000a34 <MX_GPIO_Init+0x27c>)
 800097e:	f000 fd47 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000982:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000986:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000988:	2301      	movs	r3, #1
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	4824      	ldr	r0, [pc, #144]	; (8000a2c <MX_GPIO_Init+0x274>)
 800099c:	f000 fd38 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009a0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	2302      	movs	r3, #2
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009b2:	2306      	movs	r3, #6
 80009b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	481a      	ldr	r0, [pc, #104]	; (8000a28 <MX_GPIO_Init+0x270>)
 80009be:	f000 fd27 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009c2:	2320      	movs	r3, #32
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c6:	2300      	movs	r3, #0
 80009c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	4815      	ldr	r0, [pc, #84]	; (8000a2c <MX_GPIO_Init+0x274>)
 80009d6:	f000 fd1b 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009da:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009e0:	2312      	movs	r3, #18
 80009e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009ec:	2304      	movs	r3, #4
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	480f      	ldr	r0, [pc, #60]	; (8000a34 <MX_GPIO_Init+0x27c>)
 80009f8:	f000 fd0a 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009fc:	2302      	movs	r3, #2
 80009fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a00:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4804      	ldr	r0, [pc, #16]	; (8000a24 <MX_GPIO_Init+0x26c>)
 8000a12:	f000 fcfd 	bl	8001410 <HAL_GPIO_Init>

}
 8000a16:	bf00      	nop
 8000a18:	3730      	adds	r7, #48	; 0x30
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40021000 	.word	0x40021000
 8000a28:	40020800 	.word	0x40020800
 8000a2c:	40020c00 	.word	0x40020c00
 8000a30:	40020000 	.word	0x40020000
 8000a34:	40020400 	.word	0x40020400

08000a38 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a3c:	f000 faae 	bl	8000f9c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a40:	f000 f82e 	bl	8000aa0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a44:	f7ff feb8 	bl	80007b8 <MX_GPIO_Init>
	MX_USB_HOST_Init();
 8000a48:	f007 fb86 	bl	8008158 <MX_USB_HOST_Init>
	MX_TIM3_Init();
 8000a4c:	f000 f96a 	bl	8000d24 <MX_TIM3_Init>
	MX_USART3_UART_Init();
 8000a50:	f000 f9de 	bl	8000e10 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim3);
 8000a54:	480d      	ldr	r0, [pc, #52]	; (8000a8c <main+0x54>)
 8000a56:	f003 f8c5 	bl	8003be4 <HAL_TIM_Base_Start_IT>
	__HAL_UART_ENABLE_IT(&huart3,UART_IT_RXNE);
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <main+0x58>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	68da      	ldr	r2, [r3, #12]
 8000a60:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <main+0x58>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f042 0220 	orr.w	r2, r2, #32
 8000a68:	60da      	str	r2, [r3, #12]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	//baslangic deger atamalari
	uart_echo = stop;
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <main+0x5c>)
 8000a6c:	2202      	movs	r2, #2
 8000a6e:	701a      	strb	r2, [r3, #0]
	ledOff_sure=3000;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <main+0x60>)
 8000a72:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000a76:	801a      	strh	r2, [r3, #0]
	ledOn_sure=1000;
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <main+0x64>)
 8000a7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a7e:	801a      	strh	r2, [r3, #0]
	while (1)
	{
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 8000a80:	f007 fb90 	bl	80081a4 <MX_USB_HOST_Process>

		/* USER CODE BEGIN 3 */
		led_kontrol(); // TIM3_IRQHandler(void) fonksiyonun içinde de çalıştırılabilir. başka fonksiyon olmadığı için main içinde çalıştırıldı
 8000a84:	f7ff fd1c 	bl	80004c0 <led_kontrol>
		MX_USB_HOST_Process();
 8000a88:	e7fa      	b.n	8000a80 <main+0x48>
 8000a8a:	bf00      	nop
 8000a8c:	200000e4 	.word	0x200000e4
 8000a90:	2000012c 	.word	0x2000012c
 8000a94:	200000d1 	.word	0x200000d1
 8000a98:	200000d6 	.word	0x200000d6
 8000a9c:	200000ce 	.word	0x200000ce

08000aa0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b094      	sub	sp, #80	; 0x50
 8000aa4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa6:	f107 0320 	add.w	r3, r7, #32
 8000aaa:	2230      	movs	r2, #48	; 0x30
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f007 fe94 	bl	80087dc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab4:	f107 030c 	add.w	r3, r7, #12
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	4b28      	ldr	r3, [pc, #160]	; (8000b6c <SystemClock_Config+0xcc>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000acc:	4a27      	ldr	r2, [pc, #156]	; (8000b6c <SystemClock_Config+0xcc>)
 8000ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad4:	4b25      	ldr	r3, [pc, #148]	; (8000b6c <SystemClock_Config+0xcc>)
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	4b22      	ldr	r3, [pc, #136]	; (8000b70 <SystemClock_Config+0xd0>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a21      	ldr	r2, [pc, #132]	; (8000b70 <SystemClock_Config+0xd0>)
 8000aea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aee:	6013      	str	r3, [r2, #0]
 8000af0:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <SystemClock_Config+0xd0>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000afc:	2301      	movs	r3, #1
 8000afe:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b06:	2302      	movs	r3, #2
 8000b08:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000b10:	2304      	movs	r3, #4
 8000b12:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000b14:	23a8      	movs	r3, #168	; 0xa8
 8000b16:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b1c:	2307      	movs	r3, #7
 8000b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b20:	f107 0320 	add.w	r3, r7, #32
 8000b24:	4618      	mov	r0, r3
 8000b26:	f002 fb99 	bl	800325c <HAL_RCC_OscConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000b30:	f000 f820 	bl	8000b74 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b34:	230f      	movs	r3, #15
 8000b36:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000b3c:	2380      	movs	r3, #128	; 0x80
 8000b3e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b44:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b4a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b4c:	f107 030c 	add.w	r3, r7, #12
 8000b50:	2102      	movs	r1, #2
 8000b52:	4618      	mov	r0, r3
 8000b54:	f002 fdfa 	bl	800374c <HAL_RCC_ClockConfig>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8000b5e:	f000 f809 	bl	8000b74 <Error_Handler>
	}
}
 8000b62:	bf00      	nop
 8000b64:	3750      	adds	r7, #80	; 0x50
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40007000 	.word	0x40007000

08000b74 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
}
 8000b7a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b7c:	e7fe      	b.n	8000b7c <Error_Handler+0x8>
	...

08000b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <HAL_MspInit+0x4c>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	4a0f      	ldr	r2, [pc, #60]	; (8000bcc <HAL_MspInit+0x4c>)
 8000b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b94:	6453      	str	r3, [r2, #68]	; 0x44
 8000b96:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <HAL_MspInit+0x4c>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <HAL_MspInit+0x4c>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	4a08      	ldr	r2, [pc, #32]	; (8000bcc <HAL_MspInit+0x4c>)
 8000bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_MspInit+0x4c>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bbe:	2007      	movs	r0, #7
 8000bc0:	f000 fb52 	bl	8001268 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40023800 	.word	0x40023800

08000bd0 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <NMI_Handler+0x4>

08000bd6 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8000bda:	e7fe      	b.n	8000bda <HardFault_Handler+0x4>

08000bdc <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8000be0:	e7fe      	b.n	8000be0 <MemManage_Handler+0x4>

08000be2 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8000be6:	e7fe      	b.n	8000be6 <BusFault_Handler+0x4>

08000be8 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8000bec:	e7fe      	b.n	8000bec <UsageFault_Handler+0x4>

08000bee <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000c1c:	f000 fa10 	bl	8001040 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */
	zaman++;
 8000c28:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <TIM3_IRQHandler+0x2c>)
 8000c2a:	881b      	ldrh	r3, [r3, #0]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <TIM3_IRQHandler+0x2c>)
 8000c32:	801a      	strh	r2, [r3, #0]
	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 8000c34:	4807      	ldr	r0, [pc, #28]	; (8000c54 <TIM3_IRQHandler+0x30>)
 8000c36:	f003 f845 	bl	8003cc4 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM3_IRQn 1 */
	__HAL_UART_ENABLE_IT(&huart3,UART_IT_RXNE);
 8000c3a:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <TIM3_IRQHandler+0x34>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	68da      	ldr	r2, [r3, #12]
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <TIM3_IRQHandler+0x34>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f042 0220 	orr.w	r2, r2, #32
 8000c48:	60da      	str	r2, [r3, #12]
	/* USER CODE END TIM3_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	200000ca 	.word	0x200000ca
 8000c54:	200000e4 	.word	0x200000e4
 8000c58:	2000012c 	.word	0x2000012c

08000c5c <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART3_IRQn 0 */
	HAL_UART_Receive_IT(&huart3, (uint8_t*)&RX_veri, sizeof(RX_veri));
 8000c60:	220a      	movs	r2, #10
 8000c62:	4905      	ldr	r1, [pc, #20]	; (8000c78 <USART3_IRQHandler+0x1c>)
 8000c64:	4805      	ldr	r0, [pc, #20]	; (8000c7c <USART3_IRQHandler+0x20>)
 8000c66:	f003 fcd8 	bl	800461a <HAL_UART_Receive_IT>
	uart_veri_oku();
 8000c6a:	f7ff fc93 	bl	8000594 <uart_veri_oku>

	/* USER CODE END USART3_IRQn 0 */
	HAL_UART_IRQHandler(&huart3);
 8000c6e:	4803      	ldr	r0, [pc, #12]	; (8000c7c <USART3_IRQHandler+0x20>)
 8000c70:	f003 fd04 	bl	800467c <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART3_IRQn 1 */

	/* USER CODE END USART3_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	200000c0 	.word	0x200000c0
 8000c7c:	2000012c 	.word	0x2000012c

08000c80 <OTG_FS_IRQHandler>:

/**
 * @brief This function handles USB On The Go FS global interrupt.
 */
void OTG_FS_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN OTG_FS_IRQn 0 */

	/* USER CODE END OTG_FS_IRQn 0 */
	HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c84:	4802      	ldr	r0, [pc, #8]	; (8000c90 <OTG_FS_IRQHandler+0x10>)
 8000c86:	f000 ffe3 	bl	8001c50 <HAL_HCD_IRQHandler>
	/* USER CODE BEGIN OTG_FS_IRQn 1 */

	/* USER CODE END OTG_FS_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	2000054c 	.word	0x2000054c

08000c94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c9c:	4a14      	ldr	r2, [pc, #80]	; (8000cf0 <_sbrk+0x5c>)
 8000c9e:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <_sbrk+0x60>)
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca8:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <_sbrk+0x64>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d102      	bne.n	8000cb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb0:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <_sbrk+0x64>)
 8000cb2:	4a12      	ldr	r2, [pc, #72]	; (8000cfc <_sbrk+0x68>)
 8000cb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <_sbrk+0x64>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d207      	bcs.n	8000cd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc4:	f007 fd50 	bl	8008768 <__errno>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	220c      	movs	r2, #12
 8000ccc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd2:	e009      	b.n	8000ce8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <_sbrk+0x64>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cda:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <_sbrk+0x64>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <_sbrk+0x64>)
 8000ce4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20020000 	.word	0x20020000
 8000cf4:	00000400 	.word	0x00000400
 8000cf8:	200000ac 	.word	0x200000ac
 8000cfc:	20000860 	.word	0x20000860

08000d00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <SystemInit+0x20>)
 8000d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0a:	4a05      	ldr	r2, [pc, #20]	; (8000d20 <SystemInit+0x20>)
 8000d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d2a:	f107 0308 	add.w	r3, r7, #8
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d38:	463b      	mov	r3, r7
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d40:	4b1d      	ldr	r3, [pc, #116]	; (8000db8 <MX_TIM3_Init+0x94>)
 8000d42:	4a1e      	ldr	r2, [pc, #120]	; (8000dbc <MX_TIM3_Init+0x98>)
 8000d44:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 85;
 8000d46:	4b1c      	ldr	r3, [pc, #112]	; (8000db8 <MX_TIM3_Init+0x94>)
 8000d48:	2255      	movs	r2, #85	; 0x55
 8000d4a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000d4c:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <MX_TIM3_Init+0x94>)
 8000d4e:	2210      	movs	r2, #16
 8000d50:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1001;
 8000d52:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <MX_TIM3_Init+0x94>)
 8000d54:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8000d58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5a:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <MX_TIM3_Init+0x94>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d60:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <MX_TIM3_Init+0x94>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d66:	4814      	ldr	r0, [pc, #80]	; (8000db8 <MX_TIM3_Init+0x94>)
 8000d68:	f002 feec 	bl	8003b44 <HAL_TIM_Base_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000d72:	f7ff feff 	bl	8000b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d7c:	f107 0308 	add.w	r3, r7, #8
 8000d80:	4619      	mov	r1, r3
 8000d82:	480d      	ldr	r0, [pc, #52]	; (8000db8 <MX_TIM3_Init+0x94>)
 8000d84:	f003 f8a6 	bl	8003ed4 <HAL_TIM_ConfigClockSource>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000d8e:	f7ff fef1 	bl	8000b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d92:	2300      	movs	r3, #0
 8000d94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4806      	ldr	r0, [pc, #24]	; (8000db8 <MX_TIM3_Init+0x94>)
 8000da0:	f003 facc 	bl	800433c <HAL_TIMEx_MasterConfigSynchronization>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000daa:	f7ff fee3 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200000e4 	.word	0x200000e4
 8000dbc:	40000400 	.word	0x40000400

08000dc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0e      	ldr	r2, [pc, #56]	; (8000e08 <HAL_TIM_Base_MspInit+0x48>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d115      	bne.n	8000dfe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	4b0d      	ldr	r3, [pc, #52]	; (8000e0c <HAL_TIM_Base_MspInit+0x4c>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	4a0c      	ldr	r2, [pc, #48]	; (8000e0c <HAL_TIM_Base_MspInit+0x4c>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	6413      	str	r3, [r2, #64]	; 0x40
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <HAL_TIM_Base_MspInit+0x4c>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2100      	movs	r1, #0
 8000df2:	201d      	movs	r0, #29
 8000df4:	f000 fa43 	bl	800127e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000df8:	201d      	movs	r0, #29
 8000dfa:	f000 fa5c 	bl	80012b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000dfe:	bf00      	nop
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40000400 	.word	0x40000400
 8000e0c:	40023800 	.word	0x40023800

08000e10 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <MX_USART3_UART_Init+0x4c>)
 8000e16:	4a12      	ldr	r2, [pc, #72]	; (8000e60 <MX_USART3_UART_Init+0x50>)
 8000e18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <MX_USART3_UART_Init+0x4c>)
 8000e1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <MX_USART3_UART_Init+0x4c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <MX_USART3_UART_Init+0x4c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <MX_USART3_UART_Init+0x4c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e34:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <MX_USART3_UART_Init+0x4c>)
 8000e36:	220c      	movs	r2, #12
 8000e38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e3a:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <MX_USART3_UART_Init+0x4c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <MX_USART3_UART_Init+0x4c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e46:	4805      	ldr	r0, [pc, #20]	; (8000e5c <MX_USART3_UART_Init+0x4c>)
 8000e48:	f003 fb08 	bl	800445c <HAL_UART_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e52:	f7ff fe8f 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	2000012c 	.word	0x2000012c
 8000e60:	40004800 	.word	0x40004800

08000e64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a2d      	ldr	r2, [pc, #180]	; (8000f38 <HAL_UART_MspInit+0xd4>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d153      	bne.n	8000f2e <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	4b2c      	ldr	r3, [pc, #176]	; (8000f3c <HAL_UART_MspInit+0xd8>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	4a2b      	ldr	r2, [pc, #172]	; (8000f3c <HAL_UART_MspInit+0xd8>)
 8000e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e94:	6413      	str	r3, [r2, #64]	; 0x40
 8000e96:	4b29      	ldr	r3, [pc, #164]	; (8000f3c <HAL_UART_MspInit+0xd8>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b25      	ldr	r3, [pc, #148]	; (8000f3c <HAL_UART_MspInit+0xd8>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a24      	ldr	r2, [pc, #144]	; (8000f3c <HAL_UART_MspInit+0xd8>)
 8000eac:	f043 0302 	orr.w	r3, r3, #2
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b22      	ldr	r3, [pc, #136]	; (8000f3c <HAL_UART_MspInit+0xd8>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	4b1e      	ldr	r3, [pc, #120]	; (8000f3c <HAL_UART_MspInit+0xd8>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a1d      	ldr	r2, [pc, #116]	; (8000f3c <HAL_UART_MspInit+0xd8>)
 8000ec8:	f043 0308 	orr.w	r3, r3, #8
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <HAL_UART_MspInit+0xd8>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0308 	and.w	r3, r3, #8
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000eda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000eec:	2307      	movs	r3, #7
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4812      	ldr	r0, [pc, #72]	; (8000f40 <HAL_UART_MspInit+0xdc>)
 8000ef8:	f000 fa8a 	bl	8001410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000efc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f0e:	2307      	movs	r3, #7
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	4619      	mov	r1, r3
 8000f18:	480a      	ldr	r0, [pc, #40]	; (8000f44 <HAL_UART_MspInit+0xe0>)
 8000f1a:	f000 fa79 	bl	8001410 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2100      	movs	r1, #0
 8000f22:	2027      	movs	r0, #39	; 0x27
 8000f24:	f000 f9ab 	bl	800127e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f28:	2027      	movs	r0, #39	; 0x27
 8000f2a:	f000 f9c4 	bl	80012b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f2e:	bf00      	nop
 8000f30:	3728      	adds	r7, #40	; 0x28
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40004800 	.word	0x40004800
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40020400 	.word	0x40020400
 8000f44:	40020c00 	.word	0x40020c00

08000f48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f4c:	480d      	ldr	r0, [pc, #52]	; (8000f84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f4e:	490e      	ldr	r1, [pc, #56]	; (8000f88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f50:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f54:	e002      	b.n	8000f5c <LoopCopyDataInit>

08000f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5a:	3304      	adds	r3, #4

08000f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f60:	d3f9      	bcc.n	8000f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f62:	4a0b      	ldr	r2, [pc, #44]	; (8000f90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f64:	4c0b      	ldr	r4, [pc, #44]	; (8000f94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f68:	e001      	b.n	8000f6e <LoopFillZerobss>

08000f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f6c:	3204      	adds	r2, #4

08000f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f70:	d3fb      	bcc.n	8000f6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f72:	f7ff fec5 	bl	8000d00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f76:	f007 fbfd 	bl	8008774 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7a:	f7ff fd5d 	bl	8000a38 <main>
  bx  lr    
 8000f7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f88:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000f8c:	080089c0 	.word	0x080089c0
  ldr r2, =_sbss
 8000f90:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000f94:	20000860 	.word	0x20000860

08000f98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f98:	e7fe      	b.n	8000f98 <ADC_IRQHandler>
	...

08000f9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <HAL_Init+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	; (8000fdc <HAL_Init+0x40>)
 8000fa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fac:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <HAL_Init+0x40>)
 8000fb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <HAL_Init+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <HAL_Init+0x40>)
 8000fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f000 f94f 	bl	8001268 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f000 f808 	bl	8000fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd0:	f7ff fdd6 	bl	8000b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40023c00 	.word	0x40023c00

08000fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_InitTick+0x54>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x58>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 f967 	bl	80012d2 <HAL_SYSTICK_Config>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e00e      	b.n	800102c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b0f      	cmp	r3, #15
 8001012:	d80a      	bhi.n	800102a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001014:	2200      	movs	r2, #0
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	f000 f92f 	bl	800127e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001020:	4a06      	ldr	r2, [pc, #24]	; (800103c <HAL_InitTick+0x5c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	e000      	b.n	800102c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000000 	.word	0x20000000
 8001038:	20000008 	.word	0x20000008
 800103c:	20000004 	.word	0x20000004

08001040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x20>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_IncTick+0x24>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <HAL_IncTick+0x24>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000008 	.word	0x20000008
 8001064:	20000170 	.word	0x20000170

08001068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return uwTick;
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <HAL_GetTick+0x14>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000170 	.word	0x20000170

08001080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001088:	f7ff ffee 	bl	8001068 <HAL_GetTick>
 800108c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001098:	d005      	beq.n	80010a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800109a:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <HAL_Delay+0x44>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4413      	add	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010a6:	bf00      	nop
 80010a8:	f7ff ffde 	bl	8001068 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d8f7      	bhi.n	80010a8 <HAL_Delay+0x28>
  {
  }
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000008 	.word	0x20000008

080010c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <__NVIC_SetPriorityGrouping+0x44>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e4:	4013      	ands	r3, r2
 80010e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fa:	4a04      	ldr	r2, [pc, #16]	; (800110c <__NVIC_SetPriorityGrouping+0x44>)
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	60d3      	str	r3, [r2, #12]
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <__NVIC_GetPriorityGrouping+0x18>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	0a1b      	lsrs	r3, r3, #8
 800111a:	f003 0307 	and.w	r3, r3, #7
}
 800111e:	4618      	mov	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	2b00      	cmp	r3, #0
 800113c:	db0b      	blt.n	8001156 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	f003 021f 	and.w	r2, r3, #31
 8001144:	4907      	ldr	r1, [pc, #28]	; (8001164 <__NVIC_EnableIRQ+0x38>)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	095b      	lsrs	r3, r3, #5
 800114c:	2001      	movs	r0, #1
 800114e:	fa00 f202 	lsl.w	r2, r0, r2
 8001152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000e100 	.word	0xe000e100

08001168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001178:	2b00      	cmp	r3, #0
 800117a:	db0a      	blt.n	8001192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	b2da      	uxtb	r2, r3
 8001180:	490c      	ldr	r1, [pc, #48]	; (80011b4 <__NVIC_SetPriority+0x4c>)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	0112      	lsls	r2, r2, #4
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	440b      	add	r3, r1
 800118c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001190:	e00a      	b.n	80011a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4908      	ldr	r1, [pc, #32]	; (80011b8 <__NVIC_SetPriority+0x50>)
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	3b04      	subs	r3, #4
 80011a0:	0112      	lsls	r2, r2, #4
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	440b      	add	r3, r1
 80011a6:	761a      	strb	r2, [r3, #24]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000e100 	.word	0xe000e100
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f1c3 0307 	rsb	r3, r3, #7
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	bf28      	it	cs
 80011da:	2304      	movcs	r3, #4
 80011dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3304      	adds	r3, #4
 80011e2:	2b06      	cmp	r3, #6
 80011e4:	d902      	bls.n	80011ec <NVIC_EncodePriority+0x30>
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3b03      	subs	r3, #3
 80011ea:	e000      	b.n	80011ee <NVIC_EncodePriority+0x32>
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	f04f 32ff 	mov.w	r2, #4294967295
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43da      	mvns	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	401a      	ands	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001204:	f04f 31ff 	mov.w	r1, #4294967295
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	43d9      	mvns	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	4313      	orrs	r3, r2
         );
}
 8001216:	4618      	mov	r0, r3
 8001218:	3724      	adds	r7, #36	; 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001234:	d301      	bcc.n	800123a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001236:	2301      	movs	r3, #1
 8001238:	e00f      	b.n	800125a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123a:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <SysTick_Config+0x40>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001242:	210f      	movs	r1, #15
 8001244:	f04f 30ff 	mov.w	r0, #4294967295
 8001248:	f7ff ff8e 	bl	8001168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <SysTick_Config+0x40>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001252:	4b04      	ldr	r3, [pc, #16]	; (8001264 <SysTick_Config+0x40>)
 8001254:	2207      	movs	r2, #7
 8001256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	e000e010 	.word	0xe000e010

08001268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff ff29 	bl	80010c8 <__NVIC_SetPriorityGrouping>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800127e:	b580      	push	{r7, lr}
 8001280:	b086      	sub	sp, #24
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
 800128a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001290:	f7ff ff3e 	bl	8001110 <__NVIC_GetPriorityGrouping>
 8001294:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	68b9      	ldr	r1, [r7, #8]
 800129a:	6978      	ldr	r0, [r7, #20]
 800129c:	f7ff ff8e 	bl	80011bc <NVIC_EncodePriority>
 80012a0:	4602      	mov	r2, r0
 80012a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff5d 	bl	8001168 <__NVIC_SetPriority>
}
 80012ae:	bf00      	nop
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff31 	bl	800112c <__NVIC_EnableIRQ>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff ffa2 	bl	8001224 <SysTick_Config>
 80012e0:	4603      	mov	r3, r0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b084      	sub	sp, #16
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012f8:	f7ff feb6 	bl	8001068 <HAL_GetTick>
 80012fc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d008      	beq.n	800131c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2280      	movs	r2, #128	; 0x80
 800130e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e052      	b.n	80013c2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0216 	bic.w	r2, r2, #22
 800132a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	695a      	ldr	r2, [r3, #20]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800133a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	2b00      	cmp	r3, #0
 8001342:	d103      	bne.n	800134c <HAL_DMA_Abort+0x62>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001348:	2b00      	cmp	r3, #0
 800134a:	d007      	beq.n	800135c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 0208 	bic.w	r2, r2, #8
 800135a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 0201 	bic.w	r2, r2, #1
 800136a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800136c:	e013      	b.n	8001396 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800136e:	f7ff fe7b 	bl	8001068 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b05      	cmp	r3, #5
 800137a:	d90c      	bls.n	8001396 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2220      	movs	r2, #32
 8001380:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2203      	movs	r2, #3
 8001386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e015      	b.n	80013c2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1e4      	bne.n	800136e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a8:	223f      	movs	r2, #63	; 0x3f
 80013aa:	409a      	lsls	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2201      	movs	r2, #1
 80013b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d004      	beq.n	80013e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2280      	movs	r2, #128	; 0x80
 80013e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e00c      	b.n	8001402 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2205      	movs	r2, #5
 80013ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0201 	bic.w	r2, r2, #1
 80013fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	; 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
 800142a:	e16b      	b.n	8001704 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800142c:	2201      	movs	r2, #1
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	429a      	cmp	r2, r3
 8001446:	f040 815a 	bne.w	80016fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	2b01      	cmp	r3, #1
 8001454:	d005      	beq.n	8001462 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800145e:	2b02      	cmp	r3, #2
 8001460:	d130      	bne.n	80014c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	2203      	movs	r2, #3
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	68da      	ldr	r2, [r3, #12]
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001498:	2201      	movs	r2, #1
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	091b      	lsrs	r3, r3, #4
 80014ae:	f003 0201 	and.w	r2, r3, #1
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d017      	beq.n	8001500 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	2203      	movs	r2, #3
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d123      	bne.n	8001554 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	08da      	lsrs	r2, r3, #3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3208      	adds	r2, #8
 8001514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001518:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	220f      	movs	r2, #15
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	691a      	ldr	r2, [r3, #16]
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	08da      	lsrs	r2, r3, #3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3208      	adds	r2, #8
 800154e:	69b9      	ldr	r1, [r7, #24]
 8001550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	2203      	movs	r2, #3
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 0203 	and.w	r2, r3, #3
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 80b4 	beq.w	80016fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	4b60      	ldr	r3, [pc, #384]	; (800171c <HAL_GPIO_Init+0x30c>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	4a5f      	ldr	r2, [pc, #380]	; (800171c <HAL_GPIO_Init+0x30c>)
 80015a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a4:	6453      	str	r3, [r2, #68]	; 0x44
 80015a6:	4b5d      	ldr	r3, [pc, #372]	; (800171c <HAL_GPIO_Init+0x30c>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015b2:	4a5b      	ldr	r2, [pc, #364]	; (8001720 <HAL_GPIO_Init+0x310>)
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	089b      	lsrs	r3, r3, #2
 80015b8:	3302      	adds	r3, #2
 80015ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	220f      	movs	r2, #15
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4013      	ands	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a52      	ldr	r2, [pc, #328]	; (8001724 <HAL_GPIO_Init+0x314>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d02b      	beq.n	8001636 <HAL_GPIO_Init+0x226>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a51      	ldr	r2, [pc, #324]	; (8001728 <HAL_GPIO_Init+0x318>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d025      	beq.n	8001632 <HAL_GPIO_Init+0x222>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a50      	ldr	r2, [pc, #320]	; (800172c <HAL_GPIO_Init+0x31c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d01f      	beq.n	800162e <HAL_GPIO_Init+0x21e>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a4f      	ldr	r2, [pc, #316]	; (8001730 <HAL_GPIO_Init+0x320>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d019      	beq.n	800162a <HAL_GPIO_Init+0x21a>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a4e      	ldr	r2, [pc, #312]	; (8001734 <HAL_GPIO_Init+0x324>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d013      	beq.n	8001626 <HAL_GPIO_Init+0x216>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a4d      	ldr	r2, [pc, #308]	; (8001738 <HAL_GPIO_Init+0x328>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d00d      	beq.n	8001622 <HAL_GPIO_Init+0x212>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a4c      	ldr	r2, [pc, #304]	; (800173c <HAL_GPIO_Init+0x32c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d007      	beq.n	800161e <HAL_GPIO_Init+0x20e>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a4b      	ldr	r2, [pc, #300]	; (8001740 <HAL_GPIO_Init+0x330>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d101      	bne.n	800161a <HAL_GPIO_Init+0x20a>
 8001616:	2307      	movs	r3, #7
 8001618:	e00e      	b.n	8001638 <HAL_GPIO_Init+0x228>
 800161a:	2308      	movs	r3, #8
 800161c:	e00c      	b.n	8001638 <HAL_GPIO_Init+0x228>
 800161e:	2306      	movs	r3, #6
 8001620:	e00a      	b.n	8001638 <HAL_GPIO_Init+0x228>
 8001622:	2305      	movs	r3, #5
 8001624:	e008      	b.n	8001638 <HAL_GPIO_Init+0x228>
 8001626:	2304      	movs	r3, #4
 8001628:	e006      	b.n	8001638 <HAL_GPIO_Init+0x228>
 800162a:	2303      	movs	r3, #3
 800162c:	e004      	b.n	8001638 <HAL_GPIO_Init+0x228>
 800162e:	2302      	movs	r3, #2
 8001630:	e002      	b.n	8001638 <HAL_GPIO_Init+0x228>
 8001632:	2301      	movs	r3, #1
 8001634:	e000      	b.n	8001638 <HAL_GPIO_Init+0x228>
 8001636:	2300      	movs	r3, #0
 8001638:	69fa      	ldr	r2, [r7, #28]
 800163a:	f002 0203 	and.w	r2, r2, #3
 800163e:	0092      	lsls	r2, r2, #2
 8001640:	4093      	lsls	r3, r2
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001648:	4935      	ldr	r1, [pc, #212]	; (8001720 <HAL_GPIO_Init+0x310>)
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	089b      	lsrs	r3, r3, #2
 800164e:	3302      	adds	r3, #2
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001656:	4b3b      	ldr	r3, [pc, #236]	; (8001744 <HAL_GPIO_Init+0x334>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	43db      	mvns	r3, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4013      	ands	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800167a:	4a32      	ldr	r2, [pc, #200]	; (8001744 <HAL_GPIO_Init+0x334>)
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001680:	4b30      	ldr	r3, [pc, #192]	; (8001744 <HAL_GPIO_Init+0x334>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016a4:	4a27      	ldr	r2, [pc, #156]	; (8001744 <HAL_GPIO_Init+0x334>)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016aa:	4b26      	ldr	r3, [pc, #152]	; (8001744 <HAL_GPIO_Init+0x334>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	43db      	mvns	r3, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4013      	ands	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016ce:	4a1d      	ldr	r2, [pc, #116]	; (8001744 <HAL_GPIO_Init+0x334>)
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016d4:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <HAL_GPIO_Init+0x334>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	43db      	mvns	r3, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d003      	beq.n	80016f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016f8:	4a12      	ldr	r2, [pc, #72]	; (8001744 <HAL_GPIO_Init+0x334>)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3301      	adds	r3, #1
 8001702:	61fb      	str	r3, [r7, #28]
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	2b0f      	cmp	r3, #15
 8001708:	f67f ae90 	bls.w	800142c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800170c:	bf00      	nop
 800170e:	bf00      	nop
 8001710:	3724      	adds	r7, #36	; 0x24
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800
 8001720:	40013800 	.word	0x40013800
 8001724:	40020000 	.word	0x40020000
 8001728:	40020400 	.word	0x40020400
 800172c:	40020800 	.word	0x40020800
 8001730:	40020c00 	.word	0x40020c00
 8001734:	40021000 	.word	0x40021000
 8001738:	40021400 	.word	0x40021400
 800173c:	40021800 	.word	0x40021800
 8001740:	40021c00 	.word	0x40021c00
 8001744:	40013c00 	.word	0x40013c00

08001748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	807b      	strh	r3, [r7, #2]
 8001754:	4613      	mov	r3, r2
 8001756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001758:	787b      	ldrb	r3, [r7, #1]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800175e:	887a      	ldrh	r2, [r7, #2]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001764:	e003      	b.n	800176e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001766:	887b      	ldrh	r3, [r7, #2]
 8001768:	041a      	lsls	r2, r3, #16
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	619a      	str	r2, [r3, #24]
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800177a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177c:	b08f      	sub	sp, #60	; 0x3c
 800177e:	af0a      	add	r7, sp, #40	; 0x28
 8001780:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e054      	b.n	8001836 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d106      	bne.n	80017ac <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f006 fd34 	bl	8008214 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2203      	movs	r2, #3
 80017b0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f003 fe8a 	bl	80054e4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	603b      	str	r3, [r7, #0]
 80017d6:	687e      	ldr	r6, [r7, #4]
 80017d8:	466d      	mov	r5, sp
 80017da:	f106 0410 	add.w	r4, r6, #16
 80017de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80017ee:	1d33      	adds	r3, r6, #4
 80017f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017f2:	6838      	ldr	r0, [r7, #0]
 80017f4:	f003 fe04 	bl	8005400 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2101      	movs	r1, #1
 80017fe:	4618      	mov	r0, r3
 8001800:	f003 fe81 	bl	8005506 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	603b      	str	r3, [r7, #0]
 800180a:	687e      	ldr	r6, [r7, #4]
 800180c:	466d      	mov	r5, sp
 800180e:	f106 0410 	add.w	r4, r6, #16
 8001812:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001814:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001816:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001818:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800181a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800181e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001822:	1d33      	adds	r3, r6, #4
 8001824:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001826:	6838      	ldr	r0, [r7, #0]
 8001828:	f003 ffe8 	bl	80057fc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2201      	movs	r2, #1
 8001830:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800183e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800183e:	b590      	push	{r4, r7, lr}
 8001840:	b089      	sub	sp, #36	; 0x24
 8001842:	af04      	add	r7, sp, #16
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	4608      	mov	r0, r1
 8001848:	4611      	mov	r1, r2
 800184a:	461a      	mov	r2, r3
 800184c:	4603      	mov	r3, r0
 800184e:	70fb      	strb	r3, [r7, #3]
 8001850:	460b      	mov	r3, r1
 8001852:	70bb      	strb	r3, [r7, #2]
 8001854:	4613      	mov	r3, r2
 8001856:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800185e:	2b01      	cmp	r3, #1
 8001860:	d101      	bne.n	8001866 <HAL_HCD_HC_Init+0x28>
 8001862:	2302      	movs	r3, #2
 8001864:	e076      	b.n	8001954 <HAL_HCD_HC_Init+0x116>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2201      	movs	r2, #1
 800186a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800186e:	78fb      	ldrb	r3, [r7, #3]
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	212c      	movs	r1, #44	; 0x2c
 8001874:	fb01 f303 	mul.w	r3, r1, r3
 8001878:	4413      	add	r3, r2
 800187a:	333d      	adds	r3, #61	; 0x3d
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001880:	78fb      	ldrb	r3, [r7, #3]
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	212c      	movs	r1, #44	; 0x2c
 8001886:	fb01 f303 	mul.w	r3, r1, r3
 800188a:	4413      	add	r3, r2
 800188c:	3338      	adds	r3, #56	; 0x38
 800188e:	787a      	ldrb	r2, [r7, #1]
 8001890:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001892:	78fb      	ldrb	r3, [r7, #3]
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	212c      	movs	r1, #44	; 0x2c
 8001898:	fb01 f303 	mul.w	r3, r1, r3
 800189c:	4413      	add	r3, r2
 800189e:	3340      	adds	r3, #64	; 0x40
 80018a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80018a2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80018a4:	78fb      	ldrb	r3, [r7, #3]
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	212c      	movs	r1, #44	; 0x2c
 80018aa:	fb01 f303 	mul.w	r3, r1, r3
 80018ae:	4413      	add	r3, r2
 80018b0:	3339      	adds	r3, #57	; 0x39
 80018b2:	78fa      	ldrb	r2, [r7, #3]
 80018b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80018b6:	78fb      	ldrb	r3, [r7, #3]
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	212c      	movs	r1, #44	; 0x2c
 80018bc:	fb01 f303 	mul.w	r3, r1, r3
 80018c0:	4413      	add	r3, r2
 80018c2:	333f      	adds	r3, #63	; 0x3f
 80018c4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80018c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	78ba      	ldrb	r2, [r7, #2]
 80018ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80018d2:	b2d0      	uxtb	r0, r2
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	212c      	movs	r1, #44	; 0x2c
 80018d8:	fb01 f303 	mul.w	r3, r1, r3
 80018dc:	4413      	add	r3, r2
 80018de:	333a      	adds	r3, #58	; 0x3a
 80018e0:	4602      	mov	r2, r0
 80018e2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80018e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	da09      	bge.n	8001900 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80018ec:	78fb      	ldrb	r3, [r7, #3]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	212c      	movs	r1, #44	; 0x2c
 80018f2:	fb01 f303 	mul.w	r3, r1, r3
 80018f6:	4413      	add	r3, r2
 80018f8:	333b      	adds	r3, #59	; 0x3b
 80018fa:	2201      	movs	r2, #1
 80018fc:	701a      	strb	r2, [r3, #0]
 80018fe:	e008      	b.n	8001912 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001900:	78fb      	ldrb	r3, [r7, #3]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	212c      	movs	r1, #44	; 0x2c
 8001906:	fb01 f303 	mul.w	r3, r1, r3
 800190a:	4413      	add	r3, r2
 800190c:	333b      	adds	r3, #59	; 0x3b
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001912:	78fb      	ldrb	r3, [r7, #3]
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	212c      	movs	r1, #44	; 0x2c
 8001918:	fb01 f303 	mul.w	r3, r1, r3
 800191c:	4413      	add	r3, r2
 800191e:	333c      	adds	r3, #60	; 0x3c
 8001920:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001924:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6818      	ldr	r0, [r3, #0]
 800192a:	787c      	ldrb	r4, [r7, #1]
 800192c:	78ba      	ldrb	r2, [r7, #2]
 800192e:	78f9      	ldrb	r1, [r7, #3]
 8001930:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001932:	9302      	str	r3, [sp, #8]
 8001934:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001938:	9301      	str	r3, [sp, #4]
 800193a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	4623      	mov	r3, r4
 8001942:	f004 f8d5 	bl	8005af0 <USB_HC_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001952:	7bfb      	ldrb	r3, [r7, #15]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	bd90      	pop	{r4, r7, pc}

0800195c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001968:	2300      	movs	r3, #0
 800196a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001972:	2b01      	cmp	r3, #1
 8001974:	d101      	bne.n	800197a <HAL_HCD_HC_Halt+0x1e>
 8001976:	2302      	movs	r3, #2
 8001978:	e00f      	b.n	800199a <HAL_HCD_HC_Halt+0x3e>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	78fa      	ldrb	r2, [r7, #3]
 8001988:	4611      	mov	r1, r2
 800198a:	4618      	mov	r0, r3
 800198c:	f004 fb11 	bl	8005fb2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001998:	7bfb      	ldrb	r3, [r7, #15]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	4608      	mov	r0, r1
 80019ae:	4611      	mov	r1, r2
 80019b0:	461a      	mov	r2, r3
 80019b2:	4603      	mov	r3, r0
 80019b4:	70fb      	strb	r3, [r7, #3]
 80019b6:	460b      	mov	r3, r1
 80019b8:	70bb      	strb	r3, [r7, #2]
 80019ba:	4613      	mov	r3, r2
 80019bc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80019be:	78fb      	ldrb	r3, [r7, #3]
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	212c      	movs	r1, #44	; 0x2c
 80019c4:	fb01 f303 	mul.w	r3, r1, r3
 80019c8:	4413      	add	r3, r2
 80019ca:	333b      	adds	r3, #59	; 0x3b
 80019cc:	78ba      	ldrb	r2, [r7, #2]
 80019ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80019d0:	78fb      	ldrb	r3, [r7, #3]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	212c      	movs	r1, #44	; 0x2c
 80019d6:	fb01 f303 	mul.w	r3, r1, r3
 80019da:	4413      	add	r3, r2
 80019dc:	333f      	adds	r3, #63	; 0x3f
 80019de:	787a      	ldrb	r2, [r7, #1]
 80019e0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80019e2:	7c3b      	ldrb	r3, [r7, #16]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d112      	bne.n	8001a0e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80019e8:	78fb      	ldrb	r3, [r7, #3]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	212c      	movs	r1, #44	; 0x2c
 80019ee:	fb01 f303 	mul.w	r3, r1, r3
 80019f2:	4413      	add	r3, r2
 80019f4:	3342      	adds	r3, #66	; 0x42
 80019f6:	2203      	movs	r2, #3
 80019f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80019fa:	78fb      	ldrb	r3, [r7, #3]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	212c      	movs	r1, #44	; 0x2c
 8001a00:	fb01 f303 	mul.w	r3, r1, r3
 8001a04:	4413      	add	r3, r2
 8001a06:	333d      	adds	r3, #61	; 0x3d
 8001a08:	7f3a      	ldrb	r2, [r7, #28]
 8001a0a:	701a      	strb	r2, [r3, #0]
 8001a0c:	e008      	b.n	8001a20 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a0e:	78fb      	ldrb	r3, [r7, #3]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	212c      	movs	r1, #44	; 0x2c
 8001a14:	fb01 f303 	mul.w	r3, r1, r3
 8001a18:	4413      	add	r3, r2
 8001a1a:	3342      	adds	r3, #66	; 0x42
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001a20:	787b      	ldrb	r3, [r7, #1]
 8001a22:	2b03      	cmp	r3, #3
 8001a24:	f200 80c6 	bhi.w	8001bb4 <HAL_HCD_HC_SubmitRequest+0x210>
 8001a28:	a201      	add	r2, pc, #4	; (adr r2, 8001a30 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a2e:	bf00      	nop
 8001a30:	08001a41 	.word	0x08001a41
 8001a34:	08001ba1 	.word	0x08001ba1
 8001a38:	08001aa5 	.word	0x08001aa5
 8001a3c:	08001b23 	.word	0x08001b23
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001a40:	7c3b      	ldrb	r3, [r7, #16]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	f040 80b8 	bne.w	8001bb8 <HAL_HCD_HC_SubmitRequest+0x214>
 8001a48:	78bb      	ldrb	r3, [r7, #2]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f040 80b4 	bne.w	8001bb8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001a50:	8b3b      	ldrh	r3, [r7, #24]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d108      	bne.n	8001a68 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001a56:	78fb      	ldrb	r3, [r7, #3]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	212c      	movs	r1, #44	; 0x2c
 8001a5c:	fb01 f303 	mul.w	r3, r1, r3
 8001a60:	4413      	add	r3, r2
 8001a62:	3355      	adds	r3, #85	; 0x55
 8001a64:	2201      	movs	r2, #1
 8001a66:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a68:	78fb      	ldrb	r3, [r7, #3]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	212c      	movs	r1, #44	; 0x2c
 8001a6e:	fb01 f303 	mul.w	r3, r1, r3
 8001a72:	4413      	add	r3, r2
 8001a74:	3355      	adds	r3, #85	; 0x55
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d109      	bne.n	8001a90 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a7c:	78fb      	ldrb	r3, [r7, #3]
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	212c      	movs	r1, #44	; 0x2c
 8001a82:	fb01 f303 	mul.w	r3, r1, r3
 8001a86:	4413      	add	r3, r2
 8001a88:	3342      	adds	r3, #66	; 0x42
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a8e:	e093      	b.n	8001bb8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a90:	78fb      	ldrb	r3, [r7, #3]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	212c      	movs	r1, #44	; 0x2c
 8001a96:	fb01 f303 	mul.w	r3, r1, r3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	3342      	adds	r3, #66	; 0x42
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	701a      	strb	r2, [r3, #0]
      break;
 8001aa2:	e089      	b.n	8001bb8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001aa4:	78bb      	ldrb	r3, [r7, #2]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d11d      	bne.n	8001ae6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001aaa:	78fb      	ldrb	r3, [r7, #3]
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	212c      	movs	r1, #44	; 0x2c
 8001ab0:	fb01 f303 	mul.w	r3, r1, r3
 8001ab4:	4413      	add	r3, r2
 8001ab6:	3355      	adds	r3, #85	; 0x55
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d109      	bne.n	8001ad2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001abe:	78fb      	ldrb	r3, [r7, #3]
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	212c      	movs	r1, #44	; 0x2c
 8001ac4:	fb01 f303 	mul.w	r3, r1, r3
 8001ac8:	4413      	add	r3, r2
 8001aca:	3342      	adds	r3, #66	; 0x42
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001ad0:	e073      	b.n	8001bba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	212c      	movs	r1, #44	; 0x2c
 8001ad8:	fb01 f303 	mul.w	r3, r1, r3
 8001adc:	4413      	add	r3, r2
 8001ade:	3342      	adds	r3, #66	; 0x42
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	701a      	strb	r2, [r3, #0]
      break;
 8001ae4:	e069      	b.n	8001bba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ae6:	78fb      	ldrb	r3, [r7, #3]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	212c      	movs	r1, #44	; 0x2c
 8001aec:	fb01 f303 	mul.w	r3, r1, r3
 8001af0:	4413      	add	r3, r2
 8001af2:	3354      	adds	r3, #84	; 0x54
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d109      	bne.n	8001b0e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001afa:	78fb      	ldrb	r3, [r7, #3]
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	212c      	movs	r1, #44	; 0x2c
 8001b00:	fb01 f303 	mul.w	r3, r1, r3
 8001b04:	4413      	add	r3, r2
 8001b06:	3342      	adds	r3, #66	; 0x42
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]
      break;
 8001b0c:	e055      	b.n	8001bba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b0e:	78fb      	ldrb	r3, [r7, #3]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	212c      	movs	r1, #44	; 0x2c
 8001b14:	fb01 f303 	mul.w	r3, r1, r3
 8001b18:	4413      	add	r3, r2
 8001b1a:	3342      	adds	r3, #66	; 0x42
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	701a      	strb	r2, [r3, #0]
      break;
 8001b20:	e04b      	b.n	8001bba <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001b22:	78bb      	ldrb	r3, [r7, #2]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d11d      	bne.n	8001b64 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b28:	78fb      	ldrb	r3, [r7, #3]
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	212c      	movs	r1, #44	; 0x2c
 8001b2e:	fb01 f303 	mul.w	r3, r1, r3
 8001b32:	4413      	add	r3, r2
 8001b34:	3355      	adds	r3, #85	; 0x55
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d109      	bne.n	8001b50 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b3c:	78fb      	ldrb	r3, [r7, #3]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	212c      	movs	r1, #44	; 0x2c
 8001b42:	fb01 f303 	mul.w	r3, r1, r3
 8001b46:	4413      	add	r3, r2
 8001b48:	3342      	adds	r3, #66	; 0x42
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b4e:	e034      	b.n	8001bba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b50:	78fb      	ldrb	r3, [r7, #3]
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	212c      	movs	r1, #44	; 0x2c
 8001b56:	fb01 f303 	mul.w	r3, r1, r3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3342      	adds	r3, #66	; 0x42
 8001b5e:	2202      	movs	r2, #2
 8001b60:	701a      	strb	r2, [r3, #0]
      break;
 8001b62:	e02a      	b.n	8001bba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	212c      	movs	r1, #44	; 0x2c
 8001b6a:	fb01 f303 	mul.w	r3, r1, r3
 8001b6e:	4413      	add	r3, r2
 8001b70:	3354      	adds	r3, #84	; 0x54
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d109      	bne.n	8001b8c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b78:	78fb      	ldrb	r3, [r7, #3]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	212c      	movs	r1, #44	; 0x2c
 8001b7e:	fb01 f303 	mul.w	r3, r1, r3
 8001b82:	4413      	add	r3, r2
 8001b84:	3342      	adds	r3, #66	; 0x42
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
      break;
 8001b8a:	e016      	b.n	8001bba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b8c:	78fb      	ldrb	r3, [r7, #3]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	212c      	movs	r1, #44	; 0x2c
 8001b92:	fb01 f303 	mul.w	r3, r1, r3
 8001b96:	4413      	add	r3, r2
 8001b98:	3342      	adds	r3, #66	; 0x42
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	701a      	strb	r2, [r3, #0]
      break;
 8001b9e:	e00c      	b.n	8001bba <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ba0:	78fb      	ldrb	r3, [r7, #3]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	212c      	movs	r1, #44	; 0x2c
 8001ba6:	fb01 f303 	mul.w	r3, r1, r3
 8001baa:	4413      	add	r3, r2
 8001bac:	3342      	adds	r3, #66	; 0x42
 8001bae:	2200      	movs	r2, #0
 8001bb0:	701a      	strb	r2, [r3, #0]
      break;
 8001bb2:	e002      	b.n	8001bba <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001bb4:	bf00      	nop
 8001bb6:	e000      	b.n	8001bba <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001bb8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001bba:	78fb      	ldrb	r3, [r7, #3]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	212c      	movs	r1, #44	; 0x2c
 8001bc0:	fb01 f303 	mul.w	r3, r1, r3
 8001bc4:	4413      	add	r3, r2
 8001bc6:	3344      	adds	r3, #68	; 0x44
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001bcc:	78fb      	ldrb	r3, [r7, #3]
 8001bce:	8b3a      	ldrh	r2, [r7, #24]
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	202c      	movs	r0, #44	; 0x2c
 8001bd4:	fb00 f303 	mul.w	r3, r0, r3
 8001bd8:	440b      	add	r3, r1
 8001bda:	334c      	adds	r3, #76	; 0x4c
 8001bdc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001bde:	78fb      	ldrb	r3, [r7, #3]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	212c      	movs	r1, #44	; 0x2c
 8001be4:	fb01 f303 	mul.w	r3, r1, r3
 8001be8:	4413      	add	r3, r2
 8001bea:	3360      	adds	r3, #96	; 0x60
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001bf0:	78fb      	ldrb	r3, [r7, #3]
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	212c      	movs	r1, #44	; 0x2c
 8001bf6:	fb01 f303 	mul.w	r3, r1, r3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	3350      	adds	r3, #80	; 0x50
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c02:	78fb      	ldrb	r3, [r7, #3]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	212c      	movs	r1, #44	; 0x2c
 8001c08:	fb01 f303 	mul.w	r3, r1, r3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	3339      	adds	r3, #57	; 0x39
 8001c10:	78fa      	ldrb	r2, [r7, #3]
 8001c12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001c14:	78fb      	ldrb	r3, [r7, #3]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	212c      	movs	r1, #44	; 0x2c
 8001c1a:	fb01 f303 	mul.w	r3, r1, r3
 8001c1e:	4413      	add	r3, r2
 8001c20:	3361      	adds	r3, #97	; 0x61
 8001c22:	2200      	movs	r2, #0
 8001c24:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6818      	ldr	r0, [r3, #0]
 8001c2a:	78fb      	ldrb	r3, [r7, #3]
 8001c2c:	222c      	movs	r2, #44	; 0x2c
 8001c2e:	fb02 f303 	mul.w	r3, r2, r3
 8001c32:	3338      	adds	r3, #56	; 0x38
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	18d1      	adds	r1, r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	461a      	mov	r2, r3
 8001c40:	f004 f864 	bl	8005d0c <USB_HC_StartXfer>
 8001c44:	4603      	mov	r3, r0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop

08001c50 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f003 fd87 	bl	800577a <USB_GetMode>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	f040 80f6 	bne.w	8001e60 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f003 fd6b 	bl	8005754 <USB_ReadInterrupts>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 80ec 	beq.w	8001e5e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f003 fd62 	bl	8005754 <USB_ReadInterrupts>
 8001c90:	4603      	mov	r3, r0
 8001c92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c9a:	d104      	bne.n	8001ca6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ca4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f003 fd52 	bl	8005754 <USB_ReadInterrupts>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cba:	d104      	bne.n	8001cc6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001cc4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f003 fd42 	bl	8005754 <USB_ReadInterrupts>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001cda:	d104      	bne.n	8001ce6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ce4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f003 fd32 	bl	8005754 <USB_ReadInterrupts>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d103      	bne.n	8001d02 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2202      	movs	r2, #2
 8001d00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f003 fd24 	bl	8005754 <USB_ReadInterrupts>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d16:	d11c      	bne.n	8001d52 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001d20:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10f      	bne.n	8001d52 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001d32:	2110      	movs	r1, #16
 8001d34:	6938      	ldr	r0, [r7, #16]
 8001d36:	f003 fc33 	bl	80055a0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001d3a:	6938      	ldr	r0, [r7, #16]
 8001d3c:	f003 fc54 	bl	80055e8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2101      	movs	r1, #1
 8001d46:	4618      	mov	r0, r3
 8001d48:	f003 fe0c 	bl	8005964 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f006 fadf 	bl	8008310 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f003 fcfc 	bl	8005754 <USB_ReadInterrupts>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d66:	d102      	bne.n	8001d6e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f001 fa03 	bl	8003174 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f003 fcee 	bl	8005754 <USB_ReadInterrupts>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d106      	bne.n	8001d90 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f006 faa8 	bl	80082d8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2208      	movs	r2, #8
 8001d8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f003 fcdd 	bl	8005754 <USB_ReadInterrupts>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f003 0310 	and.w	r3, r3, #16
 8001da0:	2b10      	cmp	r3, #16
 8001da2:	d101      	bne.n	8001da8 <HAL_HCD_IRQHandler+0x158>
 8001da4:	2301      	movs	r3, #1
 8001da6:	e000      	b.n	8001daa <HAL_HCD_IRQHandler+0x15a>
 8001da8:	2300      	movs	r3, #0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d012      	beq.n	8001dd4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	699a      	ldr	r2, [r3, #24]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0210 	bic.w	r2, r2, #16
 8001dbc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f001 f906 	bl	8002fd0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	699a      	ldr	r2, [r3, #24]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0210 	orr.w	r2, r2, #16
 8001dd2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f003 fcbb 	bl	8005754 <USB_ReadInterrupts>
 8001dde:	4603      	mov	r3, r0
 8001de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001de8:	d13a      	bne.n	8001e60 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f004 f8ce 	bl	8005f90 <USB_HC_ReadInterrupt>
 8001df4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	e025      	b.n	8001e48 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	fa22 f303 	lsr.w	r3, r2, r3
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d018      	beq.n	8001e42 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	015a      	lsls	r2, r3, #5
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4413      	add	r3, r2
 8001e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e26:	d106      	bne.n	8001e36 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f8ab 	bl	8001f8a <HCD_HC_IN_IRQHandler>
 8001e34:	e005      	b.n	8001e42 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 fcc6 	bl	80027ce <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	3301      	adds	r3, #1
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d3d4      	bcc.n	8001dfc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e5a:	615a      	str	r2, [r3, #20]
 8001e5c:	e000      	b.n	8001e60 <HAL_HCD_IRQHandler+0x210>
      return;
 8001e5e:	bf00      	nop
    }
  }
}
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d101      	bne.n	8001e7c <HAL_HCD_Start+0x16>
 8001e78:	2302      	movs	r3, #2
 8001e7a:	e013      	b.n	8001ea4 <HAL_HCD_Start+0x3e>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2101      	movs	r1, #1
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f003 fdce 	bl	8005a2c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f003 fb14 	bl	80054c2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d101      	bne.n	8001ec2 <HAL_HCD_Stop+0x16>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e00d      	b.n	8001ede <HAL_HCD_Stop+0x32>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f004 f9c8 	bl	8006264 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b082      	sub	sp, #8
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f003 fd70 	bl	80059d8 <USB_ResetPort>
 8001ef8:	4603      	mov	r3, r0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001f0e:	78fb      	ldrb	r3, [r7, #3]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	212c      	movs	r1, #44	; 0x2c
 8001f14:	fb01 f303 	mul.w	r3, r1, r3
 8001f18:	4413      	add	r3, r2
 8001f1a:	3360      	adds	r3, #96	; 0x60
 8001f1c:	781b      	ldrb	r3, [r3, #0]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	460b      	mov	r3, r1
 8001f34:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001f36:	78fb      	ldrb	r3, [r7, #3]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	212c      	movs	r1, #44	; 0x2c
 8001f3c:	fb01 f303 	mul.w	r3, r1, r3
 8001f40:	4413      	add	r3, r2
 8001f42:	3350      	adds	r3, #80	; 0x50
 8001f44:	681b      	ldr	r3, [r3, #0]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f003 fdb4 	bl	8005acc <USB_GetCurrentFrame>
 8001f64:	4603      	mov	r3, r0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f003 fd8f 	bl	8005a9e <USB_GetHostSpeed>
 8001f80:	4603      	mov	r3, r0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b086      	sub	sp, #24
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	460b      	mov	r3, r1
 8001f94:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001fa0:	78fb      	ldrb	r3, [r7, #3]
 8001fa2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	015a      	lsls	r2, r3, #5
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4413      	add	r3, r2
 8001fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d119      	bne.n	8001fee <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	015a      	lsls	r2, r3, #5
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	2304      	movs	r3, #4
 8001fca:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	015a      	lsls	r2, r3, #5
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	0151      	lsls	r1, r2, #5
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	440a      	add	r2, r1
 8001fe2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fe6:	f043 0302 	orr.w	r3, r3, #2
 8001fea:	60d3      	str	r3, [r2, #12]
 8001fec:	e101      	b.n	80021f2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	015a      	lsls	r2, r3, #5
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002004:	d12b      	bne.n	800205e <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	015a      	lsls	r2, r3, #5
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4413      	add	r3, r2
 800200e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002012:	461a      	mov	r2, r3
 8002014:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002018:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	212c      	movs	r1, #44	; 0x2c
 8002020:	fb01 f303 	mul.w	r3, r1, r3
 8002024:	4413      	add	r3, r2
 8002026:	3361      	adds	r3, #97	; 0x61
 8002028:	2207      	movs	r2, #7
 800202a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	015a      	lsls	r2, r3, #5
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4413      	add	r3, r2
 8002034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	0151      	lsls	r1, r2, #5
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	440a      	add	r2, r1
 8002042:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002046:	f043 0302 	orr.w	r3, r3, #2
 800204a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	4611      	mov	r1, r2
 8002056:	4618      	mov	r0, r3
 8002058:	f003 ffab 	bl	8005fb2 <USB_HC_Halt>
 800205c:	e0c9      	b.n	80021f2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	015a      	lsls	r2, r3, #5
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	4413      	add	r3, r2
 8002066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 0320 	and.w	r3, r3, #32
 8002070:	2b20      	cmp	r3, #32
 8002072:	d109      	bne.n	8002088 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	015a      	lsls	r2, r3, #5
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4413      	add	r3, r2
 800207c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002080:	461a      	mov	r2, r3
 8002082:	2320      	movs	r3, #32
 8002084:	6093      	str	r3, [r2, #8]
 8002086:	e0b4      	b.n	80021f2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	015a      	lsls	r2, r3, #5
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	4413      	add	r3, r2
 8002090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b08      	cmp	r3, #8
 800209c:	d133      	bne.n	8002106 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	015a      	lsls	r2, r3, #5
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	4413      	add	r3, r2
 80020a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	0151      	lsls	r1, r2, #5
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	440a      	add	r2, r1
 80020b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020b8:	f043 0302 	orr.w	r3, r3, #2
 80020bc:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	212c      	movs	r1, #44	; 0x2c
 80020c4:	fb01 f303 	mul.w	r3, r1, r3
 80020c8:	4413      	add	r3, r2
 80020ca:	3361      	adds	r3, #97	; 0x61
 80020cc:	2205      	movs	r2, #5
 80020ce:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	015a      	lsls	r2, r3, #5
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	4413      	add	r3, r2
 80020d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020dc:	461a      	mov	r2, r3
 80020de:	2310      	movs	r3, #16
 80020e0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	015a      	lsls	r2, r3, #5
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4413      	add	r3, r2
 80020ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ee:	461a      	mov	r2, r3
 80020f0:	2308      	movs	r3, #8
 80020f2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	4611      	mov	r1, r2
 80020fe:	4618      	mov	r0, r3
 8002100:	f003 ff57 	bl	8005fb2 <USB_HC_Halt>
 8002104:	e075      	b.n	80021f2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	015a      	lsls	r2, r3, #5
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4413      	add	r3, r2
 800210e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800211c:	d134      	bne.n	8002188 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	015a      	lsls	r2, r3, #5
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4413      	add	r3, r2
 8002126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	0151      	lsls	r1, r2, #5
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	440a      	add	r2, r1
 8002134:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002138:	f043 0302 	orr.w	r3, r3, #2
 800213c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	212c      	movs	r1, #44	; 0x2c
 8002144:	fb01 f303 	mul.w	r3, r1, r3
 8002148:	4413      	add	r3, r2
 800214a:	3361      	adds	r3, #97	; 0x61
 800214c:	2208      	movs	r2, #8
 800214e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	015a      	lsls	r2, r3, #5
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4413      	add	r3, r2
 8002158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800215c:	461a      	mov	r2, r3
 800215e:	2310      	movs	r3, #16
 8002160:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	015a      	lsls	r2, r3, #5
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4413      	add	r3, r2
 800216a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216e:	461a      	mov	r2, r3
 8002170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002174:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	4611      	mov	r1, r2
 8002180:	4618      	mov	r0, r3
 8002182:	f003 ff16 	bl	8005fb2 <USB_HC_Halt>
 8002186:	e034      	b.n	80021f2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	015a      	lsls	r2, r3, #5
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4413      	add	r3, r2
 8002190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219a:	2b80      	cmp	r3, #128	; 0x80
 800219c:	d129      	bne.n	80021f2 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	015a      	lsls	r2, r3, #5
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	0151      	lsls	r1, r2, #5
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	440a      	add	r2, r1
 80021b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021b8:	f043 0302 	orr.w	r3, r3, #2
 80021bc:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	212c      	movs	r1, #44	; 0x2c
 80021c4:	fb01 f303 	mul.w	r3, r1, r3
 80021c8:	4413      	add	r3, r2
 80021ca:	3361      	adds	r3, #97	; 0x61
 80021cc:	2206      	movs	r2, #6
 80021ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	4611      	mov	r1, r2
 80021da:	4618      	mov	r0, r3
 80021dc:	f003 fee9 	bl	8005fb2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	015a      	lsls	r2, r3, #5
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	4413      	add	r3, r2
 80021e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ec:	461a      	mov	r2, r3
 80021ee:	2380      	movs	r3, #128	; 0x80
 80021f0:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	015a      	lsls	r2, r3, #5
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	4413      	add	r3, r2
 80021fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002208:	d122      	bne.n	8002250 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	015a      	lsls	r2, r3, #5
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4413      	add	r3, r2
 8002212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	0151      	lsls	r1, r2, #5
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	440a      	add	r2, r1
 8002220:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002224:	f043 0302 	orr.w	r3, r3, #2
 8002228:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	4611      	mov	r1, r2
 8002234:	4618      	mov	r0, r3
 8002236:	f003 febc 	bl	8005fb2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	015a      	lsls	r2, r3, #5
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4413      	add	r3, r2
 8002242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002246:	461a      	mov	r2, r3
 8002248:	f44f 7300 	mov.w	r3, #512	; 0x200
 800224c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800224e:	e2ba      	b.n	80027c6 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	015a      	lsls	r2, r3, #5
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4413      	add	r3, r2
 8002258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b01      	cmp	r3, #1
 8002264:	f040 811b 	bne.w	800249e <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d019      	beq.n	80022a4 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	212c      	movs	r1, #44	; 0x2c
 8002276:	fb01 f303 	mul.w	r3, r1, r3
 800227a:	4413      	add	r3, r2
 800227c:	3348      	adds	r3, #72	; 0x48
 800227e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	0159      	lsls	r1, r3, #5
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	440b      	add	r3, r1
 8002288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002292:	1ad2      	subs	r2, r2, r3
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	202c      	movs	r0, #44	; 0x2c
 800229a:	fb00 f303 	mul.w	r3, r0, r3
 800229e:	440b      	add	r3, r1
 80022a0:	3350      	adds	r3, #80	; 0x50
 80022a2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	212c      	movs	r1, #44	; 0x2c
 80022aa:	fb01 f303 	mul.w	r3, r1, r3
 80022ae:	4413      	add	r3, r2
 80022b0:	3361      	adds	r3, #97	; 0x61
 80022b2:	2201      	movs	r2, #1
 80022b4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	212c      	movs	r1, #44	; 0x2c
 80022bc:	fb01 f303 	mul.w	r3, r1, r3
 80022c0:	4413      	add	r3, r2
 80022c2:	335c      	adds	r3, #92	; 0x5c
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	015a      	lsls	r2, r3, #5
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	4413      	add	r3, r2
 80022d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d4:	461a      	mov	r2, r3
 80022d6:	2301      	movs	r3, #1
 80022d8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	212c      	movs	r1, #44	; 0x2c
 80022e0:	fb01 f303 	mul.w	r3, r1, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	333f      	adds	r3, #63	; 0x3f
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d009      	beq.n	8002302 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	212c      	movs	r1, #44	; 0x2c
 80022f4:	fb01 f303 	mul.w	r3, r1, r3
 80022f8:	4413      	add	r3, r2
 80022fa:	333f      	adds	r3, #63	; 0x3f
 80022fc:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d121      	bne.n	8002346 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	015a      	lsls	r2, r3, #5
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	4413      	add	r3, r2
 800230a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	0151      	lsls	r1, r2, #5
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	440a      	add	r2, r1
 8002318:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800231c:	f043 0302 	orr.w	r3, r3, #2
 8002320:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	4611      	mov	r1, r2
 800232c:	4618      	mov	r0, r3
 800232e:	f003 fe40 	bl	8005fb2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	015a      	lsls	r2, r3, #5
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4413      	add	r3, r2
 800233a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233e:	461a      	mov	r2, r3
 8002340:	2310      	movs	r3, #16
 8002342:	6093      	str	r3, [r2, #8]
 8002344:	e066      	b.n	8002414 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	212c      	movs	r1, #44	; 0x2c
 800234c:	fb01 f303 	mul.w	r3, r1, r3
 8002350:	4413      	add	r3, r2
 8002352:	333f      	adds	r3, #63	; 0x3f
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b03      	cmp	r3, #3
 8002358:	d127      	bne.n	80023aa <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	015a      	lsls	r2, r3, #5
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	4413      	add	r3, r2
 8002362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	0151      	lsls	r1, r2, #5
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	440a      	add	r2, r1
 8002370:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002374:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002378:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	212c      	movs	r1, #44	; 0x2c
 8002380:	fb01 f303 	mul.w	r3, r1, r3
 8002384:	4413      	add	r3, r2
 8002386:	3360      	adds	r3, #96	; 0x60
 8002388:	2201      	movs	r2, #1
 800238a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	b2d9      	uxtb	r1, r3
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	202c      	movs	r0, #44	; 0x2c
 8002396:	fb00 f303 	mul.w	r3, r0, r3
 800239a:	4413      	add	r3, r2
 800239c:	3360      	adds	r3, #96	; 0x60
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	461a      	mov	r2, r3
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f005 ffc2 	bl	800832c <HAL_HCD_HC_NotifyURBChange_Callback>
 80023a8:	e034      	b.n	8002414 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	212c      	movs	r1, #44	; 0x2c
 80023b0:	fb01 f303 	mul.w	r3, r1, r3
 80023b4:	4413      	add	r3, r2
 80023b6:	333f      	adds	r3, #63	; 0x3f
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d12a      	bne.n	8002414 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	212c      	movs	r1, #44	; 0x2c
 80023c4:	fb01 f303 	mul.w	r3, r1, r3
 80023c8:	4413      	add	r3, r2
 80023ca:	3360      	adds	r3, #96	; 0x60
 80023cc:	2201      	movs	r2, #1
 80023ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	212c      	movs	r1, #44	; 0x2c
 80023d6:	fb01 f303 	mul.w	r3, r1, r3
 80023da:	4413      	add	r3, r2
 80023dc:	3354      	adds	r3, #84	; 0x54
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	f083 0301 	eor.w	r3, r3, #1
 80023e4:	b2d8      	uxtb	r0, r3
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	212c      	movs	r1, #44	; 0x2c
 80023ec:	fb01 f303 	mul.w	r3, r1, r3
 80023f0:	4413      	add	r3, r2
 80023f2:	3354      	adds	r3, #84	; 0x54
 80023f4:	4602      	mov	r2, r0
 80023f6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	b2d9      	uxtb	r1, r3
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	202c      	movs	r0, #44	; 0x2c
 8002402:	fb00 f303 	mul.w	r3, r0, r3
 8002406:	4413      	add	r3, r2
 8002408:	3360      	adds	r3, #96	; 0x60
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	461a      	mov	r2, r3
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f005 ff8c 	bl	800832c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d12b      	bne.n	8002474 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	212c      	movs	r1, #44	; 0x2c
 8002422:	fb01 f303 	mul.w	r3, r1, r3
 8002426:	4413      	add	r3, r2
 8002428:	3348      	adds	r3, #72	; 0x48
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	202c      	movs	r0, #44	; 0x2c
 8002432:	fb00 f202 	mul.w	r2, r0, r2
 8002436:	440a      	add	r2, r1
 8002438:	3240      	adds	r2, #64	; 0x40
 800243a:	8812      	ldrh	r2, [r2, #0]
 800243c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 81be 	beq.w	80027c6 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	212c      	movs	r1, #44	; 0x2c
 8002450:	fb01 f303 	mul.w	r3, r1, r3
 8002454:	4413      	add	r3, r2
 8002456:	3354      	adds	r3, #84	; 0x54
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	f083 0301 	eor.w	r3, r3, #1
 800245e:	b2d8      	uxtb	r0, r3
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	212c      	movs	r1, #44	; 0x2c
 8002466:	fb01 f303 	mul.w	r3, r1, r3
 800246a:	4413      	add	r3, r2
 800246c:	3354      	adds	r3, #84	; 0x54
 800246e:	4602      	mov	r2, r0
 8002470:	701a      	strb	r2, [r3, #0]
}
 8002472:	e1a8      	b.n	80027c6 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	212c      	movs	r1, #44	; 0x2c
 800247a:	fb01 f303 	mul.w	r3, r1, r3
 800247e:	4413      	add	r3, r2
 8002480:	3354      	adds	r3, #84	; 0x54
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	f083 0301 	eor.w	r3, r3, #1
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	212c      	movs	r1, #44	; 0x2c
 8002490:	fb01 f303 	mul.w	r3, r1, r3
 8002494:	4413      	add	r3, r2
 8002496:	3354      	adds	r3, #84	; 0x54
 8002498:	4602      	mov	r2, r0
 800249a:	701a      	strb	r2, [r3, #0]
}
 800249c:	e193      	b.n	80027c6 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	015a      	lsls	r2, r3, #5
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	f040 8106 	bne.w	80026c2 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	0151      	lsls	r1, r2, #5
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	440a      	add	r2, r1
 80024cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024d0:	f023 0302 	bic.w	r3, r3, #2
 80024d4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	212c      	movs	r1, #44	; 0x2c
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	4413      	add	r3, r2
 80024e2:	3361      	adds	r3, #97	; 0x61
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d109      	bne.n	80024fe <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	212c      	movs	r1, #44	; 0x2c
 80024f0:	fb01 f303 	mul.w	r3, r1, r3
 80024f4:	4413      	add	r3, r2
 80024f6:	3360      	adds	r3, #96	; 0x60
 80024f8:	2201      	movs	r2, #1
 80024fa:	701a      	strb	r2, [r3, #0]
 80024fc:	e0c9      	b.n	8002692 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	212c      	movs	r1, #44	; 0x2c
 8002504:	fb01 f303 	mul.w	r3, r1, r3
 8002508:	4413      	add	r3, r2
 800250a:	3361      	adds	r3, #97	; 0x61
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b05      	cmp	r3, #5
 8002510:	d109      	bne.n	8002526 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	212c      	movs	r1, #44	; 0x2c
 8002518:	fb01 f303 	mul.w	r3, r1, r3
 800251c:	4413      	add	r3, r2
 800251e:	3360      	adds	r3, #96	; 0x60
 8002520:	2205      	movs	r2, #5
 8002522:	701a      	strb	r2, [r3, #0]
 8002524:	e0b5      	b.n	8002692 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	212c      	movs	r1, #44	; 0x2c
 800252c:	fb01 f303 	mul.w	r3, r1, r3
 8002530:	4413      	add	r3, r2
 8002532:	3361      	adds	r3, #97	; 0x61
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b06      	cmp	r3, #6
 8002538:	d009      	beq.n	800254e <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	212c      	movs	r1, #44	; 0x2c
 8002540:	fb01 f303 	mul.w	r3, r1, r3
 8002544:	4413      	add	r3, r2
 8002546:	3361      	adds	r3, #97	; 0x61
 8002548:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800254a:	2b08      	cmp	r3, #8
 800254c:	d150      	bne.n	80025f0 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	212c      	movs	r1, #44	; 0x2c
 8002554:	fb01 f303 	mul.w	r3, r1, r3
 8002558:	4413      	add	r3, r2
 800255a:	335c      	adds	r3, #92	; 0x5c
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	202c      	movs	r0, #44	; 0x2c
 8002566:	fb00 f303 	mul.w	r3, r0, r3
 800256a:	440b      	add	r3, r1
 800256c:	335c      	adds	r3, #92	; 0x5c
 800256e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	212c      	movs	r1, #44	; 0x2c
 8002576:	fb01 f303 	mul.w	r3, r1, r3
 800257a:	4413      	add	r3, r2
 800257c:	335c      	adds	r3, #92	; 0x5c
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d912      	bls.n	80025aa <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	212c      	movs	r1, #44	; 0x2c
 800258a:	fb01 f303 	mul.w	r3, r1, r3
 800258e:	4413      	add	r3, r2
 8002590:	335c      	adds	r3, #92	; 0x5c
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	212c      	movs	r1, #44	; 0x2c
 800259c:	fb01 f303 	mul.w	r3, r1, r3
 80025a0:	4413      	add	r3, r2
 80025a2:	3360      	adds	r3, #96	; 0x60
 80025a4:	2204      	movs	r2, #4
 80025a6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025a8:	e073      	b.n	8002692 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	212c      	movs	r1, #44	; 0x2c
 80025b0:	fb01 f303 	mul.w	r3, r1, r3
 80025b4:	4413      	add	r3, r2
 80025b6:	3360      	adds	r3, #96	; 0x60
 80025b8:	2202      	movs	r2, #2
 80025ba:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	015a      	lsls	r2, r3, #5
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	4413      	add	r3, r2
 80025c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025d2:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025da:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	015a      	lsls	r2, r3, #5
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	4413      	add	r3, r2
 80025e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e8:	461a      	mov	r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025ee:	e050      	b.n	8002692 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	212c      	movs	r1, #44	; 0x2c
 80025f6:	fb01 f303 	mul.w	r3, r1, r3
 80025fa:	4413      	add	r3, r2
 80025fc:	3361      	adds	r3, #97	; 0x61
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b03      	cmp	r3, #3
 8002602:	d122      	bne.n	800264a <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	212c      	movs	r1, #44	; 0x2c
 800260a:	fb01 f303 	mul.w	r3, r1, r3
 800260e:	4413      	add	r3, r2
 8002610:	3360      	adds	r3, #96	; 0x60
 8002612:	2202      	movs	r2, #2
 8002614:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	015a      	lsls	r2, r3, #5
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	4413      	add	r3, r2
 800261e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800262c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002634:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	015a      	lsls	r2, r3, #5
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4413      	add	r3, r2
 800263e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002642:	461a      	mov	r2, r3
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	e023      	b.n	8002692 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	212c      	movs	r1, #44	; 0x2c
 8002650:	fb01 f303 	mul.w	r3, r1, r3
 8002654:	4413      	add	r3, r2
 8002656:	3361      	adds	r3, #97	; 0x61
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b07      	cmp	r3, #7
 800265c:	d119      	bne.n	8002692 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	212c      	movs	r1, #44	; 0x2c
 8002664:	fb01 f303 	mul.w	r3, r1, r3
 8002668:	4413      	add	r3, r2
 800266a:	335c      	adds	r3, #92	; 0x5c
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	1c5a      	adds	r2, r3, #1
 8002670:	6879      	ldr	r1, [r7, #4]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	202c      	movs	r0, #44	; 0x2c
 8002676:	fb00 f303 	mul.w	r3, r0, r3
 800267a:	440b      	add	r3, r1
 800267c:	335c      	adds	r3, #92	; 0x5c
 800267e:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	212c      	movs	r1, #44	; 0x2c
 8002686:	fb01 f303 	mul.w	r3, r1, r3
 800268a:	4413      	add	r3, r2
 800268c:	3360      	adds	r3, #96	; 0x60
 800268e:	2204      	movs	r2, #4
 8002690:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	015a      	lsls	r2, r3, #5
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4413      	add	r3, r2
 800269a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269e:	461a      	mov	r2, r3
 80026a0:	2302      	movs	r3, #2
 80026a2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	b2d9      	uxtb	r1, r3
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	202c      	movs	r0, #44	; 0x2c
 80026ae:	fb00 f303 	mul.w	r3, r0, r3
 80026b2:	4413      	add	r3, r2
 80026b4:	3360      	adds	r3, #96	; 0x60
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	461a      	mov	r2, r3
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f005 fe36 	bl	800832c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80026c0:	e081      	b.n	80027c6 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	015a      	lsls	r2, r3, #5
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4413      	add	r3, r2
 80026ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0310 	and.w	r3, r3, #16
 80026d4:	2b10      	cmp	r3, #16
 80026d6:	d176      	bne.n	80027c6 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	212c      	movs	r1, #44	; 0x2c
 80026de:	fb01 f303 	mul.w	r3, r1, r3
 80026e2:	4413      	add	r3, r2
 80026e4:	333f      	adds	r3, #63	; 0x3f
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b03      	cmp	r3, #3
 80026ea:	d121      	bne.n	8002730 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	212c      	movs	r1, #44	; 0x2c
 80026f2:	fb01 f303 	mul.w	r3, r1, r3
 80026f6:	4413      	add	r3, r2
 80026f8:	335c      	adds	r3, #92	; 0x5c
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	015a      	lsls	r2, r3, #5
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	4413      	add	r3, r2
 8002706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	0151      	lsls	r1, r2, #5
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	440a      	add	r2, r1
 8002714:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002718:	f043 0302 	orr.w	r3, r3, #2
 800271c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	4611      	mov	r1, r2
 8002728:	4618      	mov	r0, r3
 800272a:	f003 fc42 	bl	8005fb2 <USB_HC_Halt>
 800272e:	e041      	b.n	80027b4 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	212c      	movs	r1, #44	; 0x2c
 8002736:	fb01 f303 	mul.w	r3, r1, r3
 800273a:	4413      	add	r3, r2
 800273c:	333f      	adds	r3, #63	; 0x3f
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d009      	beq.n	8002758 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	212c      	movs	r1, #44	; 0x2c
 800274a:	fb01 f303 	mul.w	r3, r1, r3
 800274e:	4413      	add	r3, r2
 8002750:	333f      	adds	r3, #63	; 0x3f
 8002752:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002754:	2b02      	cmp	r3, #2
 8002756:	d12d      	bne.n	80027b4 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	212c      	movs	r1, #44	; 0x2c
 800275e:	fb01 f303 	mul.w	r3, r1, r3
 8002762:	4413      	add	r3, r2
 8002764:	335c      	adds	r3, #92	; 0x5c
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d120      	bne.n	80027b4 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	212c      	movs	r1, #44	; 0x2c
 8002778:	fb01 f303 	mul.w	r3, r1, r3
 800277c:	4413      	add	r3, r2
 800277e:	3361      	adds	r3, #97	; 0x61
 8002780:	2203      	movs	r2, #3
 8002782:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	015a      	lsls	r2, r3, #5
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	4413      	add	r3, r2
 800278c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	0151      	lsls	r1, r2, #5
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	440a      	add	r2, r1
 800279a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800279e:	f043 0302 	orr.w	r3, r3, #2
 80027a2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	4611      	mov	r1, r2
 80027ae:	4618      	mov	r0, r3
 80027b0:	f003 fbff 	bl	8005fb2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c0:	461a      	mov	r2, r3
 80027c2:	2310      	movs	r3, #16
 80027c4:	6093      	str	r3, [r2, #8]
}
 80027c6:	bf00      	nop
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b088      	sub	sp, #32
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	460b      	mov	r3, r1
 80027d8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80027e4:	78fb      	ldrb	r3, [r7, #3]
 80027e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	015a      	lsls	r2, r3, #5
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	4413      	add	r3, r2
 80027f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d119      	bne.n	8002832 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	4413      	add	r3, r2
 8002806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280a:	461a      	mov	r2, r3
 800280c:	2304      	movs	r3, #4
 800280e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	015a      	lsls	r2, r3, #5
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	4413      	add	r3, r2
 8002818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	0151      	lsls	r1, r2, #5
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	440a      	add	r2, r1
 8002826:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800282a:	f043 0302 	orr.w	r3, r3, #2
 800282e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002830:	e3ca      	b.n	8002fc8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	015a      	lsls	r2, r3, #5
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	4413      	add	r3, r2
 800283a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 0320 	and.w	r3, r3, #32
 8002844:	2b20      	cmp	r3, #32
 8002846:	d13e      	bne.n	80028c6 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	4413      	add	r3, r2
 8002850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002854:	461a      	mov	r2, r3
 8002856:	2320      	movs	r3, #32
 8002858:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	212c      	movs	r1, #44	; 0x2c
 8002860:	fb01 f303 	mul.w	r3, r1, r3
 8002864:	4413      	add	r3, r2
 8002866:	333d      	adds	r3, #61	; 0x3d
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b01      	cmp	r3, #1
 800286c:	f040 83ac 	bne.w	8002fc8 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	212c      	movs	r1, #44	; 0x2c
 8002876:	fb01 f303 	mul.w	r3, r1, r3
 800287a:	4413      	add	r3, r2
 800287c:	333d      	adds	r3, #61	; 0x3d
 800287e:	2200      	movs	r2, #0
 8002880:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	212c      	movs	r1, #44	; 0x2c
 8002888:	fb01 f303 	mul.w	r3, r1, r3
 800288c:	4413      	add	r3, r2
 800288e:	3360      	adds	r3, #96	; 0x60
 8002890:	2202      	movs	r2, #2
 8002892:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	015a      	lsls	r2, r3, #5
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	4413      	add	r3, r2
 800289c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	0151      	lsls	r1, r2, #5
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	440a      	add	r2, r1
 80028aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028ae:	f043 0302 	orr.w	r3, r3, #2
 80028b2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	4611      	mov	r1, r2
 80028be:	4618      	mov	r0, r3
 80028c0:	f003 fb77 	bl	8005fb2 <USB_HC_Halt>
}
 80028c4:	e380      	b.n	8002fc8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	015a      	lsls	r2, r3, #5
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028dc:	d122      	bne.n	8002924 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	015a      	lsls	r2, r3, #5
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	4413      	add	r3, r2
 80028e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	0151      	lsls	r1, r2, #5
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	440a      	add	r2, r1
 80028f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028f8:	f043 0302 	orr.w	r3, r3, #2
 80028fc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	4611      	mov	r1, r2
 8002908:	4618      	mov	r0, r3
 800290a:	f003 fb52 	bl	8005fb2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	015a      	lsls	r2, r3, #5
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	4413      	add	r3, r2
 8002916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291a:	461a      	mov	r2, r3
 800291c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002920:	6093      	str	r3, [r2, #8]
}
 8002922:	e351      	b.n	8002fc8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	015a      	lsls	r2, r3, #5
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	4413      	add	r3, r2
 800292c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b01      	cmp	r3, #1
 8002938:	d150      	bne.n	80029dc <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	212c      	movs	r1, #44	; 0x2c
 8002940:	fb01 f303 	mul.w	r3, r1, r3
 8002944:	4413      	add	r3, r2
 8002946:	335c      	adds	r3, #92	; 0x5c
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	015a      	lsls	r2, r3, #5
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	4413      	add	r3, r2
 8002954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295e:	2b40      	cmp	r3, #64	; 0x40
 8002960:	d111      	bne.n	8002986 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	212c      	movs	r1, #44	; 0x2c
 8002968:	fb01 f303 	mul.w	r3, r1, r3
 800296c:	4413      	add	r3, r2
 800296e:	333d      	adds	r3, #61	; 0x3d
 8002970:	2201      	movs	r2, #1
 8002972:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	015a      	lsls	r2, r3, #5
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	4413      	add	r3, r2
 800297c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002980:	461a      	mov	r2, r3
 8002982:	2340      	movs	r3, #64	; 0x40
 8002984:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	015a      	lsls	r2, r3, #5
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	4413      	add	r3, r2
 800298e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	0151      	lsls	r1, r2, #5
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	440a      	add	r2, r1
 800299c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029a0:	f043 0302 	orr.w	r3, r3, #2
 80029a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	4611      	mov	r1, r2
 80029b0:	4618      	mov	r0, r3
 80029b2:	f003 fafe 	bl	8005fb2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	015a      	lsls	r2, r3, #5
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	4413      	add	r3, r2
 80029be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c2:	461a      	mov	r2, r3
 80029c4:	2301      	movs	r3, #1
 80029c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	212c      	movs	r1, #44	; 0x2c
 80029ce:	fb01 f303 	mul.w	r3, r1, r3
 80029d2:	4413      	add	r3, r2
 80029d4:	3361      	adds	r3, #97	; 0x61
 80029d6:	2201      	movs	r2, #1
 80029d8:	701a      	strb	r2, [r3, #0]
}
 80029da:	e2f5      	b.n	8002fc8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	015a      	lsls	r2, r3, #5
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ee:	2b40      	cmp	r3, #64	; 0x40
 80029f0:	d13c      	bne.n	8002a6c <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	212c      	movs	r1, #44	; 0x2c
 80029f8:	fb01 f303 	mul.w	r3, r1, r3
 80029fc:	4413      	add	r3, r2
 80029fe:	3361      	adds	r3, #97	; 0x61
 8002a00:	2204      	movs	r2, #4
 8002a02:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	212c      	movs	r1, #44	; 0x2c
 8002a0a:	fb01 f303 	mul.w	r3, r1, r3
 8002a0e:	4413      	add	r3, r2
 8002a10:	333d      	adds	r3, #61	; 0x3d
 8002a12:	2201      	movs	r2, #1
 8002a14:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	212c      	movs	r1, #44	; 0x2c
 8002a1c:	fb01 f303 	mul.w	r3, r1, r3
 8002a20:	4413      	add	r3, r2
 8002a22:	335c      	adds	r3, #92	; 0x5c
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	015a      	lsls	r2, r3, #5
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	0151      	lsls	r1, r2, #5
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	440a      	add	r2, r1
 8002a3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a42:	f043 0302 	orr.w	r3, r3, #2
 8002a46:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	4611      	mov	r1, r2
 8002a52:	4618      	mov	r0, r3
 8002a54:	f003 faad 	bl	8005fb2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a64:	461a      	mov	r2, r3
 8002a66:	2340      	movs	r3, #64	; 0x40
 8002a68:	6093      	str	r3, [r2, #8]
}
 8002a6a:	e2ad      	b.n	8002fc8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	015a      	lsls	r2, r3, #5
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b08      	cmp	r3, #8
 8002a80:	d12a      	bne.n	8002ad8 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	015a      	lsls	r2, r3, #5
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	4413      	add	r3, r2
 8002a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a8e:	461a      	mov	r2, r3
 8002a90:	2308      	movs	r3, #8
 8002a92:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	015a      	lsls	r2, r3, #5
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	0151      	lsls	r1, r2, #5
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	440a      	add	r2, r1
 8002aaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002aae:	f043 0302 	orr.w	r3, r3, #2
 8002ab2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	4611      	mov	r1, r2
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f003 fa77 	bl	8005fb2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	212c      	movs	r1, #44	; 0x2c
 8002aca:	fb01 f303 	mul.w	r3, r1, r3
 8002ace:	4413      	add	r3, r2
 8002ad0:	3361      	adds	r3, #97	; 0x61
 8002ad2:	2205      	movs	r2, #5
 8002ad4:	701a      	strb	r2, [r3, #0]
}
 8002ad6:	e277      	b.n	8002fc8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	015a      	lsls	r2, r3, #5
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	4413      	add	r3, r2
 8002ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 0310 	and.w	r3, r3, #16
 8002aea:	2b10      	cmp	r3, #16
 8002aec:	d150      	bne.n	8002b90 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	212c      	movs	r1, #44	; 0x2c
 8002af4:	fb01 f303 	mul.w	r3, r1, r3
 8002af8:	4413      	add	r3, r2
 8002afa:	335c      	adds	r3, #92	; 0x5c
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	212c      	movs	r1, #44	; 0x2c
 8002b06:	fb01 f303 	mul.w	r3, r1, r3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3361      	adds	r3, #97	; 0x61
 8002b0e:	2203      	movs	r2, #3
 8002b10:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	212c      	movs	r1, #44	; 0x2c
 8002b18:	fb01 f303 	mul.w	r3, r1, r3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	333d      	adds	r3, #61	; 0x3d
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d112      	bne.n	8002b4c <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	212c      	movs	r1, #44	; 0x2c
 8002b2c:	fb01 f303 	mul.w	r3, r1, r3
 8002b30:	4413      	add	r3, r2
 8002b32:	333c      	adds	r3, #60	; 0x3c
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d108      	bne.n	8002b4c <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	212c      	movs	r1, #44	; 0x2c
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	4413      	add	r3, r2
 8002b46:	333d      	adds	r3, #61	; 0x3d
 8002b48:	2201      	movs	r2, #1
 8002b4a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	015a      	lsls	r2, r3, #5
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	0151      	lsls	r1, r2, #5
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	440a      	add	r2, r1
 8002b62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b66:	f043 0302 	orr.w	r3, r3, #2
 8002b6a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	4611      	mov	r1, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f003 fa1b 	bl	8005fb2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b88:	461a      	mov	r2, r3
 8002b8a:	2310      	movs	r3, #16
 8002b8c:	6093      	str	r3, [r2, #8]
}
 8002b8e:	e21b      	b.n	8002fc8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	015a      	lsls	r2, r3, #5
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	4413      	add	r3, r2
 8002b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba2:	2b80      	cmp	r3, #128	; 0x80
 8002ba4:	d174      	bne.n	8002c90 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d121      	bne.n	8002bf2 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	212c      	movs	r1, #44	; 0x2c
 8002bb4:	fb01 f303 	mul.w	r3, r1, r3
 8002bb8:	4413      	add	r3, r2
 8002bba:	3361      	adds	r3, #97	; 0x61
 8002bbc:	2206      	movs	r2, #6
 8002bbe:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	015a      	lsls	r2, r3, #5
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	0151      	lsls	r1, r2, #5
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	440a      	add	r2, r1
 8002bd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bda:	f043 0302 	orr.w	r3, r3, #2
 8002bde:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	4611      	mov	r1, r2
 8002bea:	4618      	mov	r0, r3
 8002bec:	f003 f9e1 	bl	8005fb2 <USB_HC_Halt>
 8002bf0:	e044      	b.n	8002c7c <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	212c      	movs	r1, #44	; 0x2c
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	335c      	adds	r3, #92	; 0x5c
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	1c5a      	adds	r2, r3, #1
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	202c      	movs	r0, #44	; 0x2c
 8002c0a:	fb00 f303 	mul.w	r3, r0, r3
 8002c0e:	440b      	add	r3, r1
 8002c10:	335c      	adds	r3, #92	; 0x5c
 8002c12:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	212c      	movs	r1, #44	; 0x2c
 8002c1a:	fb01 f303 	mul.w	r3, r1, r3
 8002c1e:	4413      	add	r3, r2
 8002c20:	335c      	adds	r3, #92	; 0x5c
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d920      	bls.n	8002c6a <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	212c      	movs	r1, #44	; 0x2c
 8002c2e:	fb01 f303 	mul.w	r3, r1, r3
 8002c32:	4413      	add	r3, r2
 8002c34:	335c      	adds	r3, #92	; 0x5c
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	212c      	movs	r1, #44	; 0x2c
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	4413      	add	r3, r2
 8002c46:	3360      	adds	r3, #96	; 0x60
 8002c48:	2204      	movs	r2, #4
 8002c4a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	b2d9      	uxtb	r1, r3
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	202c      	movs	r0, #44	; 0x2c
 8002c56:	fb00 f303 	mul.w	r3, r0, r3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	3360      	adds	r3, #96	; 0x60
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	461a      	mov	r2, r3
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f005 fb62 	bl	800832c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c68:	e008      	b.n	8002c7c <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	212c      	movs	r1, #44	; 0x2c
 8002c70:	fb01 f303 	mul.w	r3, r1, r3
 8002c74:	4413      	add	r3, r2
 8002c76:	3360      	adds	r3, #96	; 0x60
 8002c78:	2202      	movs	r2, #2
 8002c7a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	015a      	lsls	r2, r3, #5
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c88:	461a      	mov	r2, r3
 8002c8a:	2380      	movs	r3, #128	; 0x80
 8002c8c:	6093      	str	r3, [r2, #8]
}
 8002c8e:	e19b      	b.n	8002fc8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	015a      	lsls	r2, r3, #5
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca6:	d134      	bne.n	8002d12 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	015a      	lsls	r2, r3, #5
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	0151      	lsls	r1, r2, #5
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	440a      	add	r2, r1
 8002cbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cc2:	f043 0302 	orr.w	r3, r3, #2
 8002cc6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f003 f96d 	bl	8005fb2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	2310      	movs	r3, #16
 8002ce8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	015a      	lsls	r2, r3, #5
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cfc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	212c      	movs	r1, #44	; 0x2c
 8002d04:	fb01 f303 	mul.w	r3, r1, r3
 8002d08:	4413      	add	r3, r2
 8002d0a:	3361      	adds	r3, #97	; 0x61
 8002d0c:	2208      	movs	r2, #8
 8002d0e:	701a      	strb	r2, [r3, #0]
}
 8002d10:	e15a      	b.n	8002fc8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	015a      	lsls	r2, r3, #5
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	4413      	add	r3, r2
 8002d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	f040 814f 	bne.w	8002fc8 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	015a      	lsls	r2, r3, #5
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	4413      	add	r3, r2
 8002d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	0151      	lsls	r1, r2, #5
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	440a      	add	r2, r1
 8002d40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d44:	f023 0302 	bic.w	r3, r3, #2
 8002d48:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	212c      	movs	r1, #44	; 0x2c
 8002d50:	fb01 f303 	mul.w	r3, r1, r3
 8002d54:	4413      	add	r3, r2
 8002d56:	3361      	adds	r3, #97	; 0x61
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d17d      	bne.n	8002e5a <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	212c      	movs	r1, #44	; 0x2c
 8002d64:	fb01 f303 	mul.w	r3, r1, r3
 8002d68:	4413      	add	r3, r2
 8002d6a:	3360      	adds	r3, #96	; 0x60
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	212c      	movs	r1, #44	; 0x2c
 8002d76:	fb01 f303 	mul.w	r3, r1, r3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	333f      	adds	r3, #63	; 0x3f
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d00a      	beq.n	8002d9a <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	212c      	movs	r1, #44	; 0x2c
 8002d8a:	fb01 f303 	mul.w	r3, r1, r3
 8002d8e:	4413      	add	r3, r2
 8002d90:	333f      	adds	r3, #63	; 0x3f
 8002d92:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d94:	2b03      	cmp	r3, #3
 8002d96:	f040 8100 	bne.w	8002f9a <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d113      	bne.n	8002dca <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	212c      	movs	r1, #44	; 0x2c
 8002da8:	fb01 f303 	mul.w	r3, r1, r3
 8002dac:	4413      	add	r3, r2
 8002dae:	3355      	adds	r3, #85	; 0x55
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	f083 0301 	eor.w	r3, r3, #1
 8002db6:	b2d8      	uxtb	r0, r3
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	212c      	movs	r1, #44	; 0x2c
 8002dbe:	fb01 f303 	mul.w	r3, r1, r3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	3355      	adds	r3, #85	; 0x55
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	f040 80e3 	bne.w	8002f9a <HCD_HC_OUT_IRQHandler+0x7cc>
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	212c      	movs	r1, #44	; 0x2c
 8002dda:	fb01 f303 	mul.w	r3, r1, r3
 8002dde:	4413      	add	r3, r2
 8002de0:	334c      	adds	r3, #76	; 0x4c
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 80d8 	beq.w	8002f9a <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	212c      	movs	r1, #44	; 0x2c
 8002df0:	fb01 f303 	mul.w	r3, r1, r3
 8002df4:	4413      	add	r3, r2
 8002df6:	334c      	adds	r3, #76	; 0x4c
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	202c      	movs	r0, #44	; 0x2c
 8002e00:	fb00 f202 	mul.w	r2, r0, r2
 8002e04:	440a      	add	r2, r1
 8002e06:	3240      	adds	r2, #64	; 0x40
 8002e08:	8812      	ldrh	r2, [r2, #0]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	202c      	movs	r0, #44	; 0x2c
 8002e14:	fb00 f202 	mul.w	r2, r0, r2
 8002e18:	440a      	add	r2, r1
 8002e1a:	3240      	adds	r2, #64	; 0x40
 8002e1c:	8812      	ldrh	r2, [r2, #0]
 8002e1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 80b5 	beq.w	8002f9a <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	212c      	movs	r1, #44	; 0x2c
 8002e36:	fb01 f303 	mul.w	r3, r1, r3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	3355      	adds	r3, #85	; 0x55
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	f083 0301 	eor.w	r3, r3, #1
 8002e44:	b2d8      	uxtb	r0, r3
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	212c      	movs	r1, #44	; 0x2c
 8002e4c:	fb01 f303 	mul.w	r3, r1, r3
 8002e50:	4413      	add	r3, r2
 8002e52:	3355      	adds	r3, #85	; 0x55
 8002e54:	4602      	mov	r2, r0
 8002e56:	701a      	strb	r2, [r3, #0]
 8002e58:	e09f      	b.n	8002f9a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	212c      	movs	r1, #44	; 0x2c
 8002e60:	fb01 f303 	mul.w	r3, r1, r3
 8002e64:	4413      	add	r3, r2
 8002e66:	3361      	adds	r3, #97	; 0x61
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	d109      	bne.n	8002e82 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	212c      	movs	r1, #44	; 0x2c
 8002e74:	fb01 f303 	mul.w	r3, r1, r3
 8002e78:	4413      	add	r3, r2
 8002e7a:	3360      	adds	r3, #96	; 0x60
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	701a      	strb	r2, [r3, #0]
 8002e80:	e08b      	b.n	8002f9a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	212c      	movs	r1, #44	; 0x2c
 8002e88:	fb01 f303 	mul.w	r3, r1, r3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	3361      	adds	r3, #97	; 0x61
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d109      	bne.n	8002eaa <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	212c      	movs	r1, #44	; 0x2c
 8002e9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	3360      	adds	r3, #96	; 0x60
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	701a      	strb	r2, [r3, #0]
 8002ea8:	e077      	b.n	8002f9a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	212c      	movs	r1, #44	; 0x2c
 8002eb0:	fb01 f303 	mul.w	r3, r1, r3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3361      	adds	r3, #97	; 0x61
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b05      	cmp	r3, #5
 8002ebc:	d109      	bne.n	8002ed2 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	212c      	movs	r1, #44	; 0x2c
 8002ec4:	fb01 f303 	mul.w	r3, r1, r3
 8002ec8:	4413      	add	r3, r2
 8002eca:	3360      	adds	r3, #96	; 0x60
 8002ecc:	2205      	movs	r2, #5
 8002ece:	701a      	strb	r2, [r3, #0]
 8002ed0:	e063      	b.n	8002f9a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	212c      	movs	r1, #44	; 0x2c
 8002ed8:	fb01 f303 	mul.w	r3, r1, r3
 8002edc:	4413      	add	r3, r2
 8002ede:	3361      	adds	r3, #97	; 0x61
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b06      	cmp	r3, #6
 8002ee4:	d009      	beq.n	8002efa <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	212c      	movs	r1, #44	; 0x2c
 8002eec:	fb01 f303 	mul.w	r3, r1, r3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	3361      	adds	r3, #97	; 0x61
 8002ef4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ef6:	2b08      	cmp	r3, #8
 8002ef8:	d14f      	bne.n	8002f9a <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	212c      	movs	r1, #44	; 0x2c
 8002f00:	fb01 f303 	mul.w	r3, r1, r3
 8002f04:	4413      	add	r3, r2
 8002f06:	335c      	adds	r3, #92	; 0x5c
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	1c5a      	adds	r2, r3, #1
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	202c      	movs	r0, #44	; 0x2c
 8002f12:	fb00 f303 	mul.w	r3, r0, r3
 8002f16:	440b      	add	r3, r1
 8002f18:	335c      	adds	r3, #92	; 0x5c
 8002f1a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	212c      	movs	r1, #44	; 0x2c
 8002f22:	fb01 f303 	mul.w	r3, r1, r3
 8002f26:	4413      	add	r3, r2
 8002f28:	335c      	adds	r3, #92	; 0x5c
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d912      	bls.n	8002f56 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	212c      	movs	r1, #44	; 0x2c
 8002f36:	fb01 f303 	mul.w	r3, r1, r3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	335c      	adds	r3, #92	; 0x5c
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	212c      	movs	r1, #44	; 0x2c
 8002f48:	fb01 f303 	mul.w	r3, r1, r3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	3360      	adds	r3, #96	; 0x60
 8002f50:	2204      	movs	r2, #4
 8002f52:	701a      	strb	r2, [r3, #0]
 8002f54:	e021      	b.n	8002f9a <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	212c      	movs	r1, #44	; 0x2c
 8002f5c:	fb01 f303 	mul.w	r3, r1, r3
 8002f60:	4413      	add	r3, r2
 8002f62:	3360      	adds	r3, #96	; 0x60
 8002f64:	2202      	movs	r2, #2
 8002f66:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f7e:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f86:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	015a      	lsls	r2, r3, #5
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	4413      	add	r3, r2
 8002f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f94:	461a      	mov	r2, r3
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	2302      	movs	r3, #2
 8002faa:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	b2d9      	uxtb	r1, r3
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	202c      	movs	r0, #44	; 0x2c
 8002fb6:	fb00 f303 	mul.w	r3, r0, r3
 8002fba:	4413      	add	r3, r2
 8002fbc:	3360      	adds	r3, #96	; 0x60
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f005 f9b2 	bl	800832c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002fc8:	bf00      	nop
 8002fca:	3720      	adds	r7, #32
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b08a      	sub	sp, #40	; 0x28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	f003 030f 	and.w	r3, r3, #15
 8002ff0:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	0c5b      	lsrs	r3, r3, #17
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	091b      	lsrs	r3, r3, #4
 8003000:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003004:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2b02      	cmp	r3, #2
 800300a:	d004      	beq.n	8003016 <HCD_RXQLVL_IRQHandler+0x46>
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2b05      	cmp	r3, #5
 8003010:	f000 80a9 	beq.w	8003166 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003014:	e0aa      	b.n	800316c <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 80a6 	beq.w	800316a <HCD_RXQLVL_IRQHandler+0x19a>
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	212c      	movs	r1, #44	; 0x2c
 8003024:	fb01 f303 	mul.w	r3, r1, r3
 8003028:	4413      	add	r3, r2
 800302a:	3344      	adds	r3, #68	; 0x44
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 809b 	beq.w	800316a <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	212c      	movs	r1, #44	; 0x2c
 800303a:	fb01 f303 	mul.w	r3, r1, r3
 800303e:	4413      	add	r3, r2
 8003040:	3350      	adds	r3, #80	; 0x50
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	441a      	add	r2, r3
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	202c      	movs	r0, #44	; 0x2c
 800304e:	fb00 f303 	mul.w	r3, r0, r3
 8003052:	440b      	add	r3, r1
 8003054:	334c      	adds	r3, #76	; 0x4c
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d87a      	bhi.n	8003152 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6818      	ldr	r0, [r3, #0]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	212c      	movs	r1, #44	; 0x2c
 8003066:	fb01 f303 	mul.w	r3, r1, r3
 800306a:	4413      	add	r3, r2
 800306c:	3344      	adds	r3, #68	; 0x44
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	b292      	uxth	r2, r2
 8003074:	4619      	mov	r1, r3
 8003076:	f002 fb15 	bl	80056a4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	212c      	movs	r1, #44	; 0x2c
 8003080:	fb01 f303 	mul.w	r3, r1, r3
 8003084:	4413      	add	r3, r2
 8003086:	3344      	adds	r3, #68	; 0x44
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	441a      	add	r2, r3
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	202c      	movs	r0, #44	; 0x2c
 8003094:	fb00 f303 	mul.w	r3, r0, r3
 8003098:	440b      	add	r3, r1
 800309a:	3344      	adds	r3, #68	; 0x44
 800309c:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	212c      	movs	r1, #44	; 0x2c
 80030a4:	fb01 f303 	mul.w	r3, r1, r3
 80030a8:	4413      	add	r3, r2
 80030aa:	3350      	adds	r3, #80	; 0x50
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	441a      	add	r2, r3
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	202c      	movs	r0, #44	; 0x2c
 80030b8:	fb00 f303 	mul.w	r3, r0, r3
 80030bc:	440b      	add	r3, r1
 80030be:	3350      	adds	r3, #80	; 0x50
 80030c0:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	015a      	lsls	r2, r3, #5
 80030c6:	6a3b      	ldr	r3, [r7, #32]
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	0cdb      	lsrs	r3, r3, #19
 80030d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030d6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	212c      	movs	r1, #44	; 0x2c
 80030de:	fb01 f303 	mul.w	r3, r1, r3
 80030e2:	4413      	add	r3, r2
 80030e4:	3340      	adds	r3, #64	; 0x40
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	461a      	mov	r2, r3
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d13c      	bne.n	800316a <HCD_RXQLVL_IRQHandler+0x19a>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d039      	beq.n	800316a <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	015a      	lsls	r2, r3, #5
 80030fa:	6a3b      	ldr	r3, [r7, #32]
 80030fc:	4413      	add	r3, r2
 80030fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800310c:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003114:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	015a      	lsls	r2, r3, #5
 800311a:	6a3b      	ldr	r3, [r7, #32]
 800311c:	4413      	add	r3, r2
 800311e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003122:	461a      	mov	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	212c      	movs	r1, #44	; 0x2c
 800312e:	fb01 f303 	mul.w	r3, r1, r3
 8003132:	4413      	add	r3, r2
 8003134:	3354      	adds	r3, #84	; 0x54
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	f083 0301 	eor.w	r3, r3, #1
 800313c:	b2d8      	uxtb	r0, r3
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	212c      	movs	r1, #44	; 0x2c
 8003144:	fb01 f303 	mul.w	r3, r1, r3
 8003148:	4413      	add	r3, r2
 800314a:	3354      	adds	r3, #84	; 0x54
 800314c:	4602      	mov	r2, r0
 800314e:	701a      	strb	r2, [r3, #0]
      break;
 8003150:	e00b      	b.n	800316a <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	212c      	movs	r1, #44	; 0x2c
 8003158:	fb01 f303 	mul.w	r3, r1, r3
 800315c:	4413      	add	r3, r2
 800315e:	3360      	adds	r3, #96	; 0x60
 8003160:	2204      	movs	r2, #4
 8003162:	701a      	strb	r2, [r3, #0]
      break;
 8003164:	e001      	b.n	800316a <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003166:	bf00      	nop
 8003168:	e000      	b.n	800316c <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800316a:	bf00      	nop
  }
}
 800316c:	bf00      	nop
 800316e:	3728      	adds	r7, #40	; 0x28
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80031a0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d10b      	bne.n	80031c4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d102      	bne.n	80031bc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f005 f89c 	bl	80082f4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f043 0302 	orr.w	r3, r3, #2
 80031c2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d132      	bne.n	8003234 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	f043 0308 	orr.w	r3, r3, #8
 80031d4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d126      	bne.n	800322e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d113      	bne.n	8003210 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80031ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031f2:	d106      	bne.n	8003202 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2102      	movs	r1, #2
 80031fa:	4618      	mov	r0, r3
 80031fc:	f002 fbb2 	bl	8005964 <USB_InitFSLSPClkSel>
 8003200:	e011      	b.n	8003226 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2101      	movs	r1, #1
 8003208:	4618      	mov	r0, r3
 800320a:	f002 fbab 	bl	8005964 <USB_InitFSLSPClkSel>
 800320e:	e00a      	b.n	8003226 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d106      	bne.n	8003226 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800321e:	461a      	mov	r2, r3
 8003220:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003224:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f005 f88e 	bl	8008348 <HAL_HCD_PortEnabled_Callback>
 800322c:	e002      	b.n	8003234 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f005 f898 	bl	8008364 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f003 0320 	and.w	r3, r3, #32
 800323a:	2b20      	cmp	r3, #32
 800323c:	d103      	bne.n	8003246 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	f043 0320 	orr.w	r3, r3, #32
 8003244:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800324c:	461a      	mov	r2, r3
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	6013      	str	r3, [r2, #0]
}
 8003252:	bf00      	nop
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
	...

0800325c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e264      	b.n	8003738 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d075      	beq.n	8003366 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800327a:	4ba3      	ldr	r3, [pc, #652]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 030c 	and.w	r3, r3, #12
 8003282:	2b04      	cmp	r3, #4
 8003284:	d00c      	beq.n	80032a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003286:	4ba0      	ldr	r3, [pc, #640]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800328e:	2b08      	cmp	r3, #8
 8003290:	d112      	bne.n	80032b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003292:	4b9d      	ldr	r3, [pc, #628]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800329a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800329e:	d10b      	bne.n	80032b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a0:	4b99      	ldr	r3, [pc, #612]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d05b      	beq.n	8003364 <HAL_RCC_OscConfig+0x108>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d157      	bne.n	8003364 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e23f      	b.n	8003738 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c0:	d106      	bne.n	80032d0 <HAL_RCC_OscConfig+0x74>
 80032c2:	4b91      	ldr	r3, [pc, #580]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a90      	ldr	r2, [pc, #576]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 80032c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	e01d      	b.n	800330c <HAL_RCC_OscConfig+0xb0>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032d8:	d10c      	bne.n	80032f4 <HAL_RCC_OscConfig+0x98>
 80032da:	4b8b      	ldr	r3, [pc, #556]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a8a      	ldr	r2, [pc, #552]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 80032e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	4b88      	ldr	r3, [pc, #544]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a87      	ldr	r2, [pc, #540]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 80032ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	e00b      	b.n	800330c <HAL_RCC_OscConfig+0xb0>
 80032f4:	4b84      	ldr	r3, [pc, #528]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a83      	ldr	r2, [pc, #524]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 80032fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032fe:	6013      	str	r3, [r2, #0]
 8003300:	4b81      	ldr	r3, [pc, #516]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a80      	ldr	r2, [pc, #512]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 8003306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800330a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d013      	beq.n	800333c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003314:	f7fd fea8 	bl	8001068 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800331c:	f7fd fea4 	bl	8001068 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b64      	cmp	r3, #100	; 0x64
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e204      	b.n	8003738 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332e:	4b76      	ldr	r3, [pc, #472]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0f0      	beq.n	800331c <HAL_RCC_OscConfig+0xc0>
 800333a:	e014      	b.n	8003366 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333c:	f7fd fe94 	bl	8001068 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003344:	f7fd fe90 	bl	8001068 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b64      	cmp	r3, #100	; 0x64
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e1f0      	b.n	8003738 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003356:	4b6c      	ldr	r3, [pc, #432]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f0      	bne.n	8003344 <HAL_RCC_OscConfig+0xe8>
 8003362:	e000      	b.n	8003366 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d063      	beq.n	800343a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003372:	4b65      	ldr	r3, [pc, #404]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00b      	beq.n	8003396 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800337e:	4b62      	ldr	r3, [pc, #392]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003386:	2b08      	cmp	r3, #8
 8003388:	d11c      	bne.n	80033c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800338a:	4b5f      	ldr	r3, [pc, #380]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d116      	bne.n	80033c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003396:	4b5c      	ldr	r3, [pc, #368]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d005      	beq.n	80033ae <HAL_RCC_OscConfig+0x152>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d001      	beq.n	80033ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e1c4      	b.n	8003738 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ae:	4b56      	ldr	r3, [pc, #344]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	4952      	ldr	r1, [pc, #328]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033c2:	e03a      	b.n	800343a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d020      	beq.n	800340e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033cc:	4b4f      	ldr	r3, [pc, #316]	; (800350c <HAL_RCC_OscConfig+0x2b0>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d2:	f7fd fe49 	bl	8001068 <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d8:	e008      	b.n	80033ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033da:	f7fd fe45 	bl	8001068 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e1a5      	b.n	8003738 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ec:	4b46      	ldr	r3, [pc, #280]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0f0      	beq.n	80033da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f8:	4b43      	ldr	r3, [pc, #268]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	4940      	ldr	r1, [pc, #256]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 8003408:	4313      	orrs	r3, r2
 800340a:	600b      	str	r3, [r1, #0]
 800340c:	e015      	b.n	800343a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800340e:	4b3f      	ldr	r3, [pc, #252]	; (800350c <HAL_RCC_OscConfig+0x2b0>)
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003414:	f7fd fe28 	bl	8001068 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800341c:	f7fd fe24 	bl	8001068 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e184      	b.n	8003738 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800342e:	4b36      	ldr	r3, [pc, #216]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f0      	bne.n	800341c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b00      	cmp	r3, #0
 8003444:	d030      	beq.n	80034a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d016      	beq.n	800347c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800344e:	4b30      	ldr	r3, [pc, #192]	; (8003510 <HAL_RCC_OscConfig+0x2b4>)
 8003450:	2201      	movs	r2, #1
 8003452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003454:	f7fd fe08 	bl	8001068 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800345c:	f7fd fe04 	bl	8001068 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e164      	b.n	8003738 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800346e:	4b26      	ldr	r3, [pc, #152]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 8003470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d0f0      	beq.n	800345c <HAL_RCC_OscConfig+0x200>
 800347a:	e015      	b.n	80034a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800347c:	4b24      	ldr	r3, [pc, #144]	; (8003510 <HAL_RCC_OscConfig+0x2b4>)
 800347e:	2200      	movs	r2, #0
 8003480:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003482:	f7fd fdf1 	bl	8001068 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800348a:	f7fd fded 	bl	8001068 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e14d      	b.n	8003738 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800349c:	4b1a      	ldr	r3, [pc, #104]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 800349e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1f0      	bne.n	800348a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 80a0 	beq.w	80035f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034b6:	2300      	movs	r3, #0
 80034b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ba:	4b13      	ldr	r3, [pc, #76]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10f      	bne.n	80034e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c6:	2300      	movs	r3, #0
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	4b0f      	ldr	r3, [pc, #60]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	4a0e      	ldr	r2, [pc, #56]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 80034d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034d4:	6413      	str	r3, [r2, #64]	; 0x40
 80034d6:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <HAL_RCC_OscConfig+0x2ac>)
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034de:	60bb      	str	r3, [r7, #8]
 80034e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034e2:	2301      	movs	r3, #1
 80034e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e6:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <HAL_RCC_OscConfig+0x2b8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d121      	bne.n	8003536 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034f2:	4b08      	ldr	r3, [pc, #32]	; (8003514 <HAL_RCC_OscConfig+0x2b8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a07      	ldr	r2, [pc, #28]	; (8003514 <HAL_RCC_OscConfig+0x2b8>)
 80034f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034fe:	f7fd fdb3 	bl	8001068 <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003504:	e011      	b.n	800352a <HAL_RCC_OscConfig+0x2ce>
 8003506:	bf00      	nop
 8003508:	40023800 	.word	0x40023800
 800350c:	42470000 	.word	0x42470000
 8003510:	42470e80 	.word	0x42470e80
 8003514:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003518:	f7fd fda6 	bl	8001068 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e106      	b.n	8003738 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800352a:	4b85      	ldr	r3, [pc, #532]	; (8003740 <HAL_RCC_OscConfig+0x4e4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0f0      	beq.n	8003518 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d106      	bne.n	800354c <HAL_RCC_OscConfig+0x2f0>
 800353e:	4b81      	ldr	r3, [pc, #516]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 8003540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003542:	4a80      	ldr	r2, [pc, #512]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 8003544:	f043 0301 	orr.w	r3, r3, #1
 8003548:	6713      	str	r3, [r2, #112]	; 0x70
 800354a:	e01c      	b.n	8003586 <HAL_RCC_OscConfig+0x32a>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	2b05      	cmp	r3, #5
 8003552:	d10c      	bne.n	800356e <HAL_RCC_OscConfig+0x312>
 8003554:	4b7b      	ldr	r3, [pc, #492]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 8003556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003558:	4a7a      	ldr	r2, [pc, #488]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 800355a:	f043 0304 	orr.w	r3, r3, #4
 800355e:	6713      	str	r3, [r2, #112]	; 0x70
 8003560:	4b78      	ldr	r3, [pc, #480]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 8003562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003564:	4a77      	ldr	r2, [pc, #476]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	6713      	str	r3, [r2, #112]	; 0x70
 800356c:	e00b      	b.n	8003586 <HAL_RCC_OscConfig+0x32a>
 800356e:	4b75      	ldr	r3, [pc, #468]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 8003570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003572:	4a74      	ldr	r2, [pc, #464]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 8003574:	f023 0301 	bic.w	r3, r3, #1
 8003578:	6713      	str	r3, [r2, #112]	; 0x70
 800357a:	4b72      	ldr	r3, [pc, #456]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 800357c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357e:	4a71      	ldr	r2, [pc, #452]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 8003580:	f023 0304 	bic.w	r3, r3, #4
 8003584:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d015      	beq.n	80035ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800358e:	f7fd fd6b 	bl	8001068 <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003594:	e00a      	b.n	80035ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003596:	f7fd fd67 	bl	8001068 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e0c5      	b.n	8003738 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ac:	4b65      	ldr	r3, [pc, #404]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 80035ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d0ee      	beq.n	8003596 <HAL_RCC_OscConfig+0x33a>
 80035b8:	e014      	b.n	80035e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ba:	f7fd fd55 	bl	8001068 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c0:	e00a      	b.n	80035d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035c2:	f7fd fd51 	bl	8001068 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e0af      	b.n	8003738 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035d8:	4b5a      	ldr	r3, [pc, #360]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 80035da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1ee      	bne.n	80035c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035e4:	7dfb      	ldrb	r3, [r7, #23]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d105      	bne.n	80035f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ea:	4b56      	ldr	r3, [pc, #344]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	4a55      	ldr	r2, [pc, #340]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 80035f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 809b 	beq.w	8003736 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003600:	4b50      	ldr	r3, [pc, #320]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 030c 	and.w	r3, r3, #12
 8003608:	2b08      	cmp	r3, #8
 800360a:	d05c      	beq.n	80036c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	2b02      	cmp	r3, #2
 8003612:	d141      	bne.n	8003698 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003614:	4b4c      	ldr	r3, [pc, #304]	; (8003748 <HAL_RCC_OscConfig+0x4ec>)
 8003616:	2200      	movs	r2, #0
 8003618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361a:	f7fd fd25 	bl	8001068 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003622:	f7fd fd21 	bl	8001068 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e081      	b.n	8003738 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003634:	4b43      	ldr	r3, [pc, #268]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1f0      	bne.n	8003622 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	69da      	ldr	r2, [r3, #28]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	431a      	orrs	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	019b      	lsls	r3, r3, #6
 8003650:	431a      	orrs	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003656:	085b      	lsrs	r3, r3, #1
 8003658:	3b01      	subs	r3, #1
 800365a:	041b      	lsls	r3, r3, #16
 800365c:	431a      	orrs	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003662:	061b      	lsls	r3, r3, #24
 8003664:	4937      	ldr	r1, [pc, #220]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 8003666:	4313      	orrs	r3, r2
 8003668:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800366a:	4b37      	ldr	r3, [pc, #220]	; (8003748 <HAL_RCC_OscConfig+0x4ec>)
 800366c:	2201      	movs	r2, #1
 800366e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003670:	f7fd fcfa 	bl	8001068 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003678:	f7fd fcf6 	bl	8001068 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e056      	b.n	8003738 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800368a:	4b2e      	ldr	r3, [pc, #184]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0f0      	beq.n	8003678 <HAL_RCC_OscConfig+0x41c>
 8003696:	e04e      	b.n	8003736 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003698:	4b2b      	ldr	r3, [pc, #172]	; (8003748 <HAL_RCC_OscConfig+0x4ec>)
 800369a:	2200      	movs	r2, #0
 800369c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369e:	f7fd fce3 	bl	8001068 <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a6:	f7fd fcdf 	bl	8001068 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e03f      	b.n	8003738 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b8:	4b22      	ldr	r3, [pc, #136]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1f0      	bne.n	80036a6 <HAL_RCC_OscConfig+0x44a>
 80036c4:	e037      	b.n	8003736 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d101      	bne.n	80036d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e032      	b.n	8003738 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036d2:	4b1c      	ldr	r3, [pc, #112]	; (8003744 <HAL_RCC_OscConfig+0x4e8>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d028      	beq.n	8003732 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d121      	bne.n	8003732 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d11a      	bne.n	8003732 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003702:	4013      	ands	r3, r2
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003708:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800370a:	4293      	cmp	r3, r2
 800370c:	d111      	bne.n	8003732 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003718:	085b      	lsrs	r3, r3, #1
 800371a:	3b01      	subs	r3, #1
 800371c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800371e:	429a      	cmp	r2, r3
 8003720:	d107      	bne.n	8003732 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800372e:	429a      	cmp	r2, r3
 8003730:	d001      	beq.n	8003736 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3718      	adds	r7, #24
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40007000 	.word	0x40007000
 8003744:	40023800 	.word	0x40023800
 8003748:	42470060 	.word	0x42470060

0800374c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e0cc      	b.n	80038fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003760:	4b68      	ldr	r3, [pc, #416]	; (8003904 <HAL_RCC_ClockConfig+0x1b8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	429a      	cmp	r2, r3
 800376c:	d90c      	bls.n	8003788 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800376e:	4b65      	ldr	r3, [pc, #404]	; (8003904 <HAL_RCC_ClockConfig+0x1b8>)
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003776:	4b63      	ldr	r3, [pc, #396]	; (8003904 <HAL_RCC_ClockConfig+0x1b8>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	429a      	cmp	r2, r3
 8003782:	d001      	beq.n	8003788 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e0b8      	b.n	80038fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d020      	beq.n	80037d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b00      	cmp	r3, #0
 800379e:	d005      	beq.n	80037ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037a0:	4b59      	ldr	r3, [pc, #356]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	4a58      	ldr	r2, [pc, #352]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80037a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d005      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037b8:	4b53      	ldr	r3, [pc, #332]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	4a52      	ldr	r2, [pc, #328]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80037be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037c4:	4b50      	ldr	r3, [pc, #320]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	494d      	ldr	r1, [pc, #308]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d044      	beq.n	800386c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d107      	bne.n	80037fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ea:	4b47      	ldr	r3, [pc, #284]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d119      	bne.n	800382a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e07f      	b.n	80038fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d003      	beq.n	800380a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003806:	2b03      	cmp	r3, #3
 8003808:	d107      	bne.n	800381a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800380a:	4b3f      	ldr	r3, [pc, #252]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d109      	bne.n	800382a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e06f      	b.n	80038fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800381a:	4b3b      	ldr	r3, [pc, #236]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e067      	b.n	80038fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800382a:	4b37      	ldr	r3, [pc, #220]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f023 0203 	bic.w	r2, r3, #3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	4934      	ldr	r1, [pc, #208]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 8003838:	4313      	orrs	r3, r2
 800383a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800383c:	f7fd fc14 	bl	8001068 <HAL_GetTick>
 8003840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003842:	e00a      	b.n	800385a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003844:	f7fd fc10 	bl	8001068 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003852:	4293      	cmp	r3, r2
 8003854:	d901      	bls.n	800385a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e04f      	b.n	80038fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385a:	4b2b      	ldr	r3, [pc, #172]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 020c 	and.w	r2, r3, #12
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	429a      	cmp	r2, r3
 800386a:	d1eb      	bne.n	8003844 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800386c:	4b25      	ldr	r3, [pc, #148]	; (8003904 <HAL_RCC_ClockConfig+0x1b8>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d20c      	bcs.n	8003894 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800387a:	4b22      	ldr	r3, [pc, #136]	; (8003904 <HAL_RCC_ClockConfig+0x1b8>)
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003882:	4b20      	ldr	r3, [pc, #128]	; (8003904 <HAL_RCC_ClockConfig+0x1b8>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d001      	beq.n	8003894 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e032      	b.n	80038fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	d008      	beq.n	80038b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038a0:	4b19      	ldr	r3, [pc, #100]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	4916      	ldr	r1, [pc, #88]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d009      	beq.n	80038d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038be:	4b12      	ldr	r3, [pc, #72]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	490e      	ldr	r1, [pc, #56]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038d2:	f000 f821 	bl	8003918 <HAL_RCC_GetSysClockFreq>
 80038d6:	4602      	mov	r2, r0
 80038d8:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	091b      	lsrs	r3, r3, #4
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	490a      	ldr	r1, [pc, #40]	; (800390c <HAL_RCC_ClockConfig+0x1c0>)
 80038e4:	5ccb      	ldrb	r3, [r1, r3]
 80038e6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ea:	4a09      	ldr	r2, [pc, #36]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 80038ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038ee:	4b09      	ldr	r3, [pc, #36]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fd fb74 	bl	8000fe0 <HAL_InitTick>

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40023c00 	.word	0x40023c00
 8003908:	40023800 	.word	0x40023800
 800390c:	08008998 	.word	0x08008998
 8003910:	20000000 	.word	0x20000000
 8003914:	20000004 	.word	0x20000004

08003918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003918:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800391c:	b084      	sub	sp, #16
 800391e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003920:	2300      	movs	r3, #0
 8003922:	607b      	str	r3, [r7, #4]
 8003924:	2300      	movs	r3, #0
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	2300      	movs	r3, #0
 800392a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003930:	4b67      	ldr	r3, [pc, #412]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 030c 	and.w	r3, r3, #12
 8003938:	2b08      	cmp	r3, #8
 800393a:	d00d      	beq.n	8003958 <HAL_RCC_GetSysClockFreq+0x40>
 800393c:	2b08      	cmp	r3, #8
 800393e:	f200 80bd 	bhi.w	8003abc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <HAL_RCC_GetSysClockFreq+0x34>
 8003946:	2b04      	cmp	r3, #4
 8003948:	d003      	beq.n	8003952 <HAL_RCC_GetSysClockFreq+0x3a>
 800394a:	e0b7      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800394c:	4b61      	ldr	r3, [pc, #388]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800394e:	60bb      	str	r3, [r7, #8]
       break;
 8003950:	e0b7      	b.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003952:	4b61      	ldr	r3, [pc, #388]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003954:	60bb      	str	r3, [r7, #8]
      break;
 8003956:	e0b4      	b.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003958:	4b5d      	ldr	r3, [pc, #372]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003960:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003962:	4b5b      	ldr	r3, [pc, #364]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d04d      	beq.n	8003a0a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800396e:	4b58      	ldr	r3, [pc, #352]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	099b      	lsrs	r3, r3, #6
 8003974:	461a      	mov	r2, r3
 8003976:	f04f 0300 	mov.w	r3, #0
 800397a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800397e:	f04f 0100 	mov.w	r1, #0
 8003982:	ea02 0800 	and.w	r8, r2, r0
 8003986:	ea03 0901 	and.w	r9, r3, r1
 800398a:	4640      	mov	r0, r8
 800398c:	4649      	mov	r1, r9
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	f04f 0300 	mov.w	r3, #0
 8003996:	014b      	lsls	r3, r1, #5
 8003998:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800399c:	0142      	lsls	r2, r0, #5
 800399e:	4610      	mov	r0, r2
 80039a0:	4619      	mov	r1, r3
 80039a2:	ebb0 0008 	subs.w	r0, r0, r8
 80039a6:	eb61 0109 	sbc.w	r1, r1, r9
 80039aa:	f04f 0200 	mov.w	r2, #0
 80039ae:	f04f 0300 	mov.w	r3, #0
 80039b2:	018b      	lsls	r3, r1, #6
 80039b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80039b8:	0182      	lsls	r2, r0, #6
 80039ba:	1a12      	subs	r2, r2, r0
 80039bc:	eb63 0301 	sbc.w	r3, r3, r1
 80039c0:	f04f 0000 	mov.w	r0, #0
 80039c4:	f04f 0100 	mov.w	r1, #0
 80039c8:	00d9      	lsls	r1, r3, #3
 80039ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039ce:	00d0      	lsls	r0, r2, #3
 80039d0:	4602      	mov	r2, r0
 80039d2:	460b      	mov	r3, r1
 80039d4:	eb12 0208 	adds.w	r2, r2, r8
 80039d8:	eb43 0309 	adc.w	r3, r3, r9
 80039dc:	f04f 0000 	mov.w	r0, #0
 80039e0:	f04f 0100 	mov.w	r1, #0
 80039e4:	0259      	lsls	r1, r3, #9
 80039e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80039ea:	0250      	lsls	r0, r2, #9
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4610      	mov	r0, r2
 80039f2:	4619      	mov	r1, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	461a      	mov	r2, r3
 80039f8:	f04f 0300 	mov.w	r3, #0
 80039fc:	f7fc fbe4 	bl	80001c8 <__aeabi_uldivmod>
 8003a00:	4602      	mov	r2, r0
 8003a02:	460b      	mov	r3, r1
 8003a04:	4613      	mov	r3, r2
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	e04a      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a0a:	4b31      	ldr	r3, [pc, #196]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	099b      	lsrs	r3, r3, #6
 8003a10:	461a      	mov	r2, r3
 8003a12:	f04f 0300 	mov.w	r3, #0
 8003a16:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a1a:	f04f 0100 	mov.w	r1, #0
 8003a1e:	ea02 0400 	and.w	r4, r2, r0
 8003a22:	ea03 0501 	and.w	r5, r3, r1
 8003a26:	4620      	mov	r0, r4
 8003a28:	4629      	mov	r1, r5
 8003a2a:	f04f 0200 	mov.w	r2, #0
 8003a2e:	f04f 0300 	mov.w	r3, #0
 8003a32:	014b      	lsls	r3, r1, #5
 8003a34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a38:	0142      	lsls	r2, r0, #5
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	1b00      	subs	r0, r0, r4
 8003a40:	eb61 0105 	sbc.w	r1, r1, r5
 8003a44:	f04f 0200 	mov.w	r2, #0
 8003a48:	f04f 0300 	mov.w	r3, #0
 8003a4c:	018b      	lsls	r3, r1, #6
 8003a4e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a52:	0182      	lsls	r2, r0, #6
 8003a54:	1a12      	subs	r2, r2, r0
 8003a56:	eb63 0301 	sbc.w	r3, r3, r1
 8003a5a:	f04f 0000 	mov.w	r0, #0
 8003a5e:	f04f 0100 	mov.w	r1, #0
 8003a62:	00d9      	lsls	r1, r3, #3
 8003a64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a68:	00d0      	lsls	r0, r2, #3
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	1912      	adds	r2, r2, r4
 8003a70:	eb45 0303 	adc.w	r3, r5, r3
 8003a74:	f04f 0000 	mov.w	r0, #0
 8003a78:	f04f 0100 	mov.w	r1, #0
 8003a7c:	0299      	lsls	r1, r3, #10
 8003a7e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003a82:	0290      	lsls	r0, r2, #10
 8003a84:	4602      	mov	r2, r0
 8003a86:	460b      	mov	r3, r1
 8003a88:	4610      	mov	r0, r2
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	f7fc fb98 	bl	80001c8 <__aeabi_uldivmod>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	0c1b      	lsrs	r3, r3, #16
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	3301      	adds	r3, #1
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab8:	60bb      	str	r3, [r7, #8]
      break;
 8003aba:	e002      	b.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003abc:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003abe:	60bb      	str	r3, [r7, #8]
      break;
 8003ac0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ac2:	68bb      	ldr	r3, [r7, #8]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003ace:	bf00      	nop
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	00f42400 	.word	0x00f42400
 8003ad8:	007a1200 	.word	0x007a1200

08003adc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ae0:	4b03      	ldr	r3, [pc, #12]	; (8003af0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	20000000 	.word	0x20000000

08003af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003af8:	f7ff fff0 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8003afc:	4602      	mov	r2, r0
 8003afe:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	0a9b      	lsrs	r3, r3, #10
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	4903      	ldr	r1, [pc, #12]	; (8003b18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b0a:	5ccb      	ldrb	r3, [r1, r3]
 8003b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40023800 	.word	0x40023800
 8003b18:	080089a8 	.word	0x080089a8

08003b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b20:	f7ff ffdc 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8003b24:	4602      	mov	r2, r0
 8003b26:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	0b5b      	lsrs	r3, r3, #13
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	4903      	ldr	r1, [pc, #12]	; (8003b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b32:	5ccb      	ldrb	r3, [r1, r3]
 8003b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	080089a8 	.word	0x080089a8

08003b44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e041      	b.n	8003bda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d106      	bne.n	8003b70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7fd f928 	bl	8000dc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3304      	adds	r3, #4
 8003b80:	4619      	mov	r1, r3
 8003b82:	4610      	mov	r0, r2
 8003b84:	f000 faa0 	bl	80040c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
	...

08003be4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d001      	beq.n	8003bfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e04e      	b.n	8003c9a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0201 	orr.w	r2, r2, #1
 8003c12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a23      	ldr	r2, [pc, #140]	; (8003ca8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d022      	beq.n	8003c64 <HAL_TIM_Base_Start_IT+0x80>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c26:	d01d      	beq.n	8003c64 <HAL_TIM_Base_Start_IT+0x80>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a1f      	ldr	r2, [pc, #124]	; (8003cac <HAL_TIM_Base_Start_IT+0xc8>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d018      	beq.n	8003c64 <HAL_TIM_Base_Start_IT+0x80>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a1e      	ldr	r2, [pc, #120]	; (8003cb0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d013      	beq.n	8003c64 <HAL_TIM_Base_Start_IT+0x80>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a1c      	ldr	r2, [pc, #112]	; (8003cb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d00e      	beq.n	8003c64 <HAL_TIM_Base_Start_IT+0x80>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a1b      	ldr	r2, [pc, #108]	; (8003cb8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d009      	beq.n	8003c64 <HAL_TIM_Base_Start_IT+0x80>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a19      	ldr	r2, [pc, #100]	; (8003cbc <HAL_TIM_Base_Start_IT+0xd8>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d004      	beq.n	8003c64 <HAL_TIM_Base_Start_IT+0x80>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a18      	ldr	r2, [pc, #96]	; (8003cc0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d111      	bne.n	8003c88 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2b06      	cmp	r3, #6
 8003c74:	d010      	beq.n	8003c98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f042 0201 	orr.w	r2, r2, #1
 8003c84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c86:	e007      	b.n	8003c98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0201 	orr.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3714      	adds	r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	40010000 	.word	0x40010000
 8003cac:	40000400 	.word	0x40000400
 8003cb0:	40000800 	.word	0x40000800
 8003cb4:	40000c00 	.word	0x40000c00
 8003cb8:	40010400 	.word	0x40010400
 8003cbc:	40014000 	.word	0x40014000
 8003cc0:	40001800 	.word	0x40001800

08003cc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d122      	bne.n	8003d20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d11b      	bne.n	8003d20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f06f 0202 	mvn.w	r2, #2
 8003cf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f9bf 	bl	800408a <HAL_TIM_IC_CaptureCallback>
 8003d0c:	e005      	b.n	8003d1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f9b1 	bl	8004076 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f9c2 	bl	800409e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	f003 0304 	and.w	r3, r3, #4
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d122      	bne.n	8003d74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d11b      	bne.n	8003d74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f06f 0204 	mvn.w	r2, #4
 8003d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2202      	movs	r2, #2
 8003d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f995 	bl	800408a <HAL_TIM_IC_CaptureCallback>
 8003d60:	e005      	b.n	8003d6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f987 	bl	8004076 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f998 	bl	800409e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d122      	bne.n	8003dc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f003 0308 	and.w	r3, r3, #8
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d11b      	bne.n	8003dc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f06f 0208 	mvn.w	r2, #8
 8003d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2204      	movs	r2, #4
 8003d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	f003 0303 	and.w	r3, r3, #3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f96b 	bl	800408a <HAL_TIM_IC_CaptureCallback>
 8003db4:	e005      	b.n	8003dc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f95d 	bl	8004076 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 f96e 	bl	800409e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f003 0310 	and.w	r3, r3, #16
 8003dd2:	2b10      	cmp	r3, #16
 8003dd4:	d122      	bne.n	8003e1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f003 0310 	and.w	r3, r3, #16
 8003de0:	2b10      	cmp	r3, #16
 8003de2:	d11b      	bne.n	8003e1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f06f 0210 	mvn.w	r2, #16
 8003dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2208      	movs	r2, #8
 8003df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f941 	bl	800408a <HAL_TIM_IC_CaptureCallback>
 8003e08:	e005      	b.n	8003e16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f933 	bl	8004076 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f944 	bl	800409e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d10e      	bne.n	8003e48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d107      	bne.n	8003e48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f06f 0201 	mvn.w	r2, #1
 8003e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f90d 	bl	8004062 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e52:	2b80      	cmp	r3, #128	; 0x80
 8003e54:	d10e      	bne.n	8003e74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e60:	2b80      	cmp	r3, #128	; 0x80
 8003e62:	d107      	bne.n	8003e74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 faea 	bl	8004448 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7e:	2b40      	cmp	r3, #64	; 0x40
 8003e80:	d10e      	bne.n	8003ea0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8c:	2b40      	cmp	r3, #64	; 0x40
 8003e8e:	d107      	bne.n	8003ea0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f909 	bl	80040b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	f003 0320 	and.w	r3, r3, #32
 8003eaa:	2b20      	cmp	r3, #32
 8003eac:	d10e      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f003 0320 	and.w	r3, r3, #32
 8003eb8:	2b20      	cmp	r3, #32
 8003eba:	d107      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f06f 0220 	mvn.w	r2, #32
 8003ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 fab4 	bl	8004434 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ecc:	bf00      	nop
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d101      	bne.n	8003ef0 <HAL_TIM_ConfigClockSource+0x1c>
 8003eec:	2302      	movs	r3, #2
 8003eee:	e0b4      	b.n	800405a <HAL_TIM_ConfigClockSource+0x186>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2202      	movs	r2, #2
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f28:	d03e      	beq.n	8003fa8 <HAL_TIM_ConfigClockSource+0xd4>
 8003f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f2e:	f200 8087 	bhi.w	8004040 <HAL_TIM_ConfigClockSource+0x16c>
 8003f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f36:	f000 8086 	beq.w	8004046 <HAL_TIM_ConfigClockSource+0x172>
 8003f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f3e:	d87f      	bhi.n	8004040 <HAL_TIM_ConfigClockSource+0x16c>
 8003f40:	2b70      	cmp	r3, #112	; 0x70
 8003f42:	d01a      	beq.n	8003f7a <HAL_TIM_ConfigClockSource+0xa6>
 8003f44:	2b70      	cmp	r3, #112	; 0x70
 8003f46:	d87b      	bhi.n	8004040 <HAL_TIM_ConfigClockSource+0x16c>
 8003f48:	2b60      	cmp	r3, #96	; 0x60
 8003f4a:	d050      	beq.n	8003fee <HAL_TIM_ConfigClockSource+0x11a>
 8003f4c:	2b60      	cmp	r3, #96	; 0x60
 8003f4e:	d877      	bhi.n	8004040 <HAL_TIM_ConfigClockSource+0x16c>
 8003f50:	2b50      	cmp	r3, #80	; 0x50
 8003f52:	d03c      	beq.n	8003fce <HAL_TIM_ConfigClockSource+0xfa>
 8003f54:	2b50      	cmp	r3, #80	; 0x50
 8003f56:	d873      	bhi.n	8004040 <HAL_TIM_ConfigClockSource+0x16c>
 8003f58:	2b40      	cmp	r3, #64	; 0x40
 8003f5a:	d058      	beq.n	800400e <HAL_TIM_ConfigClockSource+0x13a>
 8003f5c:	2b40      	cmp	r3, #64	; 0x40
 8003f5e:	d86f      	bhi.n	8004040 <HAL_TIM_ConfigClockSource+0x16c>
 8003f60:	2b30      	cmp	r3, #48	; 0x30
 8003f62:	d064      	beq.n	800402e <HAL_TIM_ConfigClockSource+0x15a>
 8003f64:	2b30      	cmp	r3, #48	; 0x30
 8003f66:	d86b      	bhi.n	8004040 <HAL_TIM_ConfigClockSource+0x16c>
 8003f68:	2b20      	cmp	r3, #32
 8003f6a:	d060      	beq.n	800402e <HAL_TIM_ConfigClockSource+0x15a>
 8003f6c:	2b20      	cmp	r3, #32
 8003f6e:	d867      	bhi.n	8004040 <HAL_TIM_ConfigClockSource+0x16c>
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d05c      	beq.n	800402e <HAL_TIM_ConfigClockSource+0x15a>
 8003f74:	2b10      	cmp	r3, #16
 8003f76:	d05a      	beq.n	800402e <HAL_TIM_ConfigClockSource+0x15a>
 8003f78:	e062      	b.n	8004040 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6818      	ldr	r0, [r3, #0]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	6899      	ldr	r1, [r3, #8]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f000 f9b7 	bl	80042fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	609a      	str	r2, [r3, #8]
      break;
 8003fa6:	e04f      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6818      	ldr	r0, [r3, #0]
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	6899      	ldr	r1, [r3, #8]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f000 f9a0 	bl	80042fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689a      	ldr	r2, [r3, #8]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fca:	609a      	str	r2, [r3, #8]
      break;
 8003fcc:	e03c      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6818      	ldr	r0, [r3, #0]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	6859      	ldr	r1, [r3, #4]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f000 f914 	bl	8004208 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2150      	movs	r1, #80	; 0x50
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 f96d 	bl	80042c6 <TIM_ITRx_SetConfig>
      break;
 8003fec:	e02c      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6818      	ldr	r0, [r3, #0]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	6859      	ldr	r1, [r3, #4]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f000 f933 	bl	8004266 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2160      	movs	r1, #96	; 0x60
 8004006:	4618      	mov	r0, r3
 8004008:	f000 f95d 	bl	80042c6 <TIM_ITRx_SetConfig>
      break;
 800400c:	e01c      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6818      	ldr	r0, [r3, #0]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	6859      	ldr	r1, [r3, #4]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	461a      	mov	r2, r3
 800401c:	f000 f8f4 	bl	8004208 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2140      	movs	r1, #64	; 0x40
 8004026:	4618      	mov	r0, r3
 8004028:	f000 f94d 	bl	80042c6 <TIM_ITRx_SetConfig>
      break;
 800402c:	e00c      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4619      	mov	r1, r3
 8004038:	4610      	mov	r0, r2
 800403a:	f000 f944 	bl	80042c6 <TIM_ITRx_SetConfig>
      break;
 800403e:	e003      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	73fb      	strb	r3, [r7, #15]
      break;
 8004044:	e000      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004046:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004058:	7bfb      	ldrb	r3, [r7, #15]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
	...

080040c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a40      	ldr	r2, [pc, #256]	; (80041dc <TIM_Base_SetConfig+0x114>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d013      	beq.n	8004108 <TIM_Base_SetConfig+0x40>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e6:	d00f      	beq.n	8004108 <TIM_Base_SetConfig+0x40>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a3d      	ldr	r2, [pc, #244]	; (80041e0 <TIM_Base_SetConfig+0x118>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d00b      	beq.n	8004108 <TIM_Base_SetConfig+0x40>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a3c      	ldr	r2, [pc, #240]	; (80041e4 <TIM_Base_SetConfig+0x11c>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d007      	beq.n	8004108 <TIM_Base_SetConfig+0x40>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a3b      	ldr	r2, [pc, #236]	; (80041e8 <TIM_Base_SetConfig+0x120>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d003      	beq.n	8004108 <TIM_Base_SetConfig+0x40>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a3a      	ldr	r2, [pc, #232]	; (80041ec <TIM_Base_SetConfig+0x124>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d108      	bne.n	800411a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	4313      	orrs	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a2f      	ldr	r2, [pc, #188]	; (80041dc <TIM_Base_SetConfig+0x114>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d02b      	beq.n	800417a <TIM_Base_SetConfig+0xb2>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004128:	d027      	beq.n	800417a <TIM_Base_SetConfig+0xb2>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a2c      	ldr	r2, [pc, #176]	; (80041e0 <TIM_Base_SetConfig+0x118>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d023      	beq.n	800417a <TIM_Base_SetConfig+0xb2>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a2b      	ldr	r2, [pc, #172]	; (80041e4 <TIM_Base_SetConfig+0x11c>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d01f      	beq.n	800417a <TIM_Base_SetConfig+0xb2>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a2a      	ldr	r2, [pc, #168]	; (80041e8 <TIM_Base_SetConfig+0x120>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d01b      	beq.n	800417a <TIM_Base_SetConfig+0xb2>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a29      	ldr	r2, [pc, #164]	; (80041ec <TIM_Base_SetConfig+0x124>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d017      	beq.n	800417a <TIM_Base_SetConfig+0xb2>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a28      	ldr	r2, [pc, #160]	; (80041f0 <TIM_Base_SetConfig+0x128>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d013      	beq.n	800417a <TIM_Base_SetConfig+0xb2>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a27      	ldr	r2, [pc, #156]	; (80041f4 <TIM_Base_SetConfig+0x12c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d00f      	beq.n	800417a <TIM_Base_SetConfig+0xb2>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a26      	ldr	r2, [pc, #152]	; (80041f8 <TIM_Base_SetConfig+0x130>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d00b      	beq.n	800417a <TIM_Base_SetConfig+0xb2>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a25      	ldr	r2, [pc, #148]	; (80041fc <TIM_Base_SetConfig+0x134>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d007      	beq.n	800417a <TIM_Base_SetConfig+0xb2>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a24      	ldr	r2, [pc, #144]	; (8004200 <TIM_Base_SetConfig+0x138>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d003      	beq.n	800417a <TIM_Base_SetConfig+0xb2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a23      	ldr	r2, [pc, #140]	; (8004204 <TIM_Base_SetConfig+0x13c>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d108      	bne.n	800418c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	4313      	orrs	r3, r2
 800418a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a0a      	ldr	r2, [pc, #40]	; (80041dc <TIM_Base_SetConfig+0x114>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d003      	beq.n	80041c0 <TIM_Base_SetConfig+0xf8>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a0c      	ldr	r2, [pc, #48]	; (80041ec <TIM_Base_SetConfig+0x124>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d103      	bne.n	80041c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	691a      	ldr	r2, [r3, #16]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	615a      	str	r2, [r3, #20]
}
 80041ce:	bf00      	nop
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	40010000 	.word	0x40010000
 80041e0:	40000400 	.word	0x40000400
 80041e4:	40000800 	.word	0x40000800
 80041e8:	40000c00 	.word	0x40000c00
 80041ec:	40010400 	.word	0x40010400
 80041f0:	40014000 	.word	0x40014000
 80041f4:	40014400 	.word	0x40014400
 80041f8:	40014800 	.word	0x40014800
 80041fc:	40001800 	.word	0x40001800
 8004200:	40001c00 	.word	0x40001c00
 8004204:	40002000 	.word	0x40002000

08004208 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	f023 0201 	bic.w	r2, r3, #1
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004232:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4313      	orrs	r3, r2
 800423c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f023 030a 	bic.w	r3, r3, #10
 8004244:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	621a      	str	r2, [r3, #32]
}
 800425a:	bf00      	nop
 800425c:	371c      	adds	r7, #28
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004266:	b480      	push	{r7}
 8004268:	b087      	sub	sp, #28
 800426a:	af00      	add	r7, sp, #0
 800426c:	60f8      	str	r0, [r7, #12]
 800426e:	60b9      	str	r1, [r7, #8]
 8004270:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	f023 0210 	bic.w	r2, r3, #16
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004290:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	031b      	lsls	r3, r3, #12
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	4313      	orrs	r3, r2
 800429a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	621a      	str	r2, [r3, #32]
}
 80042ba:	bf00      	nop
 80042bc:	371c      	adds	r7, #28
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b085      	sub	sp, #20
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
 80042ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	f043 0307 	orr.w	r3, r3, #7
 80042e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	609a      	str	r2, [r3, #8]
}
 80042f0:	bf00      	nop
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b087      	sub	sp, #28
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
 8004308:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004316:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	021a      	lsls	r2, r3, #8
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	431a      	orrs	r2, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	4313      	orrs	r3, r2
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	4313      	orrs	r3, r2
 8004328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	609a      	str	r2, [r3, #8]
}
 8004330:	bf00      	nop
 8004332:	371c      	adds	r7, #28
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800434c:	2b01      	cmp	r3, #1
 800434e:	d101      	bne.n	8004354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004350:	2302      	movs	r3, #2
 8004352:	e05a      	b.n	800440a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	4313      	orrs	r3, r2
 8004384:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a21      	ldr	r2, [pc, #132]	; (8004418 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d022      	beq.n	80043de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a0:	d01d      	beq.n	80043de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a1d      	ldr	r2, [pc, #116]	; (800441c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d018      	beq.n	80043de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a1b      	ldr	r2, [pc, #108]	; (8004420 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d013      	beq.n	80043de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a1a      	ldr	r2, [pc, #104]	; (8004424 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d00e      	beq.n	80043de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a18      	ldr	r2, [pc, #96]	; (8004428 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d009      	beq.n	80043de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a17      	ldr	r2, [pc, #92]	; (800442c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d004      	beq.n	80043de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a15      	ldr	r2, [pc, #84]	; (8004430 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d10c      	bne.n	80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	40010000 	.word	0x40010000
 800441c:	40000400 	.word	0x40000400
 8004420:	40000800 	.word	0x40000800
 8004424:	40000c00 	.word	0x40000c00
 8004428:	40010400 	.word	0x40010400
 800442c:	40014000 	.word	0x40014000
 8004430:	40001800 	.word	0x40001800

08004434 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e03f      	b.n	80044ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d106      	bne.n	8004488 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7fc fcee 	bl	8000e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2224      	movs	r2, #36	; 0x24
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68da      	ldr	r2, [r3, #12]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800449e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 fde5 	bl	8005070 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	691a      	ldr	r2, [r3, #16]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	695a      	ldr	r2, [r3, #20]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68da      	ldr	r2, [r3, #12]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2220      	movs	r2, #32
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2220      	movs	r2, #32
 80044e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b08a      	sub	sp, #40	; 0x28
 80044fa:	af02      	add	r7, sp, #8
 80044fc:	60f8      	str	r0, [r7, #12]
 80044fe:	60b9      	str	r1, [r7, #8]
 8004500:	603b      	str	r3, [r7, #0]
 8004502:	4613      	mov	r3, r2
 8004504:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004506:	2300      	movs	r3, #0
 8004508:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b20      	cmp	r3, #32
 8004514:	d17c      	bne.n	8004610 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d002      	beq.n	8004522 <HAL_UART_Transmit+0x2c>
 800451c:	88fb      	ldrh	r3, [r7, #6]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e075      	b.n	8004612 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800452c:	2b01      	cmp	r3, #1
 800452e:	d101      	bne.n	8004534 <HAL_UART_Transmit+0x3e>
 8004530:	2302      	movs	r3, #2
 8004532:	e06e      	b.n	8004612 <HAL_UART_Transmit+0x11c>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2221      	movs	r2, #33	; 0x21
 8004546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800454a:	f7fc fd8d 	bl	8001068 <HAL_GetTick>
 800454e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	88fa      	ldrh	r2, [r7, #6]
 8004554:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	88fa      	ldrh	r2, [r7, #6]
 800455a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004564:	d108      	bne.n	8004578 <HAL_UART_Transmit+0x82>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d104      	bne.n	8004578 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800456e:	2300      	movs	r3, #0
 8004570:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	61bb      	str	r3, [r7, #24]
 8004576:	e003      	b.n	8004580 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800457c:	2300      	movs	r3, #0
 800457e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004588:	e02a      	b.n	80045e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2200      	movs	r2, #0
 8004592:	2180      	movs	r1, #128	; 0x80
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f000 fb29 	bl	8004bec <UART_WaitOnFlagUntilTimeout>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e036      	b.n	8004612 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10b      	bne.n	80045c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	3302      	adds	r3, #2
 80045be:	61bb      	str	r3, [r7, #24]
 80045c0:	e007      	b.n	80045d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	781a      	ldrb	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	3301      	adds	r3, #1
 80045d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	3b01      	subs	r3, #1
 80045da:	b29a      	uxth	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1cf      	bne.n	800458a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	2200      	movs	r2, #0
 80045f2:	2140      	movs	r1, #64	; 0x40
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 faf9 	bl	8004bec <UART_WaitOnFlagUntilTimeout>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e006      	b.n	8004612 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2220      	movs	r2, #32
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800460c:	2300      	movs	r3, #0
 800460e:	e000      	b.n	8004612 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004610:	2302      	movs	r3, #2
  }
}
 8004612:	4618      	mov	r0, r3
 8004614:	3720      	adds	r7, #32
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b084      	sub	sp, #16
 800461e:	af00      	add	r7, sp, #0
 8004620:	60f8      	str	r0, [r7, #12]
 8004622:	60b9      	str	r1, [r7, #8]
 8004624:	4613      	mov	r3, r2
 8004626:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b20      	cmp	r3, #32
 8004632:	d11d      	bne.n	8004670 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d002      	beq.n	8004640 <HAL_UART_Receive_IT+0x26>
 800463a:	88fb      	ldrh	r3, [r7, #6]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e016      	b.n	8004672 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800464a:	2b01      	cmp	r3, #1
 800464c:	d101      	bne.n	8004652 <HAL_UART_Receive_IT+0x38>
 800464e:	2302      	movs	r3, #2
 8004650:	e00f      	b.n	8004672 <HAL_UART_Receive_IT+0x58>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004660:	88fb      	ldrh	r3, [r7, #6]
 8004662:	461a      	mov	r2, r3
 8004664:	68b9      	ldr	r1, [r7, #8]
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 fb2e 	bl	8004cc8 <UART_Start_Receive_IT>
 800466c:	4603      	mov	r3, r0
 800466e:	e000      	b.n	8004672 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004670:	2302      	movs	r3, #2
  }
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
	...

0800467c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b0ba      	sub	sp, #232	; 0xe8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046b2:	f003 030f 	and.w	r3, r3, #15
 80046b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80046ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10f      	bne.n	80046e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c6:	f003 0320 	and.w	r3, r3, #32
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d009      	beq.n	80046e2 <HAL_UART_IRQHandler+0x66>
 80046ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046d2:	f003 0320 	and.w	r3, r3, #32
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 fc0d 	bl	8004efa <UART_Receive_IT>
      return;
 80046e0:	e256      	b.n	8004b90 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80046e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 80de 	beq.w	80048a8 <HAL_UART_IRQHandler+0x22c>
 80046ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d106      	bne.n	8004706 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 80d1 	beq.w	80048a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00b      	beq.n	800472a <HAL_UART_IRQHandler+0xae>
 8004712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471a:	2b00      	cmp	r3, #0
 800471c:	d005      	beq.n	800472a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	f043 0201 	orr.w	r2, r3, #1
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800472a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800472e:	f003 0304 	and.w	r3, r3, #4
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00b      	beq.n	800474e <HAL_UART_IRQHandler+0xd2>
 8004736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d005      	beq.n	800474e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	f043 0202 	orr.w	r2, r3, #2
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800474e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00b      	beq.n	8004772 <HAL_UART_IRQHandler+0xf6>
 800475a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d005      	beq.n	8004772 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476a:	f043 0204 	orr.w	r2, r3, #4
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004776:	f003 0308 	and.w	r3, r3, #8
 800477a:	2b00      	cmp	r3, #0
 800477c:	d011      	beq.n	80047a2 <HAL_UART_IRQHandler+0x126>
 800477e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004782:	f003 0320 	and.w	r3, r3, #32
 8004786:	2b00      	cmp	r3, #0
 8004788:	d105      	bne.n	8004796 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800478a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d005      	beq.n	80047a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	f043 0208 	orr.w	r2, r3, #8
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f000 81ed 	beq.w	8004b86 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047b0:	f003 0320 	and.w	r3, r3, #32
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d008      	beq.n	80047ca <HAL_UART_IRQHandler+0x14e>
 80047b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047bc:	f003 0320 	and.w	r3, r3, #32
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d002      	beq.n	80047ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 fb98 	bl	8004efa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d4:	2b40      	cmp	r3, #64	; 0x40
 80047d6:	bf0c      	ite	eq
 80047d8:	2301      	moveq	r3, #1
 80047da:	2300      	movne	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	f003 0308 	and.w	r3, r3, #8
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d103      	bne.n	80047f6 <HAL_UART_IRQHandler+0x17a>
 80047ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d04f      	beq.n	8004896 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 faa0 	bl	8004d3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004806:	2b40      	cmp	r3, #64	; 0x40
 8004808:	d141      	bne.n	800488e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3314      	adds	r3, #20
 8004810:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004814:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004818:	e853 3f00 	ldrex	r3, [r3]
 800481c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004820:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004824:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004828:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3314      	adds	r3, #20
 8004832:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004836:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800483a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004842:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004846:	e841 2300 	strex	r3, r2, [r1]
 800484a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800484e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1d9      	bne.n	800480a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485a:	2b00      	cmp	r3, #0
 800485c:	d013      	beq.n	8004886 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004862:	4a7d      	ldr	r2, [pc, #500]	; (8004a58 <HAL_UART_IRQHandler+0x3dc>)
 8004864:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486a:	4618      	mov	r0, r3
 800486c:	f7fc fdad 	bl	80013ca <HAL_DMA_Abort_IT>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d016      	beq.n	80048a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004880:	4610      	mov	r0, r2
 8004882:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004884:	e00e      	b.n	80048a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f99a 	bl	8004bc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800488c:	e00a      	b.n	80048a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f996 	bl	8004bc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004894:	e006      	b.n	80048a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f992 	bl	8004bc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80048a2:	e170      	b.n	8004b86 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a4:	bf00      	nop
    return;
 80048a6:	e16e      	b.n	8004b86 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	f040 814a 	bne.w	8004b46 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80048b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048b6:	f003 0310 	and.w	r3, r3, #16
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 8143 	beq.w	8004b46 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80048c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048c4:	f003 0310 	and.w	r3, r3, #16
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 813c 	beq.w	8004b46 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048ce:	2300      	movs	r3, #0
 80048d0:	60bb      	str	r3, [r7, #8]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	60bb      	str	r3, [r7, #8]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	60bb      	str	r3, [r7, #8]
 80048e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ee:	2b40      	cmp	r3, #64	; 0x40
 80048f0:	f040 80b4 	bne.w	8004a5c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004900:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 8140 	beq.w	8004b8a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800490e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004912:	429a      	cmp	r2, r3
 8004914:	f080 8139 	bcs.w	8004b8a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800491e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800492a:	f000 8088 	beq.w	8004a3e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	330c      	adds	r3, #12
 8004934:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004938:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800493c:	e853 3f00 	ldrex	r3, [r3]
 8004940:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004944:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800494c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	330c      	adds	r3, #12
 8004956:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800495a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800495e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004962:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004966:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800496a:	e841 2300 	strex	r3, r2, [r1]
 800496e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004972:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1d9      	bne.n	800492e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	3314      	adds	r3, #20
 8004980:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004982:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004984:	e853 3f00 	ldrex	r3, [r3]
 8004988:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800498a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800498c:	f023 0301 	bic.w	r3, r3, #1
 8004990:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	3314      	adds	r3, #20
 800499a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800499e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80049a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80049a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80049aa:	e841 2300 	strex	r3, r2, [r1]
 80049ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80049b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1e1      	bne.n	800497a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3314      	adds	r3, #20
 80049bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049c0:	e853 3f00 	ldrex	r3, [r3]
 80049c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80049c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	3314      	adds	r3, #20
 80049d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80049da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80049e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049e2:	e841 2300 	strex	r3, r2, [r1]
 80049e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80049e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1e3      	bne.n	80049b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2220      	movs	r2, #32
 80049f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	330c      	adds	r3, #12
 8004a02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a06:	e853 3f00 	ldrex	r3, [r3]
 8004a0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a0e:	f023 0310 	bic.w	r3, r3, #16
 8004a12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	330c      	adds	r3, #12
 8004a1c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004a20:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a22:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a28:	e841 2300 	strex	r3, r2, [r1]
 8004a2c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1e3      	bne.n	80049fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fc fc56 	bl	80012ea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f8c0 	bl	8004bd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a54:	e099      	b.n	8004b8a <HAL_UART_IRQHandler+0x50e>
 8004a56:	bf00      	nop
 8004a58:	08004e03 	.word	0x08004e03
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 808b 	beq.w	8004b8e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004a78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 8086 	beq.w	8004b8e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	330c      	adds	r3, #12
 8004a88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8c:	e853 3f00 	ldrex	r3, [r3]
 8004a90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	330c      	adds	r3, #12
 8004aa2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004aa6:	647a      	str	r2, [r7, #68]	; 0x44
 8004aa8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aaa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004aac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004aae:	e841 2300 	strex	r3, r2, [r1]
 8004ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1e3      	bne.n	8004a82 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	3314      	adds	r3, #20
 8004ac0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	e853 3f00 	ldrex	r3, [r3]
 8004ac8:	623b      	str	r3, [r7, #32]
   return(result);
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	f023 0301 	bic.w	r3, r3, #1
 8004ad0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	3314      	adds	r3, #20
 8004ada:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ade:	633a      	str	r2, [r7, #48]	; 0x30
 8004ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ae6:	e841 2300 	strex	r3, r2, [r1]
 8004aea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1e3      	bne.n	8004aba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2220      	movs	r2, #32
 8004af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	330c      	adds	r3, #12
 8004b06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	e853 3f00 	ldrex	r3, [r3]
 8004b0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f023 0310 	bic.w	r3, r3, #16
 8004b16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	330c      	adds	r3, #12
 8004b20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004b24:	61fa      	str	r2, [r7, #28]
 8004b26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b28:	69b9      	ldr	r1, [r7, #24]
 8004b2a:	69fa      	ldr	r2, [r7, #28]
 8004b2c:	e841 2300 	strex	r3, r2, [r1]
 8004b30:	617b      	str	r3, [r7, #20]
   return(result);
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1e3      	bne.n	8004b00 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f848 	bl	8004bd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b44:	e023      	b.n	8004b8e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d009      	beq.n	8004b66 <HAL_UART_IRQHandler+0x4ea>
 8004b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f963 	bl	8004e2a <UART_Transmit_IT>
    return;
 8004b64:	e014      	b.n	8004b90 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00e      	beq.n	8004b90 <HAL_UART_IRQHandler+0x514>
 8004b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d008      	beq.n	8004b90 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f9a3 	bl	8004eca <UART_EndTransmit_IT>
    return;
 8004b84:	e004      	b.n	8004b90 <HAL_UART_IRQHandler+0x514>
    return;
 8004b86:	bf00      	nop
 8004b88:	e002      	b.n	8004b90 <HAL_UART_IRQHandler+0x514>
      return;
 8004b8a:	bf00      	nop
 8004b8c:	e000      	b.n	8004b90 <HAL_UART_IRQHandler+0x514>
      return;
 8004b8e:	bf00      	nop
  }
}
 8004b90:	37e8      	adds	r7, #232	; 0xe8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop

08004b98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	460b      	mov	r3, r1
 8004bde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b090      	sub	sp, #64	; 0x40
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	603b      	str	r3, [r7, #0]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bfc:	e050      	b.n	8004ca0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c04:	d04c      	beq.n	8004ca0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d007      	beq.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x30>
 8004c0c:	f7fc fa2c 	bl	8001068 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d241      	bcs.n	8004ca0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	330c      	adds	r3, #12
 8004c22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c26:	e853 3f00 	ldrex	r3, [r3]
 8004c2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	330c      	adds	r3, #12
 8004c3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c3c:	637a      	str	r2, [r7, #52]	; 0x34
 8004c3e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c44:	e841 2300 	strex	r3, r2, [r1]
 8004c48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1e5      	bne.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3314      	adds	r3, #20
 8004c56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	e853 3f00 	ldrex	r3, [r3]
 8004c5e:	613b      	str	r3, [r7, #16]
   return(result);
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	f023 0301 	bic.w	r3, r3, #1
 8004c66:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3314      	adds	r3, #20
 8004c6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c70:	623a      	str	r2, [r7, #32]
 8004c72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c74:	69f9      	ldr	r1, [r7, #28]
 8004c76:	6a3a      	ldr	r2, [r7, #32]
 8004c78:	e841 2300 	strex	r3, r2, [r1]
 8004c7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1e5      	bne.n	8004c50 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2220      	movs	r2, #32
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e00f      	b.n	8004cc0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	bf0c      	ite	eq
 8004cb0:	2301      	moveq	r3, #1
 8004cb2:	2300      	movne	r3, #0
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	79fb      	ldrb	r3, [r7, #7]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d09f      	beq.n	8004bfe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3740      	adds	r7, #64	; 0x40
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	88fa      	ldrh	r2, [r7, #6]
 8004ce0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	88fa      	ldrh	r2, [r7, #6]
 8004ce6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2222      	movs	r2, #34	; 0x22
 8004cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68da      	ldr	r2, [r3, #12]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d0c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	695a      	ldr	r2, [r3, #20]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f042 0201 	orr.w	r2, r2, #1
 8004d1c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68da      	ldr	r2, [r3, #12]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 0220 	orr.w	r2, r2, #32
 8004d2c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3714      	adds	r7, #20
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b095      	sub	sp, #84	; 0x54
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	330c      	adds	r3, #12
 8004d4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d4e:	e853 3f00 	ldrex	r3, [r3]
 8004d52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	330c      	adds	r3, #12
 8004d62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d64:	643a      	str	r2, [r7, #64]	; 0x40
 8004d66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d6c:	e841 2300 	strex	r3, r2, [r1]
 8004d70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1e5      	bne.n	8004d44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3314      	adds	r3, #20
 8004d7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	e853 3f00 	ldrex	r3, [r3]
 8004d86:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	f023 0301 	bic.w	r3, r3, #1
 8004d8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	3314      	adds	r3, #20
 8004d96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004da0:	e841 2300 	strex	r3, r2, [r1]
 8004da4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1e5      	bne.n	8004d78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d119      	bne.n	8004de8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	330c      	adds	r3, #12
 8004dba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	e853 3f00 	ldrex	r3, [r3]
 8004dc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	f023 0310 	bic.w	r3, r3, #16
 8004dca:	647b      	str	r3, [r7, #68]	; 0x44
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	330c      	adds	r3, #12
 8004dd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dd4:	61ba      	str	r2, [r7, #24]
 8004dd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd8:	6979      	ldr	r1, [r7, #20]
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	e841 2300 	strex	r3, r2, [r1]
 8004de0:	613b      	str	r3, [r7, #16]
   return(result);
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1e5      	bne.n	8004db4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2220      	movs	r2, #32
 8004dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004df6:	bf00      	nop
 8004df8:	3754      	adds	r7, #84	; 0x54
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b084      	sub	sp, #16
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f7ff fecf 	bl	8004bc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e22:	bf00      	nop
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b085      	sub	sp, #20
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b21      	cmp	r3, #33	; 0x21
 8004e3c:	d13e      	bne.n	8004ebc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e46:	d114      	bne.n	8004e72 <UART_Transmit_IT+0x48>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d110      	bne.n	8004e72 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e64:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	1c9a      	adds	r2, r3, #2
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	621a      	str	r2, [r3, #32]
 8004e70:	e008      	b.n	8004e84 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	1c59      	adds	r1, r3, #1
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6211      	str	r1, [r2, #32]
 8004e7c:	781a      	ldrb	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	4619      	mov	r1, r3
 8004e92:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10f      	bne.n	8004eb8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ea6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68da      	ldr	r2, [r3, #12]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004eb6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	e000      	b.n	8004ebe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ebc:	2302      	movs	r3, #2
  }
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b082      	sub	sp, #8
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68da      	ldr	r2, [r3, #12]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ee0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7ff fe54 	bl	8004b98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b08c      	sub	sp, #48	; 0x30
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b22      	cmp	r3, #34	; 0x22
 8004f0c:	f040 80ab 	bne.w	8005066 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f18:	d117      	bne.n	8004f4a <UART_Receive_IT+0x50>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d113      	bne.n	8004f4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f22:	2300      	movs	r3, #0
 8004f24:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f42:	1c9a      	adds	r2, r3, #2
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	629a      	str	r2, [r3, #40]	; 0x28
 8004f48:	e026      	b.n	8004f98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004f50:	2300      	movs	r3, #0
 8004f52:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f5c:	d007      	beq.n	8004f6e <UART_Receive_IT+0x74>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10a      	bne.n	8004f7c <UART_Receive_IT+0x82>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d106      	bne.n	8004f7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	b2da      	uxtb	r2, r3
 8004f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f78:	701a      	strb	r2, [r3, #0]
 8004f7a:	e008      	b.n	8004f8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f92:	1c5a      	adds	r2, r3, #1
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d15a      	bne.n	8005062 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68da      	ldr	r2, [r3, #12]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f022 0220 	bic.w	r2, r2, #32
 8004fba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68da      	ldr	r2, [r3, #12]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	695a      	ldr	r2, [r3, #20]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 0201 	bic.w	r2, r2, #1
 8004fda:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d135      	bne.n	8005058 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	330c      	adds	r3, #12
 8004ff8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	e853 3f00 	ldrex	r3, [r3]
 8005000:	613b      	str	r3, [r7, #16]
   return(result);
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	f023 0310 	bic.w	r3, r3, #16
 8005008:	627b      	str	r3, [r7, #36]	; 0x24
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	330c      	adds	r3, #12
 8005010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005012:	623a      	str	r2, [r7, #32]
 8005014:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005016:	69f9      	ldr	r1, [r7, #28]
 8005018:	6a3a      	ldr	r2, [r7, #32]
 800501a:	e841 2300 	strex	r3, r2, [r1]
 800501e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1e5      	bne.n	8004ff2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0310 	and.w	r3, r3, #16
 8005030:	2b10      	cmp	r3, #16
 8005032:	d10a      	bne.n	800504a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005034:	2300      	movs	r3, #0
 8005036:	60fb      	str	r3, [r7, #12]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	60fb      	str	r3, [r7, #12]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	60fb      	str	r3, [r7, #12]
 8005048:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800504e:	4619      	mov	r1, r3
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f7ff fdbf 	bl	8004bd4 <HAL_UARTEx_RxEventCallback>
 8005056:	e002      	b.n	800505e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7ff fda7 	bl	8004bac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800505e:	2300      	movs	r3, #0
 8005060:	e002      	b.n	8005068 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	e000      	b.n	8005068 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005066:	2302      	movs	r3, #2
  }
}
 8005068:	4618      	mov	r0, r3
 800506a:	3730      	adds	r7, #48	; 0x30
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005074:	b09f      	sub	sp, #124	; 0x7c
 8005076:	af00      	add	r7, sp, #0
 8005078:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800507a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005086:	68d9      	ldr	r1, [r3, #12]
 8005088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	ea40 0301 	orr.w	r3, r0, r1
 8005090:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005094:	689a      	ldr	r2, [r3, #8]
 8005096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	431a      	orrs	r2, r3
 800509c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	431a      	orrs	r2, r3
 80050a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80050aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80050b4:	f021 010c 	bic.w	r1, r1, #12
 80050b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050be:	430b      	orrs	r3, r1
 80050c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80050cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ce:	6999      	ldr	r1, [r3, #24]
 80050d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	ea40 0301 	orr.w	r3, r0, r1
 80050d8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	4bc5      	ldr	r3, [pc, #788]	; (80053f4 <UART_SetConfig+0x384>)
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d004      	beq.n	80050ee <UART_SetConfig+0x7e>
 80050e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	4bc3      	ldr	r3, [pc, #780]	; (80053f8 <UART_SetConfig+0x388>)
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d103      	bne.n	80050f6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050ee:	f7fe fd15 	bl	8003b1c <HAL_RCC_GetPCLK2Freq>
 80050f2:	6778      	str	r0, [r7, #116]	; 0x74
 80050f4:	e002      	b.n	80050fc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050f6:	f7fe fcfd 	bl	8003af4 <HAL_RCC_GetPCLK1Freq>
 80050fa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005104:	f040 80b6 	bne.w	8005274 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005108:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800510a:	461c      	mov	r4, r3
 800510c:	f04f 0500 	mov.w	r5, #0
 8005110:	4622      	mov	r2, r4
 8005112:	462b      	mov	r3, r5
 8005114:	1891      	adds	r1, r2, r2
 8005116:	6439      	str	r1, [r7, #64]	; 0x40
 8005118:	415b      	adcs	r3, r3
 800511a:	647b      	str	r3, [r7, #68]	; 0x44
 800511c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005120:	1912      	adds	r2, r2, r4
 8005122:	eb45 0303 	adc.w	r3, r5, r3
 8005126:	f04f 0000 	mov.w	r0, #0
 800512a:	f04f 0100 	mov.w	r1, #0
 800512e:	00d9      	lsls	r1, r3, #3
 8005130:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005134:	00d0      	lsls	r0, r2, #3
 8005136:	4602      	mov	r2, r0
 8005138:	460b      	mov	r3, r1
 800513a:	1911      	adds	r1, r2, r4
 800513c:	6639      	str	r1, [r7, #96]	; 0x60
 800513e:	416b      	adcs	r3, r5
 8005140:	667b      	str	r3, [r7, #100]	; 0x64
 8005142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	461a      	mov	r2, r3
 8005148:	f04f 0300 	mov.w	r3, #0
 800514c:	1891      	adds	r1, r2, r2
 800514e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005150:	415b      	adcs	r3, r3
 8005152:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005154:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005158:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800515c:	f7fb f834 	bl	80001c8 <__aeabi_uldivmod>
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	4ba5      	ldr	r3, [pc, #660]	; (80053fc <UART_SetConfig+0x38c>)
 8005166:	fba3 2302 	umull	r2, r3, r3, r2
 800516a:	095b      	lsrs	r3, r3, #5
 800516c:	011e      	lsls	r6, r3, #4
 800516e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005170:	461c      	mov	r4, r3
 8005172:	f04f 0500 	mov.w	r5, #0
 8005176:	4622      	mov	r2, r4
 8005178:	462b      	mov	r3, r5
 800517a:	1891      	adds	r1, r2, r2
 800517c:	6339      	str	r1, [r7, #48]	; 0x30
 800517e:	415b      	adcs	r3, r3
 8005180:	637b      	str	r3, [r7, #52]	; 0x34
 8005182:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005186:	1912      	adds	r2, r2, r4
 8005188:	eb45 0303 	adc.w	r3, r5, r3
 800518c:	f04f 0000 	mov.w	r0, #0
 8005190:	f04f 0100 	mov.w	r1, #0
 8005194:	00d9      	lsls	r1, r3, #3
 8005196:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800519a:	00d0      	lsls	r0, r2, #3
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	1911      	adds	r1, r2, r4
 80051a2:	65b9      	str	r1, [r7, #88]	; 0x58
 80051a4:	416b      	adcs	r3, r5
 80051a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	461a      	mov	r2, r3
 80051ae:	f04f 0300 	mov.w	r3, #0
 80051b2:	1891      	adds	r1, r2, r2
 80051b4:	62b9      	str	r1, [r7, #40]	; 0x28
 80051b6:	415b      	adcs	r3, r3
 80051b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051be:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80051c2:	f7fb f801 	bl	80001c8 <__aeabi_uldivmod>
 80051c6:	4602      	mov	r2, r0
 80051c8:	460b      	mov	r3, r1
 80051ca:	4b8c      	ldr	r3, [pc, #560]	; (80053fc <UART_SetConfig+0x38c>)
 80051cc:	fba3 1302 	umull	r1, r3, r3, r2
 80051d0:	095b      	lsrs	r3, r3, #5
 80051d2:	2164      	movs	r1, #100	; 0x64
 80051d4:	fb01 f303 	mul.w	r3, r1, r3
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	00db      	lsls	r3, r3, #3
 80051dc:	3332      	adds	r3, #50	; 0x32
 80051de:	4a87      	ldr	r2, [pc, #540]	; (80053fc <UART_SetConfig+0x38c>)
 80051e0:	fba2 2303 	umull	r2, r3, r2, r3
 80051e4:	095b      	lsrs	r3, r3, #5
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051ec:	441e      	add	r6, r3
 80051ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051f0:	4618      	mov	r0, r3
 80051f2:	f04f 0100 	mov.w	r1, #0
 80051f6:	4602      	mov	r2, r0
 80051f8:	460b      	mov	r3, r1
 80051fa:	1894      	adds	r4, r2, r2
 80051fc:	623c      	str	r4, [r7, #32]
 80051fe:	415b      	adcs	r3, r3
 8005200:	627b      	str	r3, [r7, #36]	; 0x24
 8005202:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005206:	1812      	adds	r2, r2, r0
 8005208:	eb41 0303 	adc.w	r3, r1, r3
 800520c:	f04f 0400 	mov.w	r4, #0
 8005210:	f04f 0500 	mov.w	r5, #0
 8005214:	00dd      	lsls	r5, r3, #3
 8005216:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800521a:	00d4      	lsls	r4, r2, #3
 800521c:	4622      	mov	r2, r4
 800521e:	462b      	mov	r3, r5
 8005220:	1814      	adds	r4, r2, r0
 8005222:	653c      	str	r4, [r7, #80]	; 0x50
 8005224:	414b      	adcs	r3, r1
 8005226:	657b      	str	r3, [r7, #84]	; 0x54
 8005228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	461a      	mov	r2, r3
 800522e:	f04f 0300 	mov.w	r3, #0
 8005232:	1891      	adds	r1, r2, r2
 8005234:	61b9      	str	r1, [r7, #24]
 8005236:	415b      	adcs	r3, r3
 8005238:	61fb      	str	r3, [r7, #28]
 800523a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800523e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005242:	f7fa ffc1 	bl	80001c8 <__aeabi_uldivmod>
 8005246:	4602      	mov	r2, r0
 8005248:	460b      	mov	r3, r1
 800524a:	4b6c      	ldr	r3, [pc, #432]	; (80053fc <UART_SetConfig+0x38c>)
 800524c:	fba3 1302 	umull	r1, r3, r3, r2
 8005250:	095b      	lsrs	r3, r3, #5
 8005252:	2164      	movs	r1, #100	; 0x64
 8005254:	fb01 f303 	mul.w	r3, r1, r3
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	3332      	adds	r3, #50	; 0x32
 800525e:	4a67      	ldr	r2, [pc, #412]	; (80053fc <UART_SetConfig+0x38c>)
 8005260:	fba2 2303 	umull	r2, r3, r2, r3
 8005264:	095b      	lsrs	r3, r3, #5
 8005266:	f003 0207 	and.w	r2, r3, #7
 800526a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4432      	add	r2, r6
 8005270:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005272:	e0b9      	b.n	80053e8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005274:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005276:	461c      	mov	r4, r3
 8005278:	f04f 0500 	mov.w	r5, #0
 800527c:	4622      	mov	r2, r4
 800527e:	462b      	mov	r3, r5
 8005280:	1891      	adds	r1, r2, r2
 8005282:	6139      	str	r1, [r7, #16]
 8005284:	415b      	adcs	r3, r3
 8005286:	617b      	str	r3, [r7, #20]
 8005288:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800528c:	1912      	adds	r2, r2, r4
 800528e:	eb45 0303 	adc.w	r3, r5, r3
 8005292:	f04f 0000 	mov.w	r0, #0
 8005296:	f04f 0100 	mov.w	r1, #0
 800529a:	00d9      	lsls	r1, r3, #3
 800529c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052a0:	00d0      	lsls	r0, r2, #3
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	eb12 0804 	adds.w	r8, r2, r4
 80052aa:	eb43 0905 	adc.w	r9, r3, r5
 80052ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f04f 0100 	mov.w	r1, #0
 80052b8:	f04f 0200 	mov.w	r2, #0
 80052bc:	f04f 0300 	mov.w	r3, #0
 80052c0:	008b      	lsls	r3, r1, #2
 80052c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052c6:	0082      	lsls	r2, r0, #2
 80052c8:	4640      	mov	r0, r8
 80052ca:	4649      	mov	r1, r9
 80052cc:	f7fa ff7c 	bl	80001c8 <__aeabi_uldivmod>
 80052d0:	4602      	mov	r2, r0
 80052d2:	460b      	mov	r3, r1
 80052d4:	4b49      	ldr	r3, [pc, #292]	; (80053fc <UART_SetConfig+0x38c>)
 80052d6:	fba3 2302 	umull	r2, r3, r3, r2
 80052da:	095b      	lsrs	r3, r3, #5
 80052dc:	011e      	lsls	r6, r3, #4
 80052de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052e0:	4618      	mov	r0, r3
 80052e2:	f04f 0100 	mov.w	r1, #0
 80052e6:	4602      	mov	r2, r0
 80052e8:	460b      	mov	r3, r1
 80052ea:	1894      	adds	r4, r2, r2
 80052ec:	60bc      	str	r4, [r7, #8]
 80052ee:	415b      	adcs	r3, r3
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052f6:	1812      	adds	r2, r2, r0
 80052f8:	eb41 0303 	adc.w	r3, r1, r3
 80052fc:	f04f 0400 	mov.w	r4, #0
 8005300:	f04f 0500 	mov.w	r5, #0
 8005304:	00dd      	lsls	r5, r3, #3
 8005306:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800530a:	00d4      	lsls	r4, r2, #3
 800530c:	4622      	mov	r2, r4
 800530e:	462b      	mov	r3, r5
 8005310:	1814      	adds	r4, r2, r0
 8005312:	64bc      	str	r4, [r7, #72]	; 0x48
 8005314:	414b      	adcs	r3, r1
 8005316:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	4618      	mov	r0, r3
 800531e:	f04f 0100 	mov.w	r1, #0
 8005322:	f04f 0200 	mov.w	r2, #0
 8005326:	f04f 0300 	mov.w	r3, #0
 800532a:	008b      	lsls	r3, r1, #2
 800532c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005330:	0082      	lsls	r2, r0, #2
 8005332:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005336:	f7fa ff47 	bl	80001c8 <__aeabi_uldivmod>
 800533a:	4602      	mov	r2, r0
 800533c:	460b      	mov	r3, r1
 800533e:	4b2f      	ldr	r3, [pc, #188]	; (80053fc <UART_SetConfig+0x38c>)
 8005340:	fba3 1302 	umull	r1, r3, r3, r2
 8005344:	095b      	lsrs	r3, r3, #5
 8005346:	2164      	movs	r1, #100	; 0x64
 8005348:	fb01 f303 	mul.w	r3, r1, r3
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	011b      	lsls	r3, r3, #4
 8005350:	3332      	adds	r3, #50	; 0x32
 8005352:	4a2a      	ldr	r2, [pc, #168]	; (80053fc <UART_SetConfig+0x38c>)
 8005354:	fba2 2303 	umull	r2, r3, r2, r3
 8005358:	095b      	lsrs	r3, r3, #5
 800535a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800535e:	441e      	add	r6, r3
 8005360:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005362:	4618      	mov	r0, r3
 8005364:	f04f 0100 	mov.w	r1, #0
 8005368:	4602      	mov	r2, r0
 800536a:	460b      	mov	r3, r1
 800536c:	1894      	adds	r4, r2, r2
 800536e:	603c      	str	r4, [r7, #0]
 8005370:	415b      	adcs	r3, r3
 8005372:	607b      	str	r3, [r7, #4]
 8005374:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005378:	1812      	adds	r2, r2, r0
 800537a:	eb41 0303 	adc.w	r3, r1, r3
 800537e:	f04f 0400 	mov.w	r4, #0
 8005382:	f04f 0500 	mov.w	r5, #0
 8005386:	00dd      	lsls	r5, r3, #3
 8005388:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800538c:	00d4      	lsls	r4, r2, #3
 800538e:	4622      	mov	r2, r4
 8005390:	462b      	mov	r3, r5
 8005392:	eb12 0a00 	adds.w	sl, r2, r0
 8005396:	eb43 0b01 	adc.w	fp, r3, r1
 800539a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	4618      	mov	r0, r3
 80053a0:	f04f 0100 	mov.w	r1, #0
 80053a4:	f04f 0200 	mov.w	r2, #0
 80053a8:	f04f 0300 	mov.w	r3, #0
 80053ac:	008b      	lsls	r3, r1, #2
 80053ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80053b2:	0082      	lsls	r2, r0, #2
 80053b4:	4650      	mov	r0, sl
 80053b6:	4659      	mov	r1, fp
 80053b8:	f7fa ff06 	bl	80001c8 <__aeabi_uldivmod>
 80053bc:	4602      	mov	r2, r0
 80053be:	460b      	mov	r3, r1
 80053c0:	4b0e      	ldr	r3, [pc, #56]	; (80053fc <UART_SetConfig+0x38c>)
 80053c2:	fba3 1302 	umull	r1, r3, r3, r2
 80053c6:	095b      	lsrs	r3, r3, #5
 80053c8:	2164      	movs	r1, #100	; 0x64
 80053ca:	fb01 f303 	mul.w	r3, r1, r3
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	3332      	adds	r3, #50	; 0x32
 80053d4:	4a09      	ldr	r2, [pc, #36]	; (80053fc <UART_SetConfig+0x38c>)
 80053d6:	fba2 2303 	umull	r2, r3, r2, r3
 80053da:	095b      	lsrs	r3, r3, #5
 80053dc:	f003 020f 	and.w	r2, r3, #15
 80053e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4432      	add	r2, r6
 80053e6:	609a      	str	r2, [r3, #8]
}
 80053e8:	bf00      	nop
 80053ea:	377c      	adds	r7, #124	; 0x7c
 80053ec:	46bd      	mov	sp, r7
 80053ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053f2:	bf00      	nop
 80053f4:	40011000 	.word	0x40011000
 80053f8:	40011400 	.word	0x40011400
 80053fc:	51eb851f 	.word	0x51eb851f

08005400 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005400:	b084      	sub	sp, #16
 8005402:	b580      	push	{r7, lr}
 8005404:	b084      	sub	sp, #16
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
 800540a:	f107 001c 	add.w	r0, r7, #28
 800540e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005414:	2b01      	cmp	r3, #1
 8005416:	d122      	bne.n	800545e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800542c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005442:	2b01      	cmp	r3, #1
 8005444:	d105      	bne.n	8005452 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f9a0 	bl	8005798 <USB_CoreReset>
 8005458:	4603      	mov	r3, r0
 800545a:	73fb      	strb	r3, [r7, #15]
 800545c:	e01a      	b.n	8005494 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f994 	bl	8005798 <USB_CoreReset>
 8005470:	4603      	mov	r3, r0
 8005472:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005476:	2b00      	cmp	r3, #0
 8005478:	d106      	bne.n	8005488 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	639a      	str	r2, [r3, #56]	; 0x38
 8005486:	e005      	b.n	8005494 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005496:	2b01      	cmp	r3, #1
 8005498:	d10b      	bne.n	80054b2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f043 0206 	orr.w	r2, r3, #6
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f043 0220 	orr.w	r2, r3, #32
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80054b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054be:	b004      	add	sp, #16
 80054c0:	4770      	bx	lr

080054c2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f043 0201 	orr.w	r2, r3, #1
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f023 0201 	bic.w	r2, r3, #1
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b084      	sub	sp, #16
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
 800550e:	460b      	mov	r3, r1
 8005510:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005512:	2300      	movs	r3, #0
 8005514:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005522:	78fb      	ldrb	r3, [r7, #3]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d115      	bne.n	8005554 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005534:	2001      	movs	r0, #1
 8005536:	f7fb fda3 	bl	8001080 <HAL_Delay>
      ms++;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	3301      	adds	r3, #1
 800553e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f91a 	bl	800577a <USB_GetMode>
 8005546:	4603      	mov	r3, r0
 8005548:	2b01      	cmp	r3, #1
 800554a:	d01e      	beq.n	800558a <USB_SetCurrentMode+0x84>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2b31      	cmp	r3, #49	; 0x31
 8005550:	d9f0      	bls.n	8005534 <USB_SetCurrentMode+0x2e>
 8005552:	e01a      	b.n	800558a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005554:	78fb      	ldrb	r3, [r7, #3]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d115      	bne.n	8005586 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005566:	2001      	movs	r0, #1
 8005568:	f7fb fd8a 	bl	8001080 <HAL_Delay>
      ms++;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	3301      	adds	r3, #1
 8005570:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f901 	bl	800577a <USB_GetMode>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d005      	beq.n	800558a <USB_SetCurrentMode+0x84>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b31      	cmp	r3, #49	; 0x31
 8005582:	d9f0      	bls.n	8005566 <USB_SetCurrentMode+0x60>
 8005584:	e001      	b.n	800558a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e005      	b.n	8005596 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2b32      	cmp	r3, #50	; 0x32
 800558e:	d101      	bne.n	8005594 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e000      	b.n	8005596 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
	...

080055a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80055aa:	2300      	movs	r3, #0
 80055ac:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	019b      	lsls	r3, r3, #6
 80055b2:	f043 0220 	orr.w	r2, r3, #32
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	3301      	adds	r3, #1
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	4a08      	ldr	r2, [pc, #32]	; (80055e4 <USB_FlushTxFifo+0x44>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d901      	bls.n	80055ca <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e006      	b.n	80055d8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f003 0320 	and.w	r3, r3, #32
 80055d2:	2b20      	cmp	r3, #32
 80055d4:	d0f1      	beq.n	80055ba <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	00030d40 	.word	0x00030d40

080055e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055f0:	2300      	movs	r3, #0
 80055f2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2210      	movs	r2, #16
 80055f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	3301      	adds	r3, #1
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	4a08      	ldr	r2, [pc, #32]	; (8005624 <USB_FlushRxFifo+0x3c>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d901      	bls.n	800560a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e006      	b.n	8005618 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	f003 0310 	and.w	r3, r3, #16
 8005612:	2b10      	cmp	r3, #16
 8005614:	d0f1      	beq.n	80055fa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3714      	adds	r7, #20
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr
 8005624:	00030d40 	.word	0x00030d40

08005628 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005628:	b480      	push	{r7}
 800562a:	b089      	sub	sp, #36	; 0x24
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	4611      	mov	r1, r2
 8005634:	461a      	mov	r2, r3
 8005636:	460b      	mov	r3, r1
 8005638:	71fb      	strb	r3, [r7, #7]
 800563a:	4613      	mov	r3, r2
 800563c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005646:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800564a:	2b00      	cmp	r3, #0
 800564c:	d123      	bne.n	8005696 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800564e:	88bb      	ldrh	r3, [r7, #4]
 8005650:	3303      	adds	r3, #3
 8005652:	089b      	lsrs	r3, r3, #2
 8005654:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005656:	2300      	movs	r3, #0
 8005658:	61bb      	str	r3, [r7, #24]
 800565a:	e018      	b.n	800568e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800565c:	79fb      	ldrb	r3, [r7, #7]
 800565e:	031a      	lsls	r2, r3, #12
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	4413      	add	r3, r2
 8005664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005668:	461a      	mov	r2, r3
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	3301      	adds	r3, #1
 8005674:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	3301      	adds	r3, #1
 800567a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	3301      	adds	r3, #1
 8005680:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	3301      	adds	r3, #1
 8005686:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	3301      	adds	r3, #1
 800568c:	61bb      	str	r3, [r7, #24]
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	429a      	cmp	r2, r3
 8005694:	d3e2      	bcc.n	800565c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3724      	adds	r7, #36	; 0x24
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b08b      	sub	sp, #44	; 0x2c
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	4613      	mov	r3, r2
 80056b0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80056ba:	88fb      	ldrh	r3, [r7, #6]
 80056bc:	089b      	lsrs	r3, r3, #2
 80056be:	b29b      	uxth	r3, r3
 80056c0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80056c2:	88fb      	ldrh	r3, [r7, #6]
 80056c4:	f003 0303 	and.w	r3, r3, #3
 80056c8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80056ca:	2300      	movs	r3, #0
 80056cc:	623b      	str	r3, [r7, #32]
 80056ce:	e014      	b.n	80056fa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	601a      	str	r2, [r3, #0]
    pDest++;
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	3301      	adds	r3, #1
 80056e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e4:	3301      	adds	r3, #1
 80056e6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	3301      	adds	r3, #1
 80056ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	3301      	adds	r3, #1
 80056f2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80056f4:	6a3b      	ldr	r3, [r7, #32]
 80056f6:	3301      	adds	r3, #1
 80056f8:	623b      	str	r3, [r7, #32]
 80056fa:	6a3a      	ldr	r2, [r7, #32]
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d3e6      	bcc.n	80056d0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005702:	8bfb      	ldrh	r3, [r7, #30]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d01e      	beq.n	8005746 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005712:	461a      	mov	r2, r3
 8005714:	f107 0310 	add.w	r3, r7, #16
 8005718:	6812      	ldr	r2, [r2, #0]
 800571a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	b2db      	uxtb	r3, r3
 8005722:	00db      	lsls	r3, r3, #3
 8005724:	fa22 f303 	lsr.w	r3, r2, r3
 8005728:	b2da      	uxtb	r2, r3
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	701a      	strb	r2, [r3, #0]
      i++;
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	3301      	adds	r3, #1
 8005732:	623b      	str	r3, [r7, #32]
      pDest++;
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	3301      	adds	r3, #1
 8005738:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800573a:	8bfb      	ldrh	r3, [r7, #30]
 800573c:	3b01      	subs	r3, #1
 800573e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005740:	8bfb      	ldrh	r3, [r7, #30]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1ea      	bne.n	800571c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005748:	4618      	mov	r0, r3
 800574a:	372c      	adds	r7, #44	; 0x2c
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	4013      	ands	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800576c:	68fb      	ldr	r3, [r7, #12]
}
 800576e:	4618      	mov	r0, r3
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800577a:	b480      	push	{r7}
 800577c:	b083      	sub	sp, #12
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	f003 0301 	and.w	r3, r3, #1
}
 800578a:	4618      	mov	r0, r3
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
	...

08005798 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057a0:	2300      	movs	r3, #0
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	3301      	adds	r3, #1
 80057a8:	60fb      	str	r3, [r7, #12]
 80057aa:	4a13      	ldr	r2, [pc, #76]	; (80057f8 <USB_CoreReset+0x60>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d901      	bls.n	80057b4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e01a      	b.n	80057ea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	daf3      	bge.n	80057a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80057bc:	2300      	movs	r3, #0
 80057be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	f043 0201 	orr.w	r2, r3, #1
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	3301      	adds	r3, #1
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	4a09      	ldr	r2, [pc, #36]	; (80057f8 <USB_CoreReset+0x60>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d901      	bls.n	80057dc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e006      	b.n	80057ea <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d0f1      	beq.n	80057cc <USB_CoreReset+0x34>

  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	00030d40 	.word	0x00030d40

080057fc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057fc:	b084      	sub	sp, #16
 80057fe:	b580      	push	{r7, lr}
 8005800:	b084      	sub	sp, #16
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
 8005806:	f107 001c 	add.w	r0, r7, #28
 800580a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005818:	461a      	mov	r2, r3
 800581a:	2300      	movs	r3, #0
 800581c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005822:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800584a:	2b00      	cmp	r3, #0
 800584c:	d018      	beq.n	8005880 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	2b01      	cmp	r3, #1
 8005852:	d10a      	bne.n	800586a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005862:	f043 0304 	orr.w	r3, r3, #4
 8005866:	6013      	str	r3, [r2, #0]
 8005868:	e014      	b.n	8005894 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005878:	f023 0304 	bic.w	r3, r3, #4
 800587c:	6013      	str	r3, [r2, #0]
 800587e:	e009      	b.n	8005894 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800588e:	f023 0304 	bic.w	r3, r3, #4
 8005892:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005894:	2110      	movs	r1, #16
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7ff fe82 	bl	80055a0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7ff fea3 	bl	80055e8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80058a2:	2300      	movs	r3, #0
 80058a4:	60fb      	str	r3, [r7, #12]
 80058a6:	e015      	b.n	80058d4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b4:	461a      	mov	r2, r3
 80058b6:	f04f 33ff 	mov.w	r3, #4294967295
 80058ba:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c8:	461a      	mov	r2, r3
 80058ca:	2300      	movs	r3, #0
 80058cc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	3301      	adds	r3, #1
 80058d2:	60fb      	str	r3, [r7, #12]
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d3e5      	bcc.n	80058a8 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f04f 32ff 	mov.w	r2, #4294967295
 80058e8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00b      	beq.n	800590e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058fc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a13      	ldr	r2, [pc, #76]	; (8005950 <USB_HostInit+0x154>)
 8005902:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a13      	ldr	r2, [pc, #76]	; (8005954 <USB_HostInit+0x158>)
 8005908:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800590c:	e009      	b.n	8005922 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2280      	movs	r2, #128	; 0x80
 8005912:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a10      	ldr	r2, [pc, #64]	; (8005958 <USB_HostInit+0x15c>)
 8005918:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a0f      	ldr	r2, [pc, #60]	; (800595c <USB_HostInit+0x160>)
 800591e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005924:	2b00      	cmp	r3, #0
 8005926:	d105      	bne.n	8005934 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	f043 0210 	orr.w	r2, r3, #16
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	699a      	ldr	r2, [r3, #24]
 8005938:	4b09      	ldr	r3, [pc, #36]	; (8005960 <USB_HostInit+0x164>)
 800593a:	4313      	orrs	r3, r2
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800594c:	b004      	add	sp, #16
 800594e:	4770      	bx	lr
 8005950:	01000200 	.word	0x01000200
 8005954:	00e00300 	.word	0x00e00300
 8005958:	00600080 	.word	0x00600080
 800595c:	004000e0 	.word	0x004000e0
 8005960:	a3200008 	.word	0xa3200008

08005964 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	460b      	mov	r3, r1
 800596e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005982:	f023 0303 	bic.w	r3, r3, #3
 8005986:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	78fb      	ldrb	r3, [r7, #3]
 8005992:	f003 0303 	and.w	r3, r3, #3
 8005996:	68f9      	ldr	r1, [r7, #12]
 8005998:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800599c:	4313      	orrs	r3, r2
 800599e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80059a0:	78fb      	ldrb	r3, [r7, #3]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d107      	bne.n	80059b6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059ac:	461a      	mov	r2, r3
 80059ae:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80059b2:	6053      	str	r3, [r2, #4]
 80059b4:	e009      	b.n	80059ca <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80059b6:	78fb      	ldrb	r3, [r7, #3]
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d106      	bne.n	80059ca <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059c2:	461a      	mov	r2, r3
 80059c4:	f241 7370 	movw	r3, #6000	; 0x1770
 80059c8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80059f8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a06:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005a08:	2064      	movs	r0, #100	; 0x64
 8005a0a:	f7fb fb39 	bl	8001080 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a1a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005a1c:	200a      	movs	r0, #10
 8005a1e:	f7fb fb2f 	bl	8001080 <HAL_Delay>

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	460b      	mov	r3, r1
 8005a36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005a50:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d109      	bne.n	8005a70 <USB_DriveVbus+0x44>
 8005a5c:	78fb      	ldrb	r3, [r7, #3]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d106      	bne.n	8005a70 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a6e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a7a:	d109      	bne.n	8005a90 <USB_DriveVbus+0x64>
 8005a7c:	78fb      	ldrb	r3, [r7, #3]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d106      	bne.n	8005a90 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a8e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3714      	adds	r7, #20
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b085      	sub	sp, #20
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	0c5b      	lsrs	r3, r3, #17
 8005abc:	f003 0303 	and.w	r3, r3, #3
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	b29b      	uxth	r3, r3
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3714      	adds	r7, #20
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
	...

08005af0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b088      	sub	sp, #32
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	4608      	mov	r0, r1
 8005afa:	4611      	mov	r1, r2
 8005afc:	461a      	mov	r2, r3
 8005afe:	4603      	mov	r3, r0
 8005b00:	70fb      	strb	r3, [r7, #3]
 8005b02:	460b      	mov	r3, r1
 8005b04:	70bb      	strb	r3, [r7, #2]
 8005b06:	4613      	mov	r3, r2
 8005b08:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005b12:	78fb      	ldrb	r3, [r7, #3]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b1e:	461a      	mov	r2, r3
 8005b20:	f04f 33ff 	mov.w	r3, #4294967295
 8005b24:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005b26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005b2a:	2b03      	cmp	r3, #3
 8005b2c:	d87e      	bhi.n	8005c2c <USB_HC_Init+0x13c>
 8005b2e:	a201      	add	r2, pc, #4	; (adr r2, 8005b34 <USB_HC_Init+0x44>)
 8005b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b34:	08005b45 	.word	0x08005b45
 8005b38:	08005bef 	.word	0x08005bef
 8005b3c:	08005b45 	.word	0x08005b45
 8005b40:	08005bb1 	.word	0x08005bb1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b44:	78fb      	ldrb	r3, [r7, #3]
 8005b46:	015a      	lsls	r2, r3, #5
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b50:	461a      	mov	r2, r3
 8005b52:	f240 439d 	movw	r3, #1181	; 0x49d
 8005b56:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005b58:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	da10      	bge.n	8005b82 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005b60:	78fb      	ldrb	r3, [r7, #3]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	78fa      	ldrb	r2, [r7, #3]
 8005b70:	0151      	lsls	r1, r2, #5
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	440a      	add	r2, r1
 8005b76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b7e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005b80:	e057      	b.n	8005c32 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d051      	beq.n	8005c32 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005b8e:	78fb      	ldrb	r3, [r7, #3]
 8005b90:	015a      	lsls	r2, r3, #5
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	4413      	add	r3, r2
 8005b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	78fa      	ldrb	r2, [r7, #3]
 8005b9e:	0151      	lsls	r1, r2, #5
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	440a      	add	r2, r1
 8005ba4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ba8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005bac:	60d3      	str	r3, [r2, #12]
      break;
 8005bae:	e040      	b.n	8005c32 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005bb0:	78fb      	ldrb	r3, [r7, #3]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	f240 639d 	movw	r3, #1693	; 0x69d
 8005bc2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005bc4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	da34      	bge.n	8005c36 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005bcc:	78fb      	ldrb	r3, [r7, #3]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	78fa      	ldrb	r2, [r7, #3]
 8005bdc:	0151      	lsls	r1, r2, #5
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	440a      	add	r2, r1
 8005be2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bea:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005bec:	e023      	b.n	8005c36 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005bee:	78fb      	ldrb	r3, [r7, #3]
 8005bf0:	015a      	lsls	r2, r3, #5
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	f240 2325 	movw	r3, #549	; 0x225
 8005c00:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005c02:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	da17      	bge.n	8005c3a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005c0a:	78fb      	ldrb	r3, [r7, #3]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	78fa      	ldrb	r2, [r7, #3]
 8005c1a:	0151      	lsls	r1, r2, #5
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	440a      	add	r2, r1
 8005c20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c24:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005c28:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005c2a:	e006      	b.n	8005c3a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	77fb      	strb	r3, [r7, #31]
      break;
 8005c30:	e004      	b.n	8005c3c <USB_HC_Init+0x14c>
      break;
 8005c32:	bf00      	nop
 8005c34:	e002      	b.n	8005c3c <USB_HC_Init+0x14c>
      break;
 8005c36:	bf00      	nop
 8005c38:	e000      	b.n	8005c3c <USB_HC_Init+0x14c>
      break;
 8005c3a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c42:	699a      	ldr	r2, [r3, #24]
 8005c44:	78fb      	ldrb	r3, [r7, #3]
 8005c46:	f003 030f 	and.w	r3, r3, #15
 8005c4a:	2101      	movs	r1, #1
 8005c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c50:	6939      	ldr	r1, [r7, #16]
 8005c52:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005c56:	4313      	orrs	r3, r2
 8005c58:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005c66:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	da03      	bge.n	8005c76 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005c6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c72:	61bb      	str	r3, [r7, #24]
 8005c74:	e001      	b.n	8005c7a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005c76:	2300      	movs	r3, #0
 8005c78:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7ff ff0f 	bl	8005a9e <USB_GetHostSpeed>
 8005c80:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005c82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d106      	bne.n	8005c98 <USB_HC_Init+0x1a8>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d003      	beq.n	8005c98 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005c90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c94:	617b      	str	r3, [r7, #20]
 8005c96:	e001      	b.n	8005c9c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c9c:	787b      	ldrb	r3, [r7, #1]
 8005c9e:	059b      	lsls	r3, r3, #22
 8005ca0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005ca4:	78bb      	ldrb	r3, [r7, #2]
 8005ca6:	02db      	lsls	r3, r3, #11
 8005ca8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005cac:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005cae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005cb2:	049b      	lsls	r3, r3, #18
 8005cb4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005cb8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005cba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005cbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005cc0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005cc6:	78fb      	ldrb	r3, [r7, #3]
 8005cc8:	0159      	lsls	r1, r3, #5
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	440b      	add	r3, r1
 8005cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005cd8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005cda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005cde:	2b03      	cmp	r3, #3
 8005ce0:	d10f      	bne.n	8005d02 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005ce2:	78fb      	ldrb	r3, [r7, #3]
 8005ce4:	015a      	lsls	r2, r3, #5
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	78fa      	ldrb	r2, [r7, #3]
 8005cf2:	0151      	lsls	r1, r2, #5
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	440a      	add	r2, r1
 8005cf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cfc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d00:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005d02:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3720      	adds	r7, #32
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b08c      	sub	sp, #48	; 0x30
 8005d10:	af02      	add	r7, sp, #8
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	4613      	mov	r3, r2
 8005d18:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	785b      	ldrb	r3, [r3, #1]
 8005d22:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005d24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d28:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d02d      	beq.n	8005d92 <USB_HC_StartXfer+0x86>
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	791b      	ldrb	r3, [r3, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d129      	bne.n	8005d92 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005d3e:	79fb      	ldrb	r3, [r7, #7]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d117      	bne.n	8005d74 <USB_HC_StartXfer+0x68>
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	79db      	ldrb	r3, [r3, #7]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d003      	beq.n	8005d54 <USB_HC_StartXfer+0x48>
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	79db      	ldrb	r3, [r3, #7]
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d10f      	bne.n	8005d74 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	69fa      	ldr	r2, [r7, #28]
 8005d64:	0151      	lsls	r1, r2, #5
 8005d66:	6a3a      	ldr	r2, [r7, #32]
 8005d68:	440a      	add	r2, r1
 8005d6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d72:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005d74:	79fb      	ldrb	r3, [r7, #7]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10b      	bne.n	8005d92 <USB_HC_StartXfer+0x86>
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	795b      	ldrb	r3, [r3, #5]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d107      	bne.n	8005d92 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	785b      	ldrb	r3, [r3, #1]
 8005d86:	4619      	mov	r1, r3
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f000 fa2f 	bl	80061ec <USB_DoPing>
      return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	e0f8      	b.n	8005f84 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d018      	beq.n	8005dcc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	8912      	ldrh	r2, [r2, #8]
 8005da2:	4413      	add	r3, r2
 8005da4:	3b01      	subs	r3, #1
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	8912      	ldrh	r2, [r2, #8]
 8005daa:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dae:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005db0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005db2:	8b7b      	ldrh	r3, [r7, #26]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d90b      	bls.n	8005dd0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005db8:	8b7b      	ldrh	r3, [r7, #26]
 8005dba:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005dbc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	8912      	ldrh	r2, [r2, #8]
 8005dc2:	fb02 f203 	mul.w	r2, r2, r3
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	611a      	str	r2, [r3, #16]
 8005dca:	e001      	b.n	8005dd0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	78db      	ldrb	r3, [r3, #3]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d007      	beq.n	8005de8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005dd8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	8912      	ldrh	r2, [r2, #8]
 8005dde:	fb02 f203 	mul.w	r2, r2, r3
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	611a      	str	r2, [r3, #16]
 8005de6:	e003      	b.n	8005df0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	695a      	ldr	r2, [r3, #20]
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005df8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005dfa:	04d9      	lsls	r1, r3, #19
 8005dfc:	4b63      	ldr	r3, [pc, #396]	; (8005f8c <USB_HC_StartXfer+0x280>)
 8005dfe:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e00:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	7a9b      	ldrb	r3, [r3, #10]
 8005e06:	075b      	lsls	r3, r3, #29
 8005e08:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e0c:	69f9      	ldr	r1, [r7, #28]
 8005e0e:	0148      	lsls	r0, r1, #5
 8005e10:	6a39      	ldr	r1, [r7, #32]
 8005e12:	4401      	add	r1, r0
 8005e14:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e18:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e1a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005e1c:	79fb      	ldrb	r3, [r7, #7]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d009      	beq.n	8005e36 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	68d9      	ldr	r1, [r3, #12]
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e32:	460a      	mov	r2, r1
 8005e34:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	bf0c      	ite	eq
 8005e46:	2301      	moveq	r3, #1
 8005e48:	2300      	movne	r3, #0
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	6a3b      	ldr	r3, [r7, #32]
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	69fa      	ldr	r2, [r7, #28]
 8005e5e:	0151      	lsls	r1, r2, #5
 8005e60:	6a3a      	ldr	r2, [r7, #32]
 8005e62:	440a      	add	r2, r1
 8005e64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e68:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e6c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	6a3b      	ldr	r3, [r7, #32]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	7e7b      	ldrb	r3, [r7, #25]
 8005e7e:	075b      	lsls	r3, r3, #29
 8005e80:	69f9      	ldr	r1, [r7, #28]
 8005e82:	0148      	lsls	r0, r1, #5
 8005e84:	6a39      	ldr	r1, [r7, #32]
 8005e86:	4401      	add	r1, r0
 8005e88:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	6a3b      	ldr	r3, [r7, #32]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ea6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	78db      	ldrb	r3, [r3, #3]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d004      	beq.n	8005eba <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eb6:	613b      	str	r3, [r7, #16]
 8005eb8:	e003      	b.n	8005ec2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ec0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ec8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005edc:	79fb      	ldrb	r3, [r7, #7]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d001      	beq.n	8005ee6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	e04e      	b.n	8005f84 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	78db      	ldrb	r3, [r3, #3]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d149      	bne.n	8005f82 <USB_HC_StartXfer+0x276>
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d045      	beq.n	8005f82 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	79db      	ldrb	r3, [r3, #7]
 8005efa:	2b03      	cmp	r3, #3
 8005efc:	d830      	bhi.n	8005f60 <USB_HC_StartXfer+0x254>
 8005efe:	a201      	add	r2, pc, #4	; (adr r2, 8005f04 <USB_HC_StartXfer+0x1f8>)
 8005f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f04:	08005f15 	.word	0x08005f15
 8005f08:	08005f39 	.word	0x08005f39
 8005f0c:	08005f15 	.word	0x08005f15
 8005f10:	08005f39 	.word	0x08005f39
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	695b      	ldr	r3, [r3, #20]
 8005f18:	3303      	adds	r3, #3
 8005f1a:	089b      	lsrs	r3, r3, #2
 8005f1c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005f1e:	8afa      	ldrh	r2, [r7, #22]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d91c      	bls.n	8005f64 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	f043 0220 	orr.w	r2, r3, #32
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	619a      	str	r2, [r3, #24]
        }
        break;
 8005f36:	e015      	b.n	8005f64 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	3303      	adds	r3, #3
 8005f3e:	089b      	lsrs	r3, r3, #2
 8005f40:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005f42:	8afa      	ldrh	r2, [r7, #22]
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d90a      	bls.n	8005f68 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	619a      	str	r2, [r3, #24]
        }
        break;
 8005f5e:	e003      	b.n	8005f68 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005f60:	bf00      	nop
 8005f62:	e002      	b.n	8005f6a <USB_HC_StartXfer+0x25e>
        break;
 8005f64:	bf00      	nop
 8005f66:	e000      	b.n	8005f6a <USB_HC_StartXfer+0x25e>
        break;
 8005f68:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	68d9      	ldr	r1, [r3, #12]
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	785a      	ldrb	r2, [r3, #1]
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	2000      	movs	r0, #0
 8005f7a:	9000      	str	r0, [sp, #0]
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f7ff fb53 	bl	8005628 <USB_WritePacket>
  }

  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3728      	adds	r7, #40	; 0x28
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	1ff80000 	.word	0x1ff80000

08005f90 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fa2:	695b      	ldr	r3, [r3, #20]
 8005fa4:	b29b      	uxth	r3, r3
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3714      	adds	r7, #20
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b089      	sub	sp, #36	; 0x24
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
 8005fba:	460b      	mov	r3, r1
 8005fbc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8005fc2:	78fb      	ldrb	r3, [r7, #3]
 8005fc4:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	015a      	lsls	r2, r3, #5
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	0c9b      	lsrs	r3, r3, #18
 8005fda:	f003 0303 	and.w	r3, r3, #3
 8005fde:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	0fdb      	lsrs	r3, r3, #31
 8005ff0:	f003 0301 	and.w	r3, r3, #1
 8005ff4:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f003 0320 	and.w	r3, r3, #32
 8005ffe:	2b20      	cmp	r3, #32
 8006000:	d104      	bne.n	800600c <USB_HC_Halt+0x5a>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006008:	2300      	movs	r3, #0
 800600a:	e0e8      	b.n	80061de <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d002      	beq.n	8006018 <USB_HC_Halt+0x66>
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	2b02      	cmp	r3, #2
 8006016:	d173      	bne.n	8006100 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	4413      	add	r3, r2
 8006020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	0151      	lsls	r1, r2, #5
 800602a:	69ba      	ldr	r2, [r7, #24]
 800602c:	440a      	add	r2, r1
 800602e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006032:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006036:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f003 0320 	and.w	r3, r3, #32
 8006040:	2b00      	cmp	r3, #0
 8006042:	f040 80cb 	bne.w	80061dc <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d143      	bne.n	80060da <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	015a      	lsls	r2, r3, #5
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	4413      	add	r3, r2
 800605a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	0151      	lsls	r1, r2, #5
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	440a      	add	r2, r1
 8006068:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800606c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006070:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	4413      	add	r3, r2
 800607a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	0151      	lsls	r1, r2, #5
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	440a      	add	r2, r1
 8006088:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800608c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006090:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	4413      	add	r3, r2
 800609a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	0151      	lsls	r1, r2, #5
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	440a      	add	r2, r1
 80060a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80060b0:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	3301      	adds	r3, #1
 80060b6:	61fb      	str	r3, [r7, #28]
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060be:	d81d      	bhi.n	80060fc <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	015a      	lsls	r2, r3, #5
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060d6:	d0ec      	beq.n	80060b2 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80060d8:	e080      	b.n	80061dc <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	0151      	lsls	r1, r2, #5
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	440a      	add	r2, r1
 80060f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060f8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80060fa:	e06f      	b.n	80061dc <USB_HC_Halt+0x22a>
            break;
 80060fc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80060fe:	e06d      	b.n	80061dc <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	4413      	add	r3, r2
 8006108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	0151      	lsls	r1, r2, #5
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	440a      	add	r2, r1
 8006116:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800611a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800611e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d143      	bne.n	80061b8 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	4413      	add	r3, r2
 8006138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	0151      	lsls	r1, r2, #5
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	440a      	add	r2, r1
 8006146:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800614a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800614e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	4413      	add	r3, r2
 8006158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	0151      	lsls	r1, r2, #5
 8006162:	69ba      	ldr	r2, [r7, #24]
 8006164:	440a      	add	r2, r1
 8006166:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800616a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800616e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	4413      	add	r3, r2
 8006178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	0151      	lsls	r1, r2, #5
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	440a      	add	r2, r1
 8006186:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800618a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800618e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	3301      	adds	r3, #1
 8006194:	61fb      	str	r3, [r7, #28]
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800619c:	d81d      	bhi.n	80061da <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061b4:	d0ec      	beq.n	8006190 <USB_HC_Halt+0x1de>
 80061b6:	e011      	b.n	80061dc <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	0151      	lsls	r1, r2, #5
 80061ca:	69ba      	ldr	r2, [r7, #24]
 80061cc:	440a      	add	r2, r1
 80061ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061d6:	6013      	str	r3, [r2, #0]
 80061d8:	e000      	b.n	80061dc <USB_HC_Halt+0x22a>
          break;
 80061da:	bf00      	nop
    }
  }

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3724      	adds	r7, #36	; 0x24
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
	...

080061ec <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	460b      	mov	r3, r1
 80061f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80061fc:	78fb      	ldrb	r3, [r7, #3]
 80061fe:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006200:	2301      	movs	r3, #1
 8006202:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	04da      	lsls	r2, r3, #19
 8006208:	4b15      	ldr	r3, [pc, #84]	; (8006260 <USB_DoPing+0x74>)
 800620a:	4013      	ands	r3, r2
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	0151      	lsls	r1, r2, #5
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	440a      	add	r2, r1
 8006214:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006218:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800621c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	015a      	lsls	r2, r3, #5
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	4413      	add	r3, r2
 8006226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006234:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800623c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	4413      	add	r3, r2
 8006246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800624a:	461a      	mov	r2, r3
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	371c      	adds	r7, #28
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	1ff80000 	.word	0x1ff80000

08006264 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006270:	2300      	movs	r3, #0
 8006272:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f7ff f935 	bl	80054e4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800627a:	2110      	movs	r1, #16
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f7ff f98f 	bl	80055a0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7ff f9b0 	bl	80055e8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006288:	2300      	movs	r3, #0
 800628a:	613b      	str	r3, [r7, #16]
 800628c:	e01f      	b.n	80062ce <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	015a      	lsls	r2, r3, #5
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	4413      	add	r3, r2
 8006296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062a4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062ac:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062b4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	015a      	lsls	r2, r3, #5
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	4413      	add	r3, r2
 80062be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c2:	461a      	mov	r2, r3
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	3301      	adds	r3, #1
 80062cc:	613b      	str	r3, [r7, #16]
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	2b0f      	cmp	r3, #15
 80062d2:	d9dc      	bls.n	800628e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80062d4:	2300      	movs	r3, #0
 80062d6:	613b      	str	r3, [r7, #16]
 80062d8:	e034      	b.n	8006344 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	015a      	lsls	r2, r3, #5
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	4413      	add	r3, r2
 80062e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062f0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062f8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006300:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	015a      	lsls	r2, r3, #5
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	4413      	add	r3, r2
 800630a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800630e:	461a      	mov	r2, r3
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	3301      	adds	r3, #1
 8006318:	617b      	str	r3, [r7, #20]
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006320:	d80c      	bhi.n	800633c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	015a      	lsls	r2, r3, #5
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	4413      	add	r3, r2
 800632a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006334:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006338:	d0ec      	beq.n	8006314 <USB_StopHost+0xb0>
 800633a:	e000      	b.n	800633e <USB_StopHost+0xda>
        break;
 800633c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	3301      	adds	r3, #1
 8006342:	613b      	str	r3, [r7, #16]
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	2b0f      	cmp	r3, #15
 8006348:	d9c7      	bls.n	80062da <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006350:	461a      	mov	r2, r3
 8006352:	f04f 33ff 	mov.w	r3, #4294967295
 8006356:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f04f 32ff 	mov.w	r2, #4294967295
 800635e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f7ff f8ae 	bl	80054c2 <USB_EnableGlobalInt>

  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3718      	adds	r7, #24
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006370:	b590      	push	{r4, r7, lr}
 8006372:	b089      	sub	sp, #36	; 0x24
 8006374:	af04      	add	r7, sp, #16
 8006376:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006378:	2301      	movs	r3, #1
 800637a:	2202      	movs	r2, #2
 800637c:	2102      	movs	r1, #2
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 fc66 	bl	8006c50 <USBH_FindInterface>
 8006384:	4603      	mov	r3, r0
 8006386:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006388:	7bfb      	ldrb	r3, [r7, #15]
 800638a:	2bff      	cmp	r3, #255	; 0xff
 800638c:	d002      	beq.n	8006394 <USBH_CDC_InterfaceInit+0x24>
 800638e:	7bfb      	ldrb	r3, [r7, #15]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d901      	bls.n	8006398 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006394:	2302      	movs	r3, #2
 8006396:	e13d      	b.n	8006614 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006398:	7bfb      	ldrb	r3, [r7, #15]
 800639a:	4619      	mov	r1, r3
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 fc3b 	bl	8006c18 <USBH_SelectInterface>
 80063a2:	4603      	mov	r3, r0
 80063a4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80063a6:	7bbb      	ldrb	r3, [r7, #14]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80063ac:	2302      	movs	r3, #2
 80063ae:	e131      	b.n	8006614 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80063b6:	2050      	movs	r0, #80	; 0x50
 80063b8:	f002 fa00 	bl	80087bc <malloc>
 80063bc:	4603      	mov	r3, r0
 80063be:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063c6:	69db      	ldr	r3, [r3, #28]
 80063c8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80063d0:	2302      	movs	r3, #2
 80063d2:	e11f      	b.n	8006614 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80063d4:	2250      	movs	r2, #80	; 0x50
 80063d6:	2100      	movs	r1, #0
 80063d8:	68b8      	ldr	r0, [r7, #8]
 80063da:	f002 f9ff 	bl	80087dc <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80063de:	7bfb      	ldrb	r3, [r7, #15]
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	211a      	movs	r1, #26
 80063e4:	fb01 f303 	mul.w	r3, r1, r3
 80063e8:	4413      	add	r3, r2
 80063ea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	b25b      	sxtb	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	da15      	bge.n	8006422 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	211a      	movs	r1, #26
 80063fc:	fb01 f303 	mul.w	r3, r1, r3
 8006400:	4413      	add	r3, r2
 8006402:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006406:	781a      	ldrb	r2, [r3, #0]
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800640c:	7bfb      	ldrb	r3, [r7, #15]
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	211a      	movs	r1, #26
 8006412:	fb01 f303 	mul.w	r3, r1, r3
 8006416:	4413      	add	r3, r2
 8006418:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800641c:	881a      	ldrh	r2, [r3, #0]
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	785b      	ldrb	r3, [r3, #1]
 8006426:	4619      	mov	r1, r3
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f001 fe32 	bl	8008092 <USBH_AllocPipe>
 800642e:	4603      	mov	r3, r0
 8006430:	461a      	mov	r2, r3
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	7819      	ldrb	r1, [r3, #0]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	7858      	ldrb	r0, [r3, #1]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	8952      	ldrh	r2, [r2, #10]
 800644e:	9202      	str	r2, [sp, #8]
 8006450:	2203      	movs	r2, #3
 8006452:	9201      	str	r2, [sp, #4]
 8006454:	9300      	str	r3, [sp, #0]
 8006456:	4623      	mov	r3, r4
 8006458:	4602      	mov	r2, r0
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f001 fdea 	bl	8008034 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	2200      	movs	r2, #0
 8006466:	4619      	mov	r1, r3
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f002 f8f9 	bl	8008660 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800646e:	2300      	movs	r3, #0
 8006470:	2200      	movs	r2, #0
 8006472:	210a      	movs	r1, #10
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fbeb 	bl	8006c50 <USBH_FindInterface>
 800647a:	4603      	mov	r3, r0
 800647c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800647e:	7bfb      	ldrb	r3, [r7, #15]
 8006480:	2bff      	cmp	r3, #255	; 0xff
 8006482:	d002      	beq.n	800648a <USBH_CDC_InterfaceInit+0x11a>
 8006484:	7bfb      	ldrb	r3, [r7, #15]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d901      	bls.n	800648e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800648a:	2302      	movs	r3, #2
 800648c:	e0c2      	b.n	8006614 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800648e:	7bfb      	ldrb	r3, [r7, #15]
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	211a      	movs	r1, #26
 8006494:	fb01 f303 	mul.w	r3, r1, r3
 8006498:	4413      	add	r3, r2
 800649a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	b25b      	sxtb	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	da16      	bge.n	80064d4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80064a6:	7bfb      	ldrb	r3, [r7, #15]
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	211a      	movs	r1, #26
 80064ac:	fb01 f303 	mul.w	r3, r1, r3
 80064b0:	4413      	add	r3, r2
 80064b2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80064b6:	781a      	ldrb	r2, [r3, #0]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80064bc:	7bfb      	ldrb	r3, [r7, #15]
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	211a      	movs	r1, #26
 80064c2:	fb01 f303 	mul.w	r3, r1, r3
 80064c6:	4413      	add	r3, r2
 80064c8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80064cc:	881a      	ldrh	r2, [r3, #0]
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	835a      	strh	r2, [r3, #26]
 80064d2:	e015      	b.n	8006500 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80064d4:	7bfb      	ldrb	r3, [r7, #15]
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	211a      	movs	r1, #26
 80064da:	fb01 f303 	mul.w	r3, r1, r3
 80064de:	4413      	add	r3, r2
 80064e0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80064e4:	781a      	ldrb	r2, [r3, #0]
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	211a      	movs	r1, #26
 80064f0:	fb01 f303 	mul.w	r3, r1, r3
 80064f4:	4413      	add	r3, r2
 80064f6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80064fa:	881a      	ldrh	r2, [r3, #0]
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006500:	7bfb      	ldrb	r3, [r7, #15]
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	211a      	movs	r1, #26
 8006506:	fb01 f303 	mul.w	r3, r1, r3
 800650a:	4413      	add	r3, r2
 800650c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	b25b      	sxtb	r3, r3
 8006514:	2b00      	cmp	r3, #0
 8006516:	da16      	bge.n	8006546 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006518:	7bfb      	ldrb	r3, [r7, #15]
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	211a      	movs	r1, #26
 800651e:	fb01 f303 	mul.w	r3, r1, r3
 8006522:	4413      	add	r3, r2
 8006524:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006528:	781a      	ldrb	r2, [r3, #0]
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800652e:	7bfb      	ldrb	r3, [r7, #15]
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	211a      	movs	r1, #26
 8006534:	fb01 f303 	mul.w	r3, r1, r3
 8006538:	4413      	add	r3, r2
 800653a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800653e:	881a      	ldrh	r2, [r3, #0]
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	835a      	strh	r2, [r3, #26]
 8006544:	e015      	b.n	8006572 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006546:	7bfb      	ldrb	r3, [r7, #15]
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	211a      	movs	r1, #26
 800654c:	fb01 f303 	mul.w	r3, r1, r3
 8006550:	4413      	add	r3, r2
 8006552:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006556:	781a      	ldrb	r2, [r3, #0]
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800655c:	7bfb      	ldrb	r3, [r7, #15]
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	211a      	movs	r1, #26
 8006562:	fb01 f303 	mul.w	r3, r1, r3
 8006566:	4413      	add	r3, r2
 8006568:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800656c:	881a      	ldrh	r2, [r3, #0]
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	7b9b      	ldrb	r3, [r3, #14]
 8006576:	4619      	mov	r1, r3
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f001 fd8a 	bl	8008092 <USBH_AllocPipe>
 800657e:	4603      	mov	r3, r0
 8006580:	461a      	mov	r2, r3
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	7bdb      	ldrb	r3, [r3, #15]
 800658a:	4619      	mov	r1, r3
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f001 fd80 	bl	8008092 <USBH_AllocPipe>
 8006592:	4603      	mov	r3, r0
 8006594:	461a      	mov	r2, r3
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	7b59      	ldrb	r1, [r3, #13]
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	7b98      	ldrb	r0, [r3, #14]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	8b12      	ldrh	r2, [r2, #24]
 80065b2:	9202      	str	r2, [sp, #8]
 80065b4:	2202      	movs	r2, #2
 80065b6:	9201      	str	r2, [sp, #4]
 80065b8:	9300      	str	r3, [sp, #0]
 80065ba:	4623      	mov	r3, r4
 80065bc:	4602      	mov	r2, r0
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f001 fd38 	bl	8008034 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	7b19      	ldrb	r1, [r3, #12]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	7bd8      	ldrb	r0, [r3, #15]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	8b52      	ldrh	r2, [r2, #26]
 80065dc:	9202      	str	r2, [sp, #8]
 80065de:	2202      	movs	r2, #2
 80065e0:	9201      	str	r2, [sp, #4]
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	4623      	mov	r3, r4
 80065e6:	4602      	mov	r2, r0
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f001 fd23 	bl	8008034 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	7b5b      	ldrb	r3, [r3, #13]
 80065fa:	2200      	movs	r2, #0
 80065fc:	4619      	mov	r1, r3
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f002 f82e 	bl	8008660 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	7b1b      	ldrb	r3, [r3, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	4619      	mov	r1, r3
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f002 f827 	bl	8008660 <USBH_LL_SetToggle>

  return USBH_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	bd90      	pop	{r4, r7, pc}

0800661c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800662a:	69db      	ldr	r3, [r3, #28]
 800662c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00e      	beq.n	8006654 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	4619      	mov	r1, r3
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f001 fd18 	bl	8008072 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	4619      	mov	r1, r3
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f001 fd43 	bl	80080d4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	7b1b      	ldrb	r3, [r3, #12]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00e      	beq.n	800667a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	7b1b      	ldrb	r3, [r3, #12]
 8006660:	4619      	mov	r1, r3
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f001 fd05 	bl	8008072 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	7b1b      	ldrb	r3, [r3, #12]
 800666c:	4619      	mov	r1, r3
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f001 fd30 	bl	80080d4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	7b5b      	ldrb	r3, [r3, #13]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00e      	beq.n	80066a0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	7b5b      	ldrb	r3, [r3, #13]
 8006686:	4619      	mov	r1, r3
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f001 fcf2 	bl	8008072 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	7b5b      	ldrb	r3, [r3, #13]
 8006692:	4619      	mov	r1, r3
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f001 fd1d 	bl	80080d4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066a6:	69db      	ldr	r3, [r3, #28]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00b      	beq.n	80066c4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066b2:	69db      	ldr	r3, [r3, #28]
 80066b4:	4618      	mov	r0, r3
 80066b6:	f002 f889 	bl	80087cc <free>
    phost->pActiveClass->pData = 0U;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066c0:	2200      	movs	r2, #0
 80066c2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b084      	sub	sp, #16
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	3340      	adds	r3, #64	; 0x40
 80066e4:	4619      	mov	r1, r3
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f8b1 	bl	800684e <GetLineCoding>
 80066ec:	4603      	mov	r3, r0
 80066ee:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80066f0:	7afb      	ldrb	r3, [r7, #11]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d105      	bne.n	8006702 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80066fc:	2102      	movs	r1, #2
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006702:	7afb      	ldrb	r3, [r7, #11]
}
 8006704:	4618      	mov	r0, r3
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006714:	2301      	movs	r3, #1
 8006716:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006718:	2300      	movs	r3, #0
 800671a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006722:	69db      	ldr	r3, [r3, #28]
 8006724:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800672c:	2b04      	cmp	r3, #4
 800672e:	d877      	bhi.n	8006820 <USBH_CDC_Process+0x114>
 8006730:	a201      	add	r2, pc, #4	; (adr r2, 8006738 <USBH_CDC_Process+0x2c>)
 8006732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006736:	bf00      	nop
 8006738:	0800674d 	.word	0x0800674d
 800673c:	08006753 	.word	0x08006753
 8006740:	08006783 	.word	0x08006783
 8006744:	080067f7 	.word	0x080067f7
 8006748:	08006805 	.word	0x08006805
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800674c:	2300      	movs	r3, #0
 800674e:	73fb      	strb	r3, [r7, #15]
      break;
 8006750:	e06d      	b.n	800682e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006756:	4619      	mov	r1, r3
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 f897 	bl	800688c <SetLineCoding>
 800675e:	4603      	mov	r3, r0
 8006760:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006762:	7bbb      	ldrb	r3, [r7, #14]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d104      	bne.n	8006772 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	2202      	movs	r2, #2
 800676c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006770:	e058      	b.n	8006824 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006772:	7bbb      	ldrb	r3, [r7, #14]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d055      	beq.n	8006824 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	2204      	movs	r2, #4
 800677c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006780:	e050      	b.n	8006824 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	3340      	adds	r3, #64	; 0x40
 8006786:	4619      	mov	r1, r3
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 f860 	bl	800684e <GetLineCoding>
 800678e:	4603      	mov	r3, r0
 8006790:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006792:	7bbb      	ldrb	r3, [r7, #14]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d126      	bne.n	80067e6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067aa:	791b      	ldrb	r3, [r3, #4]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d13b      	bne.n	8006828 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ba:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80067bc:	429a      	cmp	r2, r3
 80067be:	d133      	bne.n	8006828 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ca:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d12b      	bne.n	8006828 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067d8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80067da:	429a      	cmp	r2, r3
 80067dc:	d124      	bne.n	8006828 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f958 	bl	8006a94 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80067e4:	e020      	b.n	8006828 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80067e6:	7bbb      	ldrb	r3, [r7, #14]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d01d      	beq.n	8006828 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	2204      	movs	r2, #4
 80067f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80067f4:	e018      	b.n	8006828 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f867 	bl	80068ca <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 f8da 	bl	80069b6 <CDC_ProcessReception>
      break;
 8006802:	e014      	b.n	800682e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006804:	2100      	movs	r1, #0
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 ffe3 	bl	80077d2 <USBH_ClrFeature>
 800680c:	4603      	mov	r3, r0
 800680e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006810:	7bbb      	ldrb	r3, [r7, #14]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10a      	bne.n	800682c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800681e:	e005      	b.n	800682c <USBH_CDC_Process+0x120>

    default:
      break;
 8006820:	bf00      	nop
 8006822:	e004      	b.n	800682e <USBH_CDC_Process+0x122>
      break;
 8006824:	bf00      	nop
 8006826:	e002      	b.n	800682e <USBH_CDC_Process+0x122>
      break;
 8006828:	bf00      	nop
 800682a:	e000      	b.n	800682e <USBH_CDC_Process+0x122>
      break;
 800682c:	bf00      	nop

  }

  return status;
 800682e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006830:	4618      	mov	r0, r3
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b082      	sub	sp, #8
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	22a1      	movs	r2, #161	; 0xa1
 800685c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2221      	movs	r2, #33	; 0x21
 8006862:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2207      	movs	r2, #7
 8006874:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	2207      	movs	r2, #7
 800687a:	4619      	mov	r1, r3
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f001 f988 	bl	8007b92 <USBH_CtlReq>
 8006882:	4603      	mov	r3, r0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3708      	adds	r7, #8
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2221      	movs	r2, #33	; 0x21
 800689a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2220      	movs	r2, #32
 80068a0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2207      	movs	r2, #7
 80068b2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	2207      	movs	r2, #7
 80068b8:	4619      	mov	r1, r3
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f001 f969 	bl	8007b92 <USBH_CtlReq>
 80068c0:	4603      	mov	r3, r0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3708      	adds	r7, #8
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b086      	sub	sp, #24
 80068ce:	af02      	add	r7, sp, #8
 80068d0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068d8:	69db      	ldr	r3, [r3, #28]
 80068da:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80068dc:	2300      	movs	r3, #0
 80068de:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d002      	beq.n	80068f0 <CDC_ProcessTransmission+0x26>
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d023      	beq.n	8006936 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80068ee:	e05e      	b.n	80069ae <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	8b12      	ldrh	r2, [r2, #24]
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d90b      	bls.n	8006914 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	69d9      	ldr	r1, [r3, #28]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	8b1a      	ldrh	r2, [r3, #24]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	7b5b      	ldrb	r3, [r3, #13]
 8006908:	2001      	movs	r0, #1
 800690a:	9000      	str	r0, [sp, #0]
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f001 fb4e 	bl	8007fae <USBH_BulkSendData>
 8006912:	e00b      	b.n	800692c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800691c:	b29a      	uxth	r2, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	7b5b      	ldrb	r3, [r3, #13]
 8006922:	2001      	movs	r0, #1
 8006924:	9000      	str	r0, [sp, #0]
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f001 fb41 	bl	8007fae <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2202      	movs	r2, #2
 8006930:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006934:	e03b      	b.n	80069ae <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	7b5b      	ldrb	r3, [r3, #13]
 800693a:	4619      	mov	r1, r3
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f001 fe65 	bl	800860c <USBH_LL_GetURBState>
 8006942:	4603      	mov	r3, r0
 8006944:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006946:	7afb      	ldrb	r3, [r7, #11]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d128      	bne.n	800699e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	8b12      	ldrh	r2, [r2, #24]
 8006954:	4293      	cmp	r3, r2
 8006956:	d90e      	bls.n	8006976 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	8b12      	ldrh	r2, [r2, #24]
 8006960:	1a9a      	subs	r2, r3, r2
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	69db      	ldr	r3, [r3, #28]
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	8b12      	ldrh	r2, [r2, #24]
 800696e:	441a      	add	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	61da      	str	r2, [r3, #28]
 8006974:	e002      	b.n	800697c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006980:	2b00      	cmp	r3, #0
 8006982:	d004      	beq.n	800698e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800698c:	e00e      	b.n	80069ac <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f868 	bl	8006a6c <USBH_CDC_TransmitCallback>
      break;
 800699c:	e006      	b.n	80069ac <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800699e:	7afb      	ldrb	r3, [r7, #11]
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d103      	bne.n	80069ac <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80069ac:	bf00      	nop
  }
}
 80069ae:	bf00      	nop
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b086      	sub	sp, #24
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069c4:	69db      	ldr	r3, [r3, #28]
 80069c6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80069c8:	2300      	movs	r3, #0
 80069ca:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80069d2:	2b03      	cmp	r3, #3
 80069d4:	d002      	beq.n	80069dc <CDC_ProcessReception+0x26>
 80069d6:	2b04      	cmp	r3, #4
 80069d8:	d00e      	beq.n	80069f8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80069da:	e043      	b.n	8006a64 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	6a19      	ldr	r1, [r3, #32]
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	8b5a      	ldrh	r2, [r3, #26]
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	7b1b      	ldrb	r3, [r3, #12]
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f001 fb05 	bl	8007ff8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	2204      	movs	r2, #4
 80069f2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80069f6:	e035      	b.n	8006a64 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	7b1b      	ldrb	r3, [r3, #12]
 80069fc:	4619      	mov	r1, r3
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f001 fe04 	bl	800860c <USBH_LL_GetURBState>
 8006a04:	4603      	mov	r3, r0
 8006a06:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006a08:	7cfb      	ldrb	r3, [r7, #19]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d129      	bne.n	8006a62 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	7b1b      	ldrb	r3, [r3, #12]
 8006a12:	4619      	mov	r1, r3
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f001 fd67 	bl	80084e8 <USBH_LL_GetLastXferSize>
 8006a1a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d016      	beq.n	8006a54 <CDC_ProcessReception+0x9e>
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	8b5b      	ldrh	r3, [r3, #26]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d910      	bls.n	8006a54 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	1ad2      	subs	r2, r2, r3
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	6a1a      	ldr	r2, [r3, #32]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	441a      	add	r2, r3
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	2203      	movs	r2, #3
 8006a4e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006a52:	e006      	b.n	8006a62 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 f80f 	bl	8006a80 <USBH_CDC_ReceiveCallback>
      break;
 8006a62:	bf00      	nop
  }
}
 8006a64:	bf00      	nop
 8006a66:	3718      	adds	r7, #24
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d101      	bne.n	8006ac0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006abc:	2302      	movs	r3, #2
 8006abe:	e029      	b.n	8006b14 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	79fa      	ldrb	r2, [r7, #7]
 8006ac4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 f81f 	bl	8006b1c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d003      	beq.n	8006b0c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f001 fc37 	bl	8008380 <USBH_LL_Init>

  return USBH_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3710      	adds	r7, #16
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b085      	sub	sp, #20
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006b24:	2300      	movs	r3, #0
 8006b26:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006b28:	2300      	movs	r3, #0
 8006b2a:	60fb      	str	r3, [r7, #12]
 8006b2c:	e009      	b.n	8006b42 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	33e0      	adds	r3, #224	; 0xe0
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	2200      	movs	r2, #0
 8006b3a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	60fb      	str	r3, [r7, #12]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2b0e      	cmp	r3, #14
 8006b46:	d9f2      	bls.n	8006b2e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006b48:	2300      	movs	r3, #0
 8006b4a:	60fb      	str	r3, [r7, #12]
 8006b4c:	e009      	b.n	8006b62 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006b58:	2200      	movs	r2, #0
 8006b5a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	60fb      	str	r3, [r7, #12]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b68:	d3f1      	bcc.n	8006b4e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2240      	movs	r2, #64	; 0x40
 8006b8e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3714      	adds	r7, #20
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d016      	beq.n	8006c06 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10e      	bne.n	8006c00 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006be8:	1c59      	adds	r1, r3, #1
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	33de      	adds	r3, #222	; 0xde
 8006bf4:	6839      	ldr	r1, [r7, #0]
 8006bf6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	73fb      	strb	r3, [r7, #15]
 8006bfe:	e004      	b.n	8006c0a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006c00:	2302      	movs	r3, #2
 8006c02:	73fb      	strb	r3, [r7, #15]
 8006c04:	e001      	b.n	8006c0a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006c06:	2302      	movs	r3, #2
 8006c08:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3714      	adds	r7, #20
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	460b      	mov	r3, r1
 8006c22:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006c24:	2300      	movs	r3, #0
 8006c26:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006c2e:	78fa      	ldrb	r2, [r7, #3]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d204      	bcs.n	8006c3e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	78fa      	ldrb	r2, [r7, #3]
 8006c38:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006c3c:	e001      	b.n	8006c42 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006c3e:	2302      	movs	r3, #2
 8006c40:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3714      	adds	r7, #20
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b087      	sub	sp, #28
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	4608      	mov	r0, r1
 8006c5a:	4611      	mov	r1, r2
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	4603      	mov	r3, r0
 8006c60:	70fb      	strb	r3, [r7, #3]
 8006c62:	460b      	mov	r3, r1
 8006c64:	70bb      	strb	r3, [r7, #2]
 8006c66:	4613      	mov	r3, r2
 8006c68:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006c78:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006c7a:	e025      	b.n	8006cc8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006c7c:	7dfb      	ldrb	r3, [r7, #23]
 8006c7e:	221a      	movs	r2, #26
 8006c80:	fb02 f303 	mul.w	r3, r2, r3
 8006c84:	3308      	adds	r3, #8
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	4413      	add	r3, r2
 8006c8a:	3302      	adds	r3, #2
 8006c8c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	795b      	ldrb	r3, [r3, #5]
 8006c92:	78fa      	ldrb	r2, [r7, #3]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d002      	beq.n	8006c9e <USBH_FindInterface+0x4e>
 8006c98:	78fb      	ldrb	r3, [r7, #3]
 8006c9a:	2bff      	cmp	r3, #255	; 0xff
 8006c9c:	d111      	bne.n	8006cc2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006ca2:	78ba      	ldrb	r2, [r7, #2]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d002      	beq.n	8006cae <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ca8:	78bb      	ldrb	r3, [r7, #2]
 8006caa:	2bff      	cmp	r3, #255	; 0xff
 8006cac:	d109      	bne.n	8006cc2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006cb2:	787a      	ldrb	r2, [r7, #1]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d002      	beq.n	8006cbe <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006cb8:	787b      	ldrb	r3, [r7, #1]
 8006cba:	2bff      	cmp	r3, #255	; 0xff
 8006cbc:	d101      	bne.n	8006cc2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006cbe:	7dfb      	ldrb	r3, [r7, #23]
 8006cc0:	e006      	b.n	8006cd0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006cc2:	7dfb      	ldrb	r3, [r7, #23]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006cc8:	7dfb      	ldrb	r3, [r7, #23]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d9d6      	bls.n	8006c7c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006cce:	23ff      	movs	r3, #255	; 0xff
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	371c      	adds	r7, #28
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f001 fb87 	bl	80083f8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006cea:	2101      	movs	r1, #1
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f001 fca0 	bl	8008632 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3708      	adds	r7, #8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b088      	sub	sp, #32
 8006d00:	af04      	add	r7, sp, #16
 8006d02:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006d04:	2302      	movs	r3, #2
 8006d06:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d102      	bne.n	8006d1e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2203      	movs	r2, #3
 8006d1c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	2b0b      	cmp	r3, #11
 8006d26:	f200 81b3 	bhi.w	8007090 <USBH_Process+0x394>
 8006d2a:	a201      	add	r2, pc, #4	; (adr r2, 8006d30 <USBH_Process+0x34>)
 8006d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d30:	08006d61 	.word	0x08006d61
 8006d34:	08006d93 	.word	0x08006d93
 8006d38:	08006dfb 	.word	0x08006dfb
 8006d3c:	0800702b 	.word	0x0800702b
 8006d40:	08007091 	.word	0x08007091
 8006d44:	08006e9f 	.word	0x08006e9f
 8006d48:	08006fd1 	.word	0x08006fd1
 8006d4c:	08006ed5 	.word	0x08006ed5
 8006d50:	08006ef5 	.word	0x08006ef5
 8006d54:	08006f15 	.word	0x08006f15
 8006d58:	08006f43 	.word	0x08006f43
 8006d5c:	08007013 	.word	0x08007013
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 8193 	beq.w	8007094 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006d74:	20c8      	movs	r0, #200	; 0xc8
 8006d76:	f001 fca3 	bl	80086c0 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f001 fb99 	bl	80084b2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006d90:	e180      	b.n	8007094 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d107      	bne.n	8006dac <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2202      	movs	r2, #2
 8006da8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006daa:	e182      	b.n	80070b2 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006db2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006db6:	d914      	bls.n	8006de2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006dce:	2b03      	cmp	r3, #3
 8006dd0:	d903      	bls.n	8006dda <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	220d      	movs	r2, #13
 8006dd6:	701a      	strb	r2, [r3, #0]
      break;
 8006dd8:	e16b      	b.n	80070b2 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	701a      	strb	r2, [r3, #0]
      break;
 8006de0:	e167      	b.n	80070b2 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006de8:	f103 020a 	add.w	r2, r3, #10
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006df2:	200a      	movs	r0, #10
 8006df4:	f001 fc64 	bl	80086c0 <USBH_Delay>
      break;
 8006df8:	e15b      	b.n	80070b2 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d005      	beq.n	8006e10 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e0a:	2104      	movs	r1, #4
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006e10:	2064      	movs	r0, #100	; 0x64
 8006e12:	f001 fc55 	bl	80086c0 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f001 fb24 	bl	8008464 <USBH_LL_GetSpeed>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	461a      	mov	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2205      	movs	r2, #5
 8006e2a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f001 f92f 	bl	8008092 <USBH_AllocPipe>
 8006e34:	4603      	mov	r3, r0
 8006e36:	461a      	mov	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006e3c:	2180      	movs	r1, #128	; 0x80
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f001 f927 	bl	8008092 <USBH_AllocPipe>
 8006e44:	4603      	mov	r3, r0
 8006e46:	461a      	mov	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	7919      	ldrb	r1, [r3, #4]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006e60:	b292      	uxth	r2, r2
 8006e62:	9202      	str	r2, [sp, #8]
 8006e64:	2200      	movs	r2, #0
 8006e66:	9201      	str	r2, [sp, #4]
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2280      	movs	r2, #128	; 0x80
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f001 f8e0 	bl	8008034 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	7959      	ldrb	r1, [r3, #5]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006e88:	b292      	uxth	r2, r2
 8006e8a:	9202      	str	r2, [sp, #8]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	9201      	str	r2, [sp, #4]
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	4603      	mov	r3, r0
 8006e94:	2200      	movs	r2, #0
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f001 f8cc 	bl	8008034 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006e9c:	e109      	b.n	80070b2 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f90c 	bl	80070bc <USBH_HandleEnum>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006ea8:	7bbb      	ldrb	r3, [r7, #14]
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f040 80f3 	bne.w	8007098 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d103      	bne.n	8006ecc <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2208      	movs	r2, #8
 8006ec8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006eca:	e0e5      	b.n	8007098 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2207      	movs	r2, #7
 8006ed0:	701a      	strb	r2, [r3, #0]
      break;
 8006ed2:	e0e1      	b.n	8007098 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f000 80de 	beq.w	800709c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ee6:	2101      	movs	r1, #1
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2208      	movs	r2, #8
 8006ef0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006ef2:	e0d3      	b.n	800709c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	4619      	mov	r1, r3
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fc20 	bl	8007744 <USBH_SetCfg>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f040 80ca 	bne.w	80070a0 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2209      	movs	r2, #9
 8006f10:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006f12:	e0c5      	b.n	80070a0 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006f1a:	f003 0320 	and.w	r3, r3, #32
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00b      	beq.n	8006f3a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006f22:	2101      	movs	r1, #1
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 fc30 	bl	800778a <USBH_SetFeature>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f040 80b9 	bne.w	80070a4 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	220a      	movs	r2, #10
 8006f36:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006f38:	e0b4      	b.n	80070a4 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	220a      	movs	r2, #10
 8006f3e:	701a      	strb	r2, [r3, #0]
      break;
 8006f40:	e0b0      	b.n	80070a4 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f000 80ad 	beq.w	80070a8 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006f56:	2300      	movs	r3, #0
 8006f58:	73fb      	strb	r3, [r7, #15]
 8006f5a:	e016      	b.n	8006f8a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006f5c:	7bfa      	ldrb	r2, [r7, #15]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	32de      	adds	r2, #222	; 0xde
 8006f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f66:	791a      	ldrb	r2, [r3, #4]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d108      	bne.n	8006f84 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006f72:	7bfa      	ldrb	r2, [r7, #15]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	32de      	adds	r2, #222	; 0xde
 8006f78:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006f82:	e005      	b.n	8006f90 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006f84:	7bfb      	ldrb	r3, [r7, #15]
 8006f86:	3301      	adds	r3, #1
 8006f88:	73fb      	strb	r3, [r7, #15]
 8006f8a:	7bfb      	ldrb	r3, [r7, #15]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d0e5      	beq.n	8006f5c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d016      	beq.n	8006fc8 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	4798      	blx	r3
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d109      	bne.n	8006fc0 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2206      	movs	r2, #6
 8006fb0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006fb8:	2103      	movs	r1, #3
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006fbe:	e073      	b.n	80070a8 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	220d      	movs	r2, #13
 8006fc4:	701a      	strb	r2, [r3, #0]
      break;
 8006fc6:	e06f      	b.n	80070a8 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	220d      	movs	r2, #13
 8006fcc:	701a      	strb	r2, [r3, #0]
      break;
 8006fce:	e06b      	b.n	80070a8 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d017      	beq.n	800700a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	4798      	blx	r3
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006fea:	7bbb      	ldrb	r3, [r7, #14]
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d103      	bne.n	8006ffa <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	220b      	movs	r2, #11
 8006ff6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006ff8:	e058      	b.n	80070ac <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8006ffa:	7bbb      	ldrb	r3, [r7, #14]
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d154      	bne.n	80070ac <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	220d      	movs	r2, #13
 8007006:	701a      	strb	r2, [r3, #0]
      break;
 8007008:	e050      	b.n	80070ac <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	220d      	movs	r2, #13
 800700e:	701a      	strb	r2, [r3, #0]
      break;
 8007010:	e04c      	b.n	80070ac <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007018:	2b00      	cmp	r3, #0
 800701a:	d049      	beq.n	80070b0 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007022:	695b      	ldr	r3, [r3, #20]
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	4798      	blx	r3
      }
      break;
 8007028:	e042      	b.n	80070b0 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f7ff fd72 	bl	8006b1c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800703e:	2b00      	cmp	r3, #0
 8007040:	d009      	beq.n	8007056 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800705c:	2b00      	cmp	r3, #0
 800705e:	d005      	beq.n	800706c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007066:	2105      	movs	r1, #5
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007072:	b2db      	uxtb	r3, r3
 8007074:	2b01      	cmp	r3, #1
 8007076:	d107      	bne.n	8007088 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f7ff fe2b 	bl	8006cdc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007086:	e014      	b.n	80070b2 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f001 f9b5 	bl	80083f8 <USBH_LL_Start>
      break;
 800708e:	e010      	b.n	80070b2 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007090:	bf00      	nop
 8007092:	e00e      	b.n	80070b2 <USBH_Process+0x3b6>
      break;
 8007094:	bf00      	nop
 8007096:	e00c      	b.n	80070b2 <USBH_Process+0x3b6>
      break;
 8007098:	bf00      	nop
 800709a:	e00a      	b.n	80070b2 <USBH_Process+0x3b6>
    break;
 800709c:	bf00      	nop
 800709e:	e008      	b.n	80070b2 <USBH_Process+0x3b6>
      break;
 80070a0:	bf00      	nop
 80070a2:	e006      	b.n	80070b2 <USBH_Process+0x3b6>
      break;
 80070a4:	bf00      	nop
 80070a6:	e004      	b.n	80070b2 <USBH_Process+0x3b6>
      break;
 80070a8:	bf00      	nop
 80070aa:	e002      	b.n	80070b2 <USBH_Process+0x3b6>
      break;
 80070ac:	bf00      	nop
 80070ae:	e000      	b.n	80070b2 <USBH_Process+0x3b6>
      break;
 80070b0:	bf00      	nop
  }
  return USBH_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b088      	sub	sp, #32
 80070c0:	af04      	add	r7, sp, #16
 80070c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80070c4:	2301      	movs	r3, #1
 80070c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80070c8:	2301      	movs	r3, #1
 80070ca:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	785b      	ldrb	r3, [r3, #1]
 80070d0:	2b07      	cmp	r3, #7
 80070d2:	f200 81c1 	bhi.w	8007458 <USBH_HandleEnum+0x39c>
 80070d6:	a201      	add	r2, pc, #4	; (adr r2, 80070dc <USBH_HandleEnum+0x20>)
 80070d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070dc:	080070fd 	.word	0x080070fd
 80070e0:	080071bb 	.word	0x080071bb
 80070e4:	08007225 	.word	0x08007225
 80070e8:	080072b3 	.word	0x080072b3
 80070ec:	0800731d 	.word	0x0800731d
 80070f0:	0800738d 	.word	0x0800738d
 80070f4:	080073d3 	.word	0x080073d3
 80070f8:	08007419 	.word	0x08007419
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80070fc:	2108      	movs	r1, #8
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fa50 	bl	80075a4 <USBH_Get_DevDesc>
 8007104:	4603      	mov	r3, r0
 8007106:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007108:	7bbb      	ldrb	r3, [r7, #14]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d130      	bne.n	8007170 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	7919      	ldrb	r1, [r3, #4]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007132:	b292      	uxth	r2, r2
 8007134:	9202      	str	r2, [sp, #8]
 8007136:	2200      	movs	r2, #0
 8007138:	9201      	str	r2, [sp, #4]
 800713a:	9300      	str	r3, [sp, #0]
 800713c:	4603      	mov	r3, r0
 800713e:	2280      	movs	r2, #128	; 0x80
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 ff77 	bl	8008034 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	7959      	ldrb	r1, [r3, #5]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800715a:	b292      	uxth	r2, r2
 800715c:	9202      	str	r2, [sp, #8]
 800715e:	2200      	movs	r2, #0
 8007160:	9201      	str	r2, [sp, #4]
 8007162:	9300      	str	r3, [sp, #0]
 8007164:	4603      	mov	r3, r0
 8007166:	2200      	movs	r2, #0
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 ff63 	bl	8008034 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800716e:	e175      	b.n	800745c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007170:	7bbb      	ldrb	r3, [r7, #14]
 8007172:	2b03      	cmp	r3, #3
 8007174:	f040 8172 	bne.w	800745c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800717e:	3301      	adds	r3, #1
 8007180:	b2da      	uxtb	r2, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800718e:	2b03      	cmp	r3, #3
 8007190:	d903      	bls.n	800719a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	220d      	movs	r2, #13
 8007196:	701a      	strb	r2, [r3, #0]
      break;
 8007198:	e160      	b.n	800745c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	795b      	ldrb	r3, [r3, #5]
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 ff97 	bl	80080d4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	791b      	ldrb	r3, [r3, #4]
 80071aa:	4619      	mov	r1, r3
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 ff91 	bl	80080d4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	701a      	strb	r2, [r3, #0]
      break;
 80071b8:	e150      	b.n	800745c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80071ba:	2112      	movs	r1, #18
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f9f1 	bl	80075a4 <USBH_Get_DevDesc>
 80071c2:	4603      	mov	r3, r0
 80071c4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80071c6:	7bbb      	ldrb	r3, [r7, #14]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d103      	bne.n	80071d4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2202      	movs	r2, #2
 80071d0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80071d2:	e145      	b.n	8007460 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071d4:	7bbb      	ldrb	r3, [r7, #14]
 80071d6:	2b03      	cmp	r3, #3
 80071d8:	f040 8142 	bne.w	8007460 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071e2:	3301      	adds	r3, #1
 80071e4:	b2da      	uxtb	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071f2:	2b03      	cmp	r3, #3
 80071f4:	d903      	bls.n	80071fe <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	220d      	movs	r2, #13
 80071fa:	701a      	strb	r2, [r3, #0]
      break;
 80071fc:	e130      	b.n	8007460 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	795b      	ldrb	r3, [r3, #5]
 8007202:	4619      	mov	r1, r3
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 ff65 	bl	80080d4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	791b      	ldrb	r3, [r3, #4]
 800720e:	4619      	mov	r1, r3
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 ff5f 	bl	80080d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	701a      	strb	r2, [r3, #0]
      break;
 8007222:	e11d      	b.n	8007460 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007224:	2101      	movs	r1, #1
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 fa68 	bl	80076fc <USBH_SetAddress>
 800722c:	4603      	mov	r3, r0
 800722e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007230:	7bbb      	ldrb	r3, [r7, #14]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d132      	bne.n	800729c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007236:	2002      	movs	r0, #2
 8007238:	f001 fa42 	bl	80086c0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2203      	movs	r2, #3
 8007248:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	7919      	ldrb	r1, [r3, #4]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800725e:	b292      	uxth	r2, r2
 8007260:	9202      	str	r2, [sp, #8]
 8007262:	2200      	movs	r2, #0
 8007264:	9201      	str	r2, [sp, #4]
 8007266:	9300      	str	r3, [sp, #0]
 8007268:	4603      	mov	r3, r0
 800726a:	2280      	movs	r2, #128	; 0x80
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fee1 	bl	8008034 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	7959      	ldrb	r1, [r3, #5]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007286:	b292      	uxth	r2, r2
 8007288:	9202      	str	r2, [sp, #8]
 800728a:	2200      	movs	r2, #0
 800728c:	9201      	str	r2, [sp, #4]
 800728e:	9300      	str	r3, [sp, #0]
 8007290:	4603      	mov	r3, r0
 8007292:	2200      	movs	r2, #0
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 fecd 	bl	8008034 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800729a:	e0e3      	b.n	8007464 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800729c:	7bbb      	ldrb	r3, [r7, #14]
 800729e:	2b03      	cmp	r3, #3
 80072a0:	f040 80e0 	bne.w	8007464 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	220d      	movs	r2, #13
 80072a8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	705a      	strb	r2, [r3, #1]
      break;
 80072b0:	e0d8      	b.n	8007464 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80072b2:	2109      	movs	r1, #9
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 f99d 	bl	80075f4 <USBH_Get_CfgDesc>
 80072ba:	4603      	mov	r3, r0
 80072bc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80072be:	7bbb      	ldrb	r3, [r7, #14]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d103      	bne.n	80072cc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2204      	movs	r2, #4
 80072c8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80072ca:	e0cd      	b.n	8007468 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072cc:	7bbb      	ldrb	r3, [r7, #14]
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	f040 80ca 	bne.w	8007468 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072da:	3301      	adds	r3, #1
 80072dc:	b2da      	uxtb	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072ea:	2b03      	cmp	r3, #3
 80072ec:	d903      	bls.n	80072f6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	220d      	movs	r2, #13
 80072f2:	701a      	strb	r2, [r3, #0]
      break;
 80072f4:	e0b8      	b.n	8007468 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	795b      	ldrb	r3, [r3, #5]
 80072fa:	4619      	mov	r1, r3
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fee9 	bl	80080d4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	791b      	ldrb	r3, [r3, #4]
 8007306:	4619      	mov	r1, r3
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 fee3 	bl	80080d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	701a      	strb	r2, [r3, #0]
      break;
 800731a:	e0a5      	b.n	8007468 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007322:	4619      	mov	r1, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f965 	bl	80075f4 <USBH_Get_CfgDesc>
 800732a:	4603      	mov	r3, r0
 800732c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800732e:	7bbb      	ldrb	r3, [r7, #14]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d103      	bne.n	800733c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2205      	movs	r2, #5
 8007338:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800733a:	e097      	b.n	800746c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800733c:	7bbb      	ldrb	r3, [r7, #14]
 800733e:	2b03      	cmp	r3, #3
 8007340:	f040 8094 	bne.w	800746c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800734a:	3301      	adds	r3, #1
 800734c:	b2da      	uxtb	r2, r3
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800735a:	2b03      	cmp	r3, #3
 800735c:	d903      	bls.n	8007366 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	220d      	movs	r2, #13
 8007362:	701a      	strb	r2, [r3, #0]
      break;
 8007364:	e082      	b.n	800746c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	795b      	ldrb	r3, [r3, #5]
 800736a:	4619      	mov	r1, r3
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 feb1 	bl	80080d4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	791b      	ldrb	r3, [r3, #4]
 8007376:	4619      	mov	r1, r3
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 feab 	bl	80080d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	701a      	strb	r2, [r3, #0]
      break;
 800738a:	e06f      	b.n	800746c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007392:	2b00      	cmp	r3, #0
 8007394:	d019      	beq.n	80073ca <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80073a2:	23ff      	movs	r3, #255	; 0xff
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f949 	bl	800763c <USBH_Get_StringDesc>
 80073aa:	4603      	mov	r3, r0
 80073ac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80073ae:	7bbb      	ldrb	r3, [r7, #14]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d103      	bne.n	80073bc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2206      	movs	r2, #6
 80073b8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80073ba:	e059      	b.n	8007470 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073bc:	7bbb      	ldrb	r3, [r7, #14]
 80073be:	2b03      	cmp	r3, #3
 80073c0:	d156      	bne.n	8007470 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2206      	movs	r2, #6
 80073c6:	705a      	strb	r2, [r3, #1]
      break;
 80073c8:	e052      	b.n	8007470 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2206      	movs	r2, #6
 80073ce:	705a      	strb	r2, [r3, #1]
      break;
 80073d0:	e04e      	b.n	8007470 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d019      	beq.n	8007410 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80073e8:	23ff      	movs	r3, #255	; 0xff
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f926 	bl	800763c <USBH_Get_StringDesc>
 80073f0:	4603      	mov	r3, r0
 80073f2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80073f4:	7bbb      	ldrb	r3, [r7, #14]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d103      	bne.n	8007402 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2207      	movs	r2, #7
 80073fe:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007400:	e038      	b.n	8007474 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007402:	7bbb      	ldrb	r3, [r7, #14]
 8007404:	2b03      	cmp	r3, #3
 8007406:	d135      	bne.n	8007474 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2207      	movs	r2, #7
 800740c:	705a      	strb	r2, [r3, #1]
      break;
 800740e:	e031      	b.n	8007474 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2207      	movs	r2, #7
 8007414:	705a      	strb	r2, [r3, #1]
      break;
 8007416:	e02d      	b.n	8007474 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800741e:	2b00      	cmp	r3, #0
 8007420:	d017      	beq.n	8007452 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800742e:	23ff      	movs	r3, #255	; 0xff
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f903 	bl	800763c <USBH_Get_StringDesc>
 8007436:	4603      	mov	r3, r0
 8007438:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800743a:	7bbb      	ldrb	r3, [r7, #14]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d102      	bne.n	8007446 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007440:	2300      	movs	r3, #0
 8007442:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007444:	e018      	b.n	8007478 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007446:	7bbb      	ldrb	r3, [r7, #14]
 8007448:	2b03      	cmp	r3, #3
 800744a:	d115      	bne.n	8007478 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800744c:	2300      	movs	r3, #0
 800744e:	73fb      	strb	r3, [r7, #15]
      break;
 8007450:	e012      	b.n	8007478 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007452:	2300      	movs	r3, #0
 8007454:	73fb      	strb	r3, [r7, #15]
      break;
 8007456:	e00f      	b.n	8007478 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007458:	bf00      	nop
 800745a:	e00e      	b.n	800747a <USBH_HandleEnum+0x3be>
      break;
 800745c:	bf00      	nop
 800745e:	e00c      	b.n	800747a <USBH_HandleEnum+0x3be>
      break;
 8007460:	bf00      	nop
 8007462:	e00a      	b.n	800747a <USBH_HandleEnum+0x3be>
      break;
 8007464:	bf00      	nop
 8007466:	e008      	b.n	800747a <USBH_HandleEnum+0x3be>
      break;
 8007468:	bf00      	nop
 800746a:	e006      	b.n	800747a <USBH_HandleEnum+0x3be>
      break;
 800746c:	bf00      	nop
 800746e:	e004      	b.n	800747a <USBH_HandleEnum+0x3be>
      break;
 8007470:	bf00      	nop
 8007472:	e002      	b.n	800747a <USBH_HandleEnum+0x3be>
      break;
 8007474:	bf00      	nop
 8007476:	e000      	b.n	800747a <USBH_HandleEnum+0x3be>
      break;
 8007478:	bf00      	nop
  }
  return Status;
 800747a:	7bfb      	ldrb	r3, [r7, #15]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	683a      	ldr	r2, [r7, #0]
 8007492:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007496:	bf00      	nop
 8007498:	370c      	adds	r7, #12
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr

080074a2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b082      	sub	sp, #8
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80074b0:	1c5a      	adds	r2, r3, #1
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f804 	bl	80074c6 <USBH_HandleSof>
}
 80074be:	bf00      	nop
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b082      	sub	sp, #8
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b0b      	cmp	r3, #11
 80074d6:	d10a      	bne.n	80074ee <USBH_HandleSof+0x28>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d005      	beq.n	80074ee <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	4798      	blx	r3
  }
}
 80074ee:	bf00      	nop
 80074f0:	3708      	adds	r7, #8
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b083      	sub	sp, #12
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2201      	movs	r2, #1
 8007502:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007506:	bf00      	nop
}
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007512:	b480      	push	{r7}
 8007514:	b083      	sub	sp, #12
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007522:	bf00      	nop
}
 8007524:	370c      	adds	r7, #12
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800752e:	b480      	push	{r7}
 8007530:	b083      	sub	sp, #12
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 ff56 	bl	800842e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	791b      	ldrb	r3, [r3, #4]
 8007586:	4619      	mov	r1, r3
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fda3 	bl	80080d4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	795b      	ldrb	r3, [r3, #5]
 8007592:	4619      	mov	r1, r3
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 fd9d 	bl	80080d4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af02      	add	r7, sp, #8
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	460b      	mov	r3, r1
 80075ae:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80075b6:	78fb      	ldrb	r3, [r7, #3]
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	9300      	str	r3, [sp, #0]
 80075bc:	4613      	mov	r3, r2
 80075be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075c2:	2100      	movs	r1, #0
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 f864 	bl	8007692 <USBH_GetDescriptor>
 80075ca:	4603      	mov	r3, r0
 80075cc:	73fb      	strb	r3, [r7, #15]
 80075ce:	7bfb      	ldrb	r3, [r7, #15]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10a      	bne.n	80075ea <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f203 3026 	addw	r0, r3, #806	; 0x326
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80075e0:	78fa      	ldrb	r2, [r7, #3]
 80075e2:	b292      	uxth	r2, r2
 80075e4:	4619      	mov	r1, r3
 80075e6:	f000 f918 	bl	800781a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80075ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b086      	sub	sp, #24
 80075f8:	af02      	add	r7, sp, #8
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	460b      	mov	r3, r1
 80075fe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	331c      	adds	r3, #28
 8007604:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007606:	887b      	ldrh	r3, [r7, #2]
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007610:	2100      	movs	r1, #0
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f83d 	bl	8007692 <USBH_GetDescriptor>
 8007618:	4603      	mov	r3, r0
 800761a:	72fb      	strb	r3, [r7, #11]
 800761c:	7afb      	ldrb	r3, [r7, #11]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d107      	bne.n	8007632 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007628:	887a      	ldrh	r2, [r7, #2]
 800762a:	68f9      	ldr	r1, [r7, #12]
 800762c:	4618      	mov	r0, r3
 800762e:	f000 f964 	bl	80078fa <USBH_ParseCfgDesc>
  }

  return status;
 8007632:	7afb      	ldrb	r3, [r7, #11]
}
 8007634:	4618      	mov	r0, r3
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b088      	sub	sp, #32
 8007640:	af02      	add	r7, sp, #8
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	607a      	str	r2, [r7, #4]
 8007646:	461a      	mov	r2, r3
 8007648:	460b      	mov	r3, r1
 800764a:	72fb      	strb	r3, [r7, #11]
 800764c:	4613      	mov	r3, r2
 800764e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007650:	7afb      	ldrb	r3, [r7, #11]
 8007652:	b29b      	uxth	r3, r3
 8007654:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007658:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007660:	893b      	ldrh	r3, [r7, #8]
 8007662:	9300      	str	r3, [sp, #0]
 8007664:	460b      	mov	r3, r1
 8007666:	2100      	movs	r1, #0
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f000 f812 	bl	8007692 <USBH_GetDescriptor>
 800766e:	4603      	mov	r3, r0
 8007670:	75fb      	strb	r3, [r7, #23]
 8007672:	7dfb      	ldrb	r3, [r7, #23]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d107      	bne.n	8007688 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800767e:	893a      	ldrh	r2, [r7, #8]
 8007680:	6879      	ldr	r1, [r7, #4]
 8007682:	4618      	mov	r0, r3
 8007684:	f000 fa37 	bl	8007af6 <USBH_ParseStringDesc>
  }

  return status;
 8007688:	7dfb      	ldrb	r3, [r7, #23]
}
 800768a:	4618      	mov	r0, r3
 800768c:	3718      	adds	r7, #24
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b084      	sub	sp, #16
 8007696:	af00      	add	r7, sp, #0
 8007698:	60f8      	str	r0, [r7, #12]
 800769a:	607b      	str	r3, [r7, #4]
 800769c:	460b      	mov	r3, r1
 800769e:	72fb      	strb	r3, [r7, #11]
 80076a0:	4613      	mov	r3, r2
 80076a2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	789b      	ldrb	r3, [r3, #2]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d11c      	bne.n	80076e6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80076ac:	7afb      	ldrb	r3, [r7, #11]
 80076ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80076b2:	b2da      	uxtb	r2, r3
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2206      	movs	r2, #6
 80076bc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	893a      	ldrh	r2, [r7, #8]
 80076c2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80076c4:	893b      	ldrh	r3, [r7, #8]
 80076c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80076ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076ce:	d104      	bne.n	80076da <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f240 4209 	movw	r2, #1033	; 0x409
 80076d6:	829a      	strh	r2, [r3, #20]
 80076d8:	e002      	b.n	80076e0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2200      	movs	r2, #0
 80076de:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	8b3a      	ldrh	r2, [r7, #24]
 80076e4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80076e6:	8b3b      	ldrh	r3, [r7, #24]
 80076e8:	461a      	mov	r2, r3
 80076ea:	6879      	ldr	r1, [r7, #4]
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f000 fa50 	bl	8007b92 <USBH_CtlReq>
 80076f2:	4603      	mov	r3, r0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3710      	adds	r7, #16
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	460b      	mov	r3, r1
 8007706:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	789b      	ldrb	r3, [r3, #2]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d10f      	bne.n	8007730 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2205      	movs	r2, #5
 800771a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800771c:	78fb      	ldrb	r3, [r7, #3]
 800771e:	b29a      	uxth	r2, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007730:	2200      	movs	r2, #0
 8007732:	2100      	movs	r1, #0
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 fa2c 	bl	8007b92 <USBH_CtlReq>
 800773a:	4603      	mov	r3, r0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3708      	adds	r7, #8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	460b      	mov	r3, r1
 800774e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	789b      	ldrb	r3, [r3, #2]
 8007754:	2b01      	cmp	r3, #1
 8007756:	d10e      	bne.n	8007776 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2209      	movs	r2, #9
 8007762:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	887a      	ldrh	r2, [r7, #2]
 8007768:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007776:	2200      	movs	r2, #0
 8007778:	2100      	movs	r1, #0
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fa09 	bl	8007b92 <USBH_CtlReq>
 8007780:	4603      	mov	r3, r0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3708      	adds	r7, #8
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b082      	sub	sp, #8
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
 8007792:	460b      	mov	r3, r1
 8007794:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	789b      	ldrb	r3, [r3, #2]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d10f      	bne.n	80077be <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2203      	movs	r2, #3
 80077a8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80077aa:	78fb      	ldrb	r3, [r7, #3]
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80077be:	2200      	movs	r2, #0
 80077c0:	2100      	movs	r1, #0
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f9e5 	bl	8007b92 <USBH_CtlReq>
 80077c8:	4603      	mov	r3, r0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3708      	adds	r7, #8
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b082      	sub	sp, #8
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
 80077da:	460b      	mov	r3, r1
 80077dc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	789b      	ldrb	r3, [r3, #2]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d10f      	bne.n	8007806 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2202      	movs	r2, #2
 80077ea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80077f8:	78fb      	ldrb	r3, [r7, #3]
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007806:	2200      	movs	r2, #0
 8007808:	2100      	movs	r1, #0
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f9c1 	bl	8007b92 <USBH_CtlReq>
 8007810:	4603      	mov	r3, r0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800781a:	b480      	push	{r7}
 800781c:	b085      	sub	sp, #20
 800781e:	af00      	add	r7, sp, #0
 8007820:	60f8      	str	r0, [r7, #12]
 8007822:	60b9      	str	r1, [r7, #8]
 8007824:	4613      	mov	r3, r2
 8007826:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	781a      	ldrb	r2, [r3, #0]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	785a      	ldrb	r2, [r3, #1]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	3302      	adds	r3, #2
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	b29a      	uxth	r2, r3
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	3303      	adds	r3, #3
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	b29b      	uxth	r3, r3
 8007848:	021b      	lsls	r3, r3, #8
 800784a:	b29b      	uxth	r3, r3
 800784c:	4313      	orrs	r3, r2
 800784e:	b29a      	uxth	r2, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	791a      	ldrb	r2, [r3, #4]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	795a      	ldrb	r2, [r3, #5]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	799a      	ldrb	r2, [r3, #6]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	79da      	ldrb	r2, [r3, #7]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007874:	88fb      	ldrh	r3, [r7, #6]
 8007876:	2b08      	cmp	r3, #8
 8007878:	d939      	bls.n	80078ee <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	3308      	adds	r3, #8
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	b29a      	uxth	r2, r3
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	3309      	adds	r3, #9
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	b29b      	uxth	r3, r3
 800788a:	021b      	lsls	r3, r3, #8
 800788c:	b29b      	uxth	r3, r3
 800788e:	4313      	orrs	r3, r2
 8007890:	b29a      	uxth	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	330a      	adds	r3, #10
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	b29a      	uxth	r2, r3
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	330b      	adds	r3, #11
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	021b      	lsls	r3, r3, #8
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	4313      	orrs	r3, r2
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	330c      	adds	r3, #12
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	330d      	adds	r3, #13
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	021b      	lsls	r3, r3, #8
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	4313      	orrs	r3, r2
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	7b9a      	ldrb	r2, [r3, #14]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	7bda      	ldrb	r2, [r3, #15]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	7c1a      	ldrb	r2, [r3, #16]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	7c5a      	ldrb	r2, [r3, #17]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	745a      	strb	r2, [r3, #17]
  }
}
 80078ee:	bf00      	nop
 80078f0:	3714      	adds	r7, #20
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr

080078fa <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b08a      	sub	sp, #40	; 0x28
 80078fe:	af00      	add	r7, sp, #0
 8007900:	60f8      	str	r0, [r7, #12]
 8007902:	60b9      	str	r1, [r7, #8]
 8007904:	4613      	mov	r3, r2
 8007906:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800790c:	2300      	movs	r3, #0
 800790e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007912:	2300      	movs	r3, #0
 8007914:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	781a      	ldrb	r2, [r3, #0]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	785a      	ldrb	r2, [r3, #1]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	3302      	adds	r3, #2
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	b29a      	uxth	r2, r3
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	3303      	adds	r3, #3
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	b29b      	uxth	r3, r3
 800793c:	021b      	lsls	r3, r3, #8
 800793e:	b29b      	uxth	r3, r3
 8007940:	4313      	orrs	r3, r2
 8007942:	b29a      	uxth	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	791a      	ldrb	r2, [r3, #4]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	795a      	ldrb	r2, [r3, #5]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	799a      	ldrb	r2, [r3, #6]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	79da      	ldrb	r2, [r3, #7]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	7a1a      	ldrb	r2, [r3, #8]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007970:	88fb      	ldrh	r3, [r7, #6]
 8007972:	2b09      	cmp	r3, #9
 8007974:	d95f      	bls.n	8007a36 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007976:	2309      	movs	r3, #9
 8007978:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800797a:	2300      	movs	r3, #0
 800797c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800797e:	e051      	b.n	8007a24 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007980:	f107 0316 	add.w	r3, r7, #22
 8007984:	4619      	mov	r1, r3
 8007986:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007988:	f000 f8e8 	bl	8007b5c <USBH_GetNextDesc>
 800798c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800798e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007990:	785b      	ldrb	r3, [r3, #1]
 8007992:	2b04      	cmp	r3, #4
 8007994:	d146      	bne.n	8007a24 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007996:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800799a:	221a      	movs	r2, #26
 800799c:	fb02 f303 	mul.w	r3, r2, r3
 80079a0:	3308      	adds	r3, #8
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	4413      	add	r3, r2
 80079a6:	3302      	adds	r3, #2
 80079a8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80079aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079ac:	69f8      	ldr	r0, [r7, #28]
 80079ae:	f000 f846 	bl	8007a3e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80079b2:	2300      	movs	r3, #0
 80079b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80079b8:	2300      	movs	r3, #0
 80079ba:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80079bc:	e022      	b.n	8007a04 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80079be:	f107 0316 	add.w	r3, r7, #22
 80079c2:	4619      	mov	r1, r3
 80079c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079c6:	f000 f8c9 	bl	8007b5c <USBH_GetNextDesc>
 80079ca:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80079cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ce:	785b      	ldrb	r3, [r3, #1]
 80079d0:	2b05      	cmp	r3, #5
 80079d2:	d117      	bne.n	8007a04 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80079d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079d8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80079dc:	3201      	adds	r2, #1
 80079de:	00d2      	lsls	r2, r2, #3
 80079e0:	211a      	movs	r1, #26
 80079e2:	fb01 f303 	mul.w	r3, r1, r3
 80079e6:	4413      	add	r3, r2
 80079e8:	3308      	adds	r3, #8
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	4413      	add	r3, r2
 80079ee:	3304      	adds	r3, #4
 80079f0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80079f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079f4:	69b8      	ldr	r0, [r7, #24]
 80079f6:	f000 f851 	bl	8007a9c <USBH_ParseEPDesc>
            ep_ix++;
 80079fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80079fe:	3301      	adds	r3, #1
 8007a00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	791b      	ldrb	r3, [r3, #4]
 8007a08:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d204      	bcs.n	8007a1a <USBH_ParseCfgDesc+0x120>
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	885a      	ldrh	r2, [r3, #2]
 8007a14:	8afb      	ldrh	r3, [r7, #22]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d8d1      	bhi.n	80079be <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007a1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a1e:	3301      	adds	r3, #1
 8007a20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007a24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d804      	bhi.n	8007a36 <USBH_ParseCfgDesc+0x13c>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	885a      	ldrh	r2, [r3, #2]
 8007a30:	8afb      	ldrh	r3, [r7, #22]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d8a4      	bhi.n	8007980 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007a36:	bf00      	nop
 8007a38:	3728      	adds	r7, #40	; 0x28
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007a3e:	b480      	push	{r7}
 8007a40:	b083      	sub	sp, #12
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
 8007a46:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	781a      	ldrb	r2, [r3, #0]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	785a      	ldrb	r2, [r3, #1]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	789a      	ldrb	r2, [r3, #2]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	78da      	ldrb	r2, [r3, #3]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	791a      	ldrb	r2, [r3, #4]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	795a      	ldrb	r2, [r3, #5]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	799a      	ldrb	r2, [r3, #6]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	79da      	ldrb	r2, [r3, #7]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	7a1a      	ldrb	r2, [r3, #8]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	721a      	strb	r2, [r3, #8]
}
 8007a90:	bf00      	nop
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	781a      	ldrb	r2, [r3, #0]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	785a      	ldrb	r2, [r3, #1]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	789a      	ldrb	r2, [r3, #2]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	78da      	ldrb	r2, [r3, #3]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	3304      	adds	r3, #4
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	3305      	adds	r3, #5
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	021b      	lsls	r3, r3, #8
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	4313      	orrs	r3, r2
 8007adc:	b29a      	uxth	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	799a      	ldrb	r2, [r3, #6]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	719a      	strb	r2, [r3, #6]
}
 8007aea:	bf00      	nop
 8007aec:	370c      	adds	r7, #12
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr

08007af6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007af6:	b480      	push	{r7}
 8007af8:	b087      	sub	sp, #28
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	60f8      	str	r0, [r7, #12]
 8007afe:	60b9      	str	r1, [r7, #8]
 8007b00:	4613      	mov	r3, r2
 8007b02:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	3301      	adds	r3, #1
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	2b03      	cmp	r3, #3
 8007b0c:	d120      	bne.n	8007b50 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	1e9a      	subs	r2, r3, #2
 8007b14:	88fb      	ldrh	r3, [r7, #6]
 8007b16:	4293      	cmp	r3, r2
 8007b18:	bf28      	it	cs
 8007b1a:	4613      	movcs	r3, r2
 8007b1c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	3302      	adds	r3, #2
 8007b22:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007b24:	2300      	movs	r3, #0
 8007b26:	82fb      	strh	r3, [r7, #22]
 8007b28:	e00b      	b.n	8007b42 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007b2a:	8afb      	ldrh	r3, [r7, #22]
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	4413      	add	r3, r2
 8007b30:	781a      	ldrb	r2, [r3, #0]
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007b3c:	8afb      	ldrh	r3, [r7, #22]
 8007b3e:	3302      	adds	r3, #2
 8007b40:	82fb      	strh	r3, [r7, #22]
 8007b42:	8afa      	ldrh	r2, [r7, #22]
 8007b44:	8abb      	ldrh	r3, [r7, #20]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d3ef      	bcc.n	8007b2a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	701a      	strb	r2, [r3, #0]
  }
}
 8007b50:	bf00      	nop
 8007b52:	371c      	adds	r7, #28
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b085      	sub	sp, #20
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	881a      	ldrh	r2, [r3, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	4413      	add	r3, r2
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4413      	add	r3, r2
 8007b82:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007b84:	68fb      	ldr	r3, [r7, #12]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3714      	adds	r7, #20
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr

08007b92 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b086      	sub	sp, #24
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	60f8      	str	r0, [r7, #12]
 8007b9a:	60b9      	str	r1, [r7, #8]
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	789b      	ldrb	r3, [r3, #2]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d002      	beq.n	8007bb2 <USBH_CtlReq+0x20>
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	d00f      	beq.n	8007bd0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007bb0:	e027      	b.n	8007c02 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	68ba      	ldr	r2, [r7, #8]
 8007bb6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	88fa      	ldrh	r2, [r7, #6]
 8007bbc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	75fb      	strb	r3, [r7, #23]
      break;
 8007bce:	e018      	b.n	8007c02 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f000 f81b 	bl	8007c0c <USBH_HandleControl>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007bda:	7dfb      	ldrb	r3, [r7, #23]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d002      	beq.n	8007be6 <USBH_CtlReq+0x54>
 8007be0:	7dfb      	ldrb	r3, [r7, #23]
 8007be2:	2b03      	cmp	r3, #3
 8007be4:	d106      	bne.n	8007bf4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2201      	movs	r2, #1
 8007bea:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	761a      	strb	r2, [r3, #24]
      break;
 8007bf2:	e005      	b.n	8007c00 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007bf4:	7dfb      	ldrb	r3, [r7, #23]
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d102      	bne.n	8007c00 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	709a      	strb	r2, [r3, #2]
      break;
 8007c00:	bf00      	nop
  }
  return status;
 8007c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3718      	adds	r7, #24
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b086      	sub	sp, #24
 8007c10:	af02      	add	r7, sp, #8
 8007c12:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007c14:	2301      	movs	r3, #1
 8007c16:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	7e1b      	ldrb	r3, [r3, #24]
 8007c20:	3b01      	subs	r3, #1
 8007c22:	2b0a      	cmp	r3, #10
 8007c24:	f200 8156 	bhi.w	8007ed4 <USBH_HandleControl+0x2c8>
 8007c28:	a201      	add	r2, pc, #4	; (adr r2, 8007c30 <USBH_HandleControl+0x24>)
 8007c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c2e:	bf00      	nop
 8007c30:	08007c5d 	.word	0x08007c5d
 8007c34:	08007c77 	.word	0x08007c77
 8007c38:	08007ce1 	.word	0x08007ce1
 8007c3c:	08007d07 	.word	0x08007d07
 8007c40:	08007d3f 	.word	0x08007d3f
 8007c44:	08007d69 	.word	0x08007d69
 8007c48:	08007dbb 	.word	0x08007dbb
 8007c4c:	08007ddd 	.word	0x08007ddd
 8007c50:	08007e19 	.word	0x08007e19
 8007c54:	08007e3f 	.word	0x08007e3f
 8007c58:	08007e7d 	.word	0x08007e7d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f103 0110 	add.w	r1, r3, #16
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	795b      	ldrb	r3, [r3, #5]
 8007c66:	461a      	mov	r2, r3
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f943 	bl	8007ef4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2202      	movs	r2, #2
 8007c72:	761a      	strb	r2, [r3, #24]
      break;
 8007c74:	e139      	b.n	8007eea <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	795b      	ldrb	r3, [r3, #5]
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 fcc5 	bl	800860c <USBH_LL_GetURBState>
 8007c82:	4603      	mov	r3, r0
 8007c84:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007c86:	7bbb      	ldrb	r3, [r7, #14]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d11e      	bne.n	8007cca <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	7c1b      	ldrb	r3, [r3, #16]
 8007c90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007c94:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	8adb      	ldrh	r3, [r3, #22]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00a      	beq.n	8007cb4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007c9e:	7b7b      	ldrb	r3, [r7, #13]
 8007ca0:	2b80      	cmp	r3, #128	; 0x80
 8007ca2:	d103      	bne.n	8007cac <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2203      	movs	r2, #3
 8007ca8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007caa:	e115      	b.n	8007ed8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2205      	movs	r2, #5
 8007cb0:	761a      	strb	r2, [r3, #24]
      break;
 8007cb2:	e111      	b.n	8007ed8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007cb4:	7b7b      	ldrb	r3, [r7, #13]
 8007cb6:	2b80      	cmp	r3, #128	; 0x80
 8007cb8:	d103      	bne.n	8007cc2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2209      	movs	r2, #9
 8007cbe:	761a      	strb	r2, [r3, #24]
      break;
 8007cc0:	e10a      	b.n	8007ed8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2207      	movs	r2, #7
 8007cc6:	761a      	strb	r2, [r3, #24]
      break;
 8007cc8:	e106      	b.n	8007ed8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007cca:	7bbb      	ldrb	r3, [r7, #14]
 8007ccc:	2b04      	cmp	r3, #4
 8007cce:	d003      	beq.n	8007cd8 <USBH_HandleControl+0xcc>
 8007cd0:	7bbb      	ldrb	r3, [r7, #14]
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	f040 8100 	bne.w	8007ed8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	220b      	movs	r2, #11
 8007cdc:	761a      	strb	r2, [r3, #24]
      break;
 8007cde:	e0fb      	b.n	8007ed8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ce6:	b29a      	uxth	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6899      	ldr	r1, [r3, #8]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	899a      	ldrh	r2, [r3, #12]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	791b      	ldrb	r3, [r3, #4]
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f93a 	bl	8007f72 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2204      	movs	r2, #4
 8007d02:	761a      	strb	r2, [r3, #24]
      break;
 8007d04:	e0f1      	b.n	8007eea <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	791b      	ldrb	r3, [r3, #4]
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 fc7d 	bl	800860c <USBH_LL_GetURBState>
 8007d12:	4603      	mov	r3, r0
 8007d14:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007d16:	7bbb      	ldrb	r3, [r7, #14]
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d102      	bne.n	8007d22 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2209      	movs	r2, #9
 8007d20:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007d22:	7bbb      	ldrb	r3, [r7, #14]
 8007d24:	2b05      	cmp	r3, #5
 8007d26:	d102      	bne.n	8007d2e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007d2c:	e0d6      	b.n	8007edc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007d2e:	7bbb      	ldrb	r3, [r7, #14]
 8007d30:	2b04      	cmp	r3, #4
 8007d32:	f040 80d3 	bne.w	8007edc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	220b      	movs	r2, #11
 8007d3a:	761a      	strb	r2, [r3, #24]
      break;
 8007d3c:	e0ce      	b.n	8007edc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6899      	ldr	r1, [r3, #8]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	899a      	ldrh	r2, [r3, #12]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	795b      	ldrb	r3, [r3, #5]
 8007d4a:	2001      	movs	r0, #1
 8007d4c:	9000      	str	r0, [sp, #0]
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 f8ea 	bl	8007f28 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2206      	movs	r2, #6
 8007d64:	761a      	strb	r2, [r3, #24]
      break;
 8007d66:	e0c0      	b.n	8007eea <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	795b      	ldrb	r3, [r3, #5]
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fc4c 	bl	800860c <USBH_LL_GetURBState>
 8007d74:	4603      	mov	r3, r0
 8007d76:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007d78:	7bbb      	ldrb	r3, [r7, #14]
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d103      	bne.n	8007d86 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2207      	movs	r2, #7
 8007d82:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007d84:	e0ac      	b.n	8007ee0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007d86:	7bbb      	ldrb	r3, [r7, #14]
 8007d88:	2b05      	cmp	r3, #5
 8007d8a:	d105      	bne.n	8007d98 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	220c      	movs	r2, #12
 8007d90:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007d92:	2303      	movs	r3, #3
 8007d94:	73fb      	strb	r3, [r7, #15]
      break;
 8007d96:	e0a3      	b.n	8007ee0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007d98:	7bbb      	ldrb	r3, [r7, #14]
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	d103      	bne.n	8007da6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2205      	movs	r2, #5
 8007da2:	761a      	strb	r2, [r3, #24]
      break;
 8007da4:	e09c      	b.n	8007ee0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007da6:	7bbb      	ldrb	r3, [r7, #14]
 8007da8:	2b04      	cmp	r3, #4
 8007daa:	f040 8099 	bne.w	8007ee0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	220b      	movs	r2, #11
 8007db2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007db4:	2302      	movs	r3, #2
 8007db6:	73fb      	strb	r3, [r7, #15]
      break;
 8007db8:	e092      	b.n	8007ee0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	791b      	ldrb	r3, [r3, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f8d5 	bl	8007f72 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007dce:	b29a      	uxth	r2, r3
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2208      	movs	r2, #8
 8007dd8:	761a      	strb	r2, [r3, #24]

      break;
 8007dda:	e086      	b.n	8007eea <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	791b      	ldrb	r3, [r3, #4]
 8007de0:	4619      	mov	r1, r3
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fc12 	bl	800860c <USBH_LL_GetURBState>
 8007de8:	4603      	mov	r3, r0
 8007dea:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007dec:	7bbb      	ldrb	r3, [r7, #14]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d105      	bne.n	8007dfe <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	220d      	movs	r2, #13
 8007df6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007dfc:	e072      	b.n	8007ee4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007dfe:	7bbb      	ldrb	r3, [r7, #14]
 8007e00:	2b04      	cmp	r3, #4
 8007e02:	d103      	bne.n	8007e0c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	220b      	movs	r2, #11
 8007e08:	761a      	strb	r2, [r3, #24]
      break;
 8007e0a:	e06b      	b.n	8007ee4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007e0c:	7bbb      	ldrb	r3, [r7, #14]
 8007e0e:	2b05      	cmp	r3, #5
 8007e10:	d168      	bne.n	8007ee4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007e12:	2303      	movs	r3, #3
 8007e14:	73fb      	strb	r3, [r7, #15]
      break;
 8007e16:	e065      	b.n	8007ee4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	795b      	ldrb	r3, [r3, #5]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	9200      	str	r2, [sp, #0]
 8007e20:	2200      	movs	r2, #0
 8007e22:	2100      	movs	r1, #0
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f87f 	bl	8007f28 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e30:	b29a      	uxth	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	220a      	movs	r2, #10
 8007e3a:	761a      	strb	r2, [r3, #24]
      break;
 8007e3c:	e055      	b.n	8007eea <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	795b      	ldrb	r3, [r3, #5]
 8007e42:	4619      	mov	r1, r3
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 fbe1 	bl	800860c <USBH_LL_GetURBState>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007e4e:	7bbb      	ldrb	r3, [r7, #14]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d105      	bne.n	8007e60 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007e54:	2300      	movs	r3, #0
 8007e56:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	220d      	movs	r2, #13
 8007e5c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007e5e:	e043      	b.n	8007ee8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007e60:	7bbb      	ldrb	r3, [r7, #14]
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d103      	bne.n	8007e6e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2209      	movs	r2, #9
 8007e6a:	761a      	strb	r2, [r3, #24]
      break;
 8007e6c:	e03c      	b.n	8007ee8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007e6e:	7bbb      	ldrb	r3, [r7, #14]
 8007e70:	2b04      	cmp	r3, #4
 8007e72:	d139      	bne.n	8007ee8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	220b      	movs	r2, #11
 8007e78:	761a      	strb	r2, [r3, #24]
      break;
 8007e7a:	e035      	b.n	8007ee8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	7e5b      	ldrb	r3, [r3, #25]
 8007e80:	3301      	adds	r3, #1
 8007e82:	b2da      	uxtb	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	765a      	strb	r2, [r3, #25]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	7e5b      	ldrb	r3, [r3, #25]
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	d806      	bhi.n	8007e9e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007e9c:	e025      	b.n	8007eea <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ea4:	2106      	movs	r1, #6
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	795b      	ldrb	r3, [r3, #5]
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f90c 	bl	80080d4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	791b      	ldrb	r3, [r3, #4]
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 f906 	bl	80080d4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007ece:	2302      	movs	r3, #2
 8007ed0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ed2:	e00a      	b.n	8007eea <USBH_HandleControl+0x2de>

    default:
      break;
 8007ed4:	bf00      	nop
 8007ed6:	e008      	b.n	8007eea <USBH_HandleControl+0x2de>
      break;
 8007ed8:	bf00      	nop
 8007eda:	e006      	b.n	8007eea <USBH_HandleControl+0x2de>
      break;
 8007edc:	bf00      	nop
 8007ede:	e004      	b.n	8007eea <USBH_HandleControl+0x2de>
      break;
 8007ee0:	bf00      	nop
 8007ee2:	e002      	b.n	8007eea <USBH_HandleControl+0x2de>
      break;
 8007ee4:	bf00      	nop
 8007ee6:	e000      	b.n	8007eea <USBH_HandleControl+0x2de>
      break;
 8007ee8:	bf00      	nop
  }

  return status;
 8007eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3710      	adds	r7, #16
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b088      	sub	sp, #32
 8007ef8:	af04      	add	r7, sp, #16
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	4613      	mov	r3, r2
 8007f00:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007f02:	79f9      	ldrb	r1, [r7, #7]
 8007f04:	2300      	movs	r3, #0
 8007f06:	9303      	str	r3, [sp, #12]
 8007f08:	2308      	movs	r3, #8
 8007f0a:	9302      	str	r3, [sp, #8]
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	9301      	str	r3, [sp, #4]
 8007f10:	2300      	movs	r3, #0
 8007f12:	9300      	str	r3, [sp, #0]
 8007f14:	2300      	movs	r3, #0
 8007f16:	2200      	movs	r2, #0
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f000 fb46 	bl	80085aa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b088      	sub	sp, #32
 8007f2c:	af04      	add	r7, sp, #16
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	4611      	mov	r1, r2
 8007f34:	461a      	mov	r2, r3
 8007f36:	460b      	mov	r3, r1
 8007f38:	80fb      	strh	r3, [r7, #6]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d001      	beq.n	8007f4c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007f4c:	7979      	ldrb	r1, [r7, #5]
 8007f4e:	7e3b      	ldrb	r3, [r7, #24]
 8007f50:	9303      	str	r3, [sp, #12]
 8007f52:	88fb      	ldrh	r3, [r7, #6]
 8007f54:	9302      	str	r3, [sp, #8]
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	9301      	str	r3, [sp, #4]
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	9300      	str	r3, [sp, #0]
 8007f5e:	2300      	movs	r3, #0
 8007f60:	2200      	movs	r2, #0
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f000 fb21 	bl	80085aa <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b088      	sub	sp, #32
 8007f76:	af04      	add	r7, sp, #16
 8007f78:	60f8      	str	r0, [r7, #12]
 8007f7a:	60b9      	str	r1, [r7, #8]
 8007f7c:	4611      	mov	r1, r2
 8007f7e:	461a      	mov	r2, r3
 8007f80:	460b      	mov	r3, r1
 8007f82:	80fb      	strh	r3, [r7, #6]
 8007f84:	4613      	mov	r3, r2
 8007f86:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007f88:	7979      	ldrb	r1, [r7, #5]
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	9303      	str	r3, [sp, #12]
 8007f8e:	88fb      	ldrh	r3, [r7, #6]
 8007f90:	9302      	str	r3, [sp, #8]
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	9301      	str	r3, [sp, #4]
 8007f96:	2301      	movs	r3, #1
 8007f98:	9300      	str	r3, [sp, #0]
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	f000 fb03 	bl	80085aa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007fa4:	2300      	movs	r3, #0

}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3710      	adds	r7, #16
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b088      	sub	sp, #32
 8007fb2:	af04      	add	r7, sp, #16
 8007fb4:	60f8      	str	r0, [r7, #12]
 8007fb6:	60b9      	str	r1, [r7, #8]
 8007fb8:	4611      	mov	r1, r2
 8007fba:	461a      	mov	r2, r3
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	80fb      	strh	r3, [r7, #6]
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d001      	beq.n	8007fd2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007fd2:	7979      	ldrb	r1, [r7, #5]
 8007fd4:	7e3b      	ldrb	r3, [r7, #24]
 8007fd6:	9303      	str	r3, [sp, #12]
 8007fd8:	88fb      	ldrh	r3, [r7, #6]
 8007fda:	9302      	str	r3, [sp, #8]
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	9301      	str	r3, [sp, #4]
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	9300      	str	r3, [sp, #0]
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f000 fade 	bl	80085aa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007fee:	2300      	movs	r3, #0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b088      	sub	sp, #32
 8007ffc:	af04      	add	r7, sp, #16
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	4611      	mov	r1, r2
 8008004:	461a      	mov	r2, r3
 8008006:	460b      	mov	r3, r1
 8008008:	80fb      	strh	r3, [r7, #6]
 800800a:	4613      	mov	r3, r2
 800800c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800800e:	7979      	ldrb	r1, [r7, #5]
 8008010:	2300      	movs	r3, #0
 8008012:	9303      	str	r3, [sp, #12]
 8008014:	88fb      	ldrh	r3, [r7, #6]
 8008016:	9302      	str	r3, [sp, #8]
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	9301      	str	r3, [sp, #4]
 800801c:	2301      	movs	r3, #1
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	2302      	movs	r3, #2
 8008022:	2201      	movs	r2, #1
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f000 fac0 	bl	80085aa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3710      	adds	r7, #16
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b086      	sub	sp, #24
 8008038:	af04      	add	r7, sp, #16
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	4608      	mov	r0, r1
 800803e:	4611      	mov	r1, r2
 8008040:	461a      	mov	r2, r3
 8008042:	4603      	mov	r3, r0
 8008044:	70fb      	strb	r3, [r7, #3]
 8008046:	460b      	mov	r3, r1
 8008048:	70bb      	strb	r3, [r7, #2]
 800804a:	4613      	mov	r3, r2
 800804c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800804e:	7878      	ldrb	r0, [r7, #1]
 8008050:	78ba      	ldrb	r2, [r7, #2]
 8008052:	78f9      	ldrb	r1, [r7, #3]
 8008054:	8b3b      	ldrh	r3, [r7, #24]
 8008056:	9302      	str	r3, [sp, #8]
 8008058:	7d3b      	ldrb	r3, [r7, #20]
 800805a:	9301      	str	r3, [sp, #4]
 800805c:	7c3b      	ldrb	r3, [r7, #16]
 800805e:	9300      	str	r3, [sp, #0]
 8008060:	4603      	mov	r3, r0
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fa53 	bl	800850e <USBH_LL_OpenPipe>

  return USBH_OK;
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	3708      	adds	r7, #8
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b082      	sub	sp, #8
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	460b      	mov	r3, r1
 800807c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800807e:	78fb      	ldrb	r3, [r7, #3]
 8008080:	4619      	mov	r1, r3
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 fa72 	bl	800856c <USBH_LL_ClosePipe>

  return USBH_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3708      	adds	r7, #8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b084      	sub	sp, #16
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
 800809a:	460b      	mov	r3, r1
 800809c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f836 	bl	8008110 <USBH_GetFreePipe>
 80080a4:	4603      	mov	r3, r0
 80080a6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80080a8:	89fb      	ldrh	r3, [r7, #14]
 80080aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d00a      	beq.n	80080c8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80080b2:	78fa      	ldrb	r2, [r7, #3]
 80080b4:	89fb      	ldrh	r3, [r7, #14]
 80080b6:	f003 030f 	and.w	r3, r3, #15
 80080ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80080be:	6879      	ldr	r1, [r7, #4]
 80080c0:	33e0      	adds	r3, #224	; 0xe0
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	440b      	add	r3, r1
 80080c6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80080c8:	89fb      	ldrh	r3, [r7, #14]
 80080ca:	b2db      	uxtb	r3, r3
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	460b      	mov	r3, r1
 80080de:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80080e0:	78fb      	ldrb	r3, [r7, #3]
 80080e2:	2b0a      	cmp	r3, #10
 80080e4:	d80d      	bhi.n	8008102 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80080e6:	78fb      	ldrb	r3, [r7, #3]
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	33e0      	adds	r3, #224	; 0xe0
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	4413      	add	r3, r2
 80080f0:	685a      	ldr	r2, [r3, #4]
 80080f2:	78fb      	ldrb	r3, [r7, #3]
 80080f4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80080f8:	6879      	ldr	r1, [r7, #4]
 80080fa:	33e0      	adds	r3, #224	; 0xe0
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	440b      	add	r3, r1
 8008100:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008118:	2300      	movs	r3, #0
 800811a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800811c:	2300      	movs	r3, #0
 800811e:	73fb      	strb	r3, [r7, #15]
 8008120:	e00f      	b.n	8008142 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008122:	7bfb      	ldrb	r3, [r7, #15]
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	33e0      	adds	r3, #224	; 0xe0
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	4413      	add	r3, r2
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008132:	2b00      	cmp	r3, #0
 8008134:	d102      	bne.n	800813c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008136:	7bfb      	ldrb	r3, [r7, #15]
 8008138:	b29b      	uxth	r3, r3
 800813a:	e007      	b.n	800814c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800813c:	7bfb      	ldrb	r3, [r7, #15]
 800813e:	3301      	adds	r3, #1
 8008140:	73fb      	strb	r3, [r7, #15]
 8008142:	7bfb      	ldrb	r3, [r7, #15]
 8008144:	2b0a      	cmp	r3, #10
 8008146:	d9ec      	bls.n	8008122 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008148:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800814c:	4618      	mov	r0, r3
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800815c:	2201      	movs	r2, #1
 800815e:	490e      	ldr	r1, [pc, #56]	; (8008198 <MX_USB_HOST_Init+0x40>)
 8008160:	480e      	ldr	r0, [pc, #56]	; (800819c <MX_USB_HOST_Init+0x44>)
 8008162:	f7fe fca1 	bl	8006aa8 <USBH_Init>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d001      	beq.n	8008170 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800816c:	f7f8 fd02 	bl	8000b74 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008170:	490b      	ldr	r1, [pc, #44]	; (80081a0 <MX_USB_HOST_Init+0x48>)
 8008172:	480a      	ldr	r0, [pc, #40]	; (800819c <MX_USB_HOST_Init+0x44>)
 8008174:	f7fe fd26 	bl	8006bc4 <USBH_RegisterClass>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d001      	beq.n	8008182 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800817e:	f7f8 fcf9 	bl	8000b74 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008182:	4806      	ldr	r0, [pc, #24]	; (800819c <MX_USB_HOST_Init+0x44>)
 8008184:	f7fe fdaa 	bl	8006cdc <USBH_Start>
 8008188:	4603      	mov	r3, r0
 800818a:	2b00      	cmp	r3, #0
 800818c:	d001      	beq.n	8008192 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800818e:	f7f8 fcf1 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008192:	bf00      	nop
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	080081b9 	.word	0x080081b9
 800819c:	20000174 	.word	0x20000174
 80081a0:	2000000c 	.word	0x2000000c

080081a4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80081a8:	4802      	ldr	r0, [pc, #8]	; (80081b4 <MX_USB_HOST_Process+0x10>)
 80081aa:	f7fe fda7 	bl	8006cfc <USBH_Process>
}
 80081ae:	bf00      	nop
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	20000174 	.word	0x20000174

080081b8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	460b      	mov	r3, r1
 80081c2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80081c4:	78fb      	ldrb	r3, [r7, #3]
 80081c6:	3b01      	subs	r3, #1
 80081c8:	2b04      	cmp	r3, #4
 80081ca:	d819      	bhi.n	8008200 <USBH_UserProcess+0x48>
 80081cc:	a201      	add	r2, pc, #4	; (adr r2, 80081d4 <USBH_UserProcess+0x1c>)
 80081ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d2:	bf00      	nop
 80081d4:	08008201 	.word	0x08008201
 80081d8:	080081f1 	.word	0x080081f1
 80081dc:	08008201 	.word	0x08008201
 80081e0:	080081f9 	.word	0x080081f9
 80081e4:	080081e9 	.word	0x080081e9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80081e8:	4b09      	ldr	r3, [pc, #36]	; (8008210 <USBH_UserProcess+0x58>)
 80081ea:	2203      	movs	r2, #3
 80081ec:	701a      	strb	r2, [r3, #0]
  break;
 80081ee:	e008      	b.n	8008202 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80081f0:	4b07      	ldr	r3, [pc, #28]	; (8008210 <USBH_UserProcess+0x58>)
 80081f2:	2202      	movs	r2, #2
 80081f4:	701a      	strb	r2, [r3, #0]
  break;
 80081f6:	e004      	b.n	8008202 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80081f8:	4b05      	ldr	r3, [pc, #20]	; (8008210 <USBH_UserProcess+0x58>)
 80081fa:	2201      	movs	r2, #1
 80081fc:	701a      	strb	r2, [r3, #0]
  break;
 80081fe:	e000      	b.n	8008202 <USBH_UserProcess+0x4a>

  default:
  break;
 8008200:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008202:	bf00      	nop
 8008204:	370c      	adds	r7, #12
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr
 800820e:	bf00      	nop
 8008210:	200000b0 	.word	0x200000b0

08008214 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b08a      	sub	sp, #40	; 0x28
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800821c:	f107 0314 	add.w	r3, r7, #20
 8008220:	2200      	movs	r2, #0
 8008222:	601a      	str	r2, [r3, #0]
 8008224:	605a      	str	r2, [r3, #4]
 8008226:	609a      	str	r2, [r3, #8]
 8008228:	60da      	str	r2, [r3, #12]
 800822a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008234:	d147      	bne.n	80082c6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008236:	2300      	movs	r3, #0
 8008238:	613b      	str	r3, [r7, #16]
 800823a:	4b25      	ldr	r3, [pc, #148]	; (80082d0 <HAL_HCD_MspInit+0xbc>)
 800823c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800823e:	4a24      	ldr	r2, [pc, #144]	; (80082d0 <HAL_HCD_MspInit+0xbc>)
 8008240:	f043 0301 	orr.w	r3, r3, #1
 8008244:	6313      	str	r3, [r2, #48]	; 0x30
 8008246:	4b22      	ldr	r3, [pc, #136]	; (80082d0 <HAL_HCD_MspInit+0xbc>)
 8008248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800824a:	f003 0301 	and.w	r3, r3, #1
 800824e:	613b      	str	r3, [r7, #16]
 8008250:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008252:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008258:	2300      	movs	r3, #0
 800825a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800825c:	2300      	movs	r3, #0
 800825e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008260:	f107 0314 	add.w	r3, r7, #20
 8008264:	4619      	mov	r1, r3
 8008266:	481b      	ldr	r0, [pc, #108]	; (80082d4 <HAL_HCD_MspInit+0xc0>)
 8008268:	f7f9 f8d2 	bl	8001410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800826c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008272:	2302      	movs	r3, #2
 8008274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008276:	2300      	movs	r3, #0
 8008278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800827a:	2300      	movs	r3, #0
 800827c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800827e:	230a      	movs	r3, #10
 8008280:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008282:	f107 0314 	add.w	r3, r7, #20
 8008286:	4619      	mov	r1, r3
 8008288:	4812      	ldr	r0, [pc, #72]	; (80082d4 <HAL_HCD_MspInit+0xc0>)
 800828a:	f7f9 f8c1 	bl	8001410 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800828e:	4b10      	ldr	r3, [pc, #64]	; (80082d0 <HAL_HCD_MspInit+0xbc>)
 8008290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008292:	4a0f      	ldr	r2, [pc, #60]	; (80082d0 <HAL_HCD_MspInit+0xbc>)
 8008294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008298:	6353      	str	r3, [r2, #52]	; 0x34
 800829a:	2300      	movs	r3, #0
 800829c:	60fb      	str	r3, [r7, #12]
 800829e:	4b0c      	ldr	r3, [pc, #48]	; (80082d0 <HAL_HCD_MspInit+0xbc>)
 80082a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082a2:	4a0b      	ldr	r2, [pc, #44]	; (80082d0 <HAL_HCD_MspInit+0xbc>)
 80082a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80082a8:	6453      	str	r3, [r2, #68]	; 0x44
 80082aa:	4b09      	ldr	r3, [pc, #36]	; (80082d0 <HAL_HCD_MspInit+0xbc>)
 80082ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082b2:	60fb      	str	r3, [r7, #12]
 80082b4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80082b6:	2200      	movs	r2, #0
 80082b8:	2100      	movs	r1, #0
 80082ba:	2043      	movs	r0, #67	; 0x43
 80082bc:	f7f8 ffdf 	bl	800127e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80082c0:	2043      	movs	r0, #67	; 0x43
 80082c2:	f7f8 fff8 	bl	80012b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80082c6:	bf00      	nop
 80082c8:	3728      	adds	r7, #40	; 0x28
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	40023800 	.word	0x40023800
 80082d4:	40020000 	.word	0x40020000

080082d8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7ff f8db 	bl	80074a2 <USBH_LL_IncTimer>
}
 80082ec:	bf00      	nop
 80082ee:	3708      	adds	r7, #8
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008302:	4618      	mov	r0, r3
 8008304:	f7ff f913 	bl	800752e <USBH_LL_Connect>
}
 8008308:	bf00      	nop
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800831e:	4618      	mov	r0, r3
 8008320:	f7ff f91c 	bl	800755c <USBH_LL_Disconnect>
}
 8008324:	bf00      	nop
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	460b      	mov	r3, r1
 8008336:	70fb      	strb	r3, [r7, #3]
 8008338:	4613      	mov	r3, r2
 800833a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800833c:	bf00      	nop
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008356:	4618      	mov	r0, r3
 8008358:	f7ff f8cd 	bl	80074f6 <USBH_LL_PortEnabled>
}
 800835c:	bf00      	nop
 800835e:	3708      	adds	r7, #8
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008372:	4618      	mov	r0, r3
 8008374:	f7ff f8cd 	bl	8007512 <USBH_LL_PortDisabled>
}
 8008378:	bf00      	nop
 800837a:	3708      	adds	r7, #8
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800838e:	2b01      	cmp	r3, #1
 8008390:	d12a      	bne.n	80083e8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008392:	4a18      	ldr	r2, [pc, #96]	; (80083f4 <USBH_LL_Init+0x74>)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a15      	ldr	r2, [pc, #84]	; (80083f4 <USBH_LL_Init+0x74>)
 800839e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80083a2:	4b14      	ldr	r3, [pc, #80]	; (80083f4 <USBH_LL_Init+0x74>)
 80083a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80083a8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80083aa:	4b12      	ldr	r3, [pc, #72]	; (80083f4 <USBH_LL_Init+0x74>)
 80083ac:	2208      	movs	r2, #8
 80083ae:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80083b0:	4b10      	ldr	r3, [pc, #64]	; (80083f4 <USBH_LL_Init+0x74>)
 80083b2:	2201      	movs	r2, #1
 80083b4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80083b6:	4b0f      	ldr	r3, [pc, #60]	; (80083f4 <USBH_LL_Init+0x74>)
 80083b8:	2200      	movs	r2, #0
 80083ba:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80083bc:	4b0d      	ldr	r3, [pc, #52]	; (80083f4 <USBH_LL_Init+0x74>)
 80083be:	2202      	movs	r2, #2
 80083c0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80083c2:	4b0c      	ldr	r3, [pc, #48]	; (80083f4 <USBH_LL_Init+0x74>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80083c8:	480a      	ldr	r0, [pc, #40]	; (80083f4 <USBH_LL_Init+0x74>)
 80083ca:	f7f9 f9d6 	bl	800177a <HAL_HCD_Init>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d001      	beq.n	80083d8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80083d4:	f7f8 fbce 	bl	8000b74 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80083d8:	4806      	ldr	r0, [pc, #24]	; (80083f4 <USBH_LL_Init+0x74>)
 80083da:	f7f9 fdba 	bl	8001f52 <HAL_HCD_GetCurrentFrame>
 80083de:	4603      	mov	r3, r0
 80083e0:	4619      	mov	r1, r3
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f7ff f84e 	bl	8007484 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3708      	adds	r7, #8
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	2000054c 	.word	0x2000054c

080083f8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008400:	2300      	movs	r3, #0
 8008402:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008404:	2300      	movs	r3, #0
 8008406:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800840e:	4618      	mov	r0, r3
 8008410:	f7f9 fd29 	bl	8001e66 <HAL_HCD_Start>
 8008414:	4603      	mov	r3, r0
 8008416:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008418:	7bfb      	ldrb	r3, [r7, #15]
 800841a:	4618      	mov	r0, r3
 800841c:	f000 f95c 	bl	80086d8 <USBH_Get_USB_Status>
 8008420:	4603      	mov	r3, r0
 8008422:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008424:	7bbb      	ldrb	r3, [r7, #14]
}
 8008426:	4618      	mov	r0, r3
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}

0800842e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b084      	sub	sp, #16
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800843a:	2300      	movs	r3, #0
 800843c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008444:	4618      	mov	r0, r3
 8008446:	f7f9 fd31 	bl	8001eac <HAL_HCD_Stop>
 800844a:	4603      	mov	r3, r0
 800844c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800844e:	7bfb      	ldrb	r3, [r7, #15]
 8008450:	4618      	mov	r0, r3
 8008452:	f000 f941 	bl	80086d8 <USBH_Get_USB_Status>
 8008456:	4603      	mov	r3, r0
 8008458:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800845a:	7bbb      	ldrb	r3, [r7, #14]
}
 800845c:	4618      	mov	r0, r3
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800846c:	2301      	movs	r3, #1
 800846e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008476:	4618      	mov	r0, r3
 8008478:	f7f9 fd79 	bl	8001f6e <HAL_HCD_GetCurrentSpeed>
 800847c:	4603      	mov	r3, r0
 800847e:	2b02      	cmp	r3, #2
 8008480:	d00c      	beq.n	800849c <USBH_LL_GetSpeed+0x38>
 8008482:	2b02      	cmp	r3, #2
 8008484:	d80d      	bhi.n	80084a2 <USBH_LL_GetSpeed+0x3e>
 8008486:	2b00      	cmp	r3, #0
 8008488:	d002      	beq.n	8008490 <USBH_LL_GetSpeed+0x2c>
 800848a:	2b01      	cmp	r3, #1
 800848c:	d003      	beq.n	8008496 <USBH_LL_GetSpeed+0x32>
 800848e:	e008      	b.n	80084a2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008490:	2300      	movs	r3, #0
 8008492:	73fb      	strb	r3, [r7, #15]
    break;
 8008494:	e008      	b.n	80084a8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008496:	2301      	movs	r3, #1
 8008498:	73fb      	strb	r3, [r7, #15]
    break;
 800849a:	e005      	b.n	80084a8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800849c:	2302      	movs	r3, #2
 800849e:	73fb      	strb	r3, [r7, #15]
    break;
 80084a0:	e002      	b.n	80084a8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80084a2:	2301      	movs	r3, #1
 80084a4:	73fb      	strb	r3, [r7, #15]
    break;
 80084a6:	bf00      	nop
  }
  return  speed;
 80084a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b084      	sub	sp, #16
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084ba:	2300      	movs	r3, #0
 80084bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7f9 fd0c 	bl	8001ee6 <HAL_HCD_ResetPort>
 80084ce:	4603      	mov	r3, r0
 80084d0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80084d2:	7bfb      	ldrb	r3, [r7, #15]
 80084d4:	4618      	mov	r0, r3
 80084d6:	f000 f8ff 	bl	80086d8 <USBH_Get_USB_Status>
 80084da:	4603      	mov	r3, r0
 80084dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084de:	7bbb      	ldrb	r3, [r7, #14]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	460b      	mov	r3, r1
 80084f2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80084fa:	78fa      	ldrb	r2, [r7, #3]
 80084fc:	4611      	mov	r1, r2
 80084fe:	4618      	mov	r0, r3
 8008500:	f7f9 fd13 	bl	8001f2a <HAL_HCD_HC_GetXferCount>
 8008504:	4603      	mov	r3, r0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800850e:	b590      	push	{r4, r7, lr}
 8008510:	b089      	sub	sp, #36	; 0x24
 8008512:	af04      	add	r7, sp, #16
 8008514:	6078      	str	r0, [r7, #4]
 8008516:	4608      	mov	r0, r1
 8008518:	4611      	mov	r1, r2
 800851a:	461a      	mov	r2, r3
 800851c:	4603      	mov	r3, r0
 800851e:	70fb      	strb	r3, [r7, #3]
 8008520:	460b      	mov	r3, r1
 8008522:	70bb      	strb	r3, [r7, #2]
 8008524:	4613      	mov	r3, r2
 8008526:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008528:	2300      	movs	r3, #0
 800852a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800852c:	2300      	movs	r3, #0
 800852e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008536:	787c      	ldrb	r4, [r7, #1]
 8008538:	78ba      	ldrb	r2, [r7, #2]
 800853a:	78f9      	ldrb	r1, [r7, #3]
 800853c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800853e:	9302      	str	r3, [sp, #8]
 8008540:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008544:	9301      	str	r3, [sp, #4]
 8008546:	f897 3020 	ldrb.w	r3, [r7, #32]
 800854a:	9300      	str	r3, [sp, #0]
 800854c:	4623      	mov	r3, r4
 800854e:	f7f9 f976 	bl	800183e <HAL_HCD_HC_Init>
 8008552:	4603      	mov	r3, r0
 8008554:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008556:	7bfb      	ldrb	r3, [r7, #15]
 8008558:	4618      	mov	r0, r3
 800855a:	f000 f8bd 	bl	80086d8 <USBH_Get_USB_Status>
 800855e:	4603      	mov	r3, r0
 8008560:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008562:	7bbb      	ldrb	r3, [r7, #14]
}
 8008564:	4618      	mov	r0, r3
 8008566:	3714      	adds	r7, #20
 8008568:	46bd      	mov	sp, r7
 800856a:	bd90      	pop	{r4, r7, pc}

0800856c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	460b      	mov	r3, r1
 8008576:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008578:	2300      	movs	r3, #0
 800857a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800857c:	2300      	movs	r3, #0
 800857e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008586:	78fa      	ldrb	r2, [r7, #3]
 8008588:	4611      	mov	r1, r2
 800858a:	4618      	mov	r0, r3
 800858c:	f7f9 f9e6 	bl	800195c <HAL_HCD_HC_Halt>
 8008590:	4603      	mov	r3, r0
 8008592:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008594:	7bfb      	ldrb	r3, [r7, #15]
 8008596:	4618      	mov	r0, r3
 8008598:	f000 f89e 	bl	80086d8 <USBH_Get_USB_Status>
 800859c:	4603      	mov	r3, r0
 800859e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80085aa:	b590      	push	{r4, r7, lr}
 80085ac:	b089      	sub	sp, #36	; 0x24
 80085ae:	af04      	add	r7, sp, #16
 80085b0:	6078      	str	r0, [r7, #4]
 80085b2:	4608      	mov	r0, r1
 80085b4:	4611      	mov	r1, r2
 80085b6:	461a      	mov	r2, r3
 80085b8:	4603      	mov	r3, r0
 80085ba:	70fb      	strb	r3, [r7, #3]
 80085bc:	460b      	mov	r3, r1
 80085be:	70bb      	strb	r3, [r7, #2]
 80085c0:	4613      	mov	r3, r2
 80085c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085c4:	2300      	movs	r3, #0
 80085c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085c8:	2300      	movs	r3, #0
 80085ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80085d2:	787c      	ldrb	r4, [r7, #1]
 80085d4:	78ba      	ldrb	r2, [r7, #2]
 80085d6:	78f9      	ldrb	r1, [r7, #3]
 80085d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80085dc:	9303      	str	r3, [sp, #12]
 80085de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80085e0:	9302      	str	r3, [sp, #8]
 80085e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e4:	9301      	str	r3, [sp, #4]
 80085e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	4623      	mov	r3, r4
 80085ee:	f7f9 f9d9 	bl	80019a4 <HAL_HCD_HC_SubmitRequest>
 80085f2:	4603      	mov	r3, r0
 80085f4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80085f6:	7bfb      	ldrb	r3, [r7, #15]
 80085f8:	4618      	mov	r0, r3
 80085fa:	f000 f86d 	bl	80086d8 <USBH_Get_USB_Status>
 80085fe:	4603      	mov	r3, r0
 8008600:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008602:	7bbb      	ldrb	r3, [r7, #14]
}
 8008604:	4618      	mov	r0, r3
 8008606:	3714      	adds	r7, #20
 8008608:	46bd      	mov	sp, r7
 800860a:	bd90      	pop	{r4, r7, pc}

0800860c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	460b      	mov	r3, r1
 8008616:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800861e:	78fa      	ldrb	r2, [r7, #3]
 8008620:	4611      	mov	r1, r2
 8008622:	4618      	mov	r0, r3
 8008624:	f7f9 fc6d 	bl	8001f02 <HAL_HCD_HC_GetURBState>
 8008628:	4603      	mov	r3, r0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3708      	adds	r7, #8
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b082      	sub	sp, #8
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
 800863a:	460b      	mov	r3, r1
 800863c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008644:	2b01      	cmp	r3, #1
 8008646:	d103      	bne.n	8008650 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008648:	78fb      	ldrb	r3, [r7, #3]
 800864a:	4618      	mov	r0, r3
 800864c:	f000 f870 	bl	8008730 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008650:	20c8      	movs	r0, #200	; 0xc8
 8008652:	f7f8 fd15 	bl	8001080 <HAL_Delay>
  return USBH_OK;
 8008656:	2300      	movs	r3, #0
}
 8008658:	4618      	mov	r0, r3
 800865a:	3708      	adds	r7, #8
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008660:	b480      	push	{r7}
 8008662:	b085      	sub	sp, #20
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	460b      	mov	r3, r1
 800866a:	70fb      	strb	r3, [r7, #3]
 800866c:	4613      	mov	r3, r2
 800866e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008676:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008678:	78fb      	ldrb	r3, [r7, #3]
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	212c      	movs	r1, #44	; 0x2c
 800867e:	fb01 f303 	mul.w	r3, r1, r3
 8008682:	4413      	add	r3, r2
 8008684:	333b      	adds	r3, #59	; 0x3b
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d009      	beq.n	80086a0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800868c:	78fb      	ldrb	r3, [r7, #3]
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	212c      	movs	r1, #44	; 0x2c
 8008692:	fb01 f303 	mul.w	r3, r1, r3
 8008696:	4413      	add	r3, r2
 8008698:	3354      	adds	r3, #84	; 0x54
 800869a:	78ba      	ldrb	r2, [r7, #2]
 800869c:	701a      	strb	r2, [r3, #0]
 800869e:	e008      	b.n	80086b2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80086a0:	78fb      	ldrb	r3, [r7, #3]
 80086a2:	68fa      	ldr	r2, [r7, #12]
 80086a4:	212c      	movs	r1, #44	; 0x2c
 80086a6:	fb01 f303 	mul.w	r3, r1, r3
 80086aa:	4413      	add	r3, r2
 80086ac:	3355      	adds	r3, #85	; 0x55
 80086ae:	78ba      	ldrb	r2, [r7, #2]
 80086b0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3714      	adds	r7, #20
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f7f8 fcd9 	bl	8001080 <HAL_Delay>
}
 80086ce:	bf00      	nop
 80086d0:	3708      	adds	r7, #8
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
	...

080086d8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80086d8:	b480      	push	{r7}
 80086da:	b085      	sub	sp, #20
 80086dc:	af00      	add	r7, sp, #0
 80086de:	4603      	mov	r3, r0
 80086e0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086e2:	2300      	movs	r3, #0
 80086e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80086e6:	79fb      	ldrb	r3, [r7, #7]
 80086e8:	2b03      	cmp	r3, #3
 80086ea:	d817      	bhi.n	800871c <USBH_Get_USB_Status+0x44>
 80086ec:	a201      	add	r2, pc, #4	; (adr r2, 80086f4 <USBH_Get_USB_Status+0x1c>)
 80086ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f2:	bf00      	nop
 80086f4:	08008705 	.word	0x08008705
 80086f8:	0800870b 	.word	0x0800870b
 80086fc:	08008711 	.word	0x08008711
 8008700:	08008717 	.word	0x08008717
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008704:	2300      	movs	r3, #0
 8008706:	73fb      	strb	r3, [r7, #15]
    break;
 8008708:	e00b      	b.n	8008722 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800870a:	2302      	movs	r3, #2
 800870c:	73fb      	strb	r3, [r7, #15]
    break;
 800870e:	e008      	b.n	8008722 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008710:	2301      	movs	r3, #1
 8008712:	73fb      	strb	r3, [r7, #15]
    break;
 8008714:	e005      	b.n	8008722 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008716:	2302      	movs	r3, #2
 8008718:	73fb      	strb	r3, [r7, #15]
    break;
 800871a:	e002      	b.n	8008722 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800871c:	2302      	movs	r3, #2
 800871e:	73fb      	strb	r3, [r7, #15]
    break;
 8008720:	bf00      	nop
  }
  return usb_status;
 8008722:	7bfb      	ldrb	r3, [r7, #15]
}
 8008724:	4618      	mov	r0, r3
 8008726:	3714      	adds	r7, #20
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	4603      	mov	r3, r0
 8008738:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800873a:	79fb      	ldrb	r3, [r7, #7]
 800873c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800873e:	79fb      	ldrb	r3, [r7, #7]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d102      	bne.n	800874a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008744:	2301      	movs	r3, #1
 8008746:	73fb      	strb	r3, [r7, #15]
 8008748:	e001      	b.n	800874e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800874a:	2300      	movs	r3, #0
 800874c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800874e:	7bfb      	ldrb	r3, [r7, #15]
 8008750:	461a      	mov	r2, r3
 8008752:	2101      	movs	r1, #1
 8008754:	4803      	ldr	r0, [pc, #12]	; (8008764 <MX_DriverVbusFS+0x34>)
 8008756:	f7f8 fff7 	bl	8001748 <HAL_GPIO_WritePin>
}
 800875a:	bf00      	nop
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	40020800 	.word	0x40020800

08008768 <__errno>:
 8008768:	4b01      	ldr	r3, [pc, #4]	; (8008770 <__errno+0x8>)
 800876a:	6818      	ldr	r0, [r3, #0]
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	2000002c 	.word	0x2000002c

08008774 <__libc_init_array>:
 8008774:	b570      	push	{r4, r5, r6, lr}
 8008776:	4d0d      	ldr	r5, [pc, #52]	; (80087ac <__libc_init_array+0x38>)
 8008778:	4c0d      	ldr	r4, [pc, #52]	; (80087b0 <__libc_init_array+0x3c>)
 800877a:	1b64      	subs	r4, r4, r5
 800877c:	10a4      	asrs	r4, r4, #2
 800877e:	2600      	movs	r6, #0
 8008780:	42a6      	cmp	r6, r4
 8008782:	d109      	bne.n	8008798 <__libc_init_array+0x24>
 8008784:	4d0b      	ldr	r5, [pc, #44]	; (80087b4 <__libc_init_array+0x40>)
 8008786:	4c0c      	ldr	r4, [pc, #48]	; (80087b8 <__libc_init_array+0x44>)
 8008788:	f000 f8f8 	bl	800897c <_init>
 800878c:	1b64      	subs	r4, r4, r5
 800878e:	10a4      	asrs	r4, r4, #2
 8008790:	2600      	movs	r6, #0
 8008792:	42a6      	cmp	r6, r4
 8008794:	d105      	bne.n	80087a2 <__libc_init_array+0x2e>
 8008796:	bd70      	pop	{r4, r5, r6, pc}
 8008798:	f855 3b04 	ldr.w	r3, [r5], #4
 800879c:	4798      	blx	r3
 800879e:	3601      	adds	r6, #1
 80087a0:	e7ee      	b.n	8008780 <__libc_init_array+0xc>
 80087a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80087a6:	4798      	blx	r3
 80087a8:	3601      	adds	r6, #1
 80087aa:	e7f2      	b.n	8008792 <__libc_init_array+0x1e>
 80087ac:	080089b8 	.word	0x080089b8
 80087b0:	080089b8 	.word	0x080089b8
 80087b4:	080089b8 	.word	0x080089b8
 80087b8:	080089bc 	.word	0x080089bc

080087bc <malloc>:
 80087bc:	4b02      	ldr	r3, [pc, #8]	; (80087c8 <malloc+0xc>)
 80087be:	4601      	mov	r1, r0
 80087c0:	6818      	ldr	r0, [r3, #0]
 80087c2:	f000 b863 	b.w	800888c <_malloc_r>
 80087c6:	bf00      	nop
 80087c8:	2000002c 	.word	0x2000002c

080087cc <free>:
 80087cc:	4b02      	ldr	r3, [pc, #8]	; (80087d8 <free+0xc>)
 80087ce:	4601      	mov	r1, r0
 80087d0:	6818      	ldr	r0, [r3, #0]
 80087d2:	f000 b80b 	b.w	80087ec <_free_r>
 80087d6:	bf00      	nop
 80087d8:	2000002c 	.word	0x2000002c

080087dc <memset>:
 80087dc:	4402      	add	r2, r0
 80087de:	4603      	mov	r3, r0
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d100      	bne.n	80087e6 <memset+0xa>
 80087e4:	4770      	bx	lr
 80087e6:	f803 1b01 	strb.w	r1, [r3], #1
 80087ea:	e7f9      	b.n	80087e0 <memset+0x4>

080087ec <_free_r>:
 80087ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087ee:	2900      	cmp	r1, #0
 80087f0:	d048      	beq.n	8008884 <_free_r+0x98>
 80087f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087f6:	9001      	str	r0, [sp, #4]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	f1a1 0404 	sub.w	r4, r1, #4
 80087fe:	bfb8      	it	lt
 8008800:	18e4      	addlt	r4, r4, r3
 8008802:	f000 f8ad 	bl	8008960 <__malloc_lock>
 8008806:	4a20      	ldr	r2, [pc, #128]	; (8008888 <_free_r+0x9c>)
 8008808:	9801      	ldr	r0, [sp, #4]
 800880a:	6813      	ldr	r3, [r2, #0]
 800880c:	4615      	mov	r5, r2
 800880e:	b933      	cbnz	r3, 800881e <_free_r+0x32>
 8008810:	6063      	str	r3, [r4, #4]
 8008812:	6014      	str	r4, [r2, #0]
 8008814:	b003      	add	sp, #12
 8008816:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800881a:	f000 b8a7 	b.w	800896c <__malloc_unlock>
 800881e:	42a3      	cmp	r3, r4
 8008820:	d90b      	bls.n	800883a <_free_r+0x4e>
 8008822:	6821      	ldr	r1, [r4, #0]
 8008824:	1862      	adds	r2, r4, r1
 8008826:	4293      	cmp	r3, r2
 8008828:	bf04      	itt	eq
 800882a:	681a      	ldreq	r2, [r3, #0]
 800882c:	685b      	ldreq	r3, [r3, #4]
 800882e:	6063      	str	r3, [r4, #4]
 8008830:	bf04      	itt	eq
 8008832:	1852      	addeq	r2, r2, r1
 8008834:	6022      	streq	r2, [r4, #0]
 8008836:	602c      	str	r4, [r5, #0]
 8008838:	e7ec      	b.n	8008814 <_free_r+0x28>
 800883a:	461a      	mov	r2, r3
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	b10b      	cbz	r3, 8008844 <_free_r+0x58>
 8008840:	42a3      	cmp	r3, r4
 8008842:	d9fa      	bls.n	800883a <_free_r+0x4e>
 8008844:	6811      	ldr	r1, [r2, #0]
 8008846:	1855      	adds	r5, r2, r1
 8008848:	42a5      	cmp	r5, r4
 800884a:	d10b      	bne.n	8008864 <_free_r+0x78>
 800884c:	6824      	ldr	r4, [r4, #0]
 800884e:	4421      	add	r1, r4
 8008850:	1854      	adds	r4, r2, r1
 8008852:	42a3      	cmp	r3, r4
 8008854:	6011      	str	r1, [r2, #0]
 8008856:	d1dd      	bne.n	8008814 <_free_r+0x28>
 8008858:	681c      	ldr	r4, [r3, #0]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	6053      	str	r3, [r2, #4]
 800885e:	4421      	add	r1, r4
 8008860:	6011      	str	r1, [r2, #0]
 8008862:	e7d7      	b.n	8008814 <_free_r+0x28>
 8008864:	d902      	bls.n	800886c <_free_r+0x80>
 8008866:	230c      	movs	r3, #12
 8008868:	6003      	str	r3, [r0, #0]
 800886a:	e7d3      	b.n	8008814 <_free_r+0x28>
 800886c:	6825      	ldr	r5, [r4, #0]
 800886e:	1961      	adds	r1, r4, r5
 8008870:	428b      	cmp	r3, r1
 8008872:	bf04      	itt	eq
 8008874:	6819      	ldreq	r1, [r3, #0]
 8008876:	685b      	ldreq	r3, [r3, #4]
 8008878:	6063      	str	r3, [r4, #4]
 800887a:	bf04      	itt	eq
 800887c:	1949      	addeq	r1, r1, r5
 800887e:	6021      	streq	r1, [r4, #0]
 8008880:	6054      	str	r4, [r2, #4]
 8008882:	e7c7      	b.n	8008814 <_free_r+0x28>
 8008884:	b003      	add	sp, #12
 8008886:	bd30      	pop	{r4, r5, pc}
 8008888:	200000b4 	.word	0x200000b4

0800888c <_malloc_r>:
 800888c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800888e:	1ccd      	adds	r5, r1, #3
 8008890:	f025 0503 	bic.w	r5, r5, #3
 8008894:	3508      	adds	r5, #8
 8008896:	2d0c      	cmp	r5, #12
 8008898:	bf38      	it	cc
 800889a:	250c      	movcc	r5, #12
 800889c:	2d00      	cmp	r5, #0
 800889e:	4606      	mov	r6, r0
 80088a0:	db01      	blt.n	80088a6 <_malloc_r+0x1a>
 80088a2:	42a9      	cmp	r1, r5
 80088a4:	d903      	bls.n	80088ae <_malloc_r+0x22>
 80088a6:	230c      	movs	r3, #12
 80088a8:	6033      	str	r3, [r6, #0]
 80088aa:	2000      	movs	r0, #0
 80088ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088ae:	f000 f857 	bl	8008960 <__malloc_lock>
 80088b2:	4921      	ldr	r1, [pc, #132]	; (8008938 <_malloc_r+0xac>)
 80088b4:	680a      	ldr	r2, [r1, #0]
 80088b6:	4614      	mov	r4, r2
 80088b8:	b99c      	cbnz	r4, 80088e2 <_malloc_r+0x56>
 80088ba:	4f20      	ldr	r7, [pc, #128]	; (800893c <_malloc_r+0xb0>)
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	b923      	cbnz	r3, 80088ca <_malloc_r+0x3e>
 80088c0:	4621      	mov	r1, r4
 80088c2:	4630      	mov	r0, r6
 80088c4:	f000 f83c 	bl	8008940 <_sbrk_r>
 80088c8:	6038      	str	r0, [r7, #0]
 80088ca:	4629      	mov	r1, r5
 80088cc:	4630      	mov	r0, r6
 80088ce:	f000 f837 	bl	8008940 <_sbrk_r>
 80088d2:	1c43      	adds	r3, r0, #1
 80088d4:	d123      	bne.n	800891e <_malloc_r+0x92>
 80088d6:	230c      	movs	r3, #12
 80088d8:	6033      	str	r3, [r6, #0]
 80088da:	4630      	mov	r0, r6
 80088dc:	f000 f846 	bl	800896c <__malloc_unlock>
 80088e0:	e7e3      	b.n	80088aa <_malloc_r+0x1e>
 80088e2:	6823      	ldr	r3, [r4, #0]
 80088e4:	1b5b      	subs	r3, r3, r5
 80088e6:	d417      	bmi.n	8008918 <_malloc_r+0x8c>
 80088e8:	2b0b      	cmp	r3, #11
 80088ea:	d903      	bls.n	80088f4 <_malloc_r+0x68>
 80088ec:	6023      	str	r3, [r4, #0]
 80088ee:	441c      	add	r4, r3
 80088f0:	6025      	str	r5, [r4, #0]
 80088f2:	e004      	b.n	80088fe <_malloc_r+0x72>
 80088f4:	6863      	ldr	r3, [r4, #4]
 80088f6:	42a2      	cmp	r2, r4
 80088f8:	bf0c      	ite	eq
 80088fa:	600b      	streq	r3, [r1, #0]
 80088fc:	6053      	strne	r3, [r2, #4]
 80088fe:	4630      	mov	r0, r6
 8008900:	f000 f834 	bl	800896c <__malloc_unlock>
 8008904:	f104 000b 	add.w	r0, r4, #11
 8008908:	1d23      	adds	r3, r4, #4
 800890a:	f020 0007 	bic.w	r0, r0, #7
 800890e:	1ac2      	subs	r2, r0, r3
 8008910:	d0cc      	beq.n	80088ac <_malloc_r+0x20>
 8008912:	1a1b      	subs	r3, r3, r0
 8008914:	50a3      	str	r3, [r4, r2]
 8008916:	e7c9      	b.n	80088ac <_malloc_r+0x20>
 8008918:	4622      	mov	r2, r4
 800891a:	6864      	ldr	r4, [r4, #4]
 800891c:	e7cc      	b.n	80088b8 <_malloc_r+0x2c>
 800891e:	1cc4      	adds	r4, r0, #3
 8008920:	f024 0403 	bic.w	r4, r4, #3
 8008924:	42a0      	cmp	r0, r4
 8008926:	d0e3      	beq.n	80088f0 <_malloc_r+0x64>
 8008928:	1a21      	subs	r1, r4, r0
 800892a:	4630      	mov	r0, r6
 800892c:	f000 f808 	bl	8008940 <_sbrk_r>
 8008930:	3001      	adds	r0, #1
 8008932:	d1dd      	bne.n	80088f0 <_malloc_r+0x64>
 8008934:	e7cf      	b.n	80088d6 <_malloc_r+0x4a>
 8008936:	bf00      	nop
 8008938:	200000b4 	.word	0x200000b4
 800893c:	200000b8 	.word	0x200000b8

08008940 <_sbrk_r>:
 8008940:	b538      	push	{r3, r4, r5, lr}
 8008942:	4d06      	ldr	r5, [pc, #24]	; (800895c <_sbrk_r+0x1c>)
 8008944:	2300      	movs	r3, #0
 8008946:	4604      	mov	r4, r0
 8008948:	4608      	mov	r0, r1
 800894a:	602b      	str	r3, [r5, #0]
 800894c:	f7f8 f9a2 	bl	8000c94 <_sbrk>
 8008950:	1c43      	adds	r3, r0, #1
 8008952:	d102      	bne.n	800895a <_sbrk_r+0x1a>
 8008954:	682b      	ldr	r3, [r5, #0]
 8008956:	b103      	cbz	r3, 800895a <_sbrk_r+0x1a>
 8008958:	6023      	str	r3, [r4, #0]
 800895a:	bd38      	pop	{r3, r4, r5, pc}
 800895c:	20000850 	.word	0x20000850

08008960 <__malloc_lock>:
 8008960:	4801      	ldr	r0, [pc, #4]	; (8008968 <__malloc_lock+0x8>)
 8008962:	f000 b809 	b.w	8008978 <__retarget_lock_acquire_recursive>
 8008966:	bf00      	nop
 8008968:	20000858 	.word	0x20000858

0800896c <__malloc_unlock>:
 800896c:	4801      	ldr	r0, [pc, #4]	; (8008974 <__malloc_unlock+0x8>)
 800896e:	f000 b804 	b.w	800897a <__retarget_lock_release_recursive>
 8008972:	bf00      	nop
 8008974:	20000858 	.word	0x20000858

08008978 <__retarget_lock_acquire_recursive>:
 8008978:	4770      	bx	lr

0800897a <__retarget_lock_release_recursive>:
 800897a:	4770      	bx	lr

0800897c <_init>:
 800897c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800897e:	bf00      	nop
 8008980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008982:	bc08      	pop	{r3}
 8008984:	469e      	mov	lr, r3
 8008986:	4770      	bx	lr

08008988 <_fini>:
 8008988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800898a:	bf00      	nop
 800898c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800898e:	bc08      	pop	{r3}
 8008990:	469e      	mov	lr, r3
 8008992:	4770      	bx	lr
