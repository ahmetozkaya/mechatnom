
mechatnom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082dc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008464  08008464  00018464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008480  08008480  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008480  08008480  00018480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008488  08008488  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008488  08008488  00018488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800848c  0800848c  0001848c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008490  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000007b4  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000844  20000844  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d638  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e1b  00000000  00000000  0003d6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e8  00000000  00000000  00041518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001160  00000000  00000000  00042800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024282  00000000  00000000  00043960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018a67  00000000  00000000  00067be2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d059e  00000000  00000000  00080649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00150be7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005018  00000000  00000000  00150c3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800844c 	.word	0x0800844c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800844c 	.word	0x0800844c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <led_kontrol>:

#include "variables.h"


void led_kontrol (void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	if (uart_echo==stop)
 80004c4:	4b2d      	ldr	r3, [pc, #180]	; (800057c <led_kontrol+0xbc>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	2b02      	cmp	r3, #2
 80004ca:	d127      	bne.n	800051c <led_kontrol+0x5c>
	{
		if (led_durum==0 && zaman>=1000)
 80004cc:	4b2c      	ldr	r3, [pc, #176]	; (8000580 <led_kontrol+0xc0>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d10b      	bne.n	80004ec <led_kontrol+0x2c>
 80004d4:	4b2b      	ldr	r3, [pc, #172]	; (8000584 <led_kontrol+0xc4>)
 80004d6:	881b      	ldrh	r3, [r3, #0]
 80004d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004dc:	d306      	bcc.n	80004ec <led_kontrol+0x2c>
		{
			led_durum=1;
 80004de:	4b28      	ldr	r3, [pc, #160]	; (8000580 <led_kontrol+0xc0>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	701a      	strb	r2, [r3, #0]
			zaman=0;
 80004e4:	4b27      	ldr	r3, [pc, #156]	; (8000584 <led_kontrol+0xc4>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	801a      	strh	r2, [r3, #0]
 80004ea:	e00e      	b.n	800050a <led_kontrol+0x4a>
		}
		else if(led_durum==1 && zaman>=1000)
 80004ec:	4b24      	ldr	r3, [pc, #144]	; (8000580 <led_kontrol+0xc0>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d10a      	bne.n	800050a <led_kontrol+0x4a>
 80004f4:	4b23      	ldr	r3, [pc, #140]	; (8000584 <led_kontrol+0xc4>)
 80004f6:	881b      	ldrh	r3, [r3, #0]
 80004f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004fc:	d305      	bcc.n	800050a <led_kontrol+0x4a>
		{
			led_durum=0;
 80004fe:	4b20      	ldr	r3, [pc, #128]	; (8000580 <led_kontrol+0xc0>)
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
			zaman=0;
 8000504:	4b1f      	ldr	r3, [pc, #124]	; (8000584 <led_kontrol+0xc4>)
 8000506:	2200      	movs	r2, #0
 8000508:	801a      	strh	r2, [r3, #0]
		}
		led_On_Off;
 800050a:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <led_kontrol+0xc0>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	461a      	mov	r2, r3
 8000510:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000514:	481c      	ldr	r0, [pc, #112]	; (8000588 <led_kontrol+0xc8>)
 8000516:	f000 ffe9 	bl	80014ec <HAL_GPIO_WritePin>
		}
		led_On_Off;

	}

}
 800051a:	e02c      	b.n	8000576 <led_kontrol+0xb6>
	else if (uart_echo==start)
 800051c:	4b17      	ldr	r3, [pc, #92]	; (800057c <led_kontrol+0xbc>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d128      	bne.n	8000576 <led_kontrol+0xb6>
		if (led_durum==0 && zaman>=ledOff_sure)
 8000524:	4b16      	ldr	r3, [pc, #88]	; (8000580 <led_kontrol+0xc0>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d10c      	bne.n	8000546 <led_kontrol+0x86>
 800052c:	4b15      	ldr	r3, [pc, #84]	; (8000584 <led_kontrol+0xc4>)
 800052e:	881a      	ldrh	r2, [r3, #0]
 8000530:	4b16      	ldr	r3, [pc, #88]	; (800058c <led_kontrol+0xcc>)
 8000532:	881b      	ldrh	r3, [r3, #0]
 8000534:	429a      	cmp	r2, r3
 8000536:	d306      	bcc.n	8000546 <led_kontrol+0x86>
			led_durum=1;
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <led_kontrol+0xc0>)
 800053a:	2201      	movs	r2, #1
 800053c:	701a      	strb	r2, [r3, #0]
			zaman=0;
 800053e:	4b11      	ldr	r3, [pc, #68]	; (8000584 <led_kontrol+0xc4>)
 8000540:	2200      	movs	r2, #0
 8000542:	801a      	strh	r2, [r3, #0]
 8000544:	e00f      	b.n	8000566 <led_kontrol+0xa6>
		else if(led_durum==1 && zaman>=ledOn_sure)
 8000546:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <led_kontrol+0xc0>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b01      	cmp	r3, #1
 800054c:	d10b      	bne.n	8000566 <led_kontrol+0xa6>
 800054e:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <led_kontrol+0xc4>)
 8000550:	881a      	ldrh	r2, [r3, #0]
 8000552:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <led_kontrol+0xd0>)
 8000554:	881b      	ldrh	r3, [r3, #0]
 8000556:	429a      	cmp	r2, r3
 8000558:	d305      	bcc.n	8000566 <led_kontrol+0xa6>
			led_durum=0;
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <led_kontrol+0xc0>)
 800055c:	2200      	movs	r2, #0
 800055e:	701a      	strb	r2, [r3, #0]
			zaman=0;
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <led_kontrol+0xc4>)
 8000562:	2200      	movs	r2, #0
 8000564:	801a      	strh	r2, [r3, #0]
		led_On_Off;
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <led_kontrol+0xc0>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	461a      	mov	r2, r3
 800056c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000570:	4805      	ldr	r0, [pc, #20]	; (8000588 <led_kontrol+0xc8>)
 8000572:	f000 ffbb 	bl	80014ec <HAL_GPIO_WritePin>
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	200000c2 	.word	0x200000c2
 8000580:	200000bc 	.word	0x200000bc
 8000584:	200000be 	.word	0x200000be
 8000588:	40020c00 	.word	0x40020c00
 800058c:	200000c4 	.word	0x200000c4
 8000590:	200000c0 	.word	0x200000c0

08000594 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08c      	sub	sp, #48	; 0x30
 8000598:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	f107 031c 	add.w	r3, r7, #28
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
 80005ae:	4b93      	ldr	r3, [pc, #588]	; (80007fc <MX_GPIO_Init+0x268>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a92      	ldr	r2, [pc, #584]	; (80007fc <MX_GPIO_Init+0x268>)
 80005b4:	f043 0310 	orr.w	r3, r3, #16
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b90      	ldr	r3, [pc, #576]	; (80007fc <MX_GPIO_Init+0x268>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0310 	and.w	r3, r3, #16
 80005c2:	61bb      	str	r3, [r7, #24]
 80005c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
 80005ca:	4b8c      	ldr	r3, [pc, #560]	; (80007fc <MX_GPIO_Init+0x268>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a8b      	ldr	r2, [pc, #556]	; (80007fc <MX_GPIO_Init+0x268>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b89      	ldr	r3, [pc, #548]	; (80007fc <MX_GPIO_Init+0x268>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
 80005e6:	4b85      	ldr	r3, [pc, #532]	; (80007fc <MX_GPIO_Init+0x268>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a84      	ldr	r2, [pc, #528]	; (80007fc <MX_GPIO_Init+0x268>)
 80005ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b82      	ldr	r3, [pc, #520]	; (80007fc <MX_GPIO_Init+0x268>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	4b7e      	ldr	r3, [pc, #504]	; (80007fc <MX_GPIO_Init+0x268>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a7d      	ldr	r2, [pc, #500]	; (80007fc <MX_GPIO_Init+0x268>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b7b      	ldr	r3, [pc, #492]	; (80007fc <MX_GPIO_Init+0x268>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	4b77      	ldr	r3, [pc, #476]	; (80007fc <MX_GPIO_Init+0x268>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a76      	ldr	r2, [pc, #472]	; (80007fc <MX_GPIO_Init+0x268>)
 8000624:	f043 0302 	orr.w	r3, r3, #2
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b74      	ldr	r3, [pc, #464]	; (80007fc <MX_GPIO_Init+0x268>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0302 	and.w	r3, r3, #2
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	4b70      	ldr	r3, [pc, #448]	; (80007fc <MX_GPIO_Init+0x268>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a6f      	ldr	r2, [pc, #444]	; (80007fc <MX_GPIO_Init+0x268>)
 8000640:	f043 0308 	orr.w	r3, r3, #8
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b6d      	ldr	r3, [pc, #436]	; (80007fc <MX_GPIO_Init+0x268>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0308 	and.w	r3, r3, #8
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2108      	movs	r1, #8
 8000656:	486a      	ldr	r0, [pc, #424]	; (8000800 <MX_GPIO_Init+0x26c>)
 8000658:	f000 ff48 	bl	80014ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	2101      	movs	r1, #1
 8000660:	4868      	ldr	r0, [pc, #416]	; (8000804 <MX_GPIO_Init+0x270>)
 8000662:	f000 ff43 	bl	80014ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000666:	2200      	movs	r2, #0
 8000668:	f24f 0110 	movw	r1, #61456	; 0xf010
 800066c:	4866      	ldr	r0, [pc, #408]	; (8000808 <MX_GPIO_Init+0x274>)
 800066e:	f000 ff3d 	bl	80014ec <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000672:	2308      	movs	r3, #8
 8000674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2300      	movs	r3, #0
 8000680:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000682:	f107 031c 	add.w	r3, r7, #28
 8000686:	4619      	mov	r1, r3
 8000688:	485d      	ldr	r0, [pc, #372]	; (8000800 <MX_GPIO_Init+0x26c>)
 800068a:	f000 fd93 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800068e:	2301      	movs	r3, #1
 8000690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	2301      	movs	r3, #1
 8000694:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	2300      	movs	r3, #0
 800069c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	4619      	mov	r1, r3
 80006a4:	4857      	ldr	r0, [pc, #348]	; (8000804 <MX_GPIO_Init+0x270>)
 80006a6:	f000 fd85 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80006aa:	2308      	movs	r3, #8
 80006ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ae:	2302      	movs	r3, #2
 80006b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b6:	2300      	movs	r3, #0
 80006b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006ba:	2305      	movs	r3, #5
 80006bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80006be:	f107 031c 	add.w	r3, r7, #28
 80006c2:	4619      	mov	r1, r3
 80006c4:	484f      	ldr	r0, [pc, #316]	; (8000804 <MX_GPIO_Init+0x270>)
 80006c6:	f000 fd75 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006ca:	2301      	movs	r3, #1
 80006cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006ce:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4619      	mov	r1, r3
 80006de:	484b      	ldr	r0, [pc, #300]	; (800080c <MX_GPIO_Init+0x278>)
 80006e0:	f000 fd68 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80006e4:	2310      	movs	r3, #16
 80006e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e8:	2302      	movs	r3, #2
 80006ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	2300      	movs	r3, #0
 80006f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80006f4:	2306      	movs	r3, #6
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4619      	mov	r1, r3
 80006fe:	4843      	ldr	r0, [pc, #268]	; (800080c <MX_GPIO_Init+0x278>)
 8000700:	f000 fd58 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000704:	23e0      	movs	r3, #224	; 0xe0
 8000706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000708:	2302      	movs	r3, #2
 800070a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000710:	2300      	movs	r3, #0
 8000712:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000714:	2305      	movs	r3, #5
 8000716:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	4619      	mov	r1, r3
 800071e:	483b      	ldr	r0, [pc, #236]	; (800080c <MX_GPIO_Init+0x278>)
 8000720:	f000 fd48 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000724:	2304      	movs	r3, #4
 8000726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000728:	2300      	movs	r3, #0
 800072a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	4619      	mov	r1, r3
 8000736:	4836      	ldr	r0, [pc, #216]	; (8000810 <MX_GPIO_Init+0x27c>)
 8000738:	f000 fd3c 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800073c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000742:	2302      	movs	r3, #2
 8000744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	2300      	movs	r3, #0
 800074c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800074e:	2305      	movs	r3, #5
 8000750:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	4619      	mov	r1, r3
 8000758:	482d      	ldr	r0, [pc, #180]	; (8000810 <MX_GPIO_Init+0x27c>)
 800075a:	f000 fd2b 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800075e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000762:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	2301      	movs	r3, #1
 8000766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2300      	movs	r3, #0
 800076e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000770:	f107 031c 	add.w	r3, r7, #28
 8000774:	4619      	mov	r1, r3
 8000776:	4824      	ldr	r0, [pc, #144]	; (8000808 <MX_GPIO_Init+0x274>)
 8000778:	f000 fd1c 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800077c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000782:	2302      	movs	r3, #2
 8000784:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800078e:	2306      	movs	r3, #6
 8000790:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4619      	mov	r1, r3
 8000798:	481a      	ldr	r0, [pc, #104]	; (8000804 <MX_GPIO_Init+0x270>)
 800079a:	f000 fd0b 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800079e:	2320      	movs	r3, #32
 80007a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a2:	2300      	movs	r3, #0
 80007a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	4619      	mov	r1, r3
 80007b0:	4815      	ldr	r0, [pc, #84]	; (8000808 <MX_GPIO_Init+0x274>)
 80007b2:	f000 fcff 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80007b6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80007ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007bc:	2312      	movs	r3, #18
 80007be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	2300      	movs	r3, #0
 80007c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007c8:	2304      	movs	r3, #4
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007cc:	f107 031c 	add.w	r3, r7, #28
 80007d0:	4619      	mov	r1, r3
 80007d2:	480f      	ldr	r0, [pc, #60]	; (8000810 <MX_GPIO_Init+0x27c>)
 80007d4:	f000 fcee 	bl	80011b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80007d8:	2302      	movs	r3, #2
 80007da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007dc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80007e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_GPIO_Init+0x26c>)
 80007ee:	f000 fce1 	bl	80011b4 <HAL_GPIO_Init>

}
 80007f2:	bf00      	nop
 80007f4:	3730      	adds	r7, #48	; 0x30
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800
 8000800:	40021000 	.word	0x40021000
 8000804:	40020800 	.word	0x40020800
 8000808:	40020c00 	.word	0x40020c00
 800080c:	40020000 	.word	0x40020000
 8000810:	40020400 	.word	0x40020400

08000814 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000818:	f000 fa92 	bl	8000d40 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800081c:	f000 f824 	bl	8000868 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000820:	f7ff feb8 	bl	8000594 <MX_GPIO_Init>
	MX_USB_HOST_Init();
 8000824:	f007 fa00 	bl	8007c28 <MX_USB_HOST_Init>
	MX_TIM3_Init();
 8000828:	f000 f94e 	bl	8000ac8 <MX_TIM3_Init>
	MX_USART3_UART_Init();
 800082c:	f000 f9c2 	bl	8000bb4 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim3);
 8000830:	4809      	ldr	r0, [pc, #36]	; (8000858 <main+0x44>)
 8000832:	f003 f8a9 	bl	8003988 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	uart_echo = stop;
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <main+0x48>)
 8000838:	2202      	movs	r2, #2
 800083a:	701a      	strb	r2, [r3, #0]
	ledOff_sure=3000;
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <main+0x4c>)
 800083e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000842:	801a      	strh	r2, [r3, #0]
	ledOn_sure=1000;
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <main+0x50>)
 8000846:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800084a:	801a      	strh	r2, [r3, #0]
	while (1)
	{
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 800084c:	f007 fa12 	bl	8007c74 <MX_USB_HOST_Process>

		/* USER CODE BEGIN 3 */
		led_kontrol();
 8000850:	f7ff fe36 	bl	80004c0 <led_kontrol>
		MX_USB_HOST_Process();
 8000854:	e7fa      	b.n	800084c <main+0x38>
 8000856:	bf00      	nop
 8000858:	200000c8 	.word	0x200000c8
 800085c:	200000c2 	.word	0x200000c2
 8000860:	200000c4 	.word	0x200000c4
 8000864:	200000c0 	.word	0x200000c0

08000868 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b094      	sub	sp, #80	; 0x50
 800086c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	f107 0320 	add.w	r3, r7, #32
 8000872:	2230      	movs	r2, #48	; 0x30
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f007 fd18 	bl	80082ac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	4b28      	ldr	r3, [pc, #160]	; (8000934 <SystemClock_Config+0xcc>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000894:	4a27      	ldr	r2, [pc, #156]	; (8000934 <SystemClock_Config+0xcc>)
 8000896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089a:	6413      	str	r3, [r2, #64]	; 0x40
 800089c:	4b25      	ldr	r3, [pc, #148]	; (8000934 <SystemClock_Config+0xcc>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a8:	2300      	movs	r3, #0
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	4b22      	ldr	r3, [pc, #136]	; (8000938 <SystemClock_Config+0xd0>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a21      	ldr	r2, [pc, #132]	; (8000938 <SystemClock_Config+0xd0>)
 80008b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <SystemClock_Config+0xd0>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c4:	2301      	movs	r3, #1
 80008c6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ce:	2302      	movs	r3, #2
 80008d0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008d6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80008d8:	2304      	movs	r3, #4
 80008da:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80008dc:	23a8      	movs	r3, #168	; 0xa8
 80008de:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008e0:	2302      	movs	r3, #2
 80008e2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80008e4:	2307      	movs	r3, #7
 80008e6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e8:	f107 0320 	add.w	r3, r7, #32
 80008ec:	4618      	mov	r0, r3
 80008ee:	f002 fb87 	bl	8003000 <HAL_RCC_OscConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0x94>
	{
		Error_Handler();
 80008f8:	f000 f820 	bl	800093c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fc:	230f      	movs	r3, #15
 80008fe:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000900:	2302      	movs	r3, #2
 8000902:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000904:	2380      	movs	r3, #128	; 0x80
 8000906:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800090e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000912:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	2102      	movs	r1, #2
 800091a:	4618      	mov	r0, r3
 800091c:	f002 fde8 	bl	80034f0 <HAL_RCC_ClockConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8000926:	f000 f809 	bl	800093c <Error_Handler>
	}
}
 800092a:	bf00      	nop
 800092c:	3750      	adds	r7, #80	; 0x50
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800
 8000938:	40007000 	.word	0x40007000

0800093c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000944:	e7fe      	b.n	8000944 <Error_Handler+0x8>
	...

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <HAL_MspInit+0x4c>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000956:	4a0f      	ldr	r2, [pc, #60]	; (8000994 <HAL_MspInit+0x4c>)
 8000958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095c:	6453      	str	r3, [r2, #68]	; 0x44
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <HAL_MspInit+0x4c>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <HAL_MspInit+0x4c>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	4a08      	ldr	r2, [pc, #32]	; (8000994 <HAL_MspInit+0x4c>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000978:	6413      	str	r3, [r2, #64]	; 0x40
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_MspInit+0x4c>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000986:	2007      	movs	r0, #7
 8000988:	f000 fb40 	bl	800100c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40023800 	.word	0x40023800

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800099c:	e7fe      	b.n	800099c <NMI_Handler+0x4>

0800099e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <HardFault_Handler+0x4>

080009a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <MemManage_Handler+0x4>

080009aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <BusFault_Handler+0x4>

080009b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <UsageFault_Handler+0x4>

080009b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e4:	f000 f9fe 	bl	8000de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}

080009ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	zaman++;
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <TIM3_IRQHandler+0x1c>)
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	3301      	adds	r3, #1
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	4b03      	ldr	r3, [pc, #12]	; (8000a08 <TIM3_IRQHandler+0x1c>)
 80009fa:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80009fc:	4803      	ldr	r0, [pc, #12]	; (8000a0c <TIM3_IRQHandler+0x20>)
 80009fe:	f003 f833 	bl	8003a68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200000be 	.word	0x200000be
 8000a0c:	200000c8 	.word	0x200000c8

08000a10 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <USART3_IRQHandler+0x10>)
 8000a16:	f003 fc41 	bl	800429c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000110 	.word	0x20000110

08000a24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <OTG_FS_IRQHandler+0x10>)
 8000a2a:	f000 ffe3 	bl	80019f4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000530 	.word	0x20000530

08000a38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a40:	4a14      	ldr	r2, [pc, #80]	; (8000a94 <_sbrk+0x5c>)
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <_sbrk+0x60>)
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a4c:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <_sbrk+0x64>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d102      	bne.n	8000a5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <_sbrk+0x64>)
 8000a56:	4a12      	ldr	r2, [pc, #72]	; (8000aa0 <_sbrk+0x68>)
 8000a58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <_sbrk+0x64>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4413      	add	r3, r2
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d207      	bcs.n	8000a78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a68:	f007 fbe6 	bl	8008238 <__errno>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	220c      	movs	r2, #12
 8000a70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a72:	f04f 33ff 	mov.w	r3, #4294967295
 8000a76:	e009      	b.n	8000a8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <_sbrk+0x64>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a7e:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <_sbrk+0x64>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	4a05      	ldr	r2, [pc, #20]	; (8000a9c <_sbrk+0x64>)
 8000a88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3718      	adds	r7, #24
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20020000 	.word	0x20020000
 8000a98:	00000400 	.word	0x00000400
 8000a9c:	200000ac 	.word	0x200000ac
 8000aa0:	20000848 	.word	0x20000848

08000aa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <SystemInit+0x20>)
 8000aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aae:	4a05      	ldr	r2, [pc, #20]	; (8000ac4 <SystemInit+0x20>)
 8000ab0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ace:	f107 0308 	add.w	r3, r7, #8
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000adc:	463b      	mov	r3, r7
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <MX_TIM3_Init+0x94>)
 8000ae6:	4a1e      	ldr	r2, [pc, #120]	; (8000b60 <MX_TIM3_Init+0x98>)
 8000ae8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 85;
 8000aea:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <MX_TIM3_Init+0x94>)
 8000aec:	2255      	movs	r2, #85	; 0x55
 8000aee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000af0:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <MX_TIM3_Init+0x94>)
 8000af2:	2210      	movs	r2, #16
 8000af4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1001;
 8000af6:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <MX_TIM3_Init+0x94>)
 8000af8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8000afc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000afe:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <MX_TIM3_Init+0x94>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b04:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <MX_TIM3_Init+0x94>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b0a:	4814      	ldr	r0, [pc, #80]	; (8000b5c <MX_TIM3_Init+0x94>)
 8000b0c:	f002 feec 	bl	80038e8 <HAL_TIM_Base_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000b16:	f7ff ff11 	bl	800093c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b20:	f107 0308 	add.w	r3, r7, #8
 8000b24:	4619      	mov	r1, r3
 8000b26:	480d      	ldr	r0, [pc, #52]	; (8000b5c <MX_TIM3_Init+0x94>)
 8000b28:	f003 f8a6 	bl	8003c78 <HAL_TIM_ConfigClockSource>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000b32:	f7ff ff03 	bl	800093c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b36:	2300      	movs	r3, #0
 8000b38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b3e:	463b      	mov	r3, r7
 8000b40:	4619      	mov	r1, r3
 8000b42:	4806      	ldr	r0, [pc, #24]	; (8000b5c <MX_TIM3_Init+0x94>)
 8000b44:	f003 facc 	bl	80040e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000b4e:	f7ff fef5 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200000c8 	.word	0x200000c8
 8000b60:	40000400 	.word	0x40000400

08000b64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0e      	ldr	r2, [pc, #56]	; (8000bac <HAL_TIM_Base_MspInit+0x48>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d115      	bne.n	8000ba2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <HAL_TIM_Base_MspInit+0x4c>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	4a0c      	ldr	r2, [pc, #48]	; (8000bb0 <HAL_TIM_Base_MspInit+0x4c>)
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	6413      	str	r3, [r2, #64]	; 0x40
 8000b86:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <HAL_TIM_Base_MspInit+0x4c>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2100      	movs	r1, #0
 8000b96:	201d      	movs	r0, #29
 8000b98:	f000 fa43 	bl	8001022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b9c:	201d      	movs	r0, #29
 8000b9e:	f000 fa5c 	bl	800105a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40000400 	.word	0x40000400
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <MX_USART3_UART_Init+0x4c>)
 8000bba:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <MX_USART3_UART_Init+0x50>)
 8000bbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <MX_USART3_UART_Init+0x4c>)
 8000bc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <MX_USART3_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <MX_USART3_UART_Init+0x4c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <MX_USART3_UART_Init+0x4c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bd8:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <MX_USART3_UART_Init+0x4c>)
 8000bda:	220c      	movs	r2, #12
 8000bdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bde:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <MX_USART3_UART_Init+0x4c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <MX_USART3_UART_Init+0x4c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bea:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_USART3_UART_Init+0x4c>)
 8000bec:	f003 fb08 	bl	8004200 <HAL_UART_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000bf6:	f7ff fea1 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000110 	.word	0x20000110
 8000c04:	40004800 	.word	0x40004800

08000c08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	; 0x28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a2d      	ldr	r2, [pc, #180]	; (8000cdc <HAL_UART_MspInit+0xd4>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d153      	bne.n	8000cd2 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	4b2c      	ldr	r3, [pc, #176]	; (8000ce0 <HAL_UART_MspInit+0xd8>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	4a2b      	ldr	r2, [pc, #172]	; (8000ce0 <HAL_UART_MspInit+0xd8>)
 8000c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c38:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3a:	4b29      	ldr	r3, [pc, #164]	; (8000ce0 <HAL_UART_MspInit+0xd8>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	4b25      	ldr	r3, [pc, #148]	; (8000ce0 <HAL_UART_MspInit+0xd8>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a24      	ldr	r2, [pc, #144]	; (8000ce0 <HAL_UART_MspInit+0xd8>)
 8000c50:	f043 0302 	orr.w	r3, r3, #2
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b22      	ldr	r3, [pc, #136]	; (8000ce0 <HAL_UART_MspInit+0xd8>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0302 	and.w	r3, r3, #2
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_UART_MspInit+0xd8>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a1d      	ldr	r2, [pc, #116]	; (8000ce0 <HAL_UART_MspInit+0xd8>)
 8000c6c:	f043 0308 	orr.w	r3, r3, #8
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_UART_MspInit+0xd8>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0308 	and.w	r3, r3, #8
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c90:	2307      	movs	r3, #7
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4812      	ldr	r0, [pc, #72]	; (8000ce4 <HAL_UART_MspInit+0xdc>)
 8000c9c:	f000 fa8a 	bl	80011b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ca0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cb2:	2307      	movs	r3, #7
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	480a      	ldr	r0, [pc, #40]	; (8000ce8 <HAL_UART_MspInit+0xe0>)
 8000cbe:	f000 fa79 	bl	80011b4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2027      	movs	r0, #39	; 0x27
 8000cc8:	f000 f9ab 	bl	8001022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ccc:	2027      	movs	r0, #39	; 0x27
 8000cce:	f000 f9c4 	bl	800105a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	3728      	adds	r7, #40	; 0x28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40004800 	.word	0x40004800
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020400 	.word	0x40020400
 8000ce8:	40020c00 	.word	0x40020c00

08000cec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cf0:	480d      	ldr	r0, [pc, #52]	; (8000d28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cf2:	490e      	ldr	r1, [pc, #56]	; (8000d2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cf4:	4a0e      	ldr	r2, [pc, #56]	; (8000d30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf8:	e002      	b.n	8000d00 <LoopCopyDataInit>

08000cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfe:	3304      	adds	r3, #4

08000d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d04:	d3f9      	bcc.n	8000cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d06:	4a0b      	ldr	r2, [pc, #44]	; (8000d34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d08:	4c0b      	ldr	r4, [pc, #44]	; (8000d38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d0c:	e001      	b.n	8000d12 <LoopFillZerobss>

08000d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d10:	3204      	adds	r2, #4

08000d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d14:	d3fb      	bcc.n	8000d0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d16:	f7ff fec5 	bl	8000aa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d1a:	f007 fa93 	bl	8008244 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d1e:	f7ff fd79 	bl	8000814 <main>
  bx  lr    
 8000d22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d2c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000d30:	08008490 	.word	0x08008490
  ldr r2, =_sbss
 8000d34:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000d38:	20000844 	.word	0x20000844

08000d3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d3c:	e7fe      	b.n	8000d3c <ADC_IRQHandler>
	...

08000d40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d44:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <HAL_Init+0x40>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a0d      	ldr	r2, [pc, #52]	; (8000d80 <HAL_Init+0x40>)
 8000d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d50:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <HAL_Init+0x40>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <HAL_Init+0x40>)
 8000d56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <HAL_Init+0x40>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <HAL_Init+0x40>)
 8000d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d68:	2003      	movs	r0, #3
 8000d6a:	f000 f94f 	bl	800100c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f000 f808 	bl	8000d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d74:	f7ff fde8 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023c00 	.word	0x40023c00

08000d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <HAL_InitTick+0x54>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <HAL_InitTick+0x58>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4619      	mov	r1, r3
 8000d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 f967 	bl	8001076 <HAL_SYSTICK_Config>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e00e      	b.n	8000dd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b0f      	cmp	r3, #15
 8000db6:	d80a      	bhi.n	8000dce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db8:	2200      	movs	r2, #0
 8000dba:	6879      	ldr	r1, [r7, #4]
 8000dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc0:	f000 f92f 	bl	8001022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc4:	4a06      	ldr	r2, [pc, #24]	; (8000de0 <HAL_InitTick+0x5c>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	e000      	b.n	8000dd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	20000004 	.word	0x20000004

08000de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_IncTick+0x20>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_IncTick+0x24>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4413      	add	r3, r2
 8000df4:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <HAL_IncTick+0x24>)
 8000df6:	6013      	str	r3, [r2, #0]
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	20000008 	.word	0x20000008
 8000e08:	20000154 	.word	0x20000154

08000e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <HAL_GetTick+0x14>)
 8000e12:	681b      	ldr	r3, [r3, #0]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000154 	.word	0x20000154

08000e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e2c:	f7ff ffee 	bl	8000e0c <HAL_GetTick>
 8000e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e3c:	d005      	beq.n	8000e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <HAL_Delay+0x44>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	461a      	mov	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4413      	add	r3, r2
 8000e48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e4a:	bf00      	nop
 8000e4c:	f7ff ffde 	bl	8000e0c <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d8f7      	bhi.n	8000e4c <HAL_Delay+0x28>
  {
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000008 	.word	0x20000008

08000e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9e:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	60d3      	str	r3, [r2, #12]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <__NVIC_GetPriorityGrouping+0x18>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	f003 0307 	and.w	r3, r3, #7
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	db0b      	blt.n	8000efa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	f003 021f 	and.w	r2, r3, #31
 8000ee8:	4907      	ldr	r1, [pc, #28]	; (8000f08 <__NVIC_EnableIRQ+0x38>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	095b      	lsrs	r3, r3, #5
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000e100 	.word	0xe000e100

08000f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	6039      	str	r1, [r7, #0]
 8000f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	db0a      	blt.n	8000f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	490c      	ldr	r1, [pc, #48]	; (8000f58 <__NVIC_SetPriority+0x4c>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	0112      	lsls	r2, r2, #4
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	440b      	add	r3, r1
 8000f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f34:	e00a      	b.n	8000f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4908      	ldr	r1, [pc, #32]	; (8000f5c <__NVIC_SetPriority+0x50>)
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	f003 030f 	and.w	r3, r3, #15
 8000f42:	3b04      	subs	r3, #4
 8000f44:	0112      	lsls	r2, r2, #4
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	440b      	add	r3, r1
 8000f4a:	761a      	strb	r2, [r3, #24]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000e100 	.word	0xe000e100
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	; 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f1c3 0307 	rsb	r3, r3, #7
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	bf28      	it	cs
 8000f7e:	2304      	movcs	r3, #4
 8000f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3304      	adds	r3, #4
 8000f86:	2b06      	cmp	r3, #6
 8000f88:	d902      	bls.n	8000f90 <NVIC_EncodePriority+0x30>
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3b03      	subs	r3, #3
 8000f8e:	e000      	b.n	8000f92 <NVIC_EncodePriority+0x32>
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	f04f 32ff 	mov.w	r2, #4294967295
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43da      	mvns	r2, r3
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb2:	43d9      	mvns	r1, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	4313      	orrs	r3, r2
         );
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3724      	adds	r7, #36	; 0x24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd8:	d301      	bcc.n	8000fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e00f      	b.n	8000ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fde:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <SysTick_Config+0x40>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe6:	210f      	movs	r1, #15
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	f7ff ff8e 	bl	8000f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <SysTick_Config+0x40>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff6:	4b04      	ldr	r3, [pc, #16]	; (8001008 <SysTick_Config+0x40>)
 8000ff8:	2207      	movs	r2, #7
 8000ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	e000e010 	.word	0xe000e010

0800100c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff ff29 	bl	8000e6c <__NVIC_SetPriorityGrouping>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001022:	b580      	push	{r7, lr}
 8001024:	b086      	sub	sp, #24
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001034:	f7ff ff3e 	bl	8000eb4 <__NVIC_GetPriorityGrouping>
 8001038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	68b9      	ldr	r1, [r7, #8]
 800103e:	6978      	ldr	r0, [r7, #20]
 8001040:	f7ff ff8e 	bl	8000f60 <NVIC_EncodePriority>
 8001044:	4602      	mov	r2, r0
 8001046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff5d 	bl	8000f0c <__NVIC_SetPriority>
}
 8001052:	bf00      	nop
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	4603      	mov	r3, r0
 8001062:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff31 	bl	8000ed0 <__NVIC_EnableIRQ>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff ffa2 	bl	8000fc8 <SysTick_Config>
 8001084:	4603      	mov	r3, r0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b084      	sub	sp, #16
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800109c:	f7ff feb6 	bl	8000e0c <HAL_GetTick>
 80010a0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d008      	beq.n	80010c0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2280      	movs	r2, #128	; 0x80
 80010b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e052      	b.n	8001166 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f022 0216 	bic.w	r2, r2, #22
 80010ce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	695a      	ldr	r2, [r3, #20]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010de:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d103      	bne.n	80010f0 <HAL_DMA_Abort+0x62>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d007      	beq.n	8001100 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f022 0208 	bic.w	r2, r2, #8
 80010fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 0201 	bic.w	r2, r2, #1
 800110e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001110:	e013      	b.n	800113a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001112:	f7ff fe7b 	bl	8000e0c <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b05      	cmp	r3, #5
 800111e:	d90c      	bls.n	800113a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2220      	movs	r2, #32
 8001124:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2203      	movs	r2, #3
 800112a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e015      	b.n	8001166 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	2b00      	cmp	r3, #0
 8001146:	d1e4      	bne.n	8001112 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800114c:	223f      	movs	r2, #63	; 0x3f
 800114e:	409a      	lsls	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2201      	movs	r2, #1
 8001158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b02      	cmp	r3, #2
 8001180:	d004      	beq.n	800118c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2280      	movs	r2, #128	; 0x80
 8001186:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e00c      	b.n	80011a6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2205      	movs	r2, #5
 8001190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f022 0201 	bic.w	r2, r2, #1
 80011a2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
	...

080011b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
 80011ce:	e16b      	b.n	80014a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011d0:	2201      	movs	r2, #1
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	4013      	ands	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	f040 815a 	bne.w	80014a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d005      	beq.n	8001206 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001202:	2b02      	cmp	r3, #2
 8001204:	d130      	bne.n	8001268 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	2203      	movs	r2, #3
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	68da      	ldr	r2, [r3, #12]
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800123c:	2201      	movs	r2, #1
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	091b      	lsrs	r3, r3, #4
 8001252:	f003 0201 	and.w	r2, r3, #1
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	2b03      	cmp	r3, #3
 8001272:	d017      	beq.n	80012a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d123      	bne.n	80012f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	08da      	lsrs	r2, r3, #3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3208      	adds	r2, #8
 80012b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	f003 0307 	and.w	r3, r3, #7
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	220f      	movs	r2, #15
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	691a      	ldr	r2, [r3, #16]
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	08da      	lsrs	r2, r3, #3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3208      	adds	r2, #8
 80012f2:	69b9      	ldr	r1, [r7, #24]
 80012f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	2203      	movs	r2, #3
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 0203 	and.w	r2, r3, #3
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001334:	2b00      	cmp	r3, #0
 8001336:	f000 80b4 	beq.w	80014a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	4b60      	ldr	r3, [pc, #384]	; (80014c0 <HAL_GPIO_Init+0x30c>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001342:	4a5f      	ldr	r2, [pc, #380]	; (80014c0 <HAL_GPIO_Init+0x30c>)
 8001344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001348:	6453      	str	r3, [r2, #68]	; 0x44
 800134a:	4b5d      	ldr	r3, [pc, #372]	; (80014c0 <HAL_GPIO_Init+0x30c>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001356:	4a5b      	ldr	r2, [pc, #364]	; (80014c4 <HAL_GPIO_Init+0x310>)
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	089b      	lsrs	r3, r3, #2
 800135c:	3302      	adds	r3, #2
 800135e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f003 0303 	and.w	r3, r3, #3
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	220f      	movs	r2, #15
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a52      	ldr	r2, [pc, #328]	; (80014c8 <HAL_GPIO_Init+0x314>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d02b      	beq.n	80013da <HAL_GPIO_Init+0x226>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a51      	ldr	r2, [pc, #324]	; (80014cc <HAL_GPIO_Init+0x318>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d025      	beq.n	80013d6 <HAL_GPIO_Init+0x222>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a50      	ldr	r2, [pc, #320]	; (80014d0 <HAL_GPIO_Init+0x31c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d01f      	beq.n	80013d2 <HAL_GPIO_Init+0x21e>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a4f      	ldr	r2, [pc, #316]	; (80014d4 <HAL_GPIO_Init+0x320>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d019      	beq.n	80013ce <HAL_GPIO_Init+0x21a>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a4e      	ldr	r2, [pc, #312]	; (80014d8 <HAL_GPIO_Init+0x324>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d013      	beq.n	80013ca <HAL_GPIO_Init+0x216>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a4d      	ldr	r2, [pc, #308]	; (80014dc <HAL_GPIO_Init+0x328>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d00d      	beq.n	80013c6 <HAL_GPIO_Init+0x212>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a4c      	ldr	r2, [pc, #304]	; (80014e0 <HAL_GPIO_Init+0x32c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d007      	beq.n	80013c2 <HAL_GPIO_Init+0x20e>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a4b      	ldr	r2, [pc, #300]	; (80014e4 <HAL_GPIO_Init+0x330>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d101      	bne.n	80013be <HAL_GPIO_Init+0x20a>
 80013ba:	2307      	movs	r3, #7
 80013bc:	e00e      	b.n	80013dc <HAL_GPIO_Init+0x228>
 80013be:	2308      	movs	r3, #8
 80013c0:	e00c      	b.n	80013dc <HAL_GPIO_Init+0x228>
 80013c2:	2306      	movs	r3, #6
 80013c4:	e00a      	b.n	80013dc <HAL_GPIO_Init+0x228>
 80013c6:	2305      	movs	r3, #5
 80013c8:	e008      	b.n	80013dc <HAL_GPIO_Init+0x228>
 80013ca:	2304      	movs	r3, #4
 80013cc:	e006      	b.n	80013dc <HAL_GPIO_Init+0x228>
 80013ce:	2303      	movs	r3, #3
 80013d0:	e004      	b.n	80013dc <HAL_GPIO_Init+0x228>
 80013d2:	2302      	movs	r3, #2
 80013d4:	e002      	b.n	80013dc <HAL_GPIO_Init+0x228>
 80013d6:	2301      	movs	r3, #1
 80013d8:	e000      	b.n	80013dc <HAL_GPIO_Init+0x228>
 80013da:	2300      	movs	r3, #0
 80013dc:	69fa      	ldr	r2, [r7, #28]
 80013de:	f002 0203 	and.w	r2, r2, #3
 80013e2:	0092      	lsls	r2, r2, #2
 80013e4:	4093      	lsls	r3, r2
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013ec:	4935      	ldr	r1, [pc, #212]	; (80014c4 <HAL_GPIO_Init+0x310>)
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	089b      	lsrs	r3, r3, #2
 80013f2:	3302      	adds	r3, #2
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013fa:	4b3b      	ldr	r3, [pc, #236]	; (80014e8 <HAL_GPIO_Init+0x334>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800141e:	4a32      	ldr	r2, [pc, #200]	; (80014e8 <HAL_GPIO_Init+0x334>)
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001424:	4b30      	ldr	r3, [pc, #192]	; (80014e8 <HAL_GPIO_Init+0x334>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001448:	4a27      	ldr	r2, [pc, #156]	; (80014e8 <HAL_GPIO_Init+0x334>)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800144e:	4b26      	ldr	r3, [pc, #152]	; (80014e8 <HAL_GPIO_Init+0x334>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	4313      	orrs	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001472:	4a1d      	ldr	r2, [pc, #116]	; (80014e8 <HAL_GPIO_Init+0x334>)
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001478:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <HAL_GPIO_Init+0x334>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800149c:	4a12      	ldr	r2, [pc, #72]	; (80014e8 <HAL_GPIO_Init+0x334>)
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3301      	adds	r3, #1
 80014a6:	61fb      	str	r3, [r7, #28]
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	2b0f      	cmp	r3, #15
 80014ac:	f67f ae90 	bls.w	80011d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014b0:	bf00      	nop
 80014b2:	bf00      	nop
 80014b4:	3724      	adds	r7, #36	; 0x24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40013800 	.word	0x40013800
 80014c8:	40020000 	.word	0x40020000
 80014cc:	40020400 	.word	0x40020400
 80014d0:	40020800 	.word	0x40020800
 80014d4:	40020c00 	.word	0x40020c00
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40021400 	.word	0x40021400
 80014e0:	40021800 	.word	0x40021800
 80014e4:	40021c00 	.word	0x40021c00
 80014e8:	40013c00 	.word	0x40013c00

080014ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	807b      	strh	r3, [r7, #2]
 80014f8:	4613      	mov	r3, r2
 80014fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014fc:	787b      	ldrb	r3, [r7, #1]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001502:	887a      	ldrh	r2, [r7, #2]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001508:	e003      	b.n	8001512 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800150a:	887b      	ldrh	r3, [r7, #2]
 800150c:	041a      	lsls	r2, r3, #16
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	619a      	str	r2, [r3, #24]
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800151e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001520:	b08f      	sub	sp, #60	; 0x3c
 8001522:	af0a      	add	r7, sp, #40	; 0x28
 8001524:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e054      	b.n	80015da <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d106      	bne.n	8001550 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f006 fbca 	bl	8007ce4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2203      	movs	r2, #3
 8001554:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800155c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001560:	2b00      	cmp	r3, #0
 8001562:	d102      	bne.n	800156a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f003 fd20 	bl	8004fb4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	603b      	str	r3, [r7, #0]
 800157a:	687e      	ldr	r6, [r7, #4]
 800157c:	466d      	mov	r5, sp
 800157e:	f106 0410 	add.w	r4, r6, #16
 8001582:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001584:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001586:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001588:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800158a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800158e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001592:	1d33      	adds	r3, r6, #4
 8001594:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001596:	6838      	ldr	r0, [r7, #0]
 8001598:	f003 fc9a 	bl	8004ed0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2101      	movs	r1, #1
 80015a2:	4618      	mov	r0, r3
 80015a4:	f003 fd17 	bl	8004fd6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	603b      	str	r3, [r7, #0]
 80015ae:	687e      	ldr	r6, [r7, #4]
 80015b0:	466d      	mov	r5, sp
 80015b2:	f106 0410 	add.w	r4, r6, #16
 80015b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80015c6:	1d33      	adds	r3, r6, #4
 80015c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015ca:	6838      	ldr	r0, [r7, #0]
 80015cc:	f003 fe7e 	bl	80052cc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015e2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80015e2:	b590      	push	{r4, r7, lr}
 80015e4:	b089      	sub	sp, #36	; 0x24
 80015e6:	af04      	add	r7, sp, #16
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	4608      	mov	r0, r1
 80015ec:	4611      	mov	r1, r2
 80015ee:	461a      	mov	r2, r3
 80015f0:	4603      	mov	r3, r0
 80015f2:	70fb      	strb	r3, [r7, #3]
 80015f4:	460b      	mov	r3, r1
 80015f6:	70bb      	strb	r3, [r7, #2]
 80015f8:	4613      	mov	r3, r2
 80015fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001602:	2b01      	cmp	r3, #1
 8001604:	d101      	bne.n	800160a <HAL_HCD_HC_Init+0x28>
 8001606:	2302      	movs	r3, #2
 8001608:	e076      	b.n	80016f8 <HAL_HCD_HC_Init+0x116>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001612:	78fb      	ldrb	r3, [r7, #3]
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	212c      	movs	r1, #44	; 0x2c
 8001618:	fb01 f303 	mul.w	r3, r1, r3
 800161c:	4413      	add	r3, r2
 800161e:	333d      	adds	r3, #61	; 0x3d
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001624:	78fb      	ldrb	r3, [r7, #3]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	212c      	movs	r1, #44	; 0x2c
 800162a:	fb01 f303 	mul.w	r3, r1, r3
 800162e:	4413      	add	r3, r2
 8001630:	3338      	adds	r3, #56	; 0x38
 8001632:	787a      	ldrb	r2, [r7, #1]
 8001634:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001636:	78fb      	ldrb	r3, [r7, #3]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	212c      	movs	r1, #44	; 0x2c
 800163c:	fb01 f303 	mul.w	r3, r1, r3
 8001640:	4413      	add	r3, r2
 8001642:	3340      	adds	r3, #64	; 0x40
 8001644:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001646:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001648:	78fb      	ldrb	r3, [r7, #3]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	212c      	movs	r1, #44	; 0x2c
 800164e:	fb01 f303 	mul.w	r3, r1, r3
 8001652:	4413      	add	r3, r2
 8001654:	3339      	adds	r3, #57	; 0x39
 8001656:	78fa      	ldrb	r2, [r7, #3]
 8001658:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800165a:	78fb      	ldrb	r3, [r7, #3]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	212c      	movs	r1, #44	; 0x2c
 8001660:	fb01 f303 	mul.w	r3, r1, r3
 8001664:	4413      	add	r3, r2
 8001666:	333f      	adds	r3, #63	; 0x3f
 8001668:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800166c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800166e:	78fb      	ldrb	r3, [r7, #3]
 8001670:	78ba      	ldrb	r2, [r7, #2]
 8001672:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001676:	b2d0      	uxtb	r0, r2
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	212c      	movs	r1, #44	; 0x2c
 800167c:	fb01 f303 	mul.w	r3, r1, r3
 8001680:	4413      	add	r3, r2
 8001682:	333a      	adds	r3, #58	; 0x3a
 8001684:	4602      	mov	r2, r0
 8001686:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001688:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800168c:	2b00      	cmp	r3, #0
 800168e:	da09      	bge.n	80016a4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001690:	78fb      	ldrb	r3, [r7, #3]
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	212c      	movs	r1, #44	; 0x2c
 8001696:	fb01 f303 	mul.w	r3, r1, r3
 800169a:	4413      	add	r3, r2
 800169c:	333b      	adds	r3, #59	; 0x3b
 800169e:	2201      	movs	r2, #1
 80016a0:	701a      	strb	r2, [r3, #0]
 80016a2:	e008      	b.n	80016b6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016a4:	78fb      	ldrb	r3, [r7, #3]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	212c      	movs	r1, #44	; 0x2c
 80016aa:	fb01 f303 	mul.w	r3, r1, r3
 80016ae:	4413      	add	r3, r2
 80016b0:	333b      	adds	r3, #59	; 0x3b
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80016b6:	78fb      	ldrb	r3, [r7, #3]
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	212c      	movs	r1, #44	; 0x2c
 80016bc:	fb01 f303 	mul.w	r3, r1, r3
 80016c0:	4413      	add	r3, r2
 80016c2:	333c      	adds	r3, #60	; 0x3c
 80016c4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80016c8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6818      	ldr	r0, [r3, #0]
 80016ce:	787c      	ldrb	r4, [r7, #1]
 80016d0:	78ba      	ldrb	r2, [r7, #2]
 80016d2:	78f9      	ldrb	r1, [r7, #3]
 80016d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016d6:	9302      	str	r3, [sp, #8]
 80016d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016dc:	9301      	str	r3, [sp, #4]
 80016de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	4623      	mov	r3, r4
 80016e6:	f003 ff6b 	bl	80055c0 <USB_HC_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd90      	pop	{r4, r7, pc}

08001700 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800170c:	2300      	movs	r3, #0
 800170e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001716:	2b01      	cmp	r3, #1
 8001718:	d101      	bne.n	800171e <HAL_HCD_HC_Halt+0x1e>
 800171a:	2302      	movs	r3, #2
 800171c:	e00f      	b.n	800173e <HAL_HCD_HC_Halt+0x3e>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	78fa      	ldrb	r2, [r7, #3]
 800172c:	4611      	mov	r1, r2
 800172e:	4618      	mov	r0, r3
 8001730:	f004 f9a7 	bl	8005a82 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800173c:	7bfb      	ldrb	r3, [r7, #15]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	4608      	mov	r0, r1
 8001752:	4611      	mov	r1, r2
 8001754:	461a      	mov	r2, r3
 8001756:	4603      	mov	r3, r0
 8001758:	70fb      	strb	r3, [r7, #3]
 800175a:	460b      	mov	r3, r1
 800175c:	70bb      	strb	r3, [r7, #2]
 800175e:	4613      	mov	r3, r2
 8001760:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001762:	78fb      	ldrb	r3, [r7, #3]
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	212c      	movs	r1, #44	; 0x2c
 8001768:	fb01 f303 	mul.w	r3, r1, r3
 800176c:	4413      	add	r3, r2
 800176e:	333b      	adds	r3, #59	; 0x3b
 8001770:	78ba      	ldrb	r2, [r7, #2]
 8001772:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001774:	78fb      	ldrb	r3, [r7, #3]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	212c      	movs	r1, #44	; 0x2c
 800177a:	fb01 f303 	mul.w	r3, r1, r3
 800177e:	4413      	add	r3, r2
 8001780:	333f      	adds	r3, #63	; 0x3f
 8001782:	787a      	ldrb	r2, [r7, #1]
 8001784:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001786:	7c3b      	ldrb	r3, [r7, #16]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d112      	bne.n	80017b2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800178c:	78fb      	ldrb	r3, [r7, #3]
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	212c      	movs	r1, #44	; 0x2c
 8001792:	fb01 f303 	mul.w	r3, r1, r3
 8001796:	4413      	add	r3, r2
 8001798:	3342      	adds	r3, #66	; 0x42
 800179a:	2203      	movs	r2, #3
 800179c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800179e:	78fb      	ldrb	r3, [r7, #3]
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	212c      	movs	r1, #44	; 0x2c
 80017a4:	fb01 f303 	mul.w	r3, r1, r3
 80017a8:	4413      	add	r3, r2
 80017aa:	333d      	adds	r3, #61	; 0x3d
 80017ac:	7f3a      	ldrb	r2, [r7, #28]
 80017ae:	701a      	strb	r2, [r3, #0]
 80017b0:	e008      	b.n	80017c4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017b2:	78fb      	ldrb	r3, [r7, #3]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	212c      	movs	r1, #44	; 0x2c
 80017b8:	fb01 f303 	mul.w	r3, r1, r3
 80017bc:	4413      	add	r3, r2
 80017be:	3342      	adds	r3, #66	; 0x42
 80017c0:	2202      	movs	r2, #2
 80017c2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017c4:	787b      	ldrb	r3, [r7, #1]
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	f200 80c6 	bhi.w	8001958 <HAL_HCD_HC_SubmitRequest+0x210>
 80017cc:	a201      	add	r2, pc, #4	; (adr r2, 80017d4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80017ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d2:	bf00      	nop
 80017d4:	080017e5 	.word	0x080017e5
 80017d8:	08001945 	.word	0x08001945
 80017dc:	08001849 	.word	0x08001849
 80017e0:	080018c7 	.word	0x080018c7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80017e4:	7c3b      	ldrb	r3, [r7, #16]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	f040 80b8 	bne.w	800195c <HAL_HCD_HC_SubmitRequest+0x214>
 80017ec:	78bb      	ldrb	r3, [r7, #2]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f040 80b4 	bne.w	800195c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80017f4:	8b3b      	ldrh	r3, [r7, #24]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d108      	bne.n	800180c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	212c      	movs	r1, #44	; 0x2c
 8001800:	fb01 f303 	mul.w	r3, r1, r3
 8001804:	4413      	add	r3, r2
 8001806:	3355      	adds	r3, #85	; 0x55
 8001808:	2201      	movs	r2, #1
 800180a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800180c:	78fb      	ldrb	r3, [r7, #3]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	212c      	movs	r1, #44	; 0x2c
 8001812:	fb01 f303 	mul.w	r3, r1, r3
 8001816:	4413      	add	r3, r2
 8001818:	3355      	adds	r3, #85	; 0x55
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d109      	bne.n	8001834 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001820:	78fb      	ldrb	r3, [r7, #3]
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	212c      	movs	r1, #44	; 0x2c
 8001826:	fb01 f303 	mul.w	r3, r1, r3
 800182a:	4413      	add	r3, r2
 800182c:	3342      	adds	r3, #66	; 0x42
 800182e:	2200      	movs	r2, #0
 8001830:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001832:	e093      	b.n	800195c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001834:	78fb      	ldrb	r3, [r7, #3]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	212c      	movs	r1, #44	; 0x2c
 800183a:	fb01 f303 	mul.w	r3, r1, r3
 800183e:	4413      	add	r3, r2
 8001840:	3342      	adds	r3, #66	; 0x42
 8001842:	2202      	movs	r2, #2
 8001844:	701a      	strb	r2, [r3, #0]
      break;
 8001846:	e089      	b.n	800195c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001848:	78bb      	ldrb	r3, [r7, #2]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d11d      	bne.n	800188a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800184e:	78fb      	ldrb	r3, [r7, #3]
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	212c      	movs	r1, #44	; 0x2c
 8001854:	fb01 f303 	mul.w	r3, r1, r3
 8001858:	4413      	add	r3, r2
 800185a:	3355      	adds	r3, #85	; 0x55
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d109      	bne.n	8001876 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001862:	78fb      	ldrb	r3, [r7, #3]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	212c      	movs	r1, #44	; 0x2c
 8001868:	fb01 f303 	mul.w	r3, r1, r3
 800186c:	4413      	add	r3, r2
 800186e:	3342      	adds	r3, #66	; 0x42
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001874:	e073      	b.n	800195e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	212c      	movs	r1, #44	; 0x2c
 800187c:	fb01 f303 	mul.w	r3, r1, r3
 8001880:	4413      	add	r3, r2
 8001882:	3342      	adds	r3, #66	; 0x42
 8001884:	2202      	movs	r2, #2
 8001886:	701a      	strb	r2, [r3, #0]
      break;
 8001888:	e069      	b.n	800195e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800188a:	78fb      	ldrb	r3, [r7, #3]
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	212c      	movs	r1, #44	; 0x2c
 8001890:	fb01 f303 	mul.w	r3, r1, r3
 8001894:	4413      	add	r3, r2
 8001896:	3354      	adds	r3, #84	; 0x54
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d109      	bne.n	80018b2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800189e:	78fb      	ldrb	r3, [r7, #3]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	212c      	movs	r1, #44	; 0x2c
 80018a4:	fb01 f303 	mul.w	r3, r1, r3
 80018a8:	4413      	add	r3, r2
 80018aa:	3342      	adds	r3, #66	; 0x42
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]
      break;
 80018b0:	e055      	b.n	800195e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018b2:	78fb      	ldrb	r3, [r7, #3]
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	212c      	movs	r1, #44	; 0x2c
 80018b8:	fb01 f303 	mul.w	r3, r1, r3
 80018bc:	4413      	add	r3, r2
 80018be:	3342      	adds	r3, #66	; 0x42
 80018c0:	2202      	movs	r2, #2
 80018c2:	701a      	strb	r2, [r3, #0]
      break;
 80018c4:	e04b      	b.n	800195e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80018c6:	78bb      	ldrb	r3, [r7, #2]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d11d      	bne.n	8001908 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018cc:	78fb      	ldrb	r3, [r7, #3]
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	212c      	movs	r1, #44	; 0x2c
 80018d2:	fb01 f303 	mul.w	r3, r1, r3
 80018d6:	4413      	add	r3, r2
 80018d8:	3355      	adds	r3, #85	; 0x55
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d109      	bne.n	80018f4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018e0:	78fb      	ldrb	r3, [r7, #3]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	212c      	movs	r1, #44	; 0x2c
 80018e6:	fb01 f303 	mul.w	r3, r1, r3
 80018ea:	4413      	add	r3, r2
 80018ec:	3342      	adds	r3, #66	; 0x42
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018f2:	e034      	b.n	800195e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018f4:	78fb      	ldrb	r3, [r7, #3]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	212c      	movs	r1, #44	; 0x2c
 80018fa:	fb01 f303 	mul.w	r3, r1, r3
 80018fe:	4413      	add	r3, r2
 8001900:	3342      	adds	r3, #66	; 0x42
 8001902:	2202      	movs	r2, #2
 8001904:	701a      	strb	r2, [r3, #0]
      break;
 8001906:	e02a      	b.n	800195e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001908:	78fb      	ldrb	r3, [r7, #3]
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	212c      	movs	r1, #44	; 0x2c
 800190e:	fb01 f303 	mul.w	r3, r1, r3
 8001912:	4413      	add	r3, r2
 8001914:	3354      	adds	r3, #84	; 0x54
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d109      	bne.n	8001930 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800191c:	78fb      	ldrb	r3, [r7, #3]
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	212c      	movs	r1, #44	; 0x2c
 8001922:	fb01 f303 	mul.w	r3, r1, r3
 8001926:	4413      	add	r3, r2
 8001928:	3342      	adds	r3, #66	; 0x42
 800192a:	2200      	movs	r2, #0
 800192c:	701a      	strb	r2, [r3, #0]
      break;
 800192e:	e016      	b.n	800195e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001930:	78fb      	ldrb	r3, [r7, #3]
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	212c      	movs	r1, #44	; 0x2c
 8001936:	fb01 f303 	mul.w	r3, r1, r3
 800193a:	4413      	add	r3, r2
 800193c:	3342      	adds	r3, #66	; 0x42
 800193e:	2202      	movs	r2, #2
 8001940:	701a      	strb	r2, [r3, #0]
      break;
 8001942:	e00c      	b.n	800195e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001944:	78fb      	ldrb	r3, [r7, #3]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	212c      	movs	r1, #44	; 0x2c
 800194a:	fb01 f303 	mul.w	r3, r1, r3
 800194e:	4413      	add	r3, r2
 8001950:	3342      	adds	r3, #66	; 0x42
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
      break;
 8001956:	e002      	b.n	800195e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001958:	bf00      	nop
 800195a:	e000      	b.n	800195e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800195c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800195e:	78fb      	ldrb	r3, [r7, #3]
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	212c      	movs	r1, #44	; 0x2c
 8001964:	fb01 f303 	mul.w	r3, r1, r3
 8001968:	4413      	add	r3, r2
 800196a:	3344      	adds	r3, #68	; 0x44
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001970:	78fb      	ldrb	r3, [r7, #3]
 8001972:	8b3a      	ldrh	r2, [r7, #24]
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	202c      	movs	r0, #44	; 0x2c
 8001978:	fb00 f303 	mul.w	r3, r0, r3
 800197c:	440b      	add	r3, r1
 800197e:	334c      	adds	r3, #76	; 0x4c
 8001980:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001982:	78fb      	ldrb	r3, [r7, #3]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	212c      	movs	r1, #44	; 0x2c
 8001988:	fb01 f303 	mul.w	r3, r1, r3
 800198c:	4413      	add	r3, r2
 800198e:	3360      	adds	r3, #96	; 0x60
 8001990:	2200      	movs	r2, #0
 8001992:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001994:	78fb      	ldrb	r3, [r7, #3]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	212c      	movs	r1, #44	; 0x2c
 800199a:	fb01 f303 	mul.w	r3, r1, r3
 800199e:	4413      	add	r3, r2
 80019a0:	3350      	adds	r3, #80	; 0x50
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019a6:	78fb      	ldrb	r3, [r7, #3]
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	212c      	movs	r1, #44	; 0x2c
 80019ac:	fb01 f303 	mul.w	r3, r1, r3
 80019b0:	4413      	add	r3, r2
 80019b2:	3339      	adds	r3, #57	; 0x39
 80019b4:	78fa      	ldrb	r2, [r7, #3]
 80019b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80019b8:	78fb      	ldrb	r3, [r7, #3]
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	212c      	movs	r1, #44	; 0x2c
 80019be:	fb01 f303 	mul.w	r3, r1, r3
 80019c2:	4413      	add	r3, r2
 80019c4:	3361      	adds	r3, #97	; 0x61
 80019c6:	2200      	movs	r2, #0
 80019c8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6818      	ldr	r0, [r3, #0]
 80019ce:	78fb      	ldrb	r3, [r7, #3]
 80019d0:	222c      	movs	r2, #44	; 0x2c
 80019d2:	fb02 f303 	mul.w	r3, r2, r3
 80019d6:	3338      	adds	r3, #56	; 0x38
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	18d1      	adds	r1, r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	461a      	mov	r2, r3
 80019e4:	f003 fefa 	bl	80057dc <USB_HC_StartXfer>
 80019e8:	4603      	mov	r3, r0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop

080019f4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f003 fc1d 	bl	800524a <USB_GetMode>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	f040 80f6 	bne.w	8001c04 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f003 fc01 	bl	8005224 <USB_ReadInterrupts>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 80ec 	beq.w	8001c02 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f003 fbf8 	bl	8005224 <USB_ReadInterrupts>
 8001a34:	4603      	mov	r3, r0
 8001a36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a3e:	d104      	bne.n	8001a4a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a48:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f003 fbe8 	bl	8005224 <USB_ReadInterrupts>
 8001a54:	4603      	mov	r3, r0
 8001a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a5e:	d104      	bne.n	8001a6a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f003 fbd8 	bl	8005224 <USB_ReadInterrupts>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a7e:	d104      	bne.n	8001a8a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f003 fbc8 	bl	8005224 <USB_ReadInterrupts>
 8001a94:	4603      	mov	r3, r0
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d103      	bne.n	8001aa6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f003 fbba 	bl	8005224 <USB_ReadInterrupts>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001aba:	d11c      	bne.n	8001af6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ac4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10f      	bne.n	8001af6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001ad6:	2110      	movs	r1, #16
 8001ad8:	6938      	ldr	r0, [r7, #16]
 8001ada:	f003 fac9 	bl	8005070 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001ade:	6938      	ldr	r0, [r7, #16]
 8001ae0:	f003 faea 	bl	80050b8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2101      	movs	r1, #1
 8001aea:	4618      	mov	r0, r3
 8001aec:	f003 fca2 	bl	8005434 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f006 f975 	bl	8007de0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f003 fb92 	bl	8005224 <USB_ReadInterrupts>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b0a:	d102      	bne.n	8001b12 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f001 fa03 	bl	8002f18 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f003 fb84 	bl	8005224 <USB_ReadInterrupts>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	2b08      	cmp	r3, #8
 8001b24:	d106      	bne.n	8001b34 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f006 f93e 	bl	8007da8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2208      	movs	r2, #8
 8001b32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f003 fb73 	bl	8005224 <USB_ReadInterrupts>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	f003 0310 	and.w	r3, r3, #16
 8001b44:	2b10      	cmp	r3, #16
 8001b46:	d101      	bne.n	8001b4c <HAL_HCD_IRQHandler+0x158>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e000      	b.n	8001b4e <HAL_HCD_IRQHandler+0x15a>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d012      	beq.n	8001b78 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	699a      	ldr	r2, [r3, #24]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0210 	bic.w	r2, r2, #16
 8001b60:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f001 f906 	bl	8002d74 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	699a      	ldr	r2, [r3, #24]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0210 	orr.w	r2, r2, #16
 8001b76:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f003 fb51 	bl	8005224 <USB_ReadInterrupts>
 8001b82:	4603      	mov	r3, r0
 8001b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b8c:	d13a      	bne.n	8001c04 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f003 ff64 	bl	8005a60 <USB_HC_ReadInterrupt>
 8001b98:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	e025      	b.n	8001bec <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d018      	beq.n	8001be6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	015a      	lsls	r2, r3, #5
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4413      	add	r3, r2
 8001bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bca:	d106      	bne.n	8001bda <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f8ab 	bl	8001d2e <HCD_HC_IN_IRQHandler>
 8001bd8:	e005      	b.n	8001be6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	4619      	mov	r1, r3
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 fcc6 	bl	8002572 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	3301      	adds	r3, #1
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d3d4      	bcc.n	8001ba0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bfe:	615a      	str	r2, [r3, #20]
 8001c00:	e000      	b.n	8001c04 <HAL_HCD_IRQHandler+0x210>
      return;
 8001c02:	bf00      	nop
    }
  }
}
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d101      	bne.n	8001c20 <HAL_HCD_Start+0x16>
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	e013      	b.n	8001c48 <HAL_HCD_Start+0x3e>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f003 fc64 	bl	80054fc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f003 f9aa 	bl	8004f92 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d101      	bne.n	8001c66 <HAL_HCD_Stop+0x16>
 8001c62:	2302      	movs	r3, #2
 8001c64:	e00d      	b.n	8001c82 <HAL_HCD_Stop+0x32>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f004 f85e 	bl	8005d34 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f003 fc06 	bl	80054a8 <USB_ResetPort>
 8001c9c:	4603      	mov	r3, r0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001cb2:	78fb      	ldrb	r3, [r7, #3]
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	212c      	movs	r1, #44	; 0x2c
 8001cb8:	fb01 f303 	mul.w	r3, r1, r3
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3360      	adds	r3, #96	; 0x60
 8001cc0:	781b      	ldrb	r3, [r3, #0]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001cda:	78fb      	ldrb	r3, [r7, #3]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	212c      	movs	r1, #44	; 0x2c
 8001ce0:	fb01 f303 	mul.w	r3, r1, r3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3350      	adds	r3, #80	; 0x50
 8001ce8:	681b      	ldr	r3, [r3, #0]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f003 fc4a 	bl	800559c <USB_GetCurrentFrame>
 8001d08:	4603      	mov	r3, r0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f003 fc25 	bl	800556e <USB_GetHostSpeed>
 8001d24:	4603      	mov	r3, r0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b086      	sub	sp, #24
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	460b      	mov	r3, r1
 8001d38:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001d44:	78fb      	ldrb	r3, [r7, #3]
 8001d46:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	015a      	lsls	r2, r3, #5
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	4413      	add	r3, r2
 8001d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	d119      	bne.n	8001d92 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	015a      	lsls	r2, r3, #5
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4413      	add	r3, r2
 8001d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	2304      	movs	r3, #4
 8001d6e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	015a      	lsls	r2, r3, #5
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	4413      	add	r3, r2
 8001d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	0151      	lsls	r1, r2, #5
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	440a      	add	r2, r1
 8001d86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d8a:	f043 0302 	orr.w	r3, r3, #2
 8001d8e:	60d3      	str	r3, [r2, #12]
 8001d90:	e101      	b.n	8001f96 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	015a      	lsls	r2, r3, #5
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4413      	add	r3, r2
 8001d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001da8:	d12b      	bne.n	8001e02 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	015a      	lsls	r2, r3, #5
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4413      	add	r3, r2
 8001db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db6:	461a      	mov	r2, r3
 8001db8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dbc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	212c      	movs	r1, #44	; 0x2c
 8001dc4:	fb01 f303 	mul.w	r3, r1, r3
 8001dc8:	4413      	add	r3, r2
 8001dca:	3361      	adds	r3, #97	; 0x61
 8001dcc:	2207      	movs	r2, #7
 8001dce:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	015a      	lsls	r2, r3, #5
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	0151      	lsls	r1, r2, #5
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	440a      	add	r2, r1
 8001de6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dea:	f043 0302 	orr.w	r3, r3, #2
 8001dee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	4611      	mov	r1, r2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f003 fe41 	bl	8005a82 <USB_HC_Halt>
 8001e00:	e0c9      	b.n	8001f96 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	015a      	lsls	r2, r3, #5
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4413      	add	r3, r2
 8001e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 0320 	and.w	r3, r3, #32
 8001e14:	2b20      	cmp	r3, #32
 8001e16:	d109      	bne.n	8001e2c <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	015a      	lsls	r2, r3, #5
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	4413      	add	r3, r2
 8001e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e24:	461a      	mov	r2, r3
 8001e26:	2320      	movs	r3, #32
 8001e28:	6093      	str	r3, [r2, #8]
 8001e2a:	e0b4      	b.n	8001f96 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	015a      	lsls	r2, r3, #5
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4413      	add	r3, r2
 8001e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	2b08      	cmp	r3, #8
 8001e40:	d133      	bne.n	8001eaa <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	015a      	lsls	r2, r3, #5
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	4413      	add	r3, r2
 8001e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	0151      	lsls	r1, r2, #5
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	440a      	add	r2, r1
 8001e58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e5c:	f043 0302 	orr.w	r3, r3, #2
 8001e60:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	212c      	movs	r1, #44	; 0x2c
 8001e68:	fb01 f303 	mul.w	r3, r1, r3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3361      	adds	r3, #97	; 0x61
 8001e70:	2205      	movs	r2, #5
 8001e72:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	015a      	lsls	r2, r3, #5
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e80:	461a      	mov	r2, r3
 8001e82:	2310      	movs	r3, #16
 8001e84:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	015a      	lsls	r2, r3, #5
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e92:	461a      	mov	r2, r3
 8001e94:	2308      	movs	r3, #8
 8001e96:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	4611      	mov	r1, r2
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f003 fded 	bl	8005a82 <USB_HC_Halt>
 8001ea8:	e075      	b.n	8001f96 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	015a      	lsls	r2, r3, #5
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ec0:	d134      	bne.n	8001f2c <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	015a      	lsls	r2, r3, #5
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4413      	add	r3, r2
 8001eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	0151      	lsls	r1, r2, #5
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	440a      	add	r2, r1
 8001ed8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001edc:	f043 0302 	orr.w	r3, r3, #2
 8001ee0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	212c      	movs	r1, #44	; 0x2c
 8001ee8:	fb01 f303 	mul.w	r3, r1, r3
 8001eec:	4413      	add	r3, r2
 8001eee:	3361      	adds	r3, #97	; 0x61
 8001ef0:	2208      	movs	r2, #8
 8001ef2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	015a      	lsls	r2, r3, #5
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4413      	add	r3, r2
 8001efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f00:	461a      	mov	r2, r3
 8001f02:	2310      	movs	r3, #16
 8001f04:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	015a      	lsls	r2, r3, #5
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f12:	461a      	mov	r2, r3
 8001f14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f18:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	4611      	mov	r1, r2
 8001f24:	4618      	mov	r0, r3
 8001f26:	f003 fdac 	bl	8005a82 <USB_HC_Halt>
 8001f2a:	e034      	b.n	8001f96 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	015a      	lsls	r2, r3, #5
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4413      	add	r3, r2
 8001f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f3e:	2b80      	cmp	r3, #128	; 0x80
 8001f40:	d129      	bne.n	8001f96 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	015a      	lsls	r2, r3, #5
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4413      	add	r3, r2
 8001f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	0151      	lsls	r1, r2, #5
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	440a      	add	r2, r1
 8001f58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f5c:	f043 0302 	orr.w	r3, r3, #2
 8001f60:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	212c      	movs	r1, #44	; 0x2c
 8001f68:	fb01 f303 	mul.w	r3, r1, r3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3361      	adds	r3, #97	; 0x61
 8001f70:	2206      	movs	r2, #6
 8001f72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f003 fd7f 	bl	8005a82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	015a      	lsls	r2, r3, #5
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f90:	461a      	mov	r2, r3
 8001f92:	2380      	movs	r3, #128	; 0x80
 8001f94:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	015a      	lsls	r2, r3, #5
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fac:	d122      	bne.n	8001ff4 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	015a      	lsls	r2, r3, #5
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	0151      	lsls	r1, r2, #5
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	440a      	add	r2, r1
 8001fc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fc8:	f043 0302 	orr.w	r3, r3, #2
 8001fcc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f003 fd52 	bl	8005a82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	015a      	lsls	r2, r3, #5
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fea:	461a      	mov	r2, r3
 8001fec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ff0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001ff2:	e2ba      	b.n	800256a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	015a      	lsls	r2, r3, #5
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b01      	cmp	r3, #1
 8002008:	f040 811b 	bne.w	8002242 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d019      	beq.n	8002048 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	212c      	movs	r1, #44	; 0x2c
 800201a:	fb01 f303 	mul.w	r3, r1, r3
 800201e:	4413      	add	r3, r2
 8002020:	3348      	adds	r3, #72	; 0x48
 8002022:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	0159      	lsls	r1, r3, #5
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	440b      	add	r3, r1
 800202c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002036:	1ad2      	subs	r2, r2, r3
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	202c      	movs	r0, #44	; 0x2c
 800203e:	fb00 f303 	mul.w	r3, r0, r3
 8002042:	440b      	add	r3, r1
 8002044:	3350      	adds	r3, #80	; 0x50
 8002046:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	212c      	movs	r1, #44	; 0x2c
 800204e:	fb01 f303 	mul.w	r3, r1, r3
 8002052:	4413      	add	r3, r2
 8002054:	3361      	adds	r3, #97	; 0x61
 8002056:	2201      	movs	r2, #1
 8002058:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	212c      	movs	r1, #44	; 0x2c
 8002060:	fb01 f303 	mul.w	r3, r1, r3
 8002064:	4413      	add	r3, r2
 8002066:	335c      	adds	r3, #92	; 0x5c
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	015a      	lsls	r2, r3, #5
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4413      	add	r3, r2
 8002074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002078:	461a      	mov	r2, r3
 800207a:	2301      	movs	r3, #1
 800207c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	212c      	movs	r1, #44	; 0x2c
 8002084:	fb01 f303 	mul.w	r3, r1, r3
 8002088:	4413      	add	r3, r2
 800208a:	333f      	adds	r3, #63	; 0x3f
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d009      	beq.n	80020a6 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	212c      	movs	r1, #44	; 0x2c
 8002098:	fb01 f303 	mul.w	r3, r1, r3
 800209c:	4413      	add	r3, r2
 800209e:	333f      	adds	r3, #63	; 0x3f
 80020a0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d121      	bne.n	80020ea <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	015a      	lsls	r2, r3, #5
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	4413      	add	r3, r2
 80020ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	0151      	lsls	r1, r2, #5
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	440a      	add	r2, r1
 80020bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020c0:	f043 0302 	orr.w	r3, r3, #2
 80020c4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	4611      	mov	r1, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f003 fcd6 	bl	8005a82 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	015a      	lsls	r2, r3, #5
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4413      	add	r3, r2
 80020de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e2:	461a      	mov	r2, r3
 80020e4:	2310      	movs	r3, #16
 80020e6:	6093      	str	r3, [r2, #8]
 80020e8:	e066      	b.n	80021b8 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	212c      	movs	r1, #44	; 0x2c
 80020f0:	fb01 f303 	mul.w	r3, r1, r3
 80020f4:	4413      	add	r3, r2
 80020f6:	333f      	adds	r3, #63	; 0x3f
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d127      	bne.n	800214e <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	015a      	lsls	r2, r3, #5
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4413      	add	r3, r2
 8002106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	0151      	lsls	r1, r2, #5
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	440a      	add	r2, r1
 8002114:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002118:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800211c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	212c      	movs	r1, #44	; 0x2c
 8002124:	fb01 f303 	mul.w	r3, r1, r3
 8002128:	4413      	add	r3, r2
 800212a:	3360      	adds	r3, #96	; 0x60
 800212c:	2201      	movs	r2, #1
 800212e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	b2d9      	uxtb	r1, r3
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	202c      	movs	r0, #44	; 0x2c
 800213a:	fb00 f303 	mul.w	r3, r0, r3
 800213e:	4413      	add	r3, r2
 8002140:	3360      	adds	r3, #96	; 0x60
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	461a      	mov	r2, r3
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f005 fe58 	bl	8007dfc <HAL_HCD_HC_NotifyURBChange_Callback>
 800214c:	e034      	b.n	80021b8 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	212c      	movs	r1, #44	; 0x2c
 8002154:	fb01 f303 	mul.w	r3, r1, r3
 8002158:	4413      	add	r3, r2
 800215a:	333f      	adds	r3, #63	; 0x3f
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d12a      	bne.n	80021b8 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	212c      	movs	r1, #44	; 0x2c
 8002168:	fb01 f303 	mul.w	r3, r1, r3
 800216c:	4413      	add	r3, r2
 800216e:	3360      	adds	r3, #96	; 0x60
 8002170:	2201      	movs	r2, #1
 8002172:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	212c      	movs	r1, #44	; 0x2c
 800217a:	fb01 f303 	mul.w	r3, r1, r3
 800217e:	4413      	add	r3, r2
 8002180:	3354      	adds	r3, #84	; 0x54
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	f083 0301 	eor.w	r3, r3, #1
 8002188:	b2d8      	uxtb	r0, r3
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	212c      	movs	r1, #44	; 0x2c
 8002190:	fb01 f303 	mul.w	r3, r1, r3
 8002194:	4413      	add	r3, r2
 8002196:	3354      	adds	r3, #84	; 0x54
 8002198:	4602      	mov	r2, r0
 800219a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	b2d9      	uxtb	r1, r3
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	202c      	movs	r0, #44	; 0x2c
 80021a6:	fb00 f303 	mul.w	r3, r0, r3
 80021aa:	4413      	add	r3, r2
 80021ac:	3360      	adds	r3, #96	; 0x60
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f005 fe22 	bl	8007dfc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d12b      	bne.n	8002218 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	212c      	movs	r1, #44	; 0x2c
 80021c6:	fb01 f303 	mul.w	r3, r1, r3
 80021ca:	4413      	add	r3, r2
 80021cc:	3348      	adds	r3, #72	; 0x48
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	202c      	movs	r0, #44	; 0x2c
 80021d6:	fb00 f202 	mul.w	r2, r0, r2
 80021da:	440a      	add	r2, r1
 80021dc:	3240      	adds	r2, #64	; 0x40
 80021de:	8812      	ldrh	r2, [r2, #0]
 80021e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 81be 	beq.w	800256a <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	212c      	movs	r1, #44	; 0x2c
 80021f4:	fb01 f303 	mul.w	r3, r1, r3
 80021f8:	4413      	add	r3, r2
 80021fa:	3354      	adds	r3, #84	; 0x54
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	f083 0301 	eor.w	r3, r3, #1
 8002202:	b2d8      	uxtb	r0, r3
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	212c      	movs	r1, #44	; 0x2c
 800220a:	fb01 f303 	mul.w	r3, r1, r3
 800220e:	4413      	add	r3, r2
 8002210:	3354      	adds	r3, #84	; 0x54
 8002212:	4602      	mov	r2, r0
 8002214:	701a      	strb	r2, [r3, #0]
}
 8002216:	e1a8      	b.n	800256a <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	212c      	movs	r1, #44	; 0x2c
 800221e:	fb01 f303 	mul.w	r3, r1, r3
 8002222:	4413      	add	r3, r2
 8002224:	3354      	adds	r3, #84	; 0x54
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	f083 0301 	eor.w	r3, r3, #1
 800222c:	b2d8      	uxtb	r0, r3
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	212c      	movs	r1, #44	; 0x2c
 8002234:	fb01 f303 	mul.w	r3, r1, r3
 8002238:	4413      	add	r3, r2
 800223a:	3354      	adds	r3, #84	; 0x54
 800223c:	4602      	mov	r2, r0
 800223e:	701a      	strb	r2, [r3, #0]
}
 8002240:	e193      	b.n	800256a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	015a      	lsls	r2, r3, #5
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4413      	add	r3, r2
 800224a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b02      	cmp	r3, #2
 8002256:	f040 8106 	bne.w	8002466 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	015a      	lsls	r2, r3, #5
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	4413      	add	r3, r2
 8002262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	0151      	lsls	r1, r2, #5
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	440a      	add	r2, r1
 8002270:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002274:	f023 0302 	bic.w	r3, r3, #2
 8002278:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	212c      	movs	r1, #44	; 0x2c
 8002280:	fb01 f303 	mul.w	r3, r1, r3
 8002284:	4413      	add	r3, r2
 8002286:	3361      	adds	r3, #97	; 0x61
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d109      	bne.n	80022a2 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	212c      	movs	r1, #44	; 0x2c
 8002294:	fb01 f303 	mul.w	r3, r1, r3
 8002298:	4413      	add	r3, r2
 800229a:	3360      	adds	r3, #96	; 0x60
 800229c:	2201      	movs	r2, #1
 800229e:	701a      	strb	r2, [r3, #0]
 80022a0:	e0c9      	b.n	8002436 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	212c      	movs	r1, #44	; 0x2c
 80022a8:	fb01 f303 	mul.w	r3, r1, r3
 80022ac:	4413      	add	r3, r2
 80022ae:	3361      	adds	r3, #97	; 0x61
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b05      	cmp	r3, #5
 80022b4:	d109      	bne.n	80022ca <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	212c      	movs	r1, #44	; 0x2c
 80022bc:	fb01 f303 	mul.w	r3, r1, r3
 80022c0:	4413      	add	r3, r2
 80022c2:	3360      	adds	r3, #96	; 0x60
 80022c4:	2205      	movs	r2, #5
 80022c6:	701a      	strb	r2, [r3, #0]
 80022c8:	e0b5      	b.n	8002436 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	212c      	movs	r1, #44	; 0x2c
 80022d0:	fb01 f303 	mul.w	r3, r1, r3
 80022d4:	4413      	add	r3, r2
 80022d6:	3361      	adds	r3, #97	; 0x61
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b06      	cmp	r3, #6
 80022dc:	d009      	beq.n	80022f2 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	212c      	movs	r1, #44	; 0x2c
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	4413      	add	r3, r2
 80022ea:	3361      	adds	r3, #97	; 0x61
 80022ec:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d150      	bne.n	8002394 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	212c      	movs	r1, #44	; 0x2c
 80022f8:	fb01 f303 	mul.w	r3, r1, r3
 80022fc:	4413      	add	r3, r2
 80022fe:	335c      	adds	r3, #92	; 0x5c
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	202c      	movs	r0, #44	; 0x2c
 800230a:	fb00 f303 	mul.w	r3, r0, r3
 800230e:	440b      	add	r3, r1
 8002310:	335c      	adds	r3, #92	; 0x5c
 8002312:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	212c      	movs	r1, #44	; 0x2c
 800231a:	fb01 f303 	mul.w	r3, r1, r3
 800231e:	4413      	add	r3, r2
 8002320:	335c      	adds	r3, #92	; 0x5c
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d912      	bls.n	800234e <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	212c      	movs	r1, #44	; 0x2c
 800232e:	fb01 f303 	mul.w	r3, r1, r3
 8002332:	4413      	add	r3, r2
 8002334:	335c      	adds	r3, #92	; 0x5c
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	212c      	movs	r1, #44	; 0x2c
 8002340:	fb01 f303 	mul.w	r3, r1, r3
 8002344:	4413      	add	r3, r2
 8002346:	3360      	adds	r3, #96	; 0x60
 8002348:	2204      	movs	r2, #4
 800234a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800234c:	e073      	b.n	8002436 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	212c      	movs	r1, #44	; 0x2c
 8002354:	fb01 f303 	mul.w	r3, r1, r3
 8002358:	4413      	add	r3, r2
 800235a:	3360      	adds	r3, #96	; 0x60
 800235c:	2202      	movs	r2, #2
 800235e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	015a      	lsls	r2, r3, #5
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	4413      	add	r3, r2
 8002368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002376:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800237e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	015a      	lsls	r2, r3, #5
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	4413      	add	r3, r2
 8002388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238c:	461a      	mov	r2, r3
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002392:	e050      	b.n	8002436 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	212c      	movs	r1, #44	; 0x2c
 800239a:	fb01 f303 	mul.w	r3, r1, r3
 800239e:	4413      	add	r3, r2
 80023a0:	3361      	adds	r3, #97	; 0x61
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d122      	bne.n	80023ee <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	212c      	movs	r1, #44	; 0x2c
 80023ae:	fb01 f303 	mul.w	r3, r1, r3
 80023b2:	4413      	add	r3, r2
 80023b4:	3360      	adds	r3, #96	; 0x60
 80023b6:	2202      	movs	r2, #2
 80023b8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	015a      	lsls	r2, r3, #5
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4413      	add	r3, r2
 80023c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023d0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023d8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	015a      	lsls	r2, r3, #5
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4413      	add	r3, r2
 80023e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e6:	461a      	mov	r2, r3
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	6013      	str	r3, [r2, #0]
 80023ec:	e023      	b.n	8002436 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	212c      	movs	r1, #44	; 0x2c
 80023f4:	fb01 f303 	mul.w	r3, r1, r3
 80023f8:	4413      	add	r3, r2
 80023fa:	3361      	adds	r3, #97	; 0x61
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b07      	cmp	r3, #7
 8002400:	d119      	bne.n	8002436 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	212c      	movs	r1, #44	; 0x2c
 8002408:	fb01 f303 	mul.w	r3, r1, r3
 800240c:	4413      	add	r3, r2
 800240e:	335c      	adds	r3, #92	; 0x5c
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	1c5a      	adds	r2, r3, #1
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	202c      	movs	r0, #44	; 0x2c
 800241a:	fb00 f303 	mul.w	r3, r0, r3
 800241e:	440b      	add	r3, r1
 8002420:	335c      	adds	r3, #92	; 0x5c
 8002422:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	212c      	movs	r1, #44	; 0x2c
 800242a:	fb01 f303 	mul.w	r3, r1, r3
 800242e:	4413      	add	r3, r2
 8002430:	3360      	adds	r3, #96	; 0x60
 8002432:	2204      	movs	r2, #4
 8002434:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	015a      	lsls	r2, r3, #5
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4413      	add	r3, r2
 800243e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002442:	461a      	mov	r2, r3
 8002444:	2302      	movs	r3, #2
 8002446:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	b2d9      	uxtb	r1, r3
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	202c      	movs	r0, #44	; 0x2c
 8002452:	fb00 f303 	mul.w	r3, r0, r3
 8002456:	4413      	add	r3, r2
 8002458:	3360      	adds	r3, #96	; 0x60
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	461a      	mov	r2, r3
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f005 fccc 	bl	8007dfc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002464:	e081      	b.n	800256a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	015a      	lsls	r2, r3, #5
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4413      	add	r3, r2
 800246e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 0310 	and.w	r3, r3, #16
 8002478:	2b10      	cmp	r3, #16
 800247a:	d176      	bne.n	800256a <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	212c      	movs	r1, #44	; 0x2c
 8002482:	fb01 f303 	mul.w	r3, r1, r3
 8002486:	4413      	add	r3, r2
 8002488:	333f      	adds	r3, #63	; 0x3f
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b03      	cmp	r3, #3
 800248e:	d121      	bne.n	80024d4 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	212c      	movs	r1, #44	; 0x2c
 8002496:	fb01 f303 	mul.w	r3, r1, r3
 800249a:	4413      	add	r3, r2
 800249c:	335c      	adds	r3, #92	; 0x5c
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	015a      	lsls	r2, r3, #5
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	4413      	add	r3, r2
 80024aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	0151      	lsls	r1, r2, #5
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	440a      	add	r2, r1
 80024b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024bc:	f043 0302 	orr.w	r3, r3, #2
 80024c0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	4611      	mov	r1, r2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f003 fad8 	bl	8005a82 <USB_HC_Halt>
 80024d2:	e041      	b.n	8002558 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	212c      	movs	r1, #44	; 0x2c
 80024da:	fb01 f303 	mul.w	r3, r1, r3
 80024de:	4413      	add	r3, r2
 80024e0:	333f      	adds	r3, #63	; 0x3f
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d009      	beq.n	80024fc <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	212c      	movs	r1, #44	; 0x2c
 80024ee:	fb01 f303 	mul.w	r3, r1, r3
 80024f2:	4413      	add	r3, r2
 80024f4:	333f      	adds	r3, #63	; 0x3f
 80024f6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d12d      	bne.n	8002558 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	212c      	movs	r1, #44	; 0x2c
 8002502:	fb01 f303 	mul.w	r3, r1, r3
 8002506:	4413      	add	r3, r2
 8002508:	335c      	adds	r3, #92	; 0x5c
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d120      	bne.n	8002558 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	212c      	movs	r1, #44	; 0x2c
 800251c:	fb01 f303 	mul.w	r3, r1, r3
 8002520:	4413      	add	r3, r2
 8002522:	3361      	adds	r3, #97	; 0x61
 8002524:	2203      	movs	r2, #3
 8002526:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	015a      	lsls	r2, r3, #5
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4413      	add	r3, r2
 8002530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	0151      	lsls	r1, r2, #5
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	440a      	add	r2, r1
 800253e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002542:	f043 0302 	orr.w	r3, r3, #2
 8002546:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	4611      	mov	r1, r2
 8002552:	4618      	mov	r0, r3
 8002554:	f003 fa95 	bl	8005a82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	015a      	lsls	r2, r3, #5
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4413      	add	r3, r2
 8002560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002564:	461a      	mov	r2, r3
 8002566:	2310      	movs	r3, #16
 8002568:	6093      	str	r3, [r2, #8]
}
 800256a:	bf00      	nop
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b088      	sub	sp, #32
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	460b      	mov	r3, r1
 800257c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002588:	78fb      	ldrb	r3, [r7, #3]
 800258a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	015a      	lsls	r2, r3, #5
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	4413      	add	r3, r2
 8002594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d119      	bne.n	80025d6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	015a      	lsls	r2, r3, #5
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	4413      	add	r3, r2
 80025aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ae:	461a      	mov	r2, r3
 80025b0:	2304      	movs	r3, #4
 80025b2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	015a      	lsls	r2, r3, #5
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	4413      	add	r3, r2
 80025bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	0151      	lsls	r1, r2, #5
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	440a      	add	r2, r1
 80025ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025ce:	f043 0302 	orr.w	r3, r3, #2
 80025d2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80025d4:	e3ca      	b.n	8002d6c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	015a      	lsls	r2, r3, #5
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	4413      	add	r3, r2
 80025de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 0320 	and.w	r3, r3, #32
 80025e8:	2b20      	cmp	r3, #32
 80025ea:	d13e      	bne.n	800266a <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	015a      	lsls	r2, r3, #5
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	4413      	add	r3, r2
 80025f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f8:	461a      	mov	r2, r3
 80025fa:	2320      	movs	r3, #32
 80025fc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	212c      	movs	r1, #44	; 0x2c
 8002604:	fb01 f303 	mul.w	r3, r1, r3
 8002608:	4413      	add	r3, r2
 800260a:	333d      	adds	r3, #61	; 0x3d
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b01      	cmp	r3, #1
 8002610:	f040 83ac 	bne.w	8002d6c <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	212c      	movs	r1, #44	; 0x2c
 800261a:	fb01 f303 	mul.w	r3, r1, r3
 800261e:	4413      	add	r3, r2
 8002620:	333d      	adds	r3, #61	; 0x3d
 8002622:	2200      	movs	r2, #0
 8002624:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	212c      	movs	r1, #44	; 0x2c
 800262c:	fb01 f303 	mul.w	r3, r1, r3
 8002630:	4413      	add	r3, r2
 8002632:	3360      	adds	r3, #96	; 0x60
 8002634:	2202      	movs	r2, #2
 8002636:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	4413      	add	r3, r2
 8002640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	0151      	lsls	r1, r2, #5
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	440a      	add	r2, r1
 800264e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002652:	f043 0302 	orr.w	r3, r3, #2
 8002656:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	4611      	mov	r1, r2
 8002662:	4618      	mov	r0, r3
 8002664:	f003 fa0d 	bl	8005a82 <USB_HC_Halt>
}
 8002668:	e380      	b.n	8002d6c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	015a      	lsls	r2, r3, #5
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	4413      	add	r3, r2
 8002672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800267c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002680:	d122      	bne.n	80026c8 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	015a      	lsls	r2, r3, #5
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	4413      	add	r3, r2
 800268a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	0151      	lsls	r1, r2, #5
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	440a      	add	r2, r1
 8002698:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800269c:	f043 0302 	orr.w	r3, r3, #2
 80026a0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	4611      	mov	r1, r2
 80026ac:	4618      	mov	r0, r3
 80026ae:	f003 f9e8 	bl	8005a82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	015a      	lsls	r2, r3, #5
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	4413      	add	r3, r2
 80026ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026be:	461a      	mov	r2, r3
 80026c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026c4:	6093      	str	r3, [r2, #8]
}
 80026c6:	e351      	b.n	8002d6c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	015a      	lsls	r2, r3, #5
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d150      	bne.n	8002780 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	212c      	movs	r1, #44	; 0x2c
 80026e4:	fb01 f303 	mul.w	r3, r1, r3
 80026e8:	4413      	add	r3, r2
 80026ea:	335c      	adds	r3, #92	; 0x5c
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	015a      	lsls	r2, r3, #5
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	4413      	add	r3, r2
 80026f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002702:	2b40      	cmp	r3, #64	; 0x40
 8002704:	d111      	bne.n	800272a <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	212c      	movs	r1, #44	; 0x2c
 800270c:	fb01 f303 	mul.w	r3, r1, r3
 8002710:	4413      	add	r3, r2
 8002712:	333d      	adds	r3, #61	; 0x3d
 8002714:	2201      	movs	r2, #1
 8002716:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	015a      	lsls	r2, r3, #5
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	4413      	add	r3, r2
 8002720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002724:	461a      	mov	r2, r3
 8002726:	2340      	movs	r3, #64	; 0x40
 8002728:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	015a      	lsls	r2, r3, #5
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	4413      	add	r3, r2
 8002732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	0151      	lsls	r1, r2, #5
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	440a      	add	r2, r1
 8002740:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002744:	f043 0302 	orr.w	r3, r3, #2
 8002748:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	4611      	mov	r1, r2
 8002754:	4618      	mov	r0, r3
 8002756:	f003 f994 	bl	8005a82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	015a      	lsls	r2, r3, #5
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	4413      	add	r3, r2
 8002762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002766:	461a      	mov	r2, r3
 8002768:	2301      	movs	r3, #1
 800276a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	212c      	movs	r1, #44	; 0x2c
 8002772:	fb01 f303 	mul.w	r3, r1, r3
 8002776:	4413      	add	r3, r2
 8002778:	3361      	adds	r3, #97	; 0x61
 800277a:	2201      	movs	r2, #1
 800277c:	701a      	strb	r2, [r3, #0]
}
 800277e:	e2f5      	b.n	8002d6c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	015a      	lsls	r2, r3, #5
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	4413      	add	r3, r2
 8002788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002792:	2b40      	cmp	r3, #64	; 0x40
 8002794:	d13c      	bne.n	8002810 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	212c      	movs	r1, #44	; 0x2c
 800279c:	fb01 f303 	mul.w	r3, r1, r3
 80027a0:	4413      	add	r3, r2
 80027a2:	3361      	adds	r3, #97	; 0x61
 80027a4:	2204      	movs	r2, #4
 80027a6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	212c      	movs	r1, #44	; 0x2c
 80027ae:	fb01 f303 	mul.w	r3, r1, r3
 80027b2:	4413      	add	r3, r2
 80027b4:	333d      	adds	r3, #61	; 0x3d
 80027b6:	2201      	movs	r2, #1
 80027b8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	212c      	movs	r1, #44	; 0x2c
 80027c0:	fb01 f303 	mul.w	r3, r1, r3
 80027c4:	4413      	add	r3, r2
 80027c6:	335c      	adds	r3, #92	; 0x5c
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	015a      	lsls	r2, r3, #5
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	4413      	add	r3, r2
 80027d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	0151      	lsls	r1, r2, #5
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	440a      	add	r2, r1
 80027e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027e6:	f043 0302 	orr.w	r3, r3, #2
 80027ea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	4611      	mov	r1, r2
 80027f6:	4618      	mov	r0, r3
 80027f8:	f003 f943 	bl	8005a82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	015a      	lsls	r2, r3, #5
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	4413      	add	r3, r2
 8002804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002808:	461a      	mov	r2, r3
 800280a:	2340      	movs	r3, #64	; 0x40
 800280c:	6093      	str	r3, [r2, #8]
}
 800280e:	e2ad      	b.n	8002d6c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	015a      	lsls	r2, r3, #5
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	4413      	add	r3, r2
 8002818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b08      	cmp	r3, #8
 8002824:	d12a      	bne.n	800287c <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	015a      	lsls	r2, r3, #5
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	4413      	add	r3, r2
 800282e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002832:	461a      	mov	r2, r3
 8002834:	2308      	movs	r3, #8
 8002836:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	015a      	lsls	r2, r3, #5
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	4413      	add	r3, r2
 8002840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	0151      	lsls	r1, r2, #5
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	440a      	add	r2, r1
 800284e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002852:	f043 0302 	orr.w	r3, r3, #2
 8002856:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	4611      	mov	r1, r2
 8002862:	4618      	mov	r0, r3
 8002864:	f003 f90d 	bl	8005a82 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	212c      	movs	r1, #44	; 0x2c
 800286e:	fb01 f303 	mul.w	r3, r1, r3
 8002872:	4413      	add	r3, r2
 8002874:	3361      	adds	r3, #97	; 0x61
 8002876:	2205      	movs	r2, #5
 8002878:	701a      	strb	r2, [r3, #0]
}
 800287a:	e277      	b.n	8002d6c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	4413      	add	r3, r2
 8002884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 0310 	and.w	r3, r3, #16
 800288e:	2b10      	cmp	r3, #16
 8002890:	d150      	bne.n	8002934 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	212c      	movs	r1, #44	; 0x2c
 8002898:	fb01 f303 	mul.w	r3, r1, r3
 800289c:	4413      	add	r3, r2
 800289e:	335c      	adds	r3, #92	; 0x5c
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	212c      	movs	r1, #44	; 0x2c
 80028aa:	fb01 f303 	mul.w	r3, r1, r3
 80028ae:	4413      	add	r3, r2
 80028b0:	3361      	adds	r3, #97	; 0x61
 80028b2:	2203      	movs	r2, #3
 80028b4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	212c      	movs	r1, #44	; 0x2c
 80028bc:	fb01 f303 	mul.w	r3, r1, r3
 80028c0:	4413      	add	r3, r2
 80028c2:	333d      	adds	r3, #61	; 0x3d
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d112      	bne.n	80028f0 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	212c      	movs	r1, #44	; 0x2c
 80028d0:	fb01 f303 	mul.w	r3, r1, r3
 80028d4:	4413      	add	r3, r2
 80028d6:	333c      	adds	r3, #60	; 0x3c
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d108      	bne.n	80028f0 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	212c      	movs	r1, #44	; 0x2c
 80028e4:	fb01 f303 	mul.w	r3, r1, r3
 80028e8:	4413      	add	r3, r2
 80028ea:	333d      	adds	r3, #61	; 0x3d
 80028ec:	2201      	movs	r2, #1
 80028ee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	015a      	lsls	r2, r3, #5
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	4413      	add	r3, r2
 80028f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	0151      	lsls	r1, r2, #5
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	440a      	add	r2, r1
 8002906:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800290a:	f043 0302 	orr.w	r3, r3, #2
 800290e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	4611      	mov	r1, r2
 800291a:	4618      	mov	r0, r3
 800291c:	f003 f8b1 	bl	8005a82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	4413      	add	r3, r2
 8002928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292c:	461a      	mov	r2, r3
 800292e:	2310      	movs	r3, #16
 8002930:	6093      	str	r3, [r2, #8]
}
 8002932:	e21b      	b.n	8002d6c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	015a      	lsls	r2, r3, #5
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	4413      	add	r3, r2
 800293c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002946:	2b80      	cmp	r3, #128	; 0x80
 8002948:	d174      	bne.n	8002a34 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d121      	bne.n	8002996 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	212c      	movs	r1, #44	; 0x2c
 8002958:	fb01 f303 	mul.w	r3, r1, r3
 800295c:	4413      	add	r3, r2
 800295e:	3361      	adds	r3, #97	; 0x61
 8002960:	2206      	movs	r2, #6
 8002962:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	015a      	lsls	r2, r3, #5
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	4413      	add	r3, r2
 800296c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	0151      	lsls	r1, r2, #5
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	440a      	add	r2, r1
 800297a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800297e:	f043 0302 	orr.w	r3, r3, #2
 8002982:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	4611      	mov	r1, r2
 800298e:	4618      	mov	r0, r3
 8002990:	f003 f877 	bl	8005a82 <USB_HC_Halt>
 8002994:	e044      	b.n	8002a20 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	212c      	movs	r1, #44	; 0x2c
 800299c:	fb01 f303 	mul.w	r3, r1, r3
 80029a0:	4413      	add	r3, r2
 80029a2:	335c      	adds	r3, #92	; 0x5c
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	202c      	movs	r0, #44	; 0x2c
 80029ae:	fb00 f303 	mul.w	r3, r0, r3
 80029b2:	440b      	add	r3, r1
 80029b4:	335c      	adds	r3, #92	; 0x5c
 80029b6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	212c      	movs	r1, #44	; 0x2c
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	335c      	adds	r3, #92	; 0x5c
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d920      	bls.n	8002a0e <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	212c      	movs	r1, #44	; 0x2c
 80029d2:	fb01 f303 	mul.w	r3, r1, r3
 80029d6:	4413      	add	r3, r2
 80029d8:	335c      	adds	r3, #92	; 0x5c
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	212c      	movs	r1, #44	; 0x2c
 80029e4:	fb01 f303 	mul.w	r3, r1, r3
 80029e8:	4413      	add	r3, r2
 80029ea:	3360      	adds	r3, #96	; 0x60
 80029ec:	2204      	movs	r2, #4
 80029ee:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	b2d9      	uxtb	r1, r3
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	202c      	movs	r0, #44	; 0x2c
 80029fa:	fb00 f303 	mul.w	r3, r0, r3
 80029fe:	4413      	add	r3, r2
 8002a00:	3360      	adds	r3, #96	; 0x60
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	461a      	mov	r2, r3
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f005 f9f8 	bl	8007dfc <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a0c:	e008      	b.n	8002a20 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	212c      	movs	r1, #44	; 0x2c
 8002a14:	fb01 f303 	mul.w	r3, r1, r3
 8002a18:	4413      	add	r3, r2
 8002a1a:	3360      	adds	r3, #96	; 0x60
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	015a      	lsls	r2, r3, #5
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	2380      	movs	r3, #128	; 0x80
 8002a30:	6093      	str	r3, [r2, #8]
}
 8002a32:	e19b      	b.n	8002d6c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	015a      	lsls	r2, r3, #5
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a4a:	d134      	bne.n	8002ab6 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	015a      	lsls	r2, r3, #5
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	4413      	add	r3, r2
 8002a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	0151      	lsls	r1, r2, #5
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	440a      	add	r2, r1
 8002a62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a66:	f043 0302 	orr.w	r3, r3, #2
 8002a6a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	4611      	mov	r1, r2
 8002a76:	4618      	mov	r0, r3
 8002a78:	f003 f803 	bl	8005a82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a88:	461a      	mov	r2, r3
 8002a8a:	2310      	movs	r3, #16
 8002a8c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	015a      	lsls	r2, r3, #5
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	4413      	add	r3, r2
 8002a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aa0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	212c      	movs	r1, #44	; 0x2c
 8002aa8:	fb01 f303 	mul.w	r3, r1, r3
 8002aac:	4413      	add	r3, r2
 8002aae:	3361      	adds	r3, #97	; 0x61
 8002ab0:	2208      	movs	r2, #8
 8002ab2:	701a      	strb	r2, [r3, #0]
}
 8002ab4:	e15a      	b.n	8002d6c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	015a      	lsls	r2, r3, #5
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	4413      	add	r3, r2
 8002abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	f040 814f 	bne.w	8002d6c <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	015a      	lsls	r2, r3, #5
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	0151      	lsls	r1, r2, #5
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	440a      	add	r2, r1
 8002ae4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ae8:	f023 0302 	bic.w	r3, r3, #2
 8002aec:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	212c      	movs	r1, #44	; 0x2c
 8002af4:	fb01 f303 	mul.w	r3, r1, r3
 8002af8:	4413      	add	r3, r2
 8002afa:	3361      	adds	r3, #97	; 0x61
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d17d      	bne.n	8002bfe <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	212c      	movs	r1, #44	; 0x2c
 8002b08:	fb01 f303 	mul.w	r3, r1, r3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	3360      	adds	r3, #96	; 0x60
 8002b10:	2201      	movs	r2, #1
 8002b12:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	212c      	movs	r1, #44	; 0x2c
 8002b1a:	fb01 f303 	mul.w	r3, r1, r3
 8002b1e:	4413      	add	r3, r2
 8002b20:	333f      	adds	r3, #63	; 0x3f
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d00a      	beq.n	8002b3e <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	212c      	movs	r1, #44	; 0x2c
 8002b2e:	fb01 f303 	mul.w	r3, r1, r3
 8002b32:	4413      	add	r3, r2
 8002b34:	333f      	adds	r3, #63	; 0x3f
 8002b36:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	f040 8100 	bne.w	8002d3e <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d113      	bne.n	8002b6e <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	212c      	movs	r1, #44	; 0x2c
 8002b4c:	fb01 f303 	mul.w	r3, r1, r3
 8002b50:	4413      	add	r3, r2
 8002b52:	3355      	adds	r3, #85	; 0x55
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	f083 0301 	eor.w	r3, r3, #1
 8002b5a:	b2d8      	uxtb	r0, r3
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	212c      	movs	r1, #44	; 0x2c
 8002b62:	fb01 f303 	mul.w	r3, r1, r3
 8002b66:	4413      	add	r3, r2
 8002b68:	3355      	adds	r3, #85	; 0x55
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	f040 80e3 	bne.w	8002d3e <HCD_HC_OUT_IRQHandler+0x7cc>
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	212c      	movs	r1, #44	; 0x2c
 8002b7e:	fb01 f303 	mul.w	r3, r1, r3
 8002b82:	4413      	add	r3, r2
 8002b84:	334c      	adds	r3, #76	; 0x4c
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 80d8 	beq.w	8002d3e <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	212c      	movs	r1, #44	; 0x2c
 8002b94:	fb01 f303 	mul.w	r3, r1, r3
 8002b98:	4413      	add	r3, r2
 8002b9a:	334c      	adds	r3, #76	; 0x4c
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	202c      	movs	r0, #44	; 0x2c
 8002ba4:	fb00 f202 	mul.w	r2, r0, r2
 8002ba8:	440a      	add	r2, r1
 8002baa:	3240      	adds	r2, #64	; 0x40
 8002bac:	8812      	ldrh	r2, [r2, #0]
 8002bae:	4413      	add	r3, r2
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	202c      	movs	r0, #44	; 0x2c
 8002bb8:	fb00 f202 	mul.w	r2, r0, r2
 8002bbc:	440a      	add	r2, r1
 8002bbe:	3240      	adds	r2, #64	; 0x40
 8002bc0:	8812      	ldrh	r2, [r2, #0]
 8002bc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 80b5 	beq.w	8002d3e <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	212c      	movs	r1, #44	; 0x2c
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	3355      	adds	r3, #85	; 0x55
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	f083 0301 	eor.w	r3, r3, #1
 8002be8:	b2d8      	uxtb	r0, r3
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	212c      	movs	r1, #44	; 0x2c
 8002bf0:	fb01 f303 	mul.w	r3, r1, r3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3355      	adds	r3, #85	; 0x55
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	701a      	strb	r2, [r3, #0]
 8002bfc:	e09f      	b.n	8002d3e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	212c      	movs	r1, #44	; 0x2c
 8002c04:	fb01 f303 	mul.w	r3, r1, r3
 8002c08:	4413      	add	r3, r2
 8002c0a:	3361      	adds	r3, #97	; 0x61
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b03      	cmp	r3, #3
 8002c10:	d109      	bne.n	8002c26 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	212c      	movs	r1, #44	; 0x2c
 8002c18:	fb01 f303 	mul.w	r3, r1, r3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3360      	adds	r3, #96	; 0x60
 8002c20:	2202      	movs	r2, #2
 8002c22:	701a      	strb	r2, [r3, #0]
 8002c24:	e08b      	b.n	8002d3e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	212c      	movs	r1, #44	; 0x2c
 8002c2c:	fb01 f303 	mul.w	r3, r1, r3
 8002c30:	4413      	add	r3, r2
 8002c32:	3361      	adds	r3, #97	; 0x61
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d109      	bne.n	8002c4e <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	212c      	movs	r1, #44	; 0x2c
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	4413      	add	r3, r2
 8002c46:	3360      	adds	r3, #96	; 0x60
 8002c48:	2202      	movs	r2, #2
 8002c4a:	701a      	strb	r2, [r3, #0]
 8002c4c:	e077      	b.n	8002d3e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	212c      	movs	r1, #44	; 0x2c
 8002c54:	fb01 f303 	mul.w	r3, r1, r3
 8002c58:	4413      	add	r3, r2
 8002c5a:	3361      	adds	r3, #97	; 0x61
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b05      	cmp	r3, #5
 8002c60:	d109      	bne.n	8002c76 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	212c      	movs	r1, #44	; 0x2c
 8002c68:	fb01 f303 	mul.w	r3, r1, r3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3360      	adds	r3, #96	; 0x60
 8002c70:	2205      	movs	r2, #5
 8002c72:	701a      	strb	r2, [r3, #0]
 8002c74:	e063      	b.n	8002d3e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	212c      	movs	r1, #44	; 0x2c
 8002c7c:	fb01 f303 	mul.w	r3, r1, r3
 8002c80:	4413      	add	r3, r2
 8002c82:	3361      	adds	r3, #97	; 0x61
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b06      	cmp	r3, #6
 8002c88:	d009      	beq.n	8002c9e <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	212c      	movs	r1, #44	; 0x2c
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	4413      	add	r3, r2
 8002c96:	3361      	adds	r3, #97	; 0x61
 8002c98:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d14f      	bne.n	8002d3e <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	212c      	movs	r1, #44	; 0x2c
 8002ca4:	fb01 f303 	mul.w	r3, r1, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	335c      	adds	r3, #92	; 0x5c
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	202c      	movs	r0, #44	; 0x2c
 8002cb6:	fb00 f303 	mul.w	r3, r0, r3
 8002cba:	440b      	add	r3, r1
 8002cbc:	335c      	adds	r3, #92	; 0x5c
 8002cbe:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	212c      	movs	r1, #44	; 0x2c
 8002cc6:	fb01 f303 	mul.w	r3, r1, r3
 8002cca:	4413      	add	r3, r2
 8002ccc:	335c      	adds	r3, #92	; 0x5c
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d912      	bls.n	8002cfa <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	212c      	movs	r1, #44	; 0x2c
 8002cda:	fb01 f303 	mul.w	r3, r1, r3
 8002cde:	4413      	add	r3, r2
 8002ce0:	335c      	adds	r3, #92	; 0x5c
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	212c      	movs	r1, #44	; 0x2c
 8002cec:	fb01 f303 	mul.w	r3, r1, r3
 8002cf0:	4413      	add	r3, r2
 8002cf2:	3360      	adds	r3, #96	; 0x60
 8002cf4:	2204      	movs	r2, #4
 8002cf6:	701a      	strb	r2, [r3, #0]
 8002cf8:	e021      	b.n	8002d3e <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	212c      	movs	r1, #44	; 0x2c
 8002d00:	fb01 f303 	mul.w	r3, r1, r3
 8002d04:	4413      	add	r3, r2
 8002d06:	3360      	adds	r3, #96	; 0x60
 8002d08:	2202      	movs	r2, #2
 8002d0a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	015a      	lsls	r2, r3, #5
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	4413      	add	r3, r2
 8002d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d22:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d2a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	015a      	lsls	r2, r3, #5
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	4413      	add	r3, r2
 8002d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d38:	461a      	mov	r2, r3
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	015a      	lsls	r2, r3, #5
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	4413      	add	r3, r2
 8002d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	b2d9      	uxtb	r1, r3
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	202c      	movs	r0, #44	; 0x2c
 8002d5a:	fb00 f303 	mul.w	r3, r0, r3
 8002d5e:	4413      	add	r3, r2
 8002d60:	3360      	adds	r3, #96	; 0x60
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f005 f848 	bl	8007dfc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d6c:	bf00      	nop
 8002d6e:	3720      	adds	r7, #32
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b08a      	sub	sp, #40	; 0x28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	f003 030f 	and.w	r3, r3, #15
 8002d94:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	0c5b      	lsrs	r3, r3, #17
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	091b      	lsrs	r3, r3, #4
 8002da4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002da8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d004      	beq.n	8002dba <HCD_RXQLVL_IRQHandler+0x46>
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	2b05      	cmp	r3, #5
 8002db4:	f000 80a9 	beq.w	8002f0a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002db8:	e0aa      	b.n	8002f10 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 80a6 	beq.w	8002f0e <HCD_RXQLVL_IRQHandler+0x19a>
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	212c      	movs	r1, #44	; 0x2c
 8002dc8:	fb01 f303 	mul.w	r3, r1, r3
 8002dcc:	4413      	add	r3, r2
 8002dce:	3344      	adds	r3, #68	; 0x44
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 809b 	beq.w	8002f0e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	212c      	movs	r1, #44	; 0x2c
 8002dde:	fb01 f303 	mul.w	r3, r1, r3
 8002de2:	4413      	add	r3, r2
 8002de4:	3350      	adds	r3, #80	; 0x50
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	441a      	add	r2, r3
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	202c      	movs	r0, #44	; 0x2c
 8002df2:	fb00 f303 	mul.w	r3, r0, r3
 8002df6:	440b      	add	r3, r1
 8002df8:	334c      	adds	r3, #76	; 0x4c
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d87a      	bhi.n	8002ef6 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6818      	ldr	r0, [r3, #0]
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	212c      	movs	r1, #44	; 0x2c
 8002e0a:	fb01 f303 	mul.w	r3, r1, r3
 8002e0e:	4413      	add	r3, r2
 8002e10:	3344      	adds	r3, #68	; 0x44
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	b292      	uxth	r2, r2
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f002 f9ab 	bl	8005174 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	212c      	movs	r1, #44	; 0x2c
 8002e24:	fb01 f303 	mul.w	r3, r1, r3
 8002e28:	4413      	add	r3, r2
 8002e2a:	3344      	adds	r3, #68	; 0x44
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	441a      	add	r2, r3
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	202c      	movs	r0, #44	; 0x2c
 8002e38:	fb00 f303 	mul.w	r3, r0, r3
 8002e3c:	440b      	add	r3, r1
 8002e3e:	3344      	adds	r3, #68	; 0x44
 8002e40:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	212c      	movs	r1, #44	; 0x2c
 8002e48:	fb01 f303 	mul.w	r3, r1, r3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3350      	adds	r3, #80	; 0x50
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	441a      	add	r2, r3
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	202c      	movs	r0, #44	; 0x2c
 8002e5c:	fb00 f303 	mul.w	r3, r0, r3
 8002e60:	440b      	add	r3, r1
 8002e62:	3350      	adds	r3, #80	; 0x50
 8002e64:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	015a      	lsls	r2, r3, #5
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	0cdb      	lsrs	r3, r3, #19
 8002e76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e7a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	212c      	movs	r1, #44	; 0x2c
 8002e82:	fb01 f303 	mul.w	r3, r1, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	3340      	adds	r3, #64	; 0x40
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d13c      	bne.n	8002f0e <HCD_RXQLVL_IRQHandler+0x19a>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d039      	beq.n	8002f0e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	015a      	lsls	r2, r3, #5
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002eb0:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002eb8:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	212c      	movs	r1, #44	; 0x2c
 8002ed2:	fb01 f303 	mul.w	r3, r1, r3
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3354      	adds	r3, #84	; 0x54
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	f083 0301 	eor.w	r3, r3, #1
 8002ee0:	b2d8      	uxtb	r0, r3
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	212c      	movs	r1, #44	; 0x2c
 8002ee8:	fb01 f303 	mul.w	r3, r1, r3
 8002eec:	4413      	add	r3, r2
 8002eee:	3354      	adds	r3, #84	; 0x54
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	701a      	strb	r2, [r3, #0]
      break;
 8002ef4:	e00b      	b.n	8002f0e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	212c      	movs	r1, #44	; 0x2c
 8002efc:	fb01 f303 	mul.w	r3, r1, r3
 8002f00:	4413      	add	r3, r2
 8002f02:	3360      	adds	r3, #96	; 0x60
 8002f04:	2204      	movs	r2, #4
 8002f06:	701a      	strb	r2, [r3, #0]
      break;
 8002f08:	e001      	b.n	8002f0e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002f0a:	bf00      	nop
 8002f0c:	e000      	b.n	8002f10 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002f0e:	bf00      	nop
  }
}
 8002f10:	bf00      	nop
 8002f12:	3728      	adds	r7, #40	; 0x28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002f44:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d10b      	bne.n	8002f68 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d102      	bne.n	8002f60 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f004 ff32 	bl	8007dc4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	f043 0302 	orr.w	r3, r3, #2
 8002f66:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b08      	cmp	r3, #8
 8002f70:	d132      	bne.n	8002fd8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	f043 0308 	orr.w	r3, r3, #8
 8002f78:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d126      	bne.n	8002fd2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d113      	bne.n	8002fb4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002f92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f96:	d106      	bne.n	8002fa6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2102      	movs	r1, #2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f002 fa48 	bl	8005434 <USB_InitFSLSPClkSel>
 8002fa4:	e011      	b.n	8002fca <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2101      	movs	r1, #1
 8002fac:	4618      	mov	r0, r3
 8002fae:	f002 fa41 	bl	8005434 <USB_InitFSLSPClkSel>
 8002fb2:	e00a      	b.n	8002fca <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d106      	bne.n	8002fca <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002fc8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f004 ff24 	bl	8007e18 <HAL_HCD_PortEnabled_Callback>
 8002fd0:	e002      	b.n	8002fd8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f004 ff2e 	bl	8007e34 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f003 0320 	and.w	r3, r3, #32
 8002fde:	2b20      	cmp	r3, #32
 8002fe0:	d103      	bne.n	8002fea <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	f043 0320 	orr.w	r3, r3, #32
 8002fe8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	6013      	str	r3, [r2, #0]
}
 8002ff6:	bf00      	nop
 8002ff8:	3718      	adds	r7, #24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e264      	b.n	80034dc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d075      	beq.n	800310a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800301e:	4ba3      	ldr	r3, [pc, #652]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
 8003026:	2b04      	cmp	r3, #4
 8003028:	d00c      	beq.n	8003044 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800302a:	4ba0      	ldr	r3, [pc, #640]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003032:	2b08      	cmp	r3, #8
 8003034:	d112      	bne.n	800305c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003036:	4b9d      	ldr	r3, [pc, #628]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800303e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003042:	d10b      	bne.n	800305c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003044:	4b99      	ldr	r3, [pc, #612]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d05b      	beq.n	8003108 <HAL_RCC_OscConfig+0x108>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d157      	bne.n	8003108 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e23f      	b.n	80034dc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003064:	d106      	bne.n	8003074 <HAL_RCC_OscConfig+0x74>
 8003066:	4b91      	ldr	r3, [pc, #580]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a90      	ldr	r2, [pc, #576]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 800306c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	e01d      	b.n	80030b0 <HAL_RCC_OscConfig+0xb0>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800307c:	d10c      	bne.n	8003098 <HAL_RCC_OscConfig+0x98>
 800307e:	4b8b      	ldr	r3, [pc, #556]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a8a      	ldr	r2, [pc, #552]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	4b88      	ldr	r3, [pc, #544]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a87      	ldr	r2, [pc, #540]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	e00b      	b.n	80030b0 <HAL_RCC_OscConfig+0xb0>
 8003098:	4b84      	ldr	r3, [pc, #528]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a83      	ldr	r2, [pc, #524]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 800309e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	4b81      	ldr	r3, [pc, #516]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a80      	ldr	r2, [pc, #512]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 80030aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d013      	beq.n	80030e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b8:	f7fd fea8 	bl	8000e0c <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030c0:	f7fd fea4 	bl	8000e0c <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b64      	cmp	r3, #100	; 0x64
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e204      	b.n	80034dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d2:	4b76      	ldr	r3, [pc, #472]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0f0      	beq.n	80030c0 <HAL_RCC_OscConfig+0xc0>
 80030de:	e014      	b.n	800310a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e0:	f7fd fe94 	bl	8000e0c <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030e8:	f7fd fe90 	bl	8000e0c <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b64      	cmp	r3, #100	; 0x64
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e1f0      	b.n	80034dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030fa:	4b6c      	ldr	r3, [pc, #432]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0xe8>
 8003106:	e000      	b.n	800310a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d063      	beq.n	80031de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003116:	4b65      	ldr	r3, [pc, #404]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 030c 	and.w	r3, r3, #12
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00b      	beq.n	800313a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003122:	4b62      	ldr	r3, [pc, #392]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800312a:	2b08      	cmp	r3, #8
 800312c:	d11c      	bne.n	8003168 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800312e:	4b5f      	ldr	r3, [pc, #380]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d116      	bne.n	8003168 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800313a:	4b5c      	ldr	r3, [pc, #368]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d005      	beq.n	8003152 <HAL_RCC_OscConfig+0x152>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d001      	beq.n	8003152 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e1c4      	b.n	80034dc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003152:	4b56      	ldr	r3, [pc, #344]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4952      	ldr	r1, [pc, #328]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003162:	4313      	orrs	r3, r2
 8003164:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003166:	e03a      	b.n	80031de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d020      	beq.n	80031b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003170:	4b4f      	ldr	r3, [pc, #316]	; (80032b0 <HAL_RCC_OscConfig+0x2b0>)
 8003172:	2201      	movs	r2, #1
 8003174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003176:	f7fd fe49 	bl	8000e0c <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800317e:	f7fd fe45 	bl	8000e0c <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e1a5      	b.n	80034dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003190:	4b46      	ldr	r3, [pc, #280]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0f0      	beq.n	800317e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800319c:	4b43      	ldr	r3, [pc, #268]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	4940      	ldr	r1, [pc, #256]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	600b      	str	r3, [r1, #0]
 80031b0:	e015      	b.n	80031de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031b2:	4b3f      	ldr	r3, [pc, #252]	; (80032b0 <HAL_RCC_OscConfig+0x2b0>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b8:	f7fd fe28 	bl	8000e0c <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031c0:	f7fd fe24 	bl	8000e0c <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e184      	b.n	80034dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031d2:	4b36      	ldr	r3, [pc, #216]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f0      	bne.n	80031c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d030      	beq.n	800324c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d016      	beq.n	8003220 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031f2:	4b30      	ldr	r3, [pc, #192]	; (80032b4 <HAL_RCC_OscConfig+0x2b4>)
 80031f4:	2201      	movs	r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f8:	f7fd fe08 	bl	8000e0c <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003200:	f7fd fe04 	bl	8000e0c <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e164      	b.n	80034dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003212:	4b26      	ldr	r3, [pc, #152]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f0      	beq.n	8003200 <HAL_RCC_OscConfig+0x200>
 800321e:	e015      	b.n	800324c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003220:	4b24      	ldr	r3, [pc, #144]	; (80032b4 <HAL_RCC_OscConfig+0x2b4>)
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003226:	f7fd fdf1 	bl	8000e0c <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800322e:	f7fd fded 	bl	8000e0c <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e14d      	b.n	80034dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003240:	4b1a      	ldr	r3, [pc, #104]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1f0      	bne.n	800322e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 80a0 	beq.w	800339a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800325a:	2300      	movs	r3, #0
 800325c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800325e:	4b13      	ldr	r3, [pc, #76]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10f      	bne.n	800328a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	4a0e      	ldr	r2, [pc, #56]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 8003274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003278:	6413      	str	r3, [r2, #64]	; 0x40
 800327a:	4b0c      	ldr	r3, [pc, #48]	; (80032ac <HAL_RCC_OscConfig+0x2ac>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003282:	60bb      	str	r3, [r7, #8]
 8003284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003286:	2301      	movs	r3, #1
 8003288:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328a:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <HAL_RCC_OscConfig+0x2b8>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003292:	2b00      	cmp	r3, #0
 8003294:	d121      	bne.n	80032da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003296:	4b08      	ldr	r3, [pc, #32]	; (80032b8 <HAL_RCC_OscConfig+0x2b8>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a07      	ldr	r2, [pc, #28]	; (80032b8 <HAL_RCC_OscConfig+0x2b8>)
 800329c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032a2:	f7fd fdb3 	bl	8000e0c <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a8:	e011      	b.n	80032ce <HAL_RCC_OscConfig+0x2ce>
 80032aa:	bf00      	nop
 80032ac:	40023800 	.word	0x40023800
 80032b0:	42470000 	.word	0x42470000
 80032b4:	42470e80 	.word	0x42470e80
 80032b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032bc:	f7fd fda6 	bl	8000e0c <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e106      	b.n	80034dc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ce:	4b85      	ldr	r3, [pc, #532]	; (80034e4 <HAL_RCC_OscConfig+0x4e4>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0f0      	beq.n	80032bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d106      	bne.n	80032f0 <HAL_RCC_OscConfig+0x2f0>
 80032e2:	4b81      	ldr	r3, [pc, #516]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 80032e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e6:	4a80      	ldr	r2, [pc, #512]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	6713      	str	r3, [r2, #112]	; 0x70
 80032ee:	e01c      	b.n	800332a <HAL_RCC_OscConfig+0x32a>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	2b05      	cmp	r3, #5
 80032f6:	d10c      	bne.n	8003312 <HAL_RCC_OscConfig+0x312>
 80032f8:	4b7b      	ldr	r3, [pc, #492]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 80032fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fc:	4a7a      	ldr	r2, [pc, #488]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 80032fe:	f043 0304 	orr.w	r3, r3, #4
 8003302:	6713      	str	r3, [r2, #112]	; 0x70
 8003304:	4b78      	ldr	r3, [pc, #480]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 8003306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003308:	4a77      	ldr	r2, [pc, #476]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	6713      	str	r3, [r2, #112]	; 0x70
 8003310:	e00b      	b.n	800332a <HAL_RCC_OscConfig+0x32a>
 8003312:	4b75      	ldr	r3, [pc, #468]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 8003314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003316:	4a74      	ldr	r2, [pc, #464]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 8003318:	f023 0301 	bic.w	r3, r3, #1
 800331c:	6713      	str	r3, [r2, #112]	; 0x70
 800331e:	4b72      	ldr	r3, [pc, #456]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 8003320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003322:	4a71      	ldr	r2, [pc, #452]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 8003324:	f023 0304 	bic.w	r3, r3, #4
 8003328:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d015      	beq.n	800335e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003332:	f7fd fd6b 	bl	8000e0c <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003338:	e00a      	b.n	8003350 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800333a:	f7fd fd67 	bl	8000e0c <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	f241 3288 	movw	r2, #5000	; 0x1388
 8003348:	4293      	cmp	r3, r2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e0c5      	b.n	80034dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003350:	4b65      	ldr	r3, [pc, #404]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 8003352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0ee      	beq.n	800333a <HAL_RCC_OscConfig+0x33a>
 800335c:	e014      	b.n	8003388 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800335e:	f7fd fd55 	bl	8000e0c <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003364:	e00a      	b.n	800337c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003366:	f7fd fd51 	bl	8000e0c <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	f241 3288 	movw	r2, #5000	; 0x1388
 8003374:	4293      	cmp	r3, r2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e0af      	b.n	80034dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800337c:	4b5a      	ldr	r3, [pc, #360]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 800337e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1ee      	bne.n	8003366 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003388:	7dfb      	ldrb	r3, [r7, #23]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d105      	bne.n	800339a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800338e:	4b56      	ldr	r3, [pc, #344]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	4a55      	ldr	r2, [pc, #340]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 8003394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003398:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 809b 	beq.w	80034da <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033a4:	4b50      	ldr	r3, [pc, #320]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 030c 	and.w	r3, r3, #12
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d05c      	beq.n	800346a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d141      	bne.n	800343c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033b8:	4b4c      	ldr	r3, [pc, #304]	; (80034ec <HAL_RCC_OscConfig+0x4ec>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033be:	f7fd fd25 	bl	8000e0c <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c6:	f7fd fd21 	bl	8000e0c <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e081      	b.n	80034dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d8:	4b43      	ldr	r3, [pc, #268]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1f0      	bne.n	80033c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	69da      	ldr	r2, [r3, #28]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	431a      	orrs	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	019b      	lsls	r3, r3, #6
 80033f4:	431a      	orrs	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	085b      	lsrs	r3, r3, #1
 80033fc:	3b01      	subs	r3, #1
 80033fe:	041b      	lsls	r3, r3, #16
 8003400:	431a      	orrs	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003406:	061b      	lsls	r3, r3, #24
 8003408:	4937      	ldr	r1, [pc, #220]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 800340a:	4313      	orrs	r3, r2
 800340c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800340e:	4b37      	ldr	r3, [pc, #220]	; (80034ec <HAL_RCC_OscConfig+0x4ec>)
 8003410:	2201      	movs	r2, #1
 8003412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003414:	f7fd fcfa 	bl	8000e0c <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800341c:	f7fd fcf6 	bl	8000e0c <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e056      	b.n	80034dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800342e:	4b2e      	ldr	r3, [pc, #184]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0f0      	beq.n	800341c <HAL_RCC_OscConfig+0x41c>
 800343a:	e04e      	b.n	80034da <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343c:	4b2b      	ldr	r3, [pc, #172]	; (80034ec <HAL_RCC_OscConfig+0x4ec>)
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003442:	f7fd fce3 	bl	8000e0c <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800344a:	f7fd fcdf 	bl	8000e0c <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e03f      	b.n	80034dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345c:	4b22      	ldr	r3, [pc, #136]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1f0      	bne.n	800344a <HAL_RCC_OscConfig+0x44a>
 8003468:	e037      	b.n	80034da <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d101      	bne.n	8003476 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e032      	b.n	80034dc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003476:	4b1c      	ldr	r3, [pc, #112]	; (80034e8 <HAL_RCC_OscConfig+0x4e8>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d028      	beq.n	80034d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800348e:	429a      	cmp	r2, r3
 8003490:	d121      	bne.n	80034d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800349c:	429a      	cmp	r2, r3
 800349e:	d11a      	bne.n	80034d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034a6:	4013      	ands	r3, r2
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d111      	bne.n	80034d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034bc:	085b      	lsrs	r3, r3, #1
 80034be:	3b01      	subs	r3, #1
 80034c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d107      	bne.n	80034d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d001      	beq.n	80034da <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e000      	b.n	80034dc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3718      	adds	r7, #24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40007000 	.word	0x40007000
 80034e8:	40023800 	.word	0x40023800
 80034ec:	42470060 	.word	0x42470060

080034f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e0cc      	b.n	800369e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003504:	4b68      	ldr	r3, [pc, #416]	; (80036a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	429a      	cmp	r2, r3
 8003510:	d90c      	bls.n	800352c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003512:	4b65      	ldr	r3, [pc, #404]	; (80036a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800351a:	4b63      	ldr	r3, [pc, #396]	; (80036a8 <HAL_RCC_ClockConfig+0x1b8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d001      	beq.n	800352c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e0b8      	b.n	800369e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d020      	beq.n	800357a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b00      	cmp	r3, #0
 8003542:	d005      	beq.n	8003550 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003544:	4b59      	ldr	r3, [pc, #356]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	4a58      	ldr	r2, [pc, #352]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800354e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0308 	and.w	r3, r3, #8
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800355c:	4b53      	ldr	r3, [pc, #332]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	4a52      	ldr	r2, [pc, #328]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 8003562:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003566:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003568:	4b50      	ldr	r3, [pc, #320]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	494d      	ldr	r1, [pc, #308]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	4313      	orrs	r3, r2
 8003578:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d044      	beq.n	8003610 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d107      	bne.n	800359e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358e:	4b47      	ldr	r3, [pc, #284]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d119      	bne.n	80035ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e07f      	b.n	800369e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d003      	beq.n	80035ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035aa:	2b03      	cmp	r3, #3
 80035ac:	d107      	bne.n	80035be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ae:	4b3f      	ldr	r3, [pc, #252]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d109      	bne.n	80035ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e06f      	b.n	800369e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035be:	4b3b      	ldr	r3, [pc, #236]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e067      	b.n	800369e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ce:	4b37      	ldr	r3, [pc, #220]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f023 0203 	bic.w	r2, r3, #3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	4934      	ldr	r1, [pc, #208]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035e0:	f7fd fc14 	bl	8000e0c <HAL_GetTick>
 80035e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e6:	e00a      	b.n	80035fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e8:	f7fd fc10 	bl	8000e0c <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e04f      	b.n	800369e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fe:	4b2b      	ldr	r3, [pc, #172]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 020c 	and.w	r2, r3, #12
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	429a      	cmp	r2, r3
 800360e:	d1eb      	bne.n	80035e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003610:	4b25      	ldr	r3, [pc, #148]	; (80036a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d20c      	bcs.n	8003638 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361e:	4b22      	ldr	r3, [pc, #136]	; (80036a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003626:	4b20      	ldr	r3, [pc, #128]	; (80036a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	429a      	cmp	r2, r3
 8003632:	d001      	beq.n	8003638 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e032      	b.n	800369e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	d008      	beq.n	8003656 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003644:	4b19      	ldr	r3, [pc, #100]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	4916      	ldr	r1, [pc, #88]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	4313      	orrs	r3, r2
 8003654:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0308 	and.w	r3, r3, #8
 800365e:	2b00      	cmp	r3, #0
 8003660:	d009      	beq.n	8003676 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003662:	4b12      	ldr	r3, [pc, #72]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	490e      	ldr	r1, [pc, #56]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	4313      	orrs	r3, r2
 8003674:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003676:	f000 f821 	bl	80036bc <HAL_RCC_GetSysClockFreq>
 800367a:	4602      	mov	r2, r0
 800367c:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	091b      	lsrs	r3, r3, #4
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	490a      	ldr	r1, [pc, #40]	; (80036b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003688:	5ccb      	ldrb	r3, [r1, r3]
 800368a:	fa22 f303 	lsr.w	r3, r2, r3
 800368e:	4a09      	ldr	r2, [pc, #36]	; (80036b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003692:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f7fd fb74 	bl	8000d84 <HAL_InitTick>

  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	40023c00 	.word	0x40023c00
 80036ac:	40023800 	.word	0x40023800
 80036b0:	08008468 	.word	0x08008468
 80036b4:	20000000 	.word	0x20000000
 80036b8:	20000004 	.word	0x20000004

080036bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80036c0:	b084      	sub	sp, #16
 80036c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	607b      	str	r3, [r7, #4]
 80036c8:	2300      	movs	r3, #0
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	2300      	movs	r3, #0
 80036ce:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036d4:	4b67      	ldr	r3, [pc, #412]	; (8003874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 030c 	and.w	r3, r3, #12
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d00d      	beq.n	80036fc <HAL_RCC_GetSysClockFreq+0x40>
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	f200 80bd 	bhi.w	8003860 <HAL_RCC_GetSysClockFreq+0x1a4>
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <HAL_RCC_GetSysClockFreq+0x34>
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d003      	beq.n	80036f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80036ee:	e0b7      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036f0:	4b61      	ldr	r3, [pc, #388]	; (8003878 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80036f2:	60bb      	str	r3, [r7, #8]
       break;
 80036f4:	e0b7      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036f6:	4b61      	ldr	r3, [pc, #388]	; (800387c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80036f8:	60bb      	str	r3, [r7, #8]
      break;
 80036fa:	e0b4      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036fc:	4b5d      	ldr	r3, [pc, #372]	; (8003874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003704:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003706:	4b5b      	ldr	r3, [pc, #364]	; (8003874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d04d      	beq.n	80037ae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003712:	4b58      	ldr	r3, [pc, #352]	; (8003874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	099b      	lsrs	r3, r3, #6
 8003718:	461a      	mov	r2, r3
 800371a:	f04f 0300 	mov.w	r3, #0
 800371e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003722:	f04f 0100 	mov.w	r1, #0
 8003726:	ea02 0800 	and.w	r8, r2, r0
 800372a:	ea03 0901 	and.w	r9, r3, r1
 800372e:	4640      	mov	r0, r8
 8003730:	4649      	mov	r1, r9
 8003732:	f04f 0200 	mov.w	r2, #0
 8003736:	f04f 0300 	mov.w	r3, #0
 800373a:	014b      	lsls	r3, r1, #5
 800373c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003740:	0142      	lsls	r2, r0, #5
 8003742:	4610      	mov	r0, r2
 8003744:	4619      	mov	r1, r3
 8003746:	ebb0 0008 	subs.w	r0, r0, r8
 800374a:	eb61 0109 	sbc.w	r1, r1, r9
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	018b      	lsls	r3, r1, #6
 8003758:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800375c:	0182      	lsls	r2, r0, #6
 800375e:	1a12      	subs	r2, r2, r0
 8003760:	eb63 0301 	sbc.w	r3, r3, r1
 8003764:	f04f 0000 	mov.w	r0, #0
 8003768:	f04f 0100 	mov.w	r1, #0
 800376c:	00d9      	lsls	r1, r3, #3
 800376e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003772:	00d0      	lsls	r0, r2, #3
 8003774:	4602      	mov	r2, r0
 8003776:	460b      	mov	r3, r1
 8003778:	eb12 0208 	adds.w	r2, r2, r8
 800377c:	eb43 0309 	adc.w	r3, r3, r9
 8003780:	f04f 0000 	mov.w	r0, #0
 8003784:	f04f 0100 	mov.w	r1, #0
 8003788:	0259      	lsls	r1, r3, #9
 800378a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800378e:	0250      	lsls	r0, r2, #9
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	4610      	mov	r0, r2
 8003796:	4619      	mov	r1, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	461a      	mov	r2, r3
 800379c:	f04f 0300 	mov.w	r3, #0
 80037a0:	f7fc fd12 	bl	80001c8 <__aeabi_uldivmod>
 80037a4:	4602      	mov	r2, r0
 80037a6:	460b      	mov	r3, r1
 80037a8:	4613      	mov	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	e04a      	b.n	8003844 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ae:	4b31      	ldr	r3, [pc, #196]	; (8003874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	099b      	lsrs	r3, r3, #6
 80037b4:	461a      	mov	r2, r3
 80037b6:	f04f 0300 	mov.w	r3, #0
 80037ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80037be:	f04f 0100 	mov.w	r1, #0
 80037c2:	ea02 0400 	and.w	r4, r2, r0
 80037c6:	ea03 0501 	and.w	r5, r3, r1
 80037ca:	4620      	mov	r0, r4
 80037cc:	4629      	mov	r1, r5
 80037ce:	f04f 0200 	mov.w	r2, #0
 80037d2:	f04f 0300 	mov.w	r3, #0
 80037d6:	014b      	lsls	r3, r1, #5
 80037d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80037dc:	0142      	lsls	r2, r0, #5
 80037de:	4610      	mov	r0, r2
 80037e0:	4619      	mov	r1, r3
 80037e2:	1b00      	subs	r0, r0, r4
 80037e4:	eb61 0105 	sbc.w	r1, r1, r5
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	f04f 0300 	mov.w	r3, #0
 80037f0:	018b      	lsls	r3, r1, #6
 80037f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80037f6:	0182      	lsls	r2, r0, #6
 80037f8:	1a12      	subs	r2, r2, r0
 80037fa:	eb63 0301 	sbc.w	r3, r3, r1
 80037fe:	f04f 0000 	mov.w	r0, #0
 8003802:	f04f 0100 	mov.w	r1, #0
 8003806:	00d9      	lsls	r1, r3, #3
 8003808:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800380c:	00d0      	lsls	r0, r2, #3
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	1912      	adds	r2, r2, r4
 8003814:	eb45 0303 	adc.w	r3, r5, r3
 8003818:	f04f 0000 	mov.w	r0, #0
 800381c:	f04f 0100 	mov.w	r1, #0
 8003820:	0299      	lsls	r1, r3, #10
 8003822:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003826:	0290      	lsls	r0, r2, #10
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	4610      	mov	r0, r2
 800382e:	4619      	mov	r1, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	461a      	mov	r2, r3
 8003834:	f04f 0300 	mov.w	r3, #0
 8003838:	f7fc fcc6 	bl	80001c8 <__aeabi_uldivmod>
 800383c:	4602      	mov	r2, r0
 800383e:	460b      	mov	r3, r1
 8003840:	4613      	mov	r3, r2
 8003842:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003844:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	0c1b      	lsrs	r3, r3, #16
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	3301      	adds	r3, #1
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	fbb2 f3f3 	udiv	r3, r2, r3
 800385c:	60bb      	str	r3, [r7, #8]
      break;
 800385e:	e002      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003860:	4b05      	ldr	r3, [pc, #20]	; (8003878 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003862:	60bb      	str	r3, [r7, #8]
      break;
 8003864:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003866:	68bb      	ldr	r3, [r7, #8]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003872:	bf00      	nop
 8003874:	40023800 	.word	0x40023800
 8003878:	00f42400 	.word	0x00f42400
 800387c:	007a1200 	.word	0x007a1200

08003880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003884:	4b03      	ldr	r3, [pc, #12]	; (8003894 <HAL_RCC_GetHCLKFreq+0x14>)
 8003886:	681b      	ldr	r3, [r3, #0]
}
 8003888:	4618      	mov	r0, r3
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	20000000 	.word	0x20000000

08003898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800389c:	f7ff fff0 	bl	8003880 <HAL_RCC_GetHCLKFreq>
 80038a0:	4602      	mov	r2, r0
 80038a2:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	0a9b      	lsrs	r3, r3, #10
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	4903      	ldr	r1, [pc, #12]	; (80038bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80038ae:	5ccb      	ldrb	r3, [r1, r3]
 80038b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40023800 	.word	0x40023800
 80038bc:	08008478 	.word	0x08008478

080038c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038c4:	f7ff ffdc 	bl	8003880 <HAL_RCC_GetHCLKFreq>
 80038c8:	4602      	mov	r2, r0
 80038ca:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	0b5b      	lsrs	r3, r3, #13
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	4903      	ldr	r1, [pc, #12]	; (80038e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038d6:	5ccb      	ldrb	r3, [r1, r3]
 80038d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038dc:	4618      	mov	r0, r3
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40023800 	.word	0x40023800
 80038e4:	08008478 	.word	0x08008478

080038e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e041      	b.n	800397e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d106      	bne.n	8003914 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7fd f928 	bl	8000b64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2202      	movs	r2, #2
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3304      	adds	r3, #4
 8003924:	4619      	mov	r1, r3
 8003926:	4610      	mov	r0, r2
 8003928:	f000 faa0 	bl	8003e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b01      	cmp	r3, #1
 800399a:	d001      	beq.n	80039a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e04e      	b.n	8003a3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0201 	orr.w	r2, r2, #1
 80039b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a23      	ldr	r2, [pc, #140]	; (8003a4c <HAL_TIM_Base_Start_IT+0xc4>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d022      	beq.n	8003a08 <HAL_TIM_Base_Start_IT+0x80>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ca:	d01d      	beq.n	8003a08 <HAL_TIM_Base_Start_IT+0x80>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a1f      	ldr	r2, [pc, #124]	; (8003a50 <HAL_TIM_Base_Start_IT+0xc8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d018      	beq.n	8003a08 <HAL_TIM_Base_Start_IT+0x80>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a1e      	ldr	r2, [pc, #120]	; (8003a54 <HAL_TIM_Base_Start_IT+0xcc>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d013      	beq.n	8003a08 <HAL_TIM_Base_Start_IT+0x80>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a1c      	ldr	r2, [pc, #112]	; (8003a58 <HAL_TIM_Base_Start_IT+0xd0>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d00e      	beq.n	8003a08 <HAL_TIM_Base_Start_IT+0x80>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a1b      	ldr	r2, [pc, #108]	; (8003a5c <HAL_TIM_Base_Start_IT+0xd4>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d009      	beq.n	8003a08 <HAL_TIM_Base_Start_IT+0x80>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a19      	ldr	r2, [pc, #100]	; (8003a60 <HAL_TIM_Base_Start_IT+0xd8>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d004      	beq.n	8003a08 <HAL_TIM_Base_Start_IT+0x80>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a18      	ldr	r2, [pc, #96]	; (8003a64 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d111      	bne.n	8003a2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2b06      	cmp	r3, #6
 8003a18:	d010      	beq.n	8003a3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f042 0201 	orr.w	r2, r2, #1
 8003a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a2a:	e007      	b.n	8003a3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f042 0201 	orr.w	r2, r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	40010000 	.word	0x40010000
 8003a50:	40000400 	.word	0x40000400
 8003a54:	40000800 	.word	0x40000800
 8003a58:	40000c00 	.word	0x40000c00
 8003a5c:	40010400 	.word	0x40010400
 8003a60:	40014000 	.word	0x40014000
 8003a64:	40001800 	.word	0x40001800

08003a68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d122      	bne.n	8003ac4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d11b      	bne.n	8003ac4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f06f 0202 	mvn.w	r2, #2
 8003a94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	f003 0303 	and.w	r3, r3, #3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f9bf 	bl	8003e2e <HAL_TIM_IC_CaptureCallback>
 8003ab0:	e005      	b.n	8003abe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f9b1 	bl	8003e1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 f9c2 	bl	8003e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d122      	bne.n	8003b18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b04      	cmp	r3, #4
 8003ade:	d11b      	bne.n	8003b18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f06f 0204 	mvn.w	r2, #4
 8003ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2202      	movs	r2, #2
 8003aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f995 	bl	8003e2e <HAL_TIM_IC_CaptureCallback>
 8003b04:	e005      	b.n	8003b12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f987 	bl	8003e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f998 	bl	8003e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b08      	cmp	r3, #8
 8003b24:	d122      	bne.n	8003b6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	f003 0308 	and.w	r3, r3, #8
 8003b30:	2b08      	cmp	r3, #8
 8003b32:	d11b      	bne.n	8003b6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f06f 0208 	mvn.w	r2, #8
 8003b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2204      	movs	r2, #4
 8003b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	f003 0303 	and.w	r3, r3, #3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f96b 	bl	8003e2e <HAL_TIM_IC_CaptureCallback>
 8003b58:	e005      	b.n	8003b66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f95d 	bl	8003e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f96e 	bl	8003e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	f003 0310 	and.w	r3, r3, #16
 8003b76:	2b10      	cmp	r3, #16
 8003b78:	d122      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f003 0310 	and.w	r3, r3, #16
 8003b84:	2b10      	cmp	r3, #16
 8003b86:	d11b      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f06f 0210 	mvn.w	r2, #16
 8003b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2208      	movs	r2, #8
 8003b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f941 	bl	8003e2e <HAL_TIM_IC_CaptureCallback>
 8003bac:	e005      	b.n	8003bba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f933 	bl	8003e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 f944 	bl	8003e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d10e      	bne.n	8003bec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d107      	bne.n	8003bec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f06f 0201 	mvn.w	r2, #1
 8003be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f90d 	bl	8003e06 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf6:	2b80      	cmp	r3, #128	; 0x80
 8003bf8:	d10e      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c04:	2b80      	cmp	r3, #128	; 0x80
 8003c06:	d107      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 faea 	bl	80041ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c22:	2b40      	cmp	r3, #64	; 0x40
 8003c24:	d10e      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c30:	2b40      	cmp	r3, #64	; 0x40
 8003c32:	d107      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f909 	bl	8003e56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f003 0320 	and.w	r3, r3, #32
 8003c4e:	2b20      	cmp	r3, #32
 8003c50:	d10e      	bne.n	8003c70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f003 0320 	and.w	r3, r3, #32
 8003c5c:	2b20      	cmp	r3, #32
 8003c5e:	d107      	bne.n	8003c70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f06f 0220 	mvn.w	r2, #32
 8003c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 fab4 	bl	80041d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c70:	bf00      	nop
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d101      	bne.n	8003c94 <HAL_TIM_ConfigClockSource+0x1c>
 8003c90:	2302      	movs	r3, #2
 8003c92:	e0b4      	b.n	8003dfe <HAL_TIM_ConfigClockSource+0x186>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ccc:	d03e      	beq.n	8003d4c <HAL_TIM_ConfigClockSource+0xd4>
 8003cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cd2:	f200 8087 	bhi.w	8003de4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cda:	f000 8086 	beq.w	8003dea <HAL_TIM_ConfigClockSource+0x172>
 8003cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce2:	d87f      	bhi.n	8003de4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce4:	2b70      	cmp	r3, #112	; 0x70
 8003ce6:	d01a      	beq.n	8003d1e <HAL_TIM_ConfigClockSource+0xa6>
 8003ce8:	2b70      	cmp	r3, #112	; 0x70
 8003cea:	d87b      	bhi.n	8003de4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cec:	2b60      	cmp	r3, #96	; 0x60
 8003cee:	d050      	beq.n	8003d92 <HAL_TIM_ConfigClockSource+0x11a>
 8003cf0:	2b60      	cmp	r3, #96	; 0x60
 8003cf2:	d877      	bhi.n	8003de4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cf4:	2b50      	cmp	r3, #80	; 0x50
 8003cf6:	d03c      	beq.n	8003d72 <HAL_TIM_ConfigClockSource+0xfa>
 8003cf8:	2b50      	cmp	r3, #80	; 0x50
 8003cfa:	d873      	bhi.n	8003de4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cfc:	2b40      	cmp	r3, #64	; 0x40
 8003cfe:	d058      	beq.n	8003db2 <HAL_TIM_ConfigClockSource+0x13a>
 8003d00:	2b40      	cmp	r3, #64	; 0x40
 8003d02:	d86f      	bhi.n	8003de4 <HAL_TIM_ConfigClockSource+0x16c>
 8003d04:	2b30      	cmp	r3, #48	; 0x30
 8003d06:	d064      	beq.n	8003dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d08:	2b30      	cmp	r3, #48	; 0x30
 8003d0a:	d86b      	bhi.n	8003de4 <HAL_TIM_ConfigClockSource+0x16c>
 8003d0c:	2b20      	cmp	r3, #32
 8003d0e:	d060      	beq.n	8003dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d10:	2b20      	cmp	r3, #32
 8003d12:	d867      	bhi.n	8003de4 <HAL_TIM_ConfigClockSource+0x16c>
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d05c      	beq.n	8003dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d18:	2b10      	cmp	r3, #16
 8003d1a:	d05a      	beq.n	8003dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d1c:	e062      	b.n	8003de4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6818      	ldr	r0, [r3, #0]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	6899      	ldr	r1, [r3, #8]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f000 f9b7 	bl	80040a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	609a      	str	r2, [r3, #8]
      break;
 8003d4a:	e04f      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6818      	ldr	r0, [r3, #0]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	6899      	ldr	r1, [r3, #8]
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f000 f9a0 	bl	80040a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d6e:	609a      	str	r2, [r3, #8]
      break;
 8003d70:	e03c      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6818      	ldr	r0, [r3, #0]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	6859      	ldr	r1, [r3, #4]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	f000 f914 	bl	8003fac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2150      	movs	r1, #80	; 0x50
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 f96d 	bl	800406a <TIM_ITRx_SetConfig>
      break;
 8003d90:	e02c      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6818      	ldr	r0, [r3, #0]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	6859      	ldr	r1, [r3, #4]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	f000 f933 	bl	800400a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2160      	movs	r1, #96	; 0x60
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 f95d 	bl	800406a <TIM_ITRx_SetConfig>
      break;
 8003db0:	e01c      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6818      	ldr	r0, [r3, #0]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	6859      	ldr	r1, [r3, #4]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	f000 f8f4 	bl	8003fac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2140      	movs	r1, #64	; 0x40
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 f94d 	bl	800406a <TIM_ITRx_SetConfig>
      break;
 8003dd0:	e00c      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4619      	mov	r1, r3
 8003ddc:	4610      	mov	r0, r2
 8003dde:	f000 f944 	bl	800406a <TIM_ITRx_SetConfig>
      break;
 8003de2:	e003      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	73fb      	strb	r3, [r7, #15]
      break;
 8003de8:	e000      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003dea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b083      	sub	sp, #12
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
	...

08003e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a40      	ldr	r2, [pc, #256]	; (8003f80 <TIM_Base_SetConfig+0x114>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d013      	beq.n	8003eac <TIM_Base_SetConfig+0x40>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8a:	d00f      	beq.n	8003eac <TIM_Base_SetConfig+0x40>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a3d      	ldr	r2, [pc, #244]	; (8003f84 <TIM_Base_SetConfig+0x118>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d00b      	beq.n	8003eac <TIM_Base_SetConfig+0x40>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a3c      	ldr	r2, [pc, #240]	; (8003f88 <TIM_Base_SetConfig+0x11c>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d007      	beq.n	8003eac <TIM_Base_SetConfig+0x40>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a3b      	ldr	r2, [pc, #236]	; (8003f8c <TIM_Base_SetConfig+0x120>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d003      	beq.n	8003eac <TIM_Base_SetConfig+0x40>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a3a      	ldr	r2, [pc, #232]	; (8003f90 <TIM_Base_SetConfig+0x124>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d108      	bne.n	8003ebe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a2f      	ldr	r2, [pc, #188]	; (8003f80 <TIM_Base_SetConfig+0x114>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d02b      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ecc:	d027      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a2c      	ldr	r2, [pc, #176]	; (8003f84 <TIM_Base_SetConfig+0x118>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d023      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a2b      	ldr	r2, [pc, #172]	; (8003f88 <TIM_Base_SetConfig+0x11c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d01f      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a2a      	ldr	r2, [pc, #168]	; (8003f8c <TIM_Base_SetConfig+0x120>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d01b      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a29      	ldr	r2, [pc, #164]	; (8003f90 <TIM_Base_SetConfig+0x124>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d017      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a28      	ldr	r2, [pc, #160]	; (8003f94 <TIM_Base_SetConfig+0x128>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d013      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a27      	ldr	r2, [pc, #156]	; (8003f98 <TIM_Base_SetConfig+0x12c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00f      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a26      	ldr	r2, [pc, #152]	; (8003f9c <TIM_Base_SetConfig+0x130>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00b      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a25      	ldr	r2, [pc, #148]	; (8003fa0 <TIM_Base_SetConfig+0x134>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d007      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a24      	ldr	r2, [pc, #144]	; (8003fa4 <TIM_Base_SetConfig+0x138>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d003      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a23      	ldr	r2, [pc, #140]	; (8003fa8 <TIM_Base_SetConfig+0x13c>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d108      	bne.n	8003f30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a0a      	ldr	r2, [pc, #40]	; (8003f80 <TIM_Base_SetConfig+0x114>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d003      	beq.n	8003f64 <TIM_Base_SetConfig+0xf8>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a0c      	ldr	r2, [pc, #48]	; (8003f90 <TIM_Base_SetConfig+0x124>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d103      	bne.n	8003f6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	691a      	ldr	r2, [r3, #16]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	615a      	str	r2, [r3, #20]
}
 8003f72:	bf00      	nop
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	40010000 	.word	0x40010000
 8003f84:	40000400 	.word	0x40000400
 8003f88:	40000800 	.word	0x40000800
 8003f8c:	40000c00 	.word	0x40000c00
 8003f90:	40010400 	.word	0x40010400
 8003f94:	40014000 	.word	0x40014000
 8003f98:	40014400 	.word	0x40014400
 8003f9c:	40014800 	.word	0x40014800
 8003fa0:	40001800 	.word	0x40001800
 8003fa4:	40001c00 	.word	0x40001c00
 8003fa8:	40002000 	.word	0x40002000

08003fac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	f023 0201 	bic.w	r2, r3, #1
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f023 030a 	bic.w	r3, r3, #10
 8003fe8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	621a      	str	r2, [r3, #32]
}
 8003ffe:	bf00      	nop
 8004000:	371c      	adds	r7, #28
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800400a:	b480      	push	{r7}
 800400c:	b087      	sub	sp, #28
 800400e:	af00      	add	r7, sp, #0
 8004010:	60f8      	str	r0, [r7, #12]
 8004012:	60b9      	str	r1, [r7, #8]
 8004014:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	f023 0210 	bic.w	r2, r3, #16
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004034:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	031b      	lsls	r3, r3, #12
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	4313      	orrs	r3, r2
 800403e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004046:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4313      	orrs	r3, r2
 8004050:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	621a      	str	r2, [r3, #32]
}
 800405e:	bf00      	nop
 8004060:	371c      	adds	r7, #28
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800406a:	b480      	push	{r7}
 800406c:	b085      	sub	sp, #20
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
 8004072:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004080:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4313      	orrs	r3, r2
 8004088:	f043 0307 	orr.w	r3, r3, #7
 800408c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	609a      	str	r2, [r3, #8]
}
 8004094:	bf00      	nop
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b087      	sub	sp, #28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
 80040ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	021a      	lsls	r2, r3, #8
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	431a      	orrs	r2, r3
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	609a      	str	r2, [r3, #8]
}
 80040d4:	bf00      	nop
 80040d6:	371c      	adds	r7, #28
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d101      	bne.n	80040f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040f4:	2302      	movs	r3, #2
 80040f6:	e05a      	b.n	80041ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	4313      	orrs	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a21      	ldr	r2, [pc, #132]	; (80041bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d022      	beq.n	8004182 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004144:	d01d      	beq.n	8004182 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a1d      	ldr	r2, [pc, #116]	; (80041c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d018      	beq.n	8004182 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a1b      	ldr	r2, [pc, #108]	; (80041c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d013      	beq.n	8004182 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a1a      	ldr	r2, [pc, #104]	; (80041c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d00e      	beq.n	8004182 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a18      	ldr	r2, [pc, #96]	; (80041cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d009      	beq.n	8004182 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a17      	ldr	r2, [pc, #92]	; (80041d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d004      	beq.n	8004182 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a15      	ldr	r2, [pc, #84]	; (80041d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d10c      	bne.n	800419c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004188:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	4313      	orrs	r3, r2
 8004192:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40010000 	.word	0x40010000
 80041c0:	40000400 	.word	0x40000400
 80041c4:	40000800 	.word	0x40000800
 80041c8:	40000c00 	.word	0x40000c00
 80041cc:	40010400 	.word	0x40010400
 80041d0:	40014000 	.word	0x40014000
 80041d4:	40001800 	.word	0x40001800

080041d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e03f      	b.n	8004292 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d106      	bne.n	800422c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7fc fcee 	bl	8000c08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2224      	movs	r2, #36	; 0x24
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004242:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 fc7b 	bl	8004b40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004258:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	695a      	ldr	r2, [r3, #20]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004268:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68da      	ldr	r2, [r3, #12]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004278:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2220      	movs	r2, #32
 800428c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
	...

0800429c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b0ba      	sub	sp, #232	; 0xe8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80042c2:	2300      	movs	r3, #0
 80042c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80042da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10f      	bne.n	8004302 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042e6:	f003 0320 	and.w	r3, r3, #32
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d009      	beq.n	8004302 <HAL_UART_IRQHandler+0x66>
 80042ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042f2:	f003 0320 	and.w	r3, r3, #32
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 fb65 	bl	80049ca <UART_Receive_IT>
      return;
 8004300:	e256      	b.n	80047b0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004302:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 80de 	beq.w	80044c8 <HAL_UART_IRQHandler+0x22c>
 800430c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b00      	cmp	r3, #0
 8004316:	d106      	bne.n	8004326 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800431c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 80d1 	beq.w	80044c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00b      	beq.n	800434a <HAL_UART_IRQHandler+0xae>
 8004332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433a:	2b00      	cmp	r3, #0
 800433c:	d005      	beq.n	800434a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	f043 0201 	orr.w	r2, r3, #1
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800434a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800434e:	f003 0304 	and.w	r3, r3, #4
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00b      	beq.n	800436e <HAL_UART_IRQHandler+0xd2>
 8004356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d005      	beq.n	800436e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	f043 0202 	orr.w	r2, r3, #2
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800436e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00b      	beq.n	8004392 <HAL_UART_IRQHandler+0xf6>
 800437a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d005      	beq.n	8004392 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	f043 0204 	orr.w	r2, r3, #4
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004396:	f003 0308 	and.w	r3, r3, #8
 800439a:	2b00      	cmp	r3, #0
 800439c:	d011      	beq.n	80043c2 <HAL_UART_IRQHandler+0x126>
 800439e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043a2:	f003 0320 	and.w	r3, r3, #32
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d105      	bne.n	80043b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d005      	beq.n	80043c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	f043 0208 	orr.w	r2, r3, #8
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 81ed 	beq.w	80047a6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043d0:	f003 0320 	and.w	r3, r3, #32
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d008      	beq.n	80043ea <HAL_UART_IRQHandler+0x14e>
 80043d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043dc:	f003 0320 	and.w	r3, r3, #32
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 faf0 	bl	80049ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f4:	2b40      	cmp	r3, #64	; 0x40
 80043f6:	bf0c      	ite	eq
 80043f8:	2301      	moveq	r3, #1
 80043fa:	2300      	movne	r3, #0
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	f003 0308 	and.w	r3, r3, #8
 800440a:	2b00      	cmp	r3, #0
 800440c:	d103      	bne.n	8004416 <HAL_UART_IRQHandler+0x17a>
 800440e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004412:	2b00      	cmp	r3, #0
 8004414:	d04f      	beq.n	80044b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f9f8 	bl	800480c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004426:	2b40      	cmp	r3, #64	; 0x40
 8004428:	d141      	bne.n	80044ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	3314      	adds	r3, #20
 8004430:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004434:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004438:	e853 3f00 	ldrex	r3, [r3]
 800443c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004440:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004444:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004448:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	3314      	adds	r3, #20
 8004452:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004456:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800445a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004462:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004466:	e841 2300 	strex	r3, r2, [r1]
 800446a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800446e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1d9      	bne.n	800442a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447a:	2b00      	cmp	r3, #0
 800447c:	d013      	beq.n	80044a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004482:	4a7d      	ldr	r2, [pc, #500]	; (8004678 <HAL_UART_IRQHandler+0x3dc>)
 8004484:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448a:	4618      	mov	r0, r3
 800448c:	f7fc fe6f 	bl	800116e <HAL_DMA_Abort_IT>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d016      	beq.n	80044c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044a0:	4610      	mov	r0, r2
 80044a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a4:	e00e      	b.n	80044c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f99a 	bl	80047e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ac:	e00a      	b.n	80044c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f996 	bl	80047e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b4:	e006      	b.n	80044c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f992 	bl	80047e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80044c2:	e170      	b.n	80047a6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044c4:	bf00      	nop
    return;
 80044c6:	e16e      	b.n	80047a6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	f040 814a 	bne.w	8004766 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044d6:	f003 0310 	and.w	r3, r3, #16
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f000 8143 	beq.w	8004766 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80044e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044e4:	f003 0310 	and.w	r3, r3, #16
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 813c 	beq.w	8004766 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044ee:	2300      	movs	r3, #0
 80044f0:	60bb      	str	r3, [r7, #8]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	60bb      	str	r3, [r7, #8]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	60bb      	str	r3, [r7, #8]
 8004502:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450e:	2b40      	cmp	r3, #64	; 0x40
 8004510:	f040 80b4 	bne.w	800467c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004520:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 8140 	beq.w	80047aa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800452e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004532:	429a      	cmp	r2, r3
 8004534:	f080 8139 	bcs.w	80047aa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800453e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800454a:	f000 8088 	beq.w	800465e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	330c      	adds	r3, #12
 8004554:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004558:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800455c:	e853 3f00 	ldrex	r3, [r3]
 8004560:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004564:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004568:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800456c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	330c      	adds	r3, #12
 8004576:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800457a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800457e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004582:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004586:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800458a:	e841 2300 	strex	r3, r2, [r1]
 800458e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004592:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1d9      	bne.n	800454e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	3314      	adds	r3, #20
 80045a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045a4:	e853 3f00 	ldrex	r3, [r3]
 80045a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80045aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045ac:	f023 0301 	bic.w	r3, r3, #1
 80045b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3314      	adds	r3, #20
 80045ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80045c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80045c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80045ca:	e841 2300 	strex	r3, r2, [r1]
 80045ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80045d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1e1      	bne.n	800459a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	3314      	adds	r3, #20
 80045dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045e0:	e853 3f00 	ldrex	r3, [r3]
 80045e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80045e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	3314      	adds	r3, #20
 80045f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80045fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004600:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004602:	e841 2300 	strex	r3, r2, [r1]
 8004606:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004608:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1e3      	bne.n	80045d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2220      	movs	r2, #32
 8004612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	330c      	adds	r3, #12
 8004622:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004626:	e853 3f00 	ldrex	r3, [r3]
 800462a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800462c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800462e:	f023 0310 	bic.w	r3, r3, #16
 8004632:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	330c      	adds	r3, #12
 800463c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004640:	65ba      	str	r2, [r7, #88]	; 0x58
 8004642:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004644:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004646:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004648:	e841 2300 	strex	r3, r2, [r1]
 800464c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800464e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1e3      	bne.n	800461c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004658:	4618      	mov	r0, r3
 800465a:	f7fc fd18 	bl	800108e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004666:	b29b      	uxth	r3, r3
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	b29b      	uxth	r3, r3
 800466c:	4619      	mov	r1, r3
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f8c0 	bl	80047f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004674:	e099      	b.n	80047aa <HAL_UART_IRQHandler+0x50e>
 8004676:	bf00      	nop
 8004678:	080048d3 	.word	0x080048d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004684:	b29b      	uxth	r3, r3
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004690:	b29b      	uxth	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 808b 	beq.w	80047ae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004698:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 8086 	beq.w	80047ae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	330c      	adds	r3, #12
 80046a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ac:	e853 3f00 	ldrex	r3, [r3]
 80046b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	330c      	adds	r3, #12
 80046c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80046c6:	647a      	str	r2, [r7, #68]	; 0x44
 80046c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046ce:	e841 2300 	strex	r3, r2, [r1]
 80046d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1e3      	bne.n	80046a2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	3314      	adds	r3, #20
 80046e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	e853 3f00 	ldrex	r3, [r3]
 80046e8:	623b      	str	r3, [r7, #32]
   return(result);
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	f023 0301 	bic.w	r3, r3, #1
 80046f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3314      	adds	r3, #20
 80046fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80046fe:	633a      	str	r2, [r7, #48]	; 0x30
 8004700:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004702:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004706:	e841 2300 	strex	r3, r2, [r1]
 800470a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800470c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1e3      	bne.n	80046da <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2220      	movs	r2, #32
 8004716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	330c      	adds	r3, #12
 8004726:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	e853 3f00 	ldrex	r3, [r3]
 800472e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f023 0310 	bic.w	r3, r3, #16
 8004736:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	330c      	adds	r3, #12
 8004740:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004744:	61fa      	str	r2, [r7, #28]
 8004746:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004748:	69b9      	ldr	r1, [r7, #24]
 800474a:	69fa      	ldr	r2, [r7, #28]
 800474c:	e841 2300 	strex	r3, r2, [r1]
 8004750:	617b      	str	r3, [r7, #20]
   return(result);
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1e3      	bne.n	8004720 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004758:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800475c:	4619      	mov	r1, r3
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f848 	bl	80047f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004764:	e023      	b.n	80047ae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800476a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476e:	2b00      	cmp	r3, #0
 8004770:	d009      	beq.n	8004786 <HAL_UART_IRQHandler+0x4ea>
 8004772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f8bb 	bl	80048fa <UART_Transmit_IT>
    return;
 8004784:	e014      	b.n	80047b0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800478a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00e      	beq.n	80047b0 <HAL_UART_IRQHandler+0x514>
 8004792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800479a:	2b00      	cmp	r3, #0
 800479c:	d008      	beq.n	80047b0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f8fb 	bl	800499a <UART_EndTransmit_IT>
    return;
 80047a4:	e004      	b.n	80047b0 <HAL_UART_IRQHandler+0x514>
    return;
 80047a6:	bf00      	nop
 80047a8:	e002      	b.n	80047b0 <HAL_UART_IRQHandler+0x514>
      return;
 80047aa:	bf00      	nop
 80047ac:	e000      	b.n	80047b0 <HAL_UART_IRQHandler+0x514>
      return;
 80047ae:	bf00      	nop
  }
}
 80047b0:	37e8      	adds	r7, #232	; 0xe8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop

080047b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	460b      	mov	r3, r1
 80047fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800480c:	b480      	push	{r7}
 800480e:	b095      	sub	sp, #84	; 0x54
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	330c      	adds	r3, #12
 800481a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800481e:	e853 3f00 	ldrex	r3, [r3]
 8004822:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004826:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800482a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	330c      	adds	r3, #12
 8004832:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004834:	643a      	str	r2, [r7, #64]	; 0x40
 8004836:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004838:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800483a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800483c:	e841 2300 	strex	r3, r2, [r1]
 8004840:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1e5      	bne.n	8004814 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3314      	adds	r3, #20
 800484e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	e853 3f00 	ldrex	r3, [r3]
 8004856:	61fb      	str	r3, [r7, #28]
   return(result);
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	f023 0301 	bic.w	r3, r3, #1
 800485e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3314      	adds	r3, #20
 8004866:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004868:	62fa      	str	r2, [r7, #44]	; 0x2c
 800486a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800486e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004870:	e841 2300 	strex	r3, r2, [r1]
 8004874:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1e5      	bne.n	8004848 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004880:	2b01      	cmp	r3, #1
 8004882:	d119      	bne.n	80048b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	330c      	adds	r3, #12
 800488a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	e853 3f00 	ldrex	r3, [r3]
 8004892:	60bb      	str	r3, [r7, #8]
   return(result);
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f023 0310 	bic.w	r3, r3, #16
 800489a:	647b      	str	r3, [r7, #68]	; 0x44
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	330c      	adds	r3, #12
 80048a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048a4:	61ba      	str	r2, [r7, #24]
 80048a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a8:	6979      	ldr	r1, [r7, #20]
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	e841 2300 	strex	r3, r2, [r1]
 80048b0:	613b      	str	r3, [r7, #16]
   return(result);
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1e5      	bne.n	8004884 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80048c6:	bf00      	nop
 80048c8:	3754      	adds	r7, #84	; 0x54
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b084      	sub	sp, #16
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f7ff ff77 	bl	80047e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048f2:	bf00      	nop
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b085      	sub	sp, #20
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b21      	cmp	r3, #33	; 0x21
 800490c:	d13e      	bne.n	800498c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004916:	d114      	bne.n	8004942 <UART_Transmit_IT+0x48>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d110      	bne.n	8004942 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	461a      	mov	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004934:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	1c9a      	adds	r2, r3, #2
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	621a      	str	r2, [r3, #32]
 8004940:	e008      	b.n	8004954 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	1c59      	adds	r1, r3, #1
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6211      	str	r1, [r2, #32]
 800494c:	781a      	ldrb	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004958:	b29b      	uxth	r3, r3
 800495a:	3b01      	subs	r3, #1
 800495c:	b29b      	uxth	r3, r3
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	4619      	mov	r1, r3
 8004962:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10f      	bne.n	8004988 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68da      	ldr	r2, [r3, #12]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004976:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68da      	ldr	r2, [r3, #12]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004986:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	e000      	b.n	800498e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800498c:	2302      	movs	r3, #2
  }
}
 800498e:	4618      	mov	r0, r3
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b082      	sub	sp, #8
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68da      	ldr	r2, [r3, #12]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2220      	movs	r2, #32
 80049b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f7ff fefc 	bl	80047b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b08c      	sub	sp, #48	; 0x30
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b22      	cmp	r3, #34	; 0x22
 80049dc:	f040 80ab 	bne.w	8004b36 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e8:	d117      	bne.n	8004a1a <UART_Receive_IT+0x50>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d113      	bne.n	8004a1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80049f2:	2300      	movs	r3, #0
 80049f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a12:	1c9a      	adds	r2, r3, #2
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	629a      	str	r2, [r3, #40]	; 0x28
 8004a18:	e026      	b.n	8004a68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004a20:	2300      	movs	r3, #0
 8004a22:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2c:	d007      	beq.n	8004a3e <UART_Receive_IT+0x74>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10a      	bne.n	8004a4c <UART_Receive_IT+0x82>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d106      	bne.n	8004a4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a48:	701a      	strb	r2, [r3, #0]
 8004a4a:	e008      	b.n	8004a5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	4619      	mov	r1, r3
 8004a76:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d15a      	bne.n	8004b32 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 0220 	bic.w	r2, r2, #32
 8004a8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68da      	ldr	r2, [r3, #12]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	695a      	ldr	r2, [r3, #20]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 0201 	bic.w	r2, r2, #1
 8004aaa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d135      	bne.n	8004b28 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	330c      	adds	r3, #12
 8004ac8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	e853 3f00 	ldrex	r3, [r3]
 8004ad0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f023 0310 	bic.w	r3, r3, #16
 8004ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	330c      	adds	r3, #12
 8004ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae2:	623a      	str	r2, [r7, #32]
 8004ae4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae6:	69f9      	ldr	r1, [r7, #28]
 8004ae8:	6a3a      	ldr	r2, [r7, #32]
 8004aea:	e841 2300 	strex	r3, r2, [r1]
 8004aee:	61bb      	str	r3, [r7, #24]
   return(result);
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1e5      	bne.n	8004ac2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0310 	and.w	r3, r3, #16
 8004b00:	2b10      	cmp	r3, #16
 8004b02:	d10a      	bne.n	8004b1a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b04:	2300      	movs	r3, #0
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b1e:	4619      	mov	r1, r3
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f7ff fe67 	bl	80047f4 <HAL_UARTEx_RxEventCallback>
 8004b26:	e002      	b.n	8004b2e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f7ff fe4f 	bl	80047cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	e002      	b.n	8004b38 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	e000      	b.n	8004b38 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004b36:	2302      	movs	r3, #2
  }
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3730      	adds	r7, #48	; 0x30
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b44:	b09f      	sub	sp, #124	; 0x7c
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b56:	68d9      	ldr	r1, [r3, #12]
 8004b58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	ea40 0301 	orr.w	r3, r0, r1
 8004b60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b64:	689a      	ldr	r2, [r3, #8]
 8004b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	431a      	orrs	r2, r3
 8004b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b84:	f021 010c 	bic.w	r1, r1, #12
 8004b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b8e:	430b      	orrs	r3, r1
 8004b90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b9e:	6999      	ldr	r1, [r3, #24]
 8004ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	ea40 0301 	orr.w	r3, r0, r1
 8004ba8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	4bc5      	ldr	r3, [pc, #788]	; (8004ec4 <UART_SetConfig+0x384>)
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d004      	beq.n	8004bbe <UART_SetConfig+0x7e>
 8004bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	4bc3      	ldr	r3, [pc, #780]	; (8004ec8 <UART_SetConfig+0x388>)
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d103      	bne.n	8004bc6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bbe:	f7fe fe7f 	bl	80038c0 <HAL_RCC_GetPCLK2Freq>
 8004bc2:	6778      	str	r0, [r7, #116]	; 0x74
 8004bc4:	e002      	b.n	8004bcc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bc6:	f7fe fe67 	bl	8003898 <HAL_RCC_GetPCLK1Freq>
 8004bca:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bce:	69db      	ldr	r3, [r3, #28]
 8004bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bd4:	f040 80b6 	bne.w	8004d44 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bda:	461c      	mov	r4, r3
 8004bdc:	f04f 0500 	mov.w	r5, #0
 8004be0:	4622      	mov	r2, r4
 8004be2:	462b      	mov	r3, r5
 8004be4:	1891      	adds	r1, r2, r2
 8004be6:	6439      	str	r1, [r7, #64]	; 0x40
 8004be8:	415b      	adcs	r3, r3
 8004bea:	647b      	str	r3, [r7, #68]	; 0x44
 8004bec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004bf0:	1912      	adds	r2, r2, r4
 8004bf2:	eb45 0303 	adc.w	r3, r5, r3
 8004bf6:	f04f 0000 	mov.w	r0, #0
 8004bfa:	f04f 0100 	mov.w	r1, #0
 8004bfe:	00d9      	lsls	r1, r3, #3
 8004c00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c04:	00d0      	lsls	r0, r2, #3
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	1911      	adds	r1, r2, r4
 8004c0c:	6639      	str	r1, [r7, #96]	; 0x60
 8004c0e:	416b      	adcs	r3, r5
 8004c10:	667b      	str	r3, [r7, #100]	; 0x64
 8004c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	461a      	mov	r2, r3
 8004c18:	f04f 0300 	mov.w	r3, #0
 8004c1c:	1891      	adds	r1, r2, r2
 8004c1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c20:	415b      	adcs	r3, r3
 8004c22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c28:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004c2c:	f7fb facc 	bl	80001c8 <__aeabi_uldivmod>
 8004c30:	4602      	mov	r2, r0
 8004c32:	460b      	mov	r3, r1
 8004c34:	4ba5      	ldr	r3, [pc, #660]	; (8004ecc <UART_SetConfig+0x38c>)
 8004c36:	fba3 2302 	umull	r2, r3, r3, r2
 8004c3a:	095b      	lsrs	r3, r3, #5
 8004c3c:	011e      	lsls	r6, r3, #4
 8004c3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c40:	461c      	mov	r4, r3
 8004c42:	f04f 0500 	mov.w	r5, #0
 8004c46:	4622      	mov	r2, r4
 8004c48:	462b      	mov	r3, r5
 8004c4a:	1891      	adds	r1, r2, r2
 8004c4c:	6339      	str	r1, [r7, #48]	; 0x30
 8004c4e:	415b      	adcs	r3, r3
 8004c50:	637b      	str	r3, [r7, #52]	; 0x34
 8004c52:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004c56:	1912      	adds	r2, r2, r4
 8004c58:	eb45 0303 	adc.w	r3, r5, r3
 8004c5c:	f04f 0000 	mov.w	r0, #0
 8004c60:	f04f 0100 	mov.w	r1, #0
 8004c64:	00d9      	lsls	r1, r3, #3
 8004c66:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c6a:	00d0      	lsls	r0, r2, #3
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	460b      	mov	r3, r1
 8004c70:	1911      	adds	r1, r2, r4
 8004c72:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c74:	416b      	adcs	r3, r5
 8004c76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	f04f 0300 	mov.w	r3, #0
 8004c82:	1891      	adds	r1, r2, r2
 8004c84:	62b9      	str	r1, [r7, #40]	; 0x28
 8004c86:	415b      	adcs	r3, r3
 8004c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c8e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004c92:	f7fb fa99 	bl	80001c8 <__aeabi_uldivmod>
 8004c96:	4602      	mov	r2, r0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	4b8c      	ldr	r3, [pc, #560]	; (8004ecc <UART_SetConfig+0x38c>)
 8004c9c:	fba3 1302 	umull	r1, r3, r3, r2
 8004ca0:	095b      	lsrs	r3, r3, #5
 8004ca2:	2164      	movs	r1, #100	; 0x64
 8004ca4:	fb01 f303 	mul.w	r3, r1, r3
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	3332      	adds	r3, #50	; 0x32
 8004cae:	4a87      	ldr	r2, [pc, #540]	; (8004ecc <UART_SetConfig+0x38c>)
 8004cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb4:	095b      	lsrs	r3, r3, #5
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004cbc:	441e      	add	r6, r3
 8004cbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f04f 0100 	mov.w	r1, #0
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	1894      	adds	r4, r2, r2
 8004ccc:	623c      	str	r4, [r7, #32]
 8004cce:	415b      	adcs	r3, r3
 8004cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cd6:	1812      	adds	r2, r2, r0
 8004cd8:	eb41 0303 	adc.w	r3, r1, r3
 8004cdc:	f04f 0400 	mov.w	r4, #0
 8004ce0:	f04f 0500 	mov.w	r5, #0
 8004ce4:	00dd      	lsls	r5, r3, #3
 8004ce6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004cea:	00d4      	lsls	r4, r2, #3
 8004cec:	4622      	mov	r2, r4
 8004cee:	462b      	mov	r3, r5
 8004cf0:	1814      	adds	r4, r2, r0
 8004cf2:	653c      	str	r4, [r7, #80]	; 0x50
 8004cf4:	414b      	adcs	r3, r1
 8004cf6:	657b      	str	r3, [r7, #84]	; 0x54
 8004cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	f04f 0300 	mov.w	r3, #0
 8004d02:	1891      	adds	r1, r2, r2
 8004d04:	61b9      	str	r1, [r7, #24]
 8004d06:	415b      	adcs	r3, r3
 8004d08:	61fb      	str	r3, [r7, #28]
 8004d0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d0e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004d12:	f7fb fa59 	bl	80001c8 <__aeabi_uldivmod>
 8004d16:	4602      	mov	r2, r0
 8004d18:	460b      	mov	r3, r1
 8004d1a:	4b6c      	ldr	r3, [pc, #432]	; (8004ecc <UART_SetConfig+0x38c>)
 8004d1c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d20:	095b      	lsrs	r3, r3, #5
 8004d22:	2164      	movs	r1, #100	; 0x64
 8004d24:	fb01 f303 	mul.w	r3, r1, r3
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	3332      	adds	r3, #50	; 0x32
 8004d2e:	4a67      	ldr	r2, [pc, #412]	; (8004ecc <UART_SetConfig+0x38c>)
 8004d30:	fba2 2303 	umull	r2, r3, r2, r3
 8004d34:	095b      	lsrs	r3, r3, #5
 8004d36:	f003 0207 	and.w	r2, r3, #7
 8004d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4432      	add	r2, r6
 8004d40:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d42:	e0b9      	b.n	8004eb8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d46:	461c      	mov	r4, r3
 8004d48:	f04f 0500 	mov.w	r5, #0
 8004d4c:	4622      	mov	r2, r4
 8004d4e:	462b      	mov	r3, r5
 8004d50:	1891      	adds	r1, r2, r2
 8004d52:	6139      	str	r1, [r7, #16]
 8004d54:	415b      	adcs	r3, r3
 8004d56:	617b      	str	r3, [r7, #20]
 8004d58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004d5c:	1912      	adds	r2, r2, r4
 8004d5e:	eb45 0303 	adc.w	r3, r5, r3
 8004d62:	f04f 0000 	mov.w	r0, #0
 8004d66:	f04f 0100 	mov.w	r1, #0
 8004d6a:	00d9      	lsls	r1, r3, #3
 8004d6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d70:	00d0      	lsls	r0, r2, #3
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	eb12 0804 	adds.w	r8, r2, r4
 8004d7a:	eb43 0905 	adc.w	r9, r3, r5
 8004d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f04f 0100 	mov.w	r1, #0
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	008b      	lsls	r3, r1, #2
 8004d92:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d96:	0082      	lsls	r2, r0, #2
 8004d98:	4640      	mov	r0, r8
 8004d9a:	4649      	mov	r1, r9
 8004d9c:	f7fb fa14 	bl	80001c8 <__aeabi_uldivmod>
 8004da0:	4602      	mov	r2, r0
 8004da2:	460b      	mov	r3, r1
 8004da4:	4b49      	ldr	r3, [pc, #292]	; (8004ecc <UART_SetConfig+0x38c>)
 8004da6:	fba3 2302 	umull	r2, r3, r3, r2
 8004daa:	095b      	lsrs	r3, r3, #5
 8004dac:	011e      	lsls	r6, r3, #4
 8004dae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004db0:	4618      	mov	r0, r3
 8004db2:	f04f 0100 	mov.w	r1, #0
 8004db6:	4602      	mov	r2, r0
 8004db8:	460b      	mov	r3, r1
 8004dba:	1894      	adds	r4, r2, r2
 8004dbc:	60bc      	str	r4, [r7, #8]
 8004dbe:	415b      	adcs	r3, r3
 8004dc0:	60fb      	str	r3, [r7, #12]
 8004dc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dc6:	1812      	adds	r2, r2, r0
 8004dc8:	eb41 0303 	adc.w	r3, r1, r3
 8004dcc:	f04f 0400 	mov.w	r4, #0
 8004dd0:	f04f 0500 	mov.w	r5, #0
 8004dd4:	00dd      	lsls	r5, r3, #3
 8004dd6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004dda:	00d4      	lsls	r4, r2, #3
 8004ddc:	4622      	mov	r2, r4
 8004dde:	462b      	mov	r3, r5
 8004de0:	1814      	adds	r4, r2, r0
 8004de2:	64bc      	str	r4, [r7, #72]	; 0x48
 8004de4:	414b      	adcs	r3, r1
 8004de6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f04f 0100 	mov.w	r1, #0
 8004df2:	f04f 0200 	mov.w	r2, #0
 8004df6:	f04f 0300 	mov.w	r3, #0
 8004dfa:	008b      	lsls	r3, r1, #2
 8004dfc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e00:	0082      	lsls	r2, r0, #2
 8004e02:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004e06:	f7fb f9df 	bl	80001c8 <__aeabi_uldivmod>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	4b2f      	ldr	r3, [pc, #188]	; (8004ecc <UART_SetConfig+0x38c>)
 8004e10:	fba3 1302 	umull	r1, r3, r3, r2
 8004e14:	095b      	lsrs	r3, r3, #5
 8004e16:	2164      	movs	r1, #100	; 0x64
 8004e18:	fb01 f303 	mul.w	r3, r1, r3
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	3332      	adds	r3, #50	; 0x32
 8004e22:	4a2a      	ldr	r2, [pc, #168]	; (8004ecc <UART_SetConfig+0x38c>)
 8004e24:	fba2 2303 	umull	r2, r3, r2, r3
 8004e28:	095b      	lsrs	r3, r3, #5
 8004e2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e2e:	441e      	add	r6, r3
 8004e30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e32:	4618      	mov	r0, r3
 8004e34:	f04f 0100 	mov.w	r1, #0
 8004e38:	4602      	mov	r2, r0
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	1894      	adds	r4, r2, r2
 8004e3e:	603c      	str	r4, [r7, #0]
 8004e40:	415b      	adcs	r3, r3
 8004e42:	607b      	str	r3, [r7, #4]
 8004e44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e48:	1812      	adds	r2, r2, r0
 8004e4a:	eb41 0303 	adc.w	r3, r1, r3
 8004e4e:	f04f 0400 	mov.w	r4, #0
 8004e52:	f04f 0500 	mov.w	r5, #0
 8004e56:	00dd      	lsls	r5, r3, #3
 8004e58:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e5c:	00d4      	lsls	r4, r2, #3
 8004e5e:	4622      	mov	r2, r4
 8004e60:	462b      	mov	r3, r5
 8004e62:	eb12 0a00 	adds.w	sl, r2, r0
 8004e66:	eb43 0b01 	adc.w	fp, r3, r1
 8004e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f04f 0100 	mov.w	r1, #0
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	f04f 0300 	mov.w	r3, #0
 8004e7c:	008b      	lsls	r3, r1, #2
 8004e7e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e82:	0082      	lsls	r2, r0, #2
 8004e84:	4650      	mov	r0, sl
 8004e86:	4659      	mov	r1, fp
 8004e88:	f7fb f99e 	bl	80001c8 <__aeabi_uldivmod>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	460b      	mov	r3, r1
 8004e90:	4b0e      	ldr	r3, [pc, #56]	; (8004ecc <UART_SetConfig+0x38c>)
 8004e92:	fba3 1302 	umull	r1, r3, r3, r2
 8004e96:	095b      	lsrs	r3, r3, #5
 8004e98:	2164      	movs	r1, #100	; 0x64
 8004e9a:	fb01 f303 	mul.w	r3, r1, r3
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	011b      	lsls	r3, r3, #4
 8004ea2:	3332      	adds	r3, #50	; 0x32
 8004ea4:	4a09      	ldr	r2, [pc, #36]	; (8004ecc <UART_SetConfig+0x38c>)
 8004ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eaa:	095b      	lsrs	r3, r3, #5
 8004eac:	f003 020f 	and.w	r2, r3, #15
 8004eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4432      	add	r2, r6
 8004eb6:	609a      	str	r2, [r3, #8]
}
 8004eb8:	bf00      	nop
 8004eba:	377c      	adds	r7, #124	; 0x7c
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40011000 	.word	0x40011000
 8004ec8:	40011400 	.word	0x40011400
 8004ecc:	51eb851f 	.word	0x51eb851f

08004ed0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ed0:	b084      	sub	sp, #16
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b084      	sub	sp, #16
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
 8004eda:	f107 001c 	add.w	r0, r7, #28
 8004ede:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d122      	bne.n	8004f2e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004efc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d105      	bne.n	8004f22 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f9a0 	bl	8005268 <USB_CoreReset>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	73fb      	strb	r3, [r7, #15]
 8004f2c:	e01a      	b.n	8004f64 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f994 	bl	8005268 <USB_CoreReset>
 8004f40:	4603      	mov	r3, r0
 8004f42:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004f44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d106      	bne.n	8004f58 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	639a      	str	r2, [r3, #56]	; 0x38
 8004f56:	e005      	b.n	8004f64 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d10b      	bne.n	8004f82 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f043 0206 	orr.w	r2, r3, #6
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f043 0220 	orr.w	r2, r3, #32
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f8e:	b004      	add	sp, #16
 8004f90:	4770      	bx	lr

08004f92 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f92:	b480      	push	{r7}
 8004f94:	b083      	sub	sp, #12
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f043 0201 	orr.w	r2, r3, #1
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f023 0201 	bic.w	r2, r3, #1
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b084      	sub	sp, #16
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	460b      	mov	r3, r1
 8004fe0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ff2:	78fb      	ldrb	r3, [r7, #3]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d115      	bne.n	8005024 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005004:	2001      	movs	r0, #1
 8005006:	f7fb ff0d 	bl	8000e24 <HAL_Delay>
      ms++;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	3301      	adds	r3, #1
 800500e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f91a 	bl	800524a <USB_GetMode>
 8005016:	4603      	mov	r3, r0
 8005018:	2b01      	cmp	r3, #1
 800501a:	d01e      	beq.n	800505a <USB_SetCurrentMode+0x84>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2b31      	cmp	r3, #49	; 0x31
 8005020:	d9f0      	bls.n	8005004 <USB_SetCurrentMode+0x2e>
 8005022:	e01a      	b.n	800505a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005024:	78fb      	ldrb	r3, [r7, #3]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d115      	bne.n	8005056 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005036:	2001      	movs	r0, #1
 8005038:	f7fb fef4 	bl	8000e24 <HAL_Delay>
      ms++;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	3301      	adds	r3, #1
 8005040:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f901 	bl	800524a <USB_GetMode>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d005      	beq.n	800505a <USB_SetCurrentMode+0x84>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2b31      	cmp	r3, #49	; 0x31
 8005052:	d9f0      	bls.n	8005036 <USB_SetCurrentMode+0x60>
 8005054:	e001      	b.n	800505a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e005      	b.n	8005066 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2b32      	cmp	r3, #50	; 0x32
 800505e:	d101      	bne.n	8005064 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e000      	b.n	8005066 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
	...

08005070 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800507a:	2300      	movs	r3, #0
 800507c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	019b      	lsls	r3, r3, #6
 8005082:	f043 0220 	orr.w	r2, r3, #32
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	3301      	adds	r3, #1
 800508e:	60fb      	str	r3, [r7, #12]
 8005090:	4a08      	ldr	r2, [pc, #32]	; (80050b4 <USB_FlushTxFifo+0x44>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d901      	bls.n	800509a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e006      	b.n	80050a8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	f003 0320 	and.w	r3, r3, #32
 80050a2:	2b20      	cmp	r3, #32
 80050a4:	d0f1      	beq.n	800508a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3714      	adds	r7, #20
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr
 80050b4:	00030d40 	.word	0x00030d40

080050b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050c0:	2300      	movs	r3, #0
 80050c2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2210      	movs	r2, #16
 80050c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	3301      	adds	r3, #1
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	4a08      	ldr	r2, [pc, #32]	; (80050f4 <USB_FlushRxFifo+0x3c>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d901      	bls.n	80050da <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e006      	b.n	80050e8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	f003 0310 	and.w	r3, r3, #16
 80050e2:	2b10      	cmp	r3, #16
 80050e4:	d0f1      	beq.n	80050ca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	00030d40 	.word	0x00030d40

080050f8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b089      	sub	sp, #36	; 0x24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	4611      	mov	r1, r2
 8005104:	461a      	mov	r2, r3
 8005106:	460b      	mov	r3, r1
 8005108:	71fb      	strb	r3, [r7, #7]
 800510a:	4613      	mov	r3, r2
 800510c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005116:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800511a:	2b00      	cmp	r3, #0
 800511c:	d123      	bne.n	8005166 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800511e:	88bb      	ldrh	r3, [r7, #4]
 8005120:	3303      	adds	r3, #3
 8005122:	089b      	lsrs	r3, r3, #2
 8005124:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005126:	2300      	movs	r3, #0
 8005128:	61bb      	str	r3, [r7, #24]
 800512a:	e018      	b.n	800515e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800512c:	79fb      	ldrb	r3, [r7, #7]
 800512e:	031a      	lsls	r2, r3, #12
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	4413      	add	r3, r2
 8005134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005138:	461a      	mov	r2, r3
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	3301      	adds	r3, #1
 8005144:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	3301      	adds	r3, #1
 800514a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	3301      	adds	r3, #1
 8005150:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	3301      	adds	r3, #1
 8005156:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	3301      	adds	r3, #1
 800515c:	61bb      	str	r3, [r7, #24]
 800515e:	69ba      	ldr	r2, [r7, #24]
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	429a      	cmp	r2, r3
 8005164:	d3e2      	bcc.n	800512c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3724      	adds	r7, #36	; 0x24
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005174:	b480      	push	{r7}
 8005176:	b08b      	sub	sp, #44	; 0x2c
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	4613      	mov	r3, r2
 8005180:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800518a:	88fb      	ldrh	r3, [r7, #6]
 800518c:	089b      	lsrs	r3, r3, #2
 800518e:	b29b      	uxth	r3, r3
 8005190:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005192:	88fb      	ldrh	r3, [r7, #6]
 8005194:	f003 0303 	and.w	r3, r3, #3
 8005198:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800519a:	2300      	movs	r3, #0
 800519c:	623b      	str	r3, [r7, #32]
 800519e:	e014      	b.n	80051ca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	601a      	str	r2, [r3, #0]
    pDest++;
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	3301      	adds	r3, #1
 80051b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	3301      	adds	r3, #1
 80051b6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	3301      	adds	r3, #1
 80051bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	3301      	adds	r3, #1
 80051c2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	3301      	adds	r3, #1
 80051c8:	623b      	str	r3, [r7, #32]
 80051ca:	6a3a      	ldr	r2, [r7, #32]
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d3e6      	bcc.n	80051a0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80051d2:	8bfb      	ldrh	r3, [r7, #30]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d01e      	beq.n	8005216 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051e2:	461a      	mov	r2, r3
 80051e4:	f107 0310 	add.w	r3, r7, #16
 80051e8:	6812      	ldr	r2, [r2, #0]
 80051ea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	fa22 f303 	lsr.w	r3, r2, r3
 80051f8:	b2da      	uxtb	r2, r3
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	701a      	strb	r2, [r3, #0]
      i++;
 80051fe:	6a3b      	ldr	r3, [r7, #32]
 8005200:	3301      	adds	r3, #1
 8005202:	623b      	str	r3, [r7, #32]
      pDest++;
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	3301      	adds	r3, #1
 8005208:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800520a:	8bfb      	ldrh	r3, [r7, #30]
 800520c:	3b01      	subs	r3, #1
 800520e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005210:	8bfb      	ldrh	r3, [r7, #30]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1ea      	bne.n	80051ec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005218:	4618      	mov	r0, r3
 800521a:	372c      	adds	r7, #44	; 0x2c
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	4013      	ands	r3, r2
 800523a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800523c:	68fb      	ldr	r3, [r7, #12]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	f003 0301 	and.w	r3, r3, #1
}
 800525a:	4618      	mov	r0, r3
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
	...

08005268 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005270:	2300      	movs	r3, #0
 8005272:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	3301      	adds	r3, #1
 8005278:	60fb      	str	r3, [r7, #12]
 800527a:	4a13      	ldr	r2, [pc, #76]	; (80052c8 <USB_CoreReset+0x60>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d901      	bls.n	8005284 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e01a      	b.n	80052ba <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	daf3      	bge.n	8005274 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800528c:	2300      	movs	r3, #0
 800528e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	f043 0201 	orr.w	r2, r3, #1
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	3301      	adds	r3, #1
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	4a09      	ldr	r2, [pc, #36]	; (80052c8 <USB_CoreReset+0x60>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d901      	bls.n	80052ac <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e006      	b.n	80052ba <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	f003 0301 	and.w	r3, r3, #1
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d0f1      	beq.n	800529c <USB_CoreReset+0x34>

  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	00030d40 	.word	0x00030d40

080052cc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052cc:	b084      	sub	sp, #16
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b084      	sub	sp, #16
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	f107 001c 	add.w	r0, r7, #28
 80052da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052e8:	461a      	mov	r2, r3
 80052ea:	2300      	movs	r3, #0
 80052ec:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fe:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531a:	2b00      	cmp	r3, #0
 800531c:	d018      	beq.n	8005350 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	2b01      	cmp	r3, #1
 8005322:	d10a      	bne.n	800533a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005332:	f043 0304 	orr.w	r3, r3, #4
 8005336:	6013      	str	r3, [r2, #0]
 8005338:	e014      	b.n	8005364 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005348:	f023 0304 	bic.w	r3, r3, #4
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	e009      	b.n	8005364 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800535e:	f023 0304 	bic.w	r3, r3, #4
 8005362:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005364:	2110      	movs	r1, #16
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7ff fe82 	bl	8005070 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7ff fea3 	bl	80050b8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005372:	2300      	movs	r3, #0
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	e015      	b.n	80053a4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	4413      	add	r3, r2
 8005380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005384:	461a      	mov	r2, r3
 8005386:	f04f 33ff 	mov.w	r3, #4294967295
 800538a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	4413      	add	r3, r2
 8005394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005398:	461a      	mov	r2, r3
 800539a:	2300      	movs	r3, #0
 800539c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	3301      	adds	r3, #1
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d3e5      	bcc.n	8005378 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f04f 32ff 	mov.w	r2, #4294967295
 80053b8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00b      	beq.n	80053de <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053cc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a13      	ldr	r2, [pc, #76]	; (8005420 <USB_HostInit+0x154>)
 80053d2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a13      	ldr	r2, [pc, #76]	; (8005424 <USB_HostInit+0x158>)
 80053d8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80053dc:	e009      	b.n	80053f2 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2280      	movs	r2, #128	; 0x80
 80053e2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a10      	ldr	r2, [pc, #64]	; (8005428 <USB_HostInit+0x15c>)
 80053e8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a0f      	ldr	r2, [pc, #60]	; (800542c <USB_HostInit+0x160>)
 80053ee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80053f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d105      	bne.n	8005404 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	f043 0210 	orr.w	r2, r3, #16
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	699a      	ldr	r2, [r3, #24]
 8005408:	4b09      	ldr	r3, [pc, #36]	; (8005430 <USB_HostInit+0x164>)
 800540a:	4313      	orrs	r3, r2
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800541c:	b004      	add	sp, #16
 800541e:	4770      	bx	lr
 8005420:	01000200 	.word	0x01000200
 8005424:	00e00300 	.word	0x00e00300
 8005428:	00600080 	.word	0x00600080
 800542c:	004000e0 	.word	0x004000e0
 8005430:	a3200008 	.word	0xa3200008

08005434 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	460b      	mov	r3, r1
 800543e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005452:	f023 0303 	bic.w	r3, r3, #3
 8005456:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	78fb      	ldrb	r3, [r7, #3]
 8005462:	f003 0303 	and.w	r3, r3, #3
 8005466:	68f9      	ldr	r1, [r7, #12]
 8005468:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800546c:	4313      	orrs	r3, r2
 800546e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005470:	78fb      	ldrb	r3, [r7, #3]
 8005472:	2b01      	cmp	r3, #1
 8005474:	d107      	bne.n	8005486 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800547c:	461a      	mov	r2, r3
 800547e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005482:	6053      	str	r3, [r2, #4]
 8005484:	e009      	b.n	800549a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005486:	78fb      	ldrb	r3, [r7, #3]
 8005488:	2b02      	cmp	r3, #2
 800548a:	d106      	bne.n	800549a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005492:	461a      	mov	r2, r3
 8005494:	f241 7370 	movw	r3, #6000	; 0x1770
 8005498:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3714      	adds	r7, #20
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80054c8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80054d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054d6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80054d8:	2064      	movs	r0, #100	; 0x64
 80054da:	f7fb fca3 	bl	8000e24 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80054e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054ea:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80054ec:	200a      	movs	r0, #10
 80054ee:	f7fb fc99 	bl	8000e24 <HAL_Delay>

  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	460b      	mov	r3, r1
 8005506:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005520:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d109      	bne.n	8005540 <USB_DriveVbus+0x44>
 800552c:	78fb      	ldrb	r3, [r7, #3]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d106      	bne.n	8005540 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800553a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800553e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800554a:	d109      	bne.n	8005560 <USB_DriveVbus+0x64>
 800554c:	78fb      	ldrb	r3, [r7, #3]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d106      	bne.n	8005560 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800555a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800555e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800556e:	b480      	push	{r7}
 8005570:	b085      	sub	sp, #20
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800557a:	2300      	movs	r3, #0
 800557c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	0c5b      	lsrs	r3, r3, #17
 800558c:	f003 0303 	and.w	r3, r3, #3
}
 8005590:	4618      	mov	r0, r3
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	b29b      	uxth	r3, r3
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
	...

080055c0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b088      	sub	sp, #32
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	4608      	mov	r0, r1
 80055ca:	4611      	mov	r1, r2
 80055cc:	461a      	mov	r2, r3
 80055ce:	4603      	mov	r3, r0
 80055d0:	70fb      	strb	r3, [r7, #3]
 80055d2:	460b      	mov	r3, r1
 80055d4:	70bb      	strb	r3, [r7, #2]
 80055d6:	4613      	mov	r3, r2
 80055d8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80055da:	2300      	movs	r3, #0
 80055dc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80055e2:	78fb      	ldrb	r3, [r7, #3]
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ee:	461a      	mov	r2, r3
 80055f0:	f04f 33ff 	mov.w	r3, #4294967295
 80055f4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80055f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80055fa:	2b03      	cmp	r3, #3
 80055fc:	d87e      	bhi.n	80056fc <USB_HC_Init+0x13c>
 80055fe:	a201      	add	r2, pc, #4	; (adr r2, 8005604 <USB_HC_Init+0x44>)
 8005600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005604:	08005615 	.word	0x08005615
 8005608:	080056bf 	.word	0x080056bf
 800560c:	08005615 	.word	0x08005615
 8005610:	08005681 	.word	0x08005681
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005614:	78fb      	ldrb	r3, [r7, #3]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	4413      	add	r3, r2
 800561c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005620:	461a      	mov	r2, r3
 8005622:	f240 439d 	movw	r3, #1181	; 0x49d
 8005626:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005628:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800562c:	2b00      	cmp	r3, #0
 800562e:	da10      	bge.n	8005652 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005630:	78fb      	ldrb	r3, [r7, #3]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	4413      	add	r3, r2
 8005638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	78fa      	ldrb	r2, [r7, #3]
 8005640:	0151      	lsls	r1, r2, #5
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	440a      	add	r2, r1
 8005646:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800564a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800564e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005650:	e057      	b.n	8005702 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565a:	2b00      	cmp	r3, #0
 800565c:	d051      	beq.n	8005702 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800565e:	78fb      	ldrb	r3, [r7, #3]
 8005660:	015a      	lsls	r2, r3, #5
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	4413      	add	r3, r2
 8005666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	78fa      	ldrb	r2, [r7, #3]
 800566e:	0151      	lsls	r1, r2, #5
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	440a      	add	r2, r1
 8005674:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005678:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800567c:	60d3      	str	r3, [r2, #12]
      break;
 800567e:	e040      	b.n	8005702 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005680:	78fb      	ldrb	r3, [r7, #3]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	4413      	add	r3, r2
 8005688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800568c:	461a      	mov	r2, r3
 800568e:	f240 639d 	movw	r3, #1693	; 0x69d
 8005692:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005694:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005698:	2b00      	cmp	r3, #0
 800569a:	da34      	bge.n	8005706 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800569c:	78fb      	ldrb	r3, [r7, #3]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	78fa      	ldrb	r2, [r7, #3]
 80056ac:	0151      	lsls	r1, r2, #5
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	440a      	add	r2, r1
 80056b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056ba:	60d3      	str	r3, [r2, #12]
      }

      break;
 80056bc:	e023      	b.n	8005706 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80056be:	78fb      	ldrb	r3, [r7, #3]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ca:	461a      	mov	r2, r3
 80056cc:	f240 2325 	movw	r3, #549	; 0x225
 80056d0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80056d2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	da17      	bge.n	800570a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80056da:	78fb      	ldrb	r3, [r7, #3]
 80056dc:	015a      	lsls	r2, r3, #5
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	4413      	add	r3, r2
 80056e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	78fa      	ldrb	r2, [r7, #3]
 80056ea:	0151      	lsls	r1, r2, #5
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	440a      	add	r2, r1
 80056f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056f4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80056f8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80056fa:	e006      	b.n	800570a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	77fb      	strb	r3, [r7, #31]
      break;
 8005700:	e004      	b.n	800570c <USB_HC_Init+0x14c>
      break;
 8005702:	bf00      	nop
 8005704:	e002      	b.n	800570c <USB_HC_Init+0x14c>
      break;
 8005706:	bf00      	nop
 8005708:	e000      	b.n	800570c <USB_HC_Init+0x14c>
      break;
 800570a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005712:	699a      	ldr	r2, [r3, #24]
 8005714:	78fb      	ldrb	r3, [r7, #3]
 8005716:	f003 030f 	and.w	r3, r3, #15
 800571a:	2101      	movs	r1, #1
 800571c:	fa01 f303 	lsl.w	r3, r1, r3
 8005720:	6939      	ldr	r1, [r7, #16]
 8005722:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005726:	4313      	orrs	r3, r2
 8005728:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005736:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800573a:	2b00      	cmp	r3, #0
 800573c:	da03      	bge.n	8005746 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800573e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005742:	61bb      	str	r3, [r7, #24]
 8005744:	e001      	b.n	800574a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005746:	2300      	movs	r3, #0
 8005748:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7ff ff0f 	bl	800556e <USB_GetHostSpeed>
 8005750:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005752:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005756:	2b02      	cmp	r3, #2
 8005758:	d106      	bne.n	8005768 <USB_HC_Init+0x1a8>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2b02      	cmp	r3, #2
 800575e:	d003      	beq.n	8005768 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005760:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005764:	617b      	str	r3, [r7, #20]
 8005766:	e001      	b.n	800576c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005768:	2300      	movs	r3, #0
 800576a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800576c:	787b      	ldrb	r3, [r7, #1]
 800576e:	059b      	lsls	r3, r3, #22
 8005770:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005774:	78bb      	ldrb	r3, [r7, #2]
 8005776:	02db      	lsls	r3, r3, #11
 8005778:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800577c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800577e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005782:	049b      	lsls	r3, r3, #18
 8005784:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005788:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800578a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800578c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005790:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005796:	78fb      	ldrb	r3, [r7, #3]
 8005798:	0159      	lsls	r1, r3, #5
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	440b      	add	r3, r1
 800579e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057a2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80057a8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80057aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80057ae:	2b03      	cmp	r3, #3
 80057b0:	d10f      	bne.n	80057d2 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80057b2:	78fb      	ldrb	r3, [r7, #3]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	78fa      	ldrb	r2, [r7, #3]
 80057c2:	0151      	lsls	r1, r2, #5
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	440a      	add	r2, r1
 80057c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057d0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80057d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3720      	adds	r7, #32
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08c      	sub	sp, #48	; 0x30
 80057e0:	af02      	add	r7, sp, #8
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	4613      	mov	r3, r2
 80057e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	785b      	ldrb	r3, [r3, #1]
 80057f2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80057f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057f8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005802:	2b00      	cmp	r3, #0
 8005804:	d02d      	beq.n	8005862 <USB_HC_StartXfer+0x86>
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	791b      	ldrb	r3, [r3, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d129      	bne.n	8005862 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800580e:	79fb      	ldrb	r3, [r7, #7]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d117      	bne.n	8005844 <USB_HC_StartXfer+0x68>
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	79db      	ldrb	r3, [r3, #7]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d003      	beq.n	8005824 <USB_HC_StartXfer+0x48>
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	79db      	ldrb	r3, [r3, #7]
 8005820:	2b02      	cmp	r3, #2
 8005822:	d10f      	bne.n	8005844 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	4413      	add	r3, r2
 800582c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	69fa      	ldr	r2, [r7, #28]
 8005834:	0151      	lsls	r1, r2, #5
 8005836:	6a3a      	ldr	r2, [r7, #32]
 8005838:	440a      	add	r2, r1
 800583a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800583e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005842:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005844:	79fb      	ldrb	r3, [r7, #7]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10b      	bne.n	8005862 <USB_HC_StartXfer+0x86>
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	795b      	ldrb	r3, [r3, #5]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d107      	bne.n	8005862 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	785b      	ldrb	r3, [r3, #1]
 8005856:	4619      	mov	r1, r3
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 fa2f 	bl	8005cbc <USB_DoPing>
      return HAL_OK;
 800585e:	2300      	movs	r3, #0
 8005860:	e0f8      	b.n	8005a54 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d018      	beq.n	800589c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	8912      	ldrh	r2, [r2, #8]
 8005872:	4413      	add	r3, r2
 8005874:	3b01      	subs	r3, #1
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	8912      	ldrh	r2, [r2, #8]
 800587a:	fbb3 f3f2 	udiv	r3, r3, r2
 800587e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005880:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005882:	8b7b      	ldrh	r3, [r7, #26]
 8005884:	429a      	cmp	r2, r3
 8005886:	d90b      	bls.n	80058a0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005888:	8b7b      	ldrh	r3, [r7, #26]
 800588a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800588c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	8912      	ldrh	r2, [r2, #8]
 8005892:	fb02 f203 	mul.w	r2, r2, r3
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	611a      	str	r2, [r3, #16]
 800589a:	e001      	b.n	80058a0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800589c:	2301      	movs	r3, #1
 800589e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	78db      	ldrb	r3, [r3, #3]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d007      	beq.n	80058b8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80058a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	8912      	ldrh	r2, [r2, #8]
 80058ae:	fb02 f203 	mul.w	r2, r2, r3
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	611a      	str	r2, [r3, #16]
 80058b6:	e003      	b.n	80058c0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	695a      	ldr	r2, [r3, #20]
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80058c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058ca:	04d9      	lsls	r1, r3, #19
 80058cc:	4b63      	ldr	r3, [pc, #396]	; (8005a5c <USB_HC_StartXfer+0x280>)
 80058ce:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80058d0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	7a9b      	ldrb	r3, [r3, #10]
 80058d6:	075b      	lsls	r3, r3, #29
 80058d8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80058dc:	69f9      	ldr	r1, [r7, #28]
 80058de:	0148      	lsls	r0, r1, #5
 80058e0:	6a39      	ldr	r1, [r7, #32]
 80058e2:	4401      	add	r1, r0
 80058e4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80058e8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80058ea:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80058ec:	79fb      	ldrb	r3, [r7, #7]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d009      	beq.n	8005906 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	68d9      	ldr	r1, [r3, #12]
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	6a3b      	ldr	r3, [r7, #32]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005902:	460a      	mov	r2, r1
 8005904:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	bf0c      	ite	eq
 8005916:	2301      	moveq	r3, #1
 8005918:	2300      	movne	r3, #0
 800591a:	b2db      	uxtb	r3, r3
 800591c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	015a      	lsls	r2, r3, #5
 8005922:	6a3b      	ldr	r3, [r7, #32]
 8005924:	4413      	add	r3, r2
 8005926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	69fa      	ldr	r2, [r7, #28]
 800592e:	0151      	lsls	r1, r2, #5
 8005930:	6a3a      	ldr	r2, [r7, #32]
 8005932:	440a      	add	r2, r1
 8005934:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005938:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800593c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	015a      	lsls	r2, r3, #5
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	4413      	add	r3, r2
 8005946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	7e7b      	ldrb	r3, [r7, #25]
 800594e:	075b      	lsls	r3, r3, #29
 8005950:	69f9      	ldr	r1, [r7, #28]
 8005952:	0148      	lsls	r0, r1, #5
 8005954:	6a39      	ldr	r1, [r7, #32]
 8005956:	4401      	add	r1, r0
 8005958:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800595c:	4313      	orrs	r3, r2
 800595e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	4413      	add	r3, r2
 8005968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005976:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	78db      	ldrb	r3, [r3, #3]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d004      	beq.n	800598a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005986:	613b      	str	r3, [r7, #16]
 8005988:	e003      	b.n	8005992 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005990:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005998:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	015a      	lsls	r2, r3, #5
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	4413      	add	r3, r2
 80059a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a6:	461a      	mov	r2, r3
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80059ac:	79fb      	ldrb	r3, [r7, #7]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80059b2:	2300      	movs	r3, #0
 80059b4:	e04e      	b.n	8005a54 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	78db      	ldrb	r3, [r3, #3]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d149      	bne.n	8005a52 <USB_HC_StartXfer+0x276>
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d045      	beq.n	8005a52 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	79db      	ldrb	r3, [r3, #7]
 80059ca:	2b03      	cmp	r3, #3
 80059cc:	d830      	bhi.n	8005a30 <USB_HC_StartXfer+0x254>
 80059ce:	a201      	add	r2, pc, #4	; (adr r2, 80059d4 <USB_HC_StartXfer+0x1f8>)
 80059d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d4:	080059e5 	.word	0x080059e5
 80059d8:	08005a09 	.word	0x08005a09
 80059dc:	080059e5 	.word	0x080059e5
 80059e0:	08005a09 	.word	0x08005a09
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	3303      	adds	r3, #3
 80059ea:	089b      	lsrs	r3, r3, #2
 80059ec:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80059ee:	8afa      	ldrh	r2, [r7, #22]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d91c      	bls.n	8005a34 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	f043 0220 	orr.w	r2, r3, #32
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	619a      	str	r2, [r3, #24]
        }
        break;
 8005a06:	e015      	b.n	8005a34 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	3303      	adds	r3, #3
 8005a0e:	089b      	lsrs	r3, r3, #2
 8005a10:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005a12:	8afa      	ldrh	r2, [r7, #22]
 8005a14:	6a3b      	ldr	r3, [r7, #32]
 8005a16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d90a      	bls.n	8005a38 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	619a      	str	r2, [r3, #24]
        }
        break;
 8005a2e:	e003      	b.n	8005a38 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005a30:	bf00      	nop
 8005a32:	e002      	b.n	8005a3a <USB_HC_StartXfer+0x25e>
        break;
 8005a34:	bf00      	nop
 8005a36:	e000      	b.n	8005a3a <USB_HC_StartXfer+0x25e>
        break;
 8005a38:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	68d9      	ldr	r1, [r3, #12]
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	785a      	ldrb	r2, [r3, #1]
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	2000      	movs	r0, #0
 8005a4a:	9000      	str	r0, [sp, #0]
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f7ff fb53 	bl	80050f8 <USB_WritePacket>
  }

  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3728      	adds	r7, #40	; 0x28
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	1ff80000 	.word	0x1ff80000

08005a60 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	b29b      	uxth	r3, r3
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b089      	sub	sp, #36	; 0x24
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8005a92:	78fb      	ldrb	r3, [r7, #3]
 8005a94:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	0c9b      	lsrs	r3, r3, #18
 8005aaa:	f003 0303 	and.w	r3, r3, #3
 8005aae:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	0fdb      	lsrs	r3, r3, #31
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f003 0320 	and.w	r3, r3, #32
 8005ace:	2b20      	cmp	r3, #32
 8005ad0:	d104      	bne.n	8005adc <USB_HC_Halt+0x5a>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d101      	bne.n	8005adc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	e0e8      	b.n	8005cae <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d002      	beq.n	8005ae8 <USB_HC_Halt+0x66>
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d173      	bne.n	8005bd0 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	015a      	lsls	r2, r3, #5
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	4413      	add	r3, r2
 8005af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	0151      	lsls	r1, r2, #5
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	440a      	add	r2, r1
 8005afe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b06:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f003 0320 	and.w	r3, r3, #32
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f040 80cb 	bne.w	8005cac <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d143      	bne.n	8005baa <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	015a      	lsls	r2, r3, #5
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	4413      	add	r3, r2
 8005b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	0151      	lsls	r1, r2, #5
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	440a      	add	r2, r1
 8005b38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b40:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	0151      	lsls	r1, r2, #5
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	440a      	add	r2, r1
 8005b58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b60:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	0151      	lsls	r1, r2, #5
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	440a      	add	r2, r1
 8005b78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b80:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	3301      	adds	r3, #1
 8005b86:	61fb      	str	r3, [r7, #28]
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b8e:	d81d      	bhi.n	8005bcc <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ba2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ba6:	d0ec      	beq.n	8005b82 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ba8:	e080      	b.n	8005cac <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	015a      	lsls	r2, r3, #5
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	0151      	lsls	r1, r2, #5
 8005bbc:	69ba      	ldr	r2, [r7, #24]
 8005bbe:	440a      	add	r2, r1
 8005bc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bc8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005bca:	e06f      	b.n	8005cac <USB_HC_Halt+0x22a>
            break;
 8005bcc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005bce:	e06d      	b.n	8005cac <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	0151      	lsls	r1, r2, #5
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	440a      	add	r2, r1
 8005be6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bee:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d143      	bne.n	8005c88 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	0151      	lsls	r1, r2, #5
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	440a      	add	r2, r1
 8005c16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c1e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	0151      	lsls	r1, r2, #5
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	440a      	add	r2, r1
 8005c36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c3e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	0151      	lsls	r1, r2, #5
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	440a      	add	r2, r1
 8005c56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c5a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c5e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	3301      	adds	r3, #1
 8005c64:	61fb      	str	r3, [r7, #28]
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c6c:	d81d      	bhi.n	8005caa <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c84:	d0ec      	beq.n	8005c60 <USB_HC_Halt+0x1de>
 8005c86:	e011      	b.n	8005cac <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	0151      	lsls	r1, r2, #5
 8005c9a:	69ba      	ldr	r2, [r7, #24]
 8005c9c:	440a      	add	r2, r1
 8005c9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ca2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ca6:	6013      	str	r3, [r2, #0]
 8005ca8:	e000      	b.n	8005cac <USB_HC_Halt+0x22a>
          break;
 8005caa:	bf00      	nop
    }
  }

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3724      	adds	r7, #36	; 0x24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
	...

08005cbc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005ccc:	78fb      	ldrb	r3, [r7, #3]
 8005cce:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	04da      	lsls	r2, r3, #19
 8005cd8:	4b15      	ldr	r3, [pc, #84]	; (8005d30 <USB_DoPing+0x74>)
 8005cda:	4013      	ands	r3, r2
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	0151      	lsls	r1, r2, #5
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	440a      	add	r2, r1
 8005ce4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ce8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cec:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d04:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d0c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	015a      	lsls	r2, r3, #5
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	4413      	add	r3, r2
 8005d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	371c      	adds	r7, #28
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	1ff80000 	.word	0x1ff80000

08005d34 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b086      	sub	sp, #24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005d40:	2300      	movs	r3, #0
 8005d42:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7ff f935 	bl	8004fb4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005d4a:	2110      	movs	r1, #16
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7ff f98f 	bl	8005070 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7ff f9b0 	bl	80050b8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005d58:	2300      	movs	r3, #0
 8005d5a:	613b      	str	r3, [r7, #16]
 8005d5c:	e01f      	b.n	8005d9e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d74:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d7c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d84:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d92:	461a      	mov	r2, r3
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	613b      	str	r3, [r7, #16]
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	2b0f      	cmp	r3, #15
 8005da2:	d9dc      	bls.n	8005d5e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005da4:	2300      	movs	r3, #0
 8005da6:	613b      	str	r3, [r7, #16]
 8005da8:	e034      	b.n	8005e14 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	015a      	lsls	r2, r3, #5
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	4413      	add	r3, r2
 8005db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dc0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dc8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005dd0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dde:	461a      	mov	r2, r3
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	3301      	adds	r3, #1
 8005de8:	617b      	str	r3, [r7, #20]
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005df0:	d80c      	bhi.n	8005e0c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	015a      	lsls	r2, r3, #5
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	4413      	add	r3, r2
 8005dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e08:	d0ec      	beq.n	8005de4 <USB_StopHost+0xb0>
 8005e0a:	e000      	b.n	8005e0e <USB_StopHost+0xda>
        break;
 8005e0c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	3301      	adds	r3, #1
 8005e12:	613b      	str	r3, [r7, #16]
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	2b0f      	cmp	r3, #15
 8005e18:	d9c7      	bls.n	8005daa <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e20:	461a      	mov	r2, r3
 8005e22:	f04f 33ff 	mov.w	r3, #4294967295
 8005e26:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e2e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f7ff f8ae 	bl	8004f92 <USB_EnableGlobalInt>

  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3718      	adds	r7, #24
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005e40:	b590      	push	{r4, r7, lr}
 8005e42:	b089      	sub	sp, #36	; 0x24
 8005e44:	af04      	add	r7, sp, #16
 8005e46:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005e48:	2301      	movs	r3, #1
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	2102      	movs	r1, #2
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fc66 	bl	8006720 <USBH_FindInterface>
 8005e54:	4603      	mov	r3, r0
 8005e56:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005e58:	7bfb      	ldrb	r3, [r7, #15]
 8005e5a:	2bff      	cmp	r3, #255	; 0xff
 8005e5c:	d002      	beq.n	8005e64 <USBH_CDC_InterfaceInit+0x24>
 8005e5e:	7bfb      	ldrb	r3, [r7, #15]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d901      	bls.n	8005e68 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005e64:	2302      	movs	r3, #2
 8005e66:	e13d      	b.n	80060e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005e68:	7bfb      	ldrb	r3, [r7, #15]
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fc3b 	bl	80066e8 <USBH_SelectInterface>
 8005e72:	4603      	mov	r3, r0
 8005e74:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005e76:	7bbb      	ldrb	r3, [r7, #14]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d001      	beq.n	8005e80 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	e131      	b.n	80060e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005e86:	2050      	movs	r0, #80	; 0x50
 8005e88:	f002 fa00 	bl	800828c <malloc>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e96:	69db      	ldr	r3, [r3, #28]
 8005e98:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d101      	bne.n	8005ea4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	e11f      	b.n	80060e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005ea4:	2250      	movs	r2, #80	; 0x50
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	68b8      	ldr	r0, [r7, #8]
 8005eaa:	f002 f9ff 	bl	80082ac <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005eae:	7bfb      	ldrb	r3, [r7, #15]
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	211a      	movs	r1, #26
 8005eb4:	fb01 f303 	mul.w	r3, r1, r3
 8005eb8:	4413      	add	r3, r2
 8005eba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	b25b      	sxtb	r3, r3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	da15      	bge.n	8005ef2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005ec6:	7bfb      	ldrb	r3, [r7, #15]
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	211a      	movs	r1, #26
 8005ecc:	fb01 f303 	mul.w	r3, r1, r3
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ed6:	781a      	ldrb	r2, [r3, #0]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005edc:	7bfb      	ldrb	r3, [r7, #15]
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	211a      	movs	r1, #26
 8005ee2:	fb01 f303 	mul.w	r3, r1, r3
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005eec:	881a      	ldrh	r2, [r3, #0]
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	785b      	ldrb	r3, [r3, #1]
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f001 fe32 	bl	8007b62 <USBH_AllocPipe>
 8005efe:	4603      	mov	r3, r0
 8005f00:	461a      	mov	r2, r3
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	7819      	ldrb	r1, [r3, #0]
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	7858      	ldrb	r0, [r3, #1]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	8952      	ldrh	r2, [r2, #10]
 8005f1e:	9202      	str	r2, [sp, #8]
 8005f20:	2203      	movs	r2, #3
 8005f22:	9201      	str	r2, [sp, #4]
 8005f24:	9300      	str	r3, [sp, #0]
 8005f26:	4623      	mov	r3, r4
 8005f28:	4602      	mov	r2, r0
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f001 fdea 	bl	8007b04 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	2200      	movs	r2, #0
 8005f36:	4619      	mov	r1, r3
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f002 f8f9 	bl	8008130 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005f3e:	2300      	movs	r3, #0
 8005f40:	2200      	movs	r2, #0
 8005f42:	210a      	movs	r1, #10
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 fbeb 	bl	8006720 <USBH_FindInterface>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005f4e:	7bfb      	ldrb	r3, [r7, #15]
 8005f50:	2bff      	cmp	r3, #255	; 0xff
 8005f52:	d002      	beq.n	8005f5a <USBH_CDC_InterfaceInit+0x11a>
 8005f54:	7bfb      	ldrb	r3, [r7, #15]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d901      	bls.n	8005f5e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005f5a:	2302      	movs	r3, #2
 8005f5c:	e0c2      	b.n	80060e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005f5e:	7bfb      	ldrb	r3, [r7, #15]
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	211a      	movs	r1, #26
 8005f64:	fb01 f303 	mul.w	r3, r1, r3
 8005f68:	4413      	add	r3, r2
 8005f6a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	b25b      	sxtb	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	da16      	bge.n	8005fa4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005f76:	7bfb      	ldrb	r3, [r7, #15]
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	211a      	movs	r1, #26
 8005f7c:	fb01 f303 	mul.w	r3, r1, r3
 8005f80:	4413      	add	r3, r2
 8005f82:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f86:	781a      	ldrb	r2, [r3, #0]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005f8c:	7bfb      	ldrb	r3, [r7, #15]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	211a      	movs	r1, #26
 8005f92:	fb01 f303 	mul.w	r3, r1, r3
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005f9c:	881a      	ldrh	r2, [r3, #0]
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	835a      	strh	r2, [r3, #26]
 8005fa2:	e015      	b.n	8005fd0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005fa4:	7bfb      	ldrb	r3, [r7, #15]
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	211a      	movs	r1, #26
 8005faa:	fb01 f303 	mul.w	r3, r1, r3
 8005fae:	4413      	add	r3, r2
 8005fb0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005fb4:	781a      	ldrb	r2, [r3, #0]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005fba:	7bfb      	ldrb	r3, [r7, #15]
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	211a      	movs	r1, #26
 8005fc0:	fb01 f303 	mul.w	r3, r1, r3
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005fca:	881a      	ldrh	r2, [r3, #0]
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005fd0:	7bfb      	ldrb	r3, [r7, #15]
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	211a      	movs	r1, #26
 8005fd6:	fb01 f303 	mul.w	r3, r1, r3
 8005fda:	4413      	add	r3, r2
 8005fdc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	b25b      	sxtb	r3, r3
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	da16      	bge.n	8006016 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	211a      	movs	r1, #26
 8005fee:	fb01 f303 	mul.w	r3, r1, r3
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005ff8:	781a      	ldrb	r2, [r3, #0]
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005ffe:	7bfb      	ldrb	r3, [r7, #15]
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	211a      	movs	r1, #26
 8006004:	fb01 f303 	mul.w	r3, r1, r3
 8006008:	4413      	add	r3, r2
 800600a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800600e:	881a      	ldrh	r2, [r3, #0]
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	835a      	strh	r2, [r3, #26]
 8006014:	e015      	b.n	8006042 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006016:	7bfb      	ldrb	r3, [r7, #15]
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	211a      	movs	r1, #26
 800601c:	fb01 f303 	mul.w	r3, r1, r3
 8006020:	4413      	add	r3, r2
 8006022:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006026:	781a      	ldrb	r2, [r3, #0]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800602c:	7bfb      	ldrb	r3, [r7, #15]
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	211a      	movs	r1, #26
 8006032:	fb01 f303 	mul.w	r3, r1, r3
 8006036:	4413      	add	r3, r2
 8006038:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800603c:	881a      	ldrh	r2, [r3, #0]
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	7b9b      	ldrb	r3, [r3, #14]
 8006046:	4619      	mov	r1, r3
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f001 fd8a 	bl	8007b62 <USBH_AllocPipe>
 800604e:	4603      	mov	r3, r0
 8006050:	461a      	mov	r2, r3
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	7bdb      	ldrb	r3, [r3, #15]
 800605a:	4619      	mov	r1, r3
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f001 fd80 	bl	8007b62 <USBH_AllocPipe>
 8006062:	4603      	mov	r3, r0
 8006064:	461a      	mov	r2, r3
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	7b59      	ldrb	r1, [r3, #13]
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	7b98      	ldrb	r0, [r3, #14]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	8b12      	ldrh	r2, [r2, #24]
 8006082:	9202      	str	r2, [sp, #8]
 8006084:	2202      	movs	r2, #2
 8006086:	9201      	str	r2, [sp, #4]
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	4623      	mov	r3, r4
 800608c:	4602      	mov	r2, r0
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f001 fd38 	bl	8007b04 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	7b19      	ldrb	r1, [r3, #12]
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	7bd8      	ldrb	r0, [r3, #15]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	8b52      	ldrh	r2, [r2, #26]
 80060ac:	9202      	str	r2, [sp, #8]
 80060ae:	2202      	movs	r2, #2
 80060b0:	9201      	str	r2, [sp, #4]
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	4623      	mov	r3, r4
 80060b6:	4602      	mov	r2, r0
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f001 fd23 	bl	8007b04 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	7b5b      	ldrb	r3, [r3, #13]
 80060ca:	2200      	movs	r2, #0
 80060cc:	4619      	mov	r1, r3
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f002 f82e 	bl	8008130 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	7b1b      	ldrb	r3, [r3, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	4619      	mov	r1, r3
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f002 f827 	bl	8008130 <USBH_LL_SetToggle>

  return USBH_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3714      	adds	r7, #20
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd90      	pop	{r4, r7, pc}

080060ec <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060fa:	69db      	ldr	r3, [r3, #28]
 80060fc:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00e      	beq.n	8006124 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	4619      	mov	r1, r3
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f001 fd18 	bl	8007b42 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	4619      	mov	r1, r3
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f001 fd43 	bl	8007ba4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	7b1b      	ldrb	r3, [r3, #12]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00e      	beq.n	800614a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	7b1b      	ldrb	r3, [r3, #12]
 8006130:	4619      	mov	r1, r3
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f001 fd05 	bl	8007b42 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	7b1b      	ldrb	r3, [r3, #12]
 800613c:	4619      	mov	r1, r3
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f001 fd30 	bl	8007ba4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	7b5b      	ldrb	r3, [r3, #13]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00e      	beq.n	8006170 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	7b5b      	ldrb	r3, [r3, #13]
 8006156:	4619      	mov	r1, r3
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f001 fcf2 	bl	8007b42 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	7b5b      	ldrb	r3, [r3, #13]
 8006162:	4619      	mov	r1, r3
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f001 fd1d 	bl	8007ba4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006176:	69db      	ldr	r3, [r3, #28]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00b      	beq.n	8006194 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006182:	69db      	ldr	r3, [r3, #28]
 8006184:	4618      	mov	r0, r3
 8006186:	f002 f889 	bl	800829c <free>
    phost->pActiveClass->pData = 0U;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006190:	2200      	movs	r2, #0
 8006192:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b084      	sub	sp, #16
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061ac:	69db      	ldr	r3, [r3, #28]
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	3340      	adds	r3, #64	; 0x40
 80061b4:	4619      	mov	r1, r3
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 f8b1 	bl	800631e <GetLineCoding>
 80061bc:	4603      	mov	r3, r0
 80061be:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80061c0:	7afb      	ldrb	r3, [r7, #11]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d105      	bne.n	80061d2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061cc:	2102      	movs	r1, #2
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80061d2:	7afb      	ldrb	r3, [r7, #11]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80061e4:	2301      	movs	r3, #1
 80061e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80061e8:	2300      	movs	r3, #0
 80061ea:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061f2:	69db      	ldr	r3, [r3, #28]
 80061f4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80061fc:	2b04      	cmp	r3, #4
 80061fe:	d877      	bhi.n	80062f0 <USBH_CDC_Process+0x114>
 8006200:	a201      	add	r2, pc, #4	; (adr r2, 8006208 <USBH_CDC_Process+0x2c>)
 8006202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006206:	bf00      	nop
 8006208:	0800621d 	.word	0x0800621d
 800620c:	08006223 	.word	0x08006223
 8006210:	08006253 	.word	0x08006253
 8006214:	080062c7 	.word	0x080062c7
 8006218:	080062d5 	.word	0x080062d5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800621c:	2300      	movs	r3, #0
 800621e:	73fb      	strb	r3, [r7, #15]
      break;
 8006220:	e06d      	b.n	80062fe <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006226:	4619      	mov	r1, r3
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 f897 	bl	800635c <SetLineCoding>
 800622e:	4603      	mov	r3, r0
 8006230:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006232:	7bbb      	ldrb	r3, [r7, #14]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d104      	bne.n	8006242 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2202      	movs	r2, #2
 800623c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006240:	e058      	b.n	80062f4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006242:	7bbb      	ldrb	r3, [r7, #14]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d055      	beq.n	80062f4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	2204      	movs	r2, #4
 800624c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006250:	e050      	b.n	80062f4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	3340      	adds	r3, #64	; 0x40
 8006256:	4619      	mov	r1, r3
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 f860 	bl	800631e <GetLineCoding>
 800625e:	4603      	mov	r3, r0
 8006260:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006262:	7bbb      	ldrb	r3, [r7, #14]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d126      	bne.n	80062b6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800627a:	791b      	ldrb	r3, [r3, #4]
 800627c:	429a      	cmp	r2, r3
 800627e:	d13b      	bne.n	80062f8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800628a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800628c:	429a      	cmp	r2, r3
 800628e:	d133      	bne.n	80062f8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800629a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800629c:	429a      	cmp	r2, r3
 800629e:	d12b      	bne.n	80062f8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062a8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d124      	bne.n	80062f8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f958 	bl	8006564 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80062b4:	e020      	b.n	80062f8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80062b6:	7bbb      	ldrb	r3, [r7, #14]
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d01d      	beq.n	80062f8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	2204      	movs	r2, #4
 80062c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80062c4:	e018      	b.n	80062f8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f867 	bl	800639a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 f8da 	bl	8006486 <CDC_ProcessReception>
      break;
 80062d2:	e014      	b.n	80062fe <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80062d4:	2100      	movs	r1, #0
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 ffe3 	bl	80072a2 <USBH_ClrFeature>
 80062dc:	4603      	mov	r3, r0
 80062de:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80062e0:	7bbb      	ldrb	r3, [r7, #14]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10a      	bne.n	80062fc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80062ee:	e005      	b.n	80062fc <USBH_CDC_Process+0x120>

    default:
      break;
 80062f0:	bf00      	nop
 80062f2:	e004      	b.n	80062fe <USBH_CDC_Process+0x122>
      break;
 80062f4:	bf00      	nop
 80062f6:	e002      	b.n	80062fe <USBH_CDC_Process+0x122>
      break;
 80062f8:	bf00      	nop
 80062fa:	e000      	b.n	80062fe <USBH_CDC_Process+0x122>
      break;
 80062fc:	bf00      	nop

  }

  return status;
 80062fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b082      	sub	sp, #8
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
 8006326:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	22a1      	movs	r2, #161	; 0xa1
 800632c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2221      	movs	r2, #33	; 0x21
 8006332:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2207      	movs	r2, #7
 8006344:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	2207      	movs	r2, #7
 800634a:	4619      	mov	r1, r3
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f001 f988 	bl	8007662 <USBH_CtlReq>
 8006352:	4603      	mov	r3, r0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2221      	movs	r2, #33	; 0x21
 800636a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2220      	movs	r2, #32
 8006370:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2207      	movs	r2, #7
 8006382:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	2207      	movs	r2, #7
 8006388:	4619      	mov	r1, r3
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f001 f969 	bl	8007662 <USBH_CtlReq>
 8006390:	4603      	mov	r3, r0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3708      	adds	r7, #8
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b086      	sub	sp, #24
 800639e:	af02      	add	r7, sp, #8
 80063a0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80063ac:	2300      	movs	r3, #0
 80063ae:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d002      	beq.n	80063c0 <CDC_ProcessTransmission+0x26>
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d023      	beq.n	8006406 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80063be:	e05e      	b.n	800647e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	8b12      	ldrh	r2, [r2, #24]
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d90b      	bls.n	80063e4 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	69d9      	ldr	r1, [r3, #28]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	8b1a      	ldrh	r2, [r3, #24]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	7b5b      	ldrb	r3, [r3, #13]
 80063d8:	2001      	movs	r0, #1
 80063da:	9000      	str	r0, [sp, #0]
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f001 fb4e 	bl	8007a7e <USBH_BulkSendData>
 80063e2:	e00b      	b.n	80063fc <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	7b5b      	ldrb	r3, [r3, #13]
 80063f2:	2001      	movs	r0, #1
 80063f4:	9000      	str	r0, [sp, #0]
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f001 fb41 	bl	8007a7e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006404:	e03b      	b.n	800647e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	7b5b      	ldrb	r3, [r3, #13]
 800640a:	4619      	mov	r1, r3
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f001 fe65 	bl	80080dc <USBH_LL_GetURBState>
 8006412:	4603      	mov	r3, r0
 8006414:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006416:	7afb      	ldrb	r3, [r7, #11]
 8006418:	2b01      	cmp	r3, #1
 800641a:	d128      	bne.n	800646e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	8b12      	ldrh	r2, [r2, #24]
 8006424:	4293      	cmp	r3, r2
 8006426:	d90e      	bls.n	8006446 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	8b12      	ldrh	r2, [r2, #24]
 8006430:	1a9a      	subs	r2, r3, r2
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	8b12      	ldrh	r2, [r2, #24]
 800643e:	441a      	add	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	61da      	str	r2, [r3, #28]
 8006444:	e002      	b.n	800644c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	2b00      	cmp	r3, #0
 8006452:	d004      	beq.n	800645e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800645c:	e00e      	b.n	800647c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f868 	bl	800653c <USBH_CDC_TransmitCallback>
      break;
 800646c:	e006      	b.n	800647c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800646e:	7afb      	ldrb	r3, [r7, #11]
 8006470:	2b02      	cmp	r3, #2
 8006472:	d103      	bne.n	800647c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800647c:	bf00      	nop
  }
}
 800647e:	bf00      	nop
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b086      	sub	sp, #24
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006494:	69db      	ldr	r3, [r3, #28]
 8006496:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006498:	2300      	movs	r3, #0
 800649a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80064a2:	2b03      	cmp	r3, #3
 80064a4:	d002      	beq.n	80064ac <CDC_ProcessReception+0x26>
 80064a6:	2b04      	cmp	r3, #4
 80064a8:	d00e      	beq.n	80064c8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80064aa:	e043      	b.n	8006534 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	6a19      	ldr	r1, [r3, #32]
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	8b5a      	ldrh	r2, [r3, #26]
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	7b1b      	ldrb	r3, [r3, #12]
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f001 fb05 	bl	8007ac8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2204      	movs	r2, #4
 80064c2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80064c6:	e035      	b.n	8006534 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	7b1b      	ldrb	r3, [r3, #12]
 80064cc:	4619      	mov	r1, r3
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f001 fe04 	bl	80080dc <USBH_LL_GetURBState>
 80064d4:	4603      	mov	r3, r0
 80064d6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80064d8:	7cfb      	ldrb	r3, [r7, #19]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d129      	bne.n	8006532 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	7b1b      	ldrb	r3, [r3, #12]
 80064e2:	4619      	mov	r1, r3
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f001 fd67 	bl	8007fb8 <USBH_LL_GetLastXferSize>
 80064ea:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d016      	beq.n	8006524 <CDC_ProcessReception+0x9e>
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	8b5b      	ldrh	r3, [r3, #26]
 80064fa:	461a      	mov	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	4293      	cmp	r3, r2
 8006500:	d910      	bls.n	8006524 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	1ad2      	subs	r2, r2, r3
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	6a1a      	ldr	r2, [r3, #32]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	441a      	add	r2, r3
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	2203      	movs	r2, #3
 800651e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006522:	e006      	b.n	8006532 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 f80f 	bl	8006550 <USBH_CDC_ReceiveCallback>
      break;
 8006532:	bf00      	nop
  }
}
 8006534:	bf00      	nop
 8006536:	3718      	adds	r7, #24
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	4613      	mov	r3, r2
 8006584:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800658c:	2302      	movs	r3, #2
 800658e:	e029      	b.n	80065e4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	79fa      	ldrb	r2, [r7, #7]
 8006594:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f000 f81f 	bl	80065ec <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d003      	beq.n	80065dc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f001 fc37 	bl	8007e50 <USBH_LL_Init>

  return USBH_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80065f4:	2300      	movs	r3, #0
 80065f6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80065f8:	2300      	movs	r3, #0
 80065fa:	60fb      	str	r3, [r7, #12]
 80065fc:	e009      	b.n	8006612 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	33e0      	adds	r3, #224	; 0xe0
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4413      	add	r3, r2
 8006608:	2200      	movs	r2, #0
 800660a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	3301      	adds	r3, #1
 8006610:	60fb      	str	r3, [r7, #12]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2b0e      	cmp	r3, #14
 8006616:	d9f2      	bls.n	80065fe <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006618:	2300      	movs	r3, #0
 800661a:	60fb      	str	r3, [r7, #12]
 800661c:	e009      	b.n	8006632 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4413      	add	r3, r2
 8006624:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006628:	2200      	movs	r2, #0
 800662a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	3301      	adds	r3, #1
 8006630:	60fb      	str	r3, [r7, #12]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006638:	d3f1      	bcc.n	800661e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2240      	movs	r2, #64	; 0x40
 800665e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3714      	adds	r7, #20
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800669e:	2300      	movs	r3, #0
 80066a0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d016      	beq.n	80066d6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10e      	bne.n	80066d0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80066b8:	1c59      	adds	r1, r3, #1
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	33de      	adds	r3, #222	; 0xde
 80066c4:	6839      	ldr	r1, [r7, #0]
 80066c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80066ca:	2300      	movs	r3, #0
 80066cc:	73fb      	strb	r3, [r7, #15]
 80066ce:	e004      	b.n	80066da <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80066d0:	2302      	movs	r3, #2
 80066d2:	73fb      	strb	r3, [r7, #15]
 80066d4:	e001      	b.n	80066da <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80066d6:	2302      	movs	r3, #2
 80066d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80066da:	7bfb      	ldrb	r3, [r7, #15]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3714      	adds	r7, #20
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	460b      	mov	r3, r1
 80066f2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80066f4:	2300      	movs	r3, #0
 80066f6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80066fe:	78fa      	ldrb	r2, [r7, #3]
 8006700:	429a      	cmp	r2, r3
 8006702:	d204      	bcs.n	800670e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	78fa      	ldrb	r2, [r7, #3]
 8006708:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800670c:	e001      	b.n	8006712 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800670e:	2302      	movs	r3, #2
 8006710:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006712:	7bfb      	ldrb	r3, [r7, #15]
}
 8006714:	4618      	mov	r0, r3
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006720:	b480      	push	{r7}
 8006722:	b087      	sub	sp, #28
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	4608      	mov	r0, r1
 800672a:	4611      	mov	r1, r2
 800672c:	461a      	mov	r2, r3
 800672e:	4603      	mov	r3, r0
 8006730:	70fb      	strb	r3, [r7, #3]
 8006732:	460b      	mov	r3, r1
 8006734:	70bb      	strb	r3, [r7, #2]
 8006736:	4613      	mov	r3, r2
 8006738:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800673a:	2300      	movs	r3, #0
 800673c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800673e:	2300      	movs	r3, #0
 8006740:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006748:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800674a:	e025      	b.n	8006798 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800674c:	7dfb      	ldrb	r3, [r7, #23]
 800674e:	221a      	movs	r2, #26
 8006750:	fb02 f303 	mul.w	r3, r2, r3
 8006754:	3308      	adds	r3, #8
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	4413      	add	r3, r2
 800675a:	3302      	adds	r3, #2
 800675c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	795b      	ldrb	r3, [r3, #5]
 8006762:	78fa      	ldrb	r2, [r7, #3]
 8006764:	429a      	cmp	r2, r3
 8006766:	d002      	beq.n	800676e <USBH_FindInterface+0x4e>
 8006768:	78fb      	ldrb	r3, [r7, #3]
 800676a:	2bff      	cmp	r3, #255	; 0xff
 800676c:	d111      	bne.n	8006792 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006772:	78ba      	ldrb	r2, [r7, #2]
 8006774:	429a      	cmp	r2, r3
 8006776:	d002      	beq.n	800677e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006778:	78bb      	ldrb	r3, [r7, #2]
 800677a:	2bff      	cmp	r3, #255	; 0xff
 800677c:	d109      	bne.n	8006792 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006782:	787a      	ldrb	r2, [r7, #1]
 8006784:	429a      	cmp	r2, r3
 8006786:	d002      	beq.n	800678e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006788:	787b      	ldrb	r3, [r7, #1]
 800678a:	2bff      	cmp	r3, #255	; 0xff
 800678c:	d101      	bne.n	8006792 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800678e:	7dfb      	ldrb	r3, [r7, #23]
 8006790:	e006      	b.n	80067a0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006792:	7dfb      	ldrb	r3, [r7, #23]
 8006794:	3301      	adds	r3, #1
 8006796:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006798:	7dfb      	ldrb	r3, [r7, #23]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d9d6      	bls.n	800674c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800679e:	23ff      	movs	r3, #255	; 0xff
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	371c      	adds	r7, #28
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f001 fb87 	bl	8007ec8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80067ba:	2101      	movs	r1, #1
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f001 fca0 	bl	8008102 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3708      	adds	r7, #8
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b088      	sub	sp, #32
 80067d0:	af04      	add	r7, sp, #16
 80067d2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80067d4:	2302      	movs	r3, #2
 80067d6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80067d8:	2300      	movs	r3, #0
 80067da:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d102      	bne.n	80067ee <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2203      	movs	r2, #3
 80067ec:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	2b0b      	cmp	r3, #11
 80067f6:	f200 81b3 	bhi.w	8006b60 <USBH_Process+0x394>
 80067fa:	a201      	add	r2, pc, #4	; (adr r2, 8006800 <USBH_Process+0x34>)
 80067fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006800:	08006831 	.word	0x08006831
 8006804:	08006863 	.word	0x08006863
 8006808:	080068cb 	.word	0x080068cb
 800680c:	08006afb 	.word	0x08006afb
 8006810:	08006b61 	.word	0x08006b61
 8006814:	0800696f 	.word	0x0800696f
 8006818:	08006aa1 	.word	0x08006aa1
 800681c:	080069a5 	.word	0x080069a5
 8006820:	080069c5 	.word	0x080069c5
 8006824:	080069e5 	.word	0x080069e5
 8006828:	08006a13 	.word	0x08006a13
 800682c:	08006ae3 	.word	0x08006ae3
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b00      	cmp	r3, #0
 800683a:	f000 8193 	beq.w	8006b64 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006844:	20c8      	movs	r0, #200	; 0xc8
 8006846:	f001 fca3 	bl	8008190 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f001 fb99 	bl	8007f82 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006860:	e180      	b.n	8006b64 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006868:	2b01      	cmp	r3, #1
 800686a:	d107      	bne.n	800687c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2202      	movs	r2, #2
 8006878:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800687a:	e182      	b.n	8006b82 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006882:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006886:	d914      	bls.n	80068b2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800688e:	3301      	adds	r3, #1
 8006890:	b2da      	uxtb	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800689e:	2b03      	cmp	r3, #3
 80068a0:	d903      	bls.n	80068aa <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	220d      	movs	r2, #13
 80068a6:	701a      	strb	r2, [r3, #0]
      break;
 80068a8:	e16b      	b.n	8006b82 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	701a      	strb	r2, [r3, #0]
      break;
 80068b0:	e167      	b.n	8006b82 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80068b8:	f103 020a 	add.w	r2, r3, #10
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80068c2:	200a      	movs	r0, #10
 80068c4:	f001 fc64 	bl	8008190 <USBH_Delay>
      break;
 80068c8:	e15b      	b.n	8006b82 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d005      	beq.n	80068e0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068da:	2104      	movs	r1, #4
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80068e0:	2064      	movs	r0, #100	; 0x64
 80068e2:	f001 fc55 	bl	8008190 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f001 fb24 	bl	8007f34 <USBH_LL_GetSpeed>
 80068ec:	4603      	mov	r3, r0
 80068ee:	461a      	mov	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2205      	movs	r2, #5
 80068fa:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80068fc:	2100      	movs	r1, #0
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f001 f92f 	bl	8007b62 <USBH_AllocPipe>
 8006904:	4603      	mov	r3, r0
 8006906:	461a      	mov	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800690c:	2180      	movs	r1, #128	; 0x80
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f001 f927 	bl	8007b62 <USBH_AllocPipe>
 8006914:	4603      	mov	r3, r0
 8006916:	461a      	mov	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	7919      	ldrb	r1, [r3, #4]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006930:	b292      	uxth	r2, r2
 8006932:	9202      	str	r2, [sp, #8]
 8006934:	2200      	movs	r2, #0
 8006936:	9201      	str	r2, [sp, #4]
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	4603      	mov	r3, r0
 800693c:	2280      	movs	r2, #128	; 0x80
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f001 f8e0 	bl	8007b04 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	7959      	ldrb	r1, [r3, #5]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006958:	b292      	uxth	r2, r2
 800695a:	9202      	str	r2, [sp, #8]
 800695c:	2200      	movs	r2, #0
 800695e:	9201      	str	r2, [sp, #4]
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	4603      	mov	r3, r0
 8006964:	2200      	movs	r2, #0
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f001 f8cc 	bl	8007b04 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800696c:	e109      	b.n	8006b82 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f90c 	bl	8006b8c <USBH_HandleEnum>
 8006974:	4603      	mov	r3, r0
 8006976:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006978:	7bbb      	ldrb	r3, [r7, #14]
 800697a:	b2db      	uxtb	r3, r3
 800697c:	2b00      	cmp	r3, #0
 800697e:	f040 80f3 	bne.w	8006b68 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006990:	2b01      	cmp	r3, #1
 8006992:	d103      	bne.n	800699c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2208      	movs	r2, #8
 8006998:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800699a:	e0e5      	b.n	8006b68 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2207      	movs	r2, #7
 80069a0:	701a      	strb	r2, [r3, #0]
      break;
 80069a2:	e0e1      	b.n	8006b68 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f000 80de 	beq.w	8006b6c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069b6:	2101      	movs	r1, #1
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2208      	movs	r2, #8
 80069c0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80069c2:	e0d3      	b.n	8006b6c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	4619      	mov	r1, r3
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fc20 	bl	8007214 <USBH_SetCfg>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f040 80ca 	bne.w	8006b70 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2209      	movs	r2, #9
 80069e0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80069e2:	e0c5      	b.n	8006b70 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80069ea:	f003 0320 	and.w	r3, r3, #32
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00b      	beq.n	8006a0a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80069f2:	2101      	movs	r1, #1
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 fc30 	bl	800725a <USBH_SetFeature>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f040 80b9 	bne.w	8006b74 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	220a      	movs	r2, #10
 8006a06:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006a08:	e0b4      	b.n	8006b74 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	220a      	movs	r2, #10
 8006a0e:	701a      	strb	r2, [r3, #0]
      break;
 8006a10:	e0b0      	b.n	8006b74 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f000 80ad 	beq.w	8006b78 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006a26:	2300      	movs	r3, #0
 8006a28:	73fb      	strb	r3, [r7, #15]
 8006a2a:	e016      	b.n	8006a5a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006a2c:	7bfa      	ldrb	r2, [r7, #15]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	32de      	adds	r2, #222	; 0xde
 8006a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a36:	791a      	ldrb	r2, [r3, #4]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d108      	bne.n	8006a54 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006a42:	7bfa      	ldrb	r2, [r7, #15]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	32de      	adds	r2, #222	; 0xde
 8006a48:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006a52:	e005      	b.n	8006a60 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006a54:	7bfb      	ldrb	r3, [r7, #15]
 8006a56:	3301      	adds	r3, #1
 8006a58:	73fb      	strb	r3, [r7, #15]
 8006a5a:	7bfb      	ldrb	r3, [r7, #15]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d0e5      	beq.n	8006a2c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d016      	beq.n	8006a98 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	4798      	blx	r3
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d109      	bne.n	8006a90 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2206      	movs	r2, #6
 8006a80:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a88:	2103      	movs	r1, #3
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006a8e:	e073      	b.n	8006b78 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	220d      	movs	r2, #13
 8006a94:	701a      	strb	r2, [r3, #0]
      break;
 8006a96:	e06f      	b.n	8006b78 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	220d      	movs	r2, #13
 8006a9c:	701a      	strb	r2, [r3, #0]
      break;
 8006a9e:	e06b      	b.n	8006b78 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d017      	beq.n	8006ada <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	4798      	blx	r3
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006aba:	7bbb      	ldrb	r3, [r7, #14]
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d103      	bne.n	8006aca <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	220b      	movs	r2, #11
 8006ac6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006ac8:	e058      	b.n	8006b7c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8006aca:	7bbb      	ldrb	r3, [r7, #14]
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d154      	bne.n	8006b7c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	220d      	movs	r2, #13
 8006ad6:	701a      	strb	r2, [r3, #0]
      break;
 8006ad8:	e050      	b.n	8006b7c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	220d      	movs	r2, #13
 8006ade:	701a      	strb	r2, [r3, #0]
      break;
 8006ae0:	e04c      	b.n	8006b7c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d049      	beq.n	8006b80 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006af2:	695b      	ldr	r3, [r3, #20]
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	4798      	blx	r3
      }
      break;
 8006af8:	e042      	b.n	8006b80 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7ff fd72 	bl	80065ec <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d009      	beq.n	8006b26 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d005      	beq.n	8006b3c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b36:	2105      	movs	r1, #5
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d107      	bne.n	8006b58 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f7ff fe2b 	bl	80067ac <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006b56:	e014      	b.n	8006b82 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f001 f9b5 	bl	8007ec8 <USBH_LL_Start>
      break;
 8006b5e:	e010      	b.n	8006b82 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006b60:	bf00      	nop
 8006b62:	e00e      	b.n	8006b82 <USBH_Process+0x3b6>
      break;
 8006b64:	bf00      	nop
 8006b66:	e00c      	b.n	8006b82 <USBH_Process+0x3b6>
      break;
 8006b68:	bf00      	nop
 8006b6a:	e00a      	b.n	8006b82 <USBH_Process+0x3b6>
    break;
 8006b6c:	bf00      	nop
 8006b6e:	e008      	b.n	8006b82 <USBH_Process+0x3b6>
      break;
 8006b70:	bf00      	nop
 8006b72:	e006      	b.n	8006b82 <USBH_Process+0x3b6>
      break;
 8006b74:	bf00      	nop
 8006b76:	e004      	b.n	8006b82 <USBH_Process+0x3b6>
      break;
 8006b78:	bf00      	nop
 8006b7a:	e002      	b.n	8006b82 <USBH_Process+0x3b6>
      break;
 8006b7c:	bf00      	nop
 8006b7e:	e000      	b.n	8006b82 <USBH_Process+0x3b6>
      break;
 8006b80:	bf00      	nop
  }
  return USBH_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b088      	sub	sp, #32
 8006b90:	af04      	add	r7, sp, #16
 8006b92:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006b94:	2301      	movs	r3, #1
 8006b96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	785b      	ldrb	r3, [r3, #1]
 8006ba0:	2b07      	cmp	r3, #7
 8006ba2:	f200 81c1 	bhi.w	8006f28 <USBH_HandleEnum+0x39c>
 8006ba6:	a201      	add	r2, pc, #4	; (adr r2, 8006bac <USBH_HandleEnum+0x20>)
 8006ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bac:	08006bcd 	.word	0x08006bcd
 8006bb0:	08006c8b 	.word	0x08006c8b
 8006bb4:	08006cf5 	.word	0x08006cf5
 8006bb8:	08006d83 	.word	0x08006d83
 8006bbc:	08006ded 	.word	0x08006ded
 8006bc0:	08006e5d 	.word	0x08006e5d
 8006bc4:	08006ea3 	.word	0x08006ea3
 8006bc8:	08006ee9 	.word	0x08006ee9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006bcc:	2108      	movs	r1, #8
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 fa50 	bl	8007074 <USBH_Get_DevDesc>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006bd8:	7bbb      	ldrb	r3, [r7, #14]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d130      	bne.n	8006c40 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	7919      	ldrb	r1, [r3, #4]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006c02:	b292      	uxth	r2, r2
 8006c04:	9202      	str	r2, [sp, #8]
 8006c06:	2200      	movs	r2, #0
 8006c08:	9201      	str	r2, [sp, #4]
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2280      	movs	r2, #128	; 0x80
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 ff77 	bl	8007b04 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	7959      	ldrb	r1, [r3, #5]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006c2a:	b292      	uxth	r2, r2
 8006c2c:	9202      	str	r2, [sp, #8]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	9201      	str	r2, [sp, #4]
 8006c32:	9300      	str	r3, [sp, #0]
 8006c34:	4603      	mov	r3, r0
 8006c36:	2200      	movs	r2, #0
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 ff63 	bl	8007b04 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006c3e:	e175      	b.n	8006f2c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c40:	7bbb      	ldrb	r3, [r7, #14]
 8006c42:	2b03      	cmp	r3, #3
 8006c44:	f040 8172 	bne.w	8006f2c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c4e:	3301      	adds	r3, #1
 8006c50:	b2da      	uxtb	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c5e:	2b03      	cmp	r3, #3
 8006c60:	d903      	bls.n	8006c6a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	220d      	movs	r2, #13
 8006c66:	701a      	strb	r2, [r3, #0]
      break;
 8006c68:	e160      	b.n	8006f2c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	795b      	ldrb	r3, [r3, #5]
 8006c6e:	4619      	mov	r1, r3
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 ff97 	bl	8007ba4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	791b      	ldrb	r3, [r3, #4]
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 ff91 	bl	8007ba4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	701a      	strb	r2, [r3, #0]
      break;
 8006c88:	e150      	b.n	8006f2c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006c8a:	2112      	movs	r1, #18
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 f9f1 	bl	8007074 <USBH_Get_DevDesc>
 8006c92:	4603      	mov	r3, r0
 8006c94:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c96:	7bbb      	ldrb	r3, [r7, #14]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d103      	bne.n	8006ca4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2202      	movs	r2, #2
 8006ca0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006ca2:	e145      	b.n	8006f30 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ca4:	7bbb      	ldrb	r3, [r7, #14]
 8006ca6:	2b03      	cmp	r3, #3
 8006ca8:	f040 8142 	bne.w	8006f30 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	b2da      	uxtb	r2, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006cc2:	2b03      	cmp	r3, #3
 8006cc4:	d903      	bls.n	8006cce <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	220d      	movs	r2, #13
 8006cca:	701a      	strb	r2, [r3, #0]
      break;
 8006ccc:	e130      	b.n	8006f30 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	795b      	ldrb	r3, [r3, #5]
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 ff65 	bl	8007ba4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	791b      	ldrb	r3, [r3, #4]
 8006cde:	4619      	mov	r1, r3
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 ff5f 	bl	8007ba4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	701a      	strb	r2, [r3, #0]
      break;
 8006cf2:	e11d      	b.n	8006f30 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006cf4:	2101      	movs	r1, #1
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 fa68 	bl	80071cc <USBH_SetAddress>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d00:	7bbb      	ldrb	r3, [r7, #14]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d132      	bne.n	8006d6c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006d06:	2002      	movs	r0, #2
 8006d08:	f001 fa42 	bl	8008190 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2203      	movs	r2, #3
 8006d18:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	7919      	ldrb	r1, [r3, #4]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006d2e:	b292      	uxth	r2, r2
 8006d30:	9202      	str	r2, [sp, #8]
 8006d32:	2200      	movs	r2, #0
 8006d34:	9201      	str	r2, [sp, #4]
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2280      	movs	r2, #128	; 0x80
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fee1 	bl	8007b04 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	7959      	ldrb	r1, [r3, #5]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d56:	b292      	uxth	r2, r2
 8006d58:	9202      	str	r2, [sp, #8]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	9201      	str	r2, [sp, #4]
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	4603      	mov	r3, r0
 8006d62:	2200      	movs	r2, #0
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fecd 	bl	8007b04 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006d6a:	e0e3      	b.n	8006f34 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d6c:	7bbb      	ldrb	r3, [r7, #14]
 8006d6e:	2b03      	cmp	r3, #3
 8006d70:	f040 80e0 	bne.w	8006f34 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	220d      	movs	r2, #13
 8006d78:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	705a      	strb	r2, [r3, #1]
      break;
 8006d80:	e0d8      	b.n	8006f34 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006d82:	2109      	movs	r1, #9
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f99d 	bl	80070c4 <USBH_Get_CfgDesc>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d8e:	7bbb      	ldrb	r3, [r7, #14]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d103      	bne.n	8006d9c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2204      	movs	r2, #4
 8006d98:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006d9a:	e0cd      	b.n	8006f38 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d9c:	7bbb      	ldrb	r3, [r7, #14]
 8006d9e:	2b03      	cmp	r3, #3
 8006da0:	f040 80ca 	bne.w	8006f38 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006daa:	3301      	adds	r3, #1
 8006dac:	b2da      	uxtb	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006dba:	2b03      	cmp	r3, #3
 8006dbc:	d903      	bls.n	8006dc6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	220d      	movs	r2, #13
 8006dc2:	701a      	strb	r2, [r3, #0]
      break;
 8006dc4:	e0b8      	b.n	8006f38 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	795b      	ldrb	r3, [r3, #5]
 8006dca:	4619      	mov	r1, r3
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fee9 	bl	8007ba4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	791b      	ldrb	r3, [r3, #4]
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fee3 	bl	8007ba4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	701a      	strb	r2, [r3, #0]
      break;
 8006dea:	e0a5      	b.n	8006f38 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006df2:	4619      	mov	r1, r3
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 f965 	bl	80070c4 <USBH_Get_CfgDesc>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006dfe:	7bbb      	ldrb	r3, [r7, #14]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d103      	bne.n	8006e0c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2205      	movs	r2, #5
 8006e08:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006e0a:	e097      	b.n	8006f3c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e0c:	7bbb      	ldrb	r3, [r7, #14]
 8006e0e:	2b03      	cmp	r3, #3
 8006e10:	f040 8094 	bne.w	8006f3c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	b2da      	uxtb	r2, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e2a:	2b03      	cmp	r3, #3
 8006e2c:	d903      	bls.n	8006e36 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	220d      	movs	r2, #13
 8006e32:	701a      	strb	r2, [r3, #0]
      break;
 8006e34:	e082      	b.n	8006f3c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	795b      	ldrb	r3, [r3, #5]
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 feb1 	bl	8007ba4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	791b      	ldrb	r3, [r3, #4]
 8006e46:	4619      	mov	r1, r3
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 feab 	bl	8007ba4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	701a      	strb	r2, [r3, #0]
      break;
 8006e5a:	e06f      	b.n	8006f3c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d019      	beq.n	8006e9a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006e72:	23ff      	movs	r3, #255	; 0xff
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 f949 	bl	800710c <USBH_Get_StringDesc>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006e7e:	7bbb      	ldrb	r3, [r7, #14]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d103      	bne.n	8006e8c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2206      	movs	r2, #6
 8006e88:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006e8a:	e059      	b.n	8006f40 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e8c:	7bbb      	ldrb	r3, [r7, #14]
 8006e8e:	2b03      	cmp	r3, #3
 8006e90:	d156      	bne.n	8006f40 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2206      	movs	r2, #6
 8006e96:	705a      	strb	r2, [r3, #1]
      break;
 8006e98:	e052      	b.n	8006f40 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2206      	movs	r2, #6
 8006e9e:	705a      	strb	r2, [r3, #1]
      break;
 8006ea0:	e04e      	b.n	8006f40 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d019      	beq.n	8006ee0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006eb8:	23ff      	movs	r3, #255	; 0xff
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f926 	bl	800710c <USBH_Get_StringDesc>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006ec4:	7bbb      	ldrb	r3, [r7, #14]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d103      	bne.n	8006ed2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2207      	movs	r2, #7
 8006ece:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006ed0:	e038      	b.n	8006f44 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ed2:	7bbb      	ldrb	r3, [r7, #14]
 8006ed4:	2b03      	cmp	r3, #3
 8006ed6:	d135      	bne.n	8006f44 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2207      	movs	r2, #7
 8006edc:	705a      	strb	r2, [r3, #1]
      break;
 8006ede:	e031      	b.n	8006f44 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2207      	movs	r2, #7
 8006ee4:	705a      	strb	r2, [r3, #1]
      break;
 8006ee6:	e02d      	b.n	8006f44 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d017      	beq.n	8006f22 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006efe:	23ff      	movs	r3, #255	; 0xff
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 f903 	bl	800710c <USBH_Get_StringDesc>
 8006f06:	4603      	mov	r3, r0
 8006f08:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006f0a:	7bbb      	ldrb	r3, [r7, #14]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d102      	bne.n	8006f16 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006f10:	2300      	movs	r3, #0
 8006f12:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006f14:	e018      	b.n	8006f48 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f16:	7bbb      	ldrb	r3, [r7, #14]
 8006f18:	2b03      	cmp	r3, #3
 8006f1a:	d115      	bne.n	8006f48 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f20:	e012      	b.n	8006f48 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006f22:	2300      	movs	r3, #0
 8006f24:	73fb      	strb	r3, [r7, #15]
      break;
 8006f26:	e00f      	b.n	8006f48 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006f28:	bf00      	nop
 8006f2a:	e00e      	b.n	8006f4a <USBH_HandleEnum+0x3be>
      break;
 8006f2c:	bf00      	nop
 8006f2e:	e00c      	b.n	8006f4a <USBH_HandleEnum+0x3be>
      break;
 8006f30:	bf00      	nop
 8006f32:	e00a      	b.n	8006f4a <USBH_HandleEnum+0x3be>
      break;
 8006f34:	bf00      	nop
 8006f36:	e008      	b.n	8006f4a <USBH_HandleEnum+0x3be>
      break;
 8006f38:	bf00      	nop
 8006f3a:	e006      	b.n	8006f4a <USBH_HandleEnum+0x3be>
      break;
 8006f3c:	bf00      	nop
 8006f3e:	e004      	b.n	8006f4a <USBH_HandleEnum+0x3be>
      break;
 8006f40:	bf00      	nop
 8006f42:	e002      	b.n	8006f4a <USBH_HandleEnum+0x3be>
      break;
 8006f44:	bf00      	nop
 8006f46:	e000      	b.n	8006f4a <USBH_HandleEnum+0x3be>
      break;
 8006f48:	bf00      	nop
  }
  return Status;
 8006f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	683a      	ldr	r2, [r7, #0]
 8006f62:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006f66:	bf00      	nop
 8006f68:	370c      	adds	r7, #12
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b082      	sub	sp, #8
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f80:	1c5a      	adds	r2, r3, #1
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 f804 	bl	8006f96 <USBH_HandleSof>
}
 8006f8e:	bf00      	nop
 8006f90:	3708      	adds	r7, #8
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b082      	sub	sp, #8
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2b0b      	cmp	r3, #11
 8006fa6:	d10a      	bne.n	8006fbe <USBH_HandleSof+0x28>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d005      	beq.n	8006fbe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	4798      	blx	r3
  }
}
 8006fbe:	bf00      	nop
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b083      	sub	sp, #12
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8006fd6:	bf00      	nop
}
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b083      	sub	sp, #12
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006ff2:	bf00      	nop
}
 8006ff4:	370c      	adds	r7, #12
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr

08006ffe <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006ffe:	b480      	push	{r7}
 8007000:	b083      	sub	sp, #12
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2201      	movs	r2, #1
 800700a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 ff56 	bl	8007efe <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	791b      	ldrb	r3, [r3, #4]
 8007056:	4619      	mov	r1, r3
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fda3 	bl	8007ba4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	795b      	ldrb	r3, [r3, #5]
 8007062:	4619      	mov	r1, r3
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fd9d 	bl	8007ba4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b086      	sub	sp, #24
 8007078:	af02      	add	r7, sp, #8
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	460b      	mov	r3, r1
 800707e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007086:	78fb      	ldrb	r3, [r7, #3]
 8007088:	b29b      	uxth	r3, r3
 800708a:	9300      	str	r3, [sp, #0]
 800708c:	4613      	mov	r3, r2
 800708e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007092:	2100      	movs	r1, #0
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 f864 	bl	8007162 <USBH_GetDescriptor>
 800709a:	4603      	mov	r3, r0
 800709c:	73fb      	strb	r3, [r7, #15]
 800709e:	7bfb      	ldrb	r3, [r7, #15]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d10a      	bne.n	80070ba <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f203 3026 	addw	r0, r3, #806	; 0x326
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80070b0:	78fa      	ldrb	r2, [r7, #3]
 80070b2:	b292      	uxth	r2, r2
 80070b4:	4619      	mov	r1, r3
 80070b6:	f000 f918 	bl	80072ea <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80070ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af02      	add	r7, sp, #8
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	460b      	mov	r3, r1
 80070ce:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	331c      	adds	r3, #28
 80070d4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80070d6:	887b      	ldrh	r3, [r7, #2]
 80070d8:	9300      	str	r3, [sp, #0]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070e0:	2100      	movs	r1, #0
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 f83d 	bl	8007162 <USBH_GetDescriptor>
 80070e8:	4603      	mov	r3, r0
 80070ea:	72fb      	strb	r3, [r7, #11]
 80070ec:	7afb      	ldrb	r3, [r7, #11]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d107      	bne.n	8007102 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80070f8:	887a      	ldrh	r2, [r7, #2]
 80070fa:	68f9      	ldr	r1, [r7, #12]
 80070fc:	4618      	mov	r0, r3
 80070fe:	f000 f964 	bl	80073ca <USBH_ParseCfgDesc>
  }

  return status;
 8007102:	7afb      	ldrb	r3, [r7, #11]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b088      	sub	sp, #32
 8007110:	af02      	add	r7, sp, #8
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	607a      	str	r2, [r7, #4]
 8007116:	461a      	mov	r2, r3
 8007118:	460b      	mov	r3, r1
 800711a:	72fb      	strb	r3, [r7, #11]
 800711c:	4613      	mov	r3, r2
 800711e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007120:	7afb      	ldrb	r3, [r7, #11]
 8007122:	b29b      	uxth	r3, r3
 8007124:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007128:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007130:	893b      	ldrh	r3, [r7, #8]
 8007132:	9300      	str	r3, [sp, #0]
 8007134:	460b      	mov	r3, r1
 8007136:	2100      	movs	r1, #0
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f000 f812 	bl	8007162 <USBH_GetDescriptor>
 800713e:	4603      	mov	r3, r0
 8007140:	75fb      	strb	r3, [r7, #23]
 8007142:	7dfb      	ldrb	r3, [r7, #23]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d107      	bne.n	8007158 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800714e:	893a      	ldrh	r2, [r7, #8]
 8007150:	6879      	ldr	r1, [r7, #4]
 8007152:	4618      	mov	r0, r3
 8007154:	f000 fa37 	bl	80075c6 <USBH_ParseStringDesc>
  }

  return status;
 8007158:	7dfb      	ldrb	r3, [r7, #23]
}
 800715a:	4618      	mov	r0, r3
 800715c:	3718      	adds	r7, #24
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b084      	sub	sp, #16
 8007166:	af00      	add	r7, sp, #0
 8007168:	60f8      	str	r0, [r7, #12]
 800716a:	607b      	str	r3, [r7, #4]
 800716c:	460b      	mov	r3, r1
 800716e:	72fb      	strb	r3, [r7, #11]
 8007170:	4613      	mov	r3, r2
 8007172:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	789b      	ldrb	r3, [r3, #2]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d11c      	bne.n	80071b6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800717c:	7afb      	ldrb	r3, [r7, #11]
 800717e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007182:	b2da      	uxtb	r2, r3
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2206      	movs	r2, #6
 800718c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	893a      	ldrh	r2, [r7, #8]
 8007192:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007194:	893b      	ldrh	r3, [r7, #8]
 8007196:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800719a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800719e:	d104      	bne.n	80071aa <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f240 4209 	movw	r2, #1033	; 0x409
 80071a6:	829a      	strh	r2, [r3, #20]
 80071a8:	e002      	b.n	80071b0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	8b3a      	ldrh	r2, [r7, #24]
 80071b4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80071b6:	8b3b      	ldrh	r3, [r7, #24]
 80071b8:	461a      	mov	r2, r3
 80071ba:	6879      	ldr	r1, [r7, #4]
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f000 fa50 	bl	8007662 <USBH_CtlReq>
 80071c2:	4603      	mov	r3, r0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	460b      	mov	r3, r1
 80071d6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	789b      	ldrb	r3, [r3, #2]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d10f      	bne.n	8007200 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2205      	movs	r2, #5
 80071ea:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80071ec:	78fb      	ldrb	r3, [r7, #3]
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007200:	2200      	movs	r2, #0
 8007202:	2100      	movs	r1, #0
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 fa2c 	bl	8007662 <USBH_CtlReq>
 800720a:	4603      	mov	r3, r0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	460b      	mov	r3, r1
 800721e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	789b      	ldrb	r3, [r3, #2]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d10e      	bne.n	8007246 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2209      	movs	r2, #9
 8007232:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	887a      	ldrh	r2, [r7, #2]
 8007238:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007246:	2200      	movs	r2, #0
 8007248:	2100      	movs	r1, #0
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fa09 	bl	8007662 <USBH_CtlReq>
 8007250:	4603      	mov	r3, r0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b082      	sub	sp, #8
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
 8007262:	460b      	mov	r3, r1
 8007264:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	789b      	ldrb	r3, [r3, #2]
 800726a:	2b01      	cmp	r3, #1
 800726c:	d10f      	bne.n	800728e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2203      	movs	r2, #3
 8007278:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800727a:	78fb      	ldrb	r3, [r7, #3]
 800727c:	b29a      	uxth	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800728e:	2200      	movs	r2, #0
 8007290:	2100      	movs	r1, #0
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 f9e5 	bl	8007662 <USBH_CtlReq>
 8007298:	4603      	mov	r3, r0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3708      	adds	r7, #8
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b082      	sub	sp, #8
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
 80072aa:	460b      	mov	r3, r1
 80072ac:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	789b      	ldrb	r3, [r3, #2]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d10f      	bne.n	80072d6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2202      	movs	r2, #2
 80072ba:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80072c8:	78fb      	ldrb	r3, [r7, #3]
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80072d6:	2200      	movs	r2, #0
 80072d8:	2100      	movs	r1, #0
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f9c1 	bl	8007662 <USBH_CtlReq>
 80072e0:	4603      	mov	r3, r0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3708      	adds	r7, #8
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80072ea:	b480      	push	{r7}
 80072ec:	b085      	sub	sp, #20
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	60f8      	str	r0, [r7, #12]
 80072f2:	60b9      	str	r1, [r7, #8]
 80072f4:	4613      	mov	r3, r2
 80072f6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	781a      	ldrb	r2, [r3, #0]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	785a      	ldrb	r2, [r3, #1]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	3302      	adds	r3, #2
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	b29a      	uxth	r2, r3
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	3303      	adds	r3, #3
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	b29b      	uxth	r3, r3
 8007318:	021b      	lsls	r3, r3, #8
 800731a:	b29b      	uxth	r3, r3
 800731c:	4313      	orrs	r3, r2
 800731e:	b29a      	uxth	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	791a      	ldrb	r2, [r3, #4]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	795a      	ldrb	r2, [r3, #5]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	799a      	ldrb	r2, [r3, #6]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	79da      	ldrb	r2, [r3, #7]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007344:	88fb      	ldrh	r3, [r7, #6]
 8007346:	2b08      	cmp	r3, #8
 8007348:	d939      	bls.n	80073be <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	3308      	adds	r3, #8
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	b29a      	uxth	r2, r3
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	3309      	adds	r3, #9
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	b29b      	uxth	r3, r3
 800735a:	021b      	lsls	r3, r3, #8
 800735c:	b29b      	uxth	r3, r3
 800735e:	4313      	orrs	r3, r2
 8007360:	b29a      	uxth	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	330a      	adds	r3, #10
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	b29a      	uxth	r2, r3
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	330b      	adds	r3, #11
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	b29b      	uxth	r3, r3
 8007376:	021b      	lsls	r3, r3, #8
 8007378:	b29b      	uxth	r3, r3
 800737a:	4313      	orrs	r3, r2
 800737c:	b29a      	uxth	r2, r3
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	330c      	adds	r3, #12
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	b29a      	uxth	r2, r3
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	330d      	adds	r3, #13
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	b29b      	uxth	r3, r3
 8007392:	021b      	lsls	r3, r3, #8
 8007394:	b29b      	uxth	r3, r3
 8007396:	4313      	orrs	r3, r2
 8007398:	b29a      	uxth	r2, r3
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	7b9a      	ldrb	r2, [r3, #14]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	7bda      	ldrb	r2, [r3, #15]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	7c1a      	ldrb	r2, [r3, #16]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	7c5a      	ldrb	r2, [r3, #17]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	745a      	strb	r2, [r3, #17]
  }
}
 80073be:	bf00      	nop
 80073c0:	3714      	adds	r7, #20
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b08a      	sub	sp, #40	; 0x28
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	60f8      	str	r0, [r7, #12]
 80073d2:	60b9      	str	r1, [r7, #8]
 80073d4:	4613      	mov	r3, r2
 80073d6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80073dc:	2300      	movs	r3, #0
 80073de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80073e2:	2300      	movs	r3, #0
 80073e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	781a      	ldrb	r2, [r3, #0]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	785a      	ldrb	r2, [r3, #1]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	3302      	adds	r3, #2
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	b29a      	uxth	r2, r3
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	3303      	adds	r3, #3
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	b29b      	uxth	r3, r3
 800740c:	021b      	lsls	r3, r3, #8
 800740e:	b29b      	uxth	r3, r3
 8007410:	4313      	orrs	r3, r2
 8007412:	b29a      	uxth	r2, r3
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	791a      	ldrb	r2, [r3, #4]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	795a      	ldrb	r2, [r3, #5]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	799a      	ldrb	r2, [r3, #6]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	79da      	ldrb	r2, [r3, #7]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	7a1a      	ldrb	r2, [r3, #8]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007440:	88fb      	ldrh	r3, [r7, #6]
 8007442:	2b09      	cmp	r3, #9
 8007444:	d95f      	bls.n	8007506 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007446:	2309      	movs	r3, #9
 8007448:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800744a:	2300      	movs	r3, #0
 800744c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800744e:	e051      	b.n	80074f4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007450:	f107 0316 	add.w	r3, r7, #22
 8007454:	4619      	mov	r1, r3
 8007456:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007458:	f000 f8e8 	bl	800762c <USBH_GetNextDesc>
 800745c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800745e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007460:	785b      	ldrb	r3, [r3, #1]
 8007462:	2b04      	cmp	r3, #4
 8007464:	d146      	bne.n	80074f4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007466:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800746a:	221a      	movs	r2, #26
 800746c:	fb02 f303 	mul.w	r3, r2, r3
 8007470:	3308      	adds	r3, #8
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	4413      	add	r3, r2
 8007476:	3302      	adds	r3, #2
 8007478:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800747a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800747c:	69f8      	ldr	r0, [r7, #28]
 800747e:	f000 f846 	bl	800750e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007482:	2300      	movs	r3, #0
 8007484:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007488:	2300      	movs	r3, #0
 800748a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800748c:	e022      	b.n	80074d4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800748e:	f107 0316 	add.w	r3, r7, #22
 8007492:	4619      	mov	r1, r3
 8007494:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007496:	f000 f8c9 	bl	800762c <USBH_GetNextDesc>
 800749a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800749c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749e:	785b      	ldrb	r3, [r3, #1]
 80074a0:	2b05      	cmp	r3, #5
 80074a2:	d117      	bne.n	80074d4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80074a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074a8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80074ac:	3201      	adds	r2, #1
 80074ae:	00d2      	lsls	r2, r2, #3
 80074b0:	211a      	movs	r1, #26
 80074b2:	fb01 f303 	mul.w	r3, r1, r3
 80074b6:	4413      	add	r3, r2
 80074b8:	3308      	adds	r3, #8
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	4413      	add	r3, r2
 80074be:	3304      	adds	r3, #4
 80074c0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80074c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074c4:	69b8      	ldr	r0, [r7, #24]
 80074c6:	f000 f851 	bl	800756c <USBH_ParseEPDesc>
            ep_ix++;
 80074ca:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80074ce:	3301      	adds	r3, #1
 80074d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	791b      	ldrb	r3, [r3, #4]
 80074d8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80074dc:	429a      	cmp	r2, r3
 80074de:	d204      	bcs.n	80074ea <USBH_ParseCfgDesc+0x120>
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	885a      	ldrh	r2, [r3, #2]
 80074e4:	8afb      	ldrh	r3, [r7, #22]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d8d1      	bhi.n	800748e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80074ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074ee:	3301      	adds	r3, #1
 80074f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80074f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d804      	bhi.n	8007506 <USBH_ParseCfgDesc+0x13c>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	885a      	ldrh	r2, [r3, #2]
 8007500:	8afb      	ldrh	r3, [r7, #22]
 8007502:	429a      	cmp	r2, r3
 8007504:	d8a4      	bhi.n	8007450 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007506:	bf00      	nop
 8007508:	3728      	adds	r7, #40	; 0x28
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800750e:	b480      	push	{r7}
 8007510:	b083      	sub	sp, #12
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
 8007516:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	781a      	ldrb	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	785a      	ldrb	r2, [r3, #1]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	789a      	ldrb	r2, [r3, #2]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	78da      	ldrb	r2, [r3, #3]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	791a      	ldrb	r2, [r3, #4]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	795a      	ldrb	r2, [r3, #5]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	799a      	ldrb	r2, [r3, #6]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	79da      	ldrb	r2, [r3, #7]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	7a1a      	ldrb	r2, [r3, #8]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	721a      	strb	r2, [r3, #8]
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	781a      	ldrb	r2, [r3, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	785a      	ldrb	r2, [r3, #1]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	789a      	ldrb	r2, [r3, #2]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	78da      	ldrb	r2, [r3, #3]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	3304      	adds	r3, #4
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	b29a      	uxth	r2, r3
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	3305      	adds	r3, #5
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	021b      	lsls	r3, r3, #8
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	4313      	orrs	r3, r2
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	799a      	ldrb	r2, [r3, #6]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	719a      	strb	r2, [r3, #6]
}
 80075ba:	bf00      	nop
 80075bc:	370c      	adds	r7, #12
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80075c6:	b480      	push	{r7}
 80075c8:	b087      	sub	sp, #28
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	60f8      	str	r0, [r7, #12]
 80075ce:	60b9      	str	r1, [r7, #8]
 80075d0:	4613      	mov	r3, r2
 80075d2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	3301      	adds	r3, #1
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	2b03      	cmp	r3, #3
 80075dc:	d120      	bne.n	8007620 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	1e9a      	subs	r2, r3, #2
 80075e4:	88fb      	ldrh	r3, [r7, #6]
 80075e6:	4293      	cmp	r3, r2
 80075e8:	bf28      	it	cs
 80075ea:	4613      	movcs	r3, r2
 80075ec:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	3302      	adds	r3, #2
 80075f2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80075f4:	2300      	movs	r3, #0
 80075f6:	82fb      	strh	r3, [r7, #22]
 80075f8:	e00b      	b.n	8007612 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80075fa:	8afb      	ldrh	r3, [r7, #22]
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	4413      	add	r3, r2
 8007600:	781a      	ldrb	r2, [r3, #0]
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	3301      	adds	r3, #1
 800760a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800760c:	8afb      	ldrh	r3, [r7, #22]
 800760e:	3302      	adds	r3, #2
 8007610:	82fb      	strh	r3, [r7, #22]
 8007612:	8afa      	ldrh	r2, [r7, #22]
 8007614:	8abb      	ldrh	r3, [r7, #20]
 8007616:	429a      	cmp	r2, r3
 8007618:	d3ef      	bcc.n	80075fa <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	2200      	movs	r2, #0
 800761e:	701a      	strb	r2, [r3, #0]
  }
}
 8007620:	bf00      	nop
 8007622:	371c      	adds	r7, #28
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	881a      	ldrh	r2, [r3, #0]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	b29b      	uxth	r3, r3
 8007640:	4413      	add	r3, r2
 8007642:	b29a      	uxth	r2, r3
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4413      	add	r3, r2
 8007652:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007654:	68fb      	ldr	r3, [r7, #12]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3714      	adds	r7, #20
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr

08007662 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b086      	sub	sp, #24
 8007666:	af00      	add	r7, sp, #0
 8007668:	60f8      	str	r0, [r7, #12]
 800766a:	60b9      	str	r1, [r7, #8]
 800766c:	4613      	mov	r3, r2
 800766e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007670:	2301      	movs	r3, #1
 8007672:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	789b      	ldrb	r3, [r3, #2]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d002      	beq.n	8007682 <USBH_CtlReq+0x20>
 800767c:	2b02      	cmp	r3, #2
 800767e:	d00f      	beq.n	80076a0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007680:	e027      	b.n	80076d2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	88fa      	ldrh	r2, [r7, #6]
 800768c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2201      	movs	r2, #1
 8007692:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2202      	movs	r2, #2
 8007698:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800769a:	2301      	movs	r3, #1
 800769c:	75fb      	strb	r3, [r7, #23]
      break;
 800769e:	e018      	b.n	80076d2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f000 f81b 	bl	80076dc <USBH_HandleControl>
 80076a6:	4603      	mov	r3, r0
 80076a8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80076aa:	7dfb      	ldrb	r3, [r7, #23]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d002      	beq.n	80076b6 <USBH_CtlReq+0x54>
 80076b0:	7dfb      	ldrb	r3, [r7, #23]
 80076b2:	2b03      	cmp	r3, #3
 80076b4:	d106      	bne.n	80076c4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2201      	movs	r2, #1
 80076ba:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	761a      	strb	r2, [r3, #24]
      break;
 80076c2:	e005      	b.n	80076d0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80076c4:	7dfb      	ldrb	r3, [r7, #23]
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d102      	bne.n	80076d0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2201      	movs	r2, #1
 80076ce:	709a      	strb	r2, [r3, #2]
      break;
 80076d0:	bf00      	nop
  }
  return status;
 80076d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3718      	adds	r7, #24
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b086      	sub	sp, #24
 80076e0:	af02      	add	r7, sp, #8
 80076e2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80076e4:	2301      	movs	r3, #1
 80076e6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80076e8:	2300      	movs	r3, #0
 80076ea:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	7e1b      	ldrb	r3, [r3, #24]
 80076f0:	3b01      	subs	r3, #1
 80076f2:	2b0a      	cmp	r3, #10
 80076f4:	f200 8156 	bhi.w	80079a4 <USBH_HandleControl+0x2c8>
 80076f8:	a201      	add	r2, pc, #4	; (adr r2, 8007700 <USBH_HandleControl+0x24>)
 80076fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fe:	bf00      	nop
 8007700:	0800772d 	.word	0x0800772d
 8007704:	08007747 	.word	0x08007747
 8007708:	080077b1 	.word	0x080077b1
 800770c:	080077d7 	.word	0x080077d7
 8007710:	0800780f 	.word	0x0800780f
 8007714:	08007839 	.word	0x08007839
 8007718:	0800788b 	.word	0x0800788b
 800771c:	080078ad 	.word	0x080078ad
 8007720:	080078e9 	.word	0x080078e9
 8007724:	0800790f 	.word	0x0800790f
 8007728:	0800794d 	.word	0x0800794d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f103 0110 	add.w	r1, r3, #16
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	795b      	ldrb	r3, [r3, #5]
 8007736:	461a      	mov	r2, r3
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 f943 	bl	80079c4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2202      	movs	r2, #2
 8007742:	761a      	strb	r2, [r3, #24]
      break;
 8007744:	e139      	b.n	80079ba <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	795b      	ldrb	r3, [r3, #5]
 800774a:	4619      	mov	r1, r3
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fcc5 	bl	80080dc <USBH_LL_GetURBState>
 8007752:	4603      	mov	r3, r0
 8007754:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007756:	7bbb      	ldrb	r3, [r7, #14]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d11e      	bne.n	800779a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	7c1b      	ldrb	r3, [r3, #16]
 8007760:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007764:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	8adb      	ldrh	r3, [r3, #22]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00a      	beq.n	8007784 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800776e:	7b7b      	ldrb	r3, [r7, #13]
 8007770:	2b80      	cmp	r3, #128	; 0x80
 8007772:	d103      	bne.n	800777c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2203      	movs	r2, #3
 8007778:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800777a:	e115      	b.n	80079a8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2205      	movs	r2, #5
 8007780:	761a      	strb	r2, [r3, #24]
      break;
 8007782:	e111      	b.n	80079a8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007784:	7b7b      	ldrb	r3, [r7, #13]
 8007786:	2b80      	cmp	r3, #128	; 0x80
 8007788:	d103      	bne.n	8007792 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2209      	movs	r2, #9
 800778e:	761a      	strb	r2, [r3, #24]
      break;
 8007790:	e10a      	b.n	80079a8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2207      	movs	r2, #7
 8007796:	761a      	strb	r2, [r3, #24]
      break;
 8007798:	e106      	b.n	80079a8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800779a:	7bbb      	ldrb	r3, [r7, #14]
 800779c:	2b04      	cmp	r3, #4
 800779e:	d003      	beq.n	80077a8 <USBH_HandleControl+0xcc>
 80077a0:	7bbb      	ldrb	r3, [r7, #14]
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	f040 8100 	bne.w	80079a8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	220b      	movs	r2, #11
 80077ac:	761a      	strb	r2, [r3, #24]
      break;
 80077ae:	e0fb      	b.n	80079a8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6899      	ldr	r1, [r3, #8]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	899a      	ldrh	r2, [r3, #12]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	791b      	ldrb	r3, [r3, #4]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 f93a 	bl	8007a42 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2204      	movs	r2, #4
 80077d2:	761a      	strb	r2, [r3, #24]
      break;
 80077d4:	e0f1      	b.n	80079ba <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	791b      	ldrb	r3, [r3, #4]
 80077da:	4619      	mov	r1, r3
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fc7d 	bl	80080dc <USBH_LL_GetURBState>
 80077e2:	4603      	mov	r3, r0
 80077e4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80077e6:	7bbb      	ldrb	r3, [r7, #14]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d102      	bne.n	80077f2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2209      	movs	r2, #9
 80077f0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80077f2:	7bbb      	ldrb	r3, [r7, #14]
 80077f4:	2b05      	cmp	r3, #5
 80077f6:	d102      	bne.n	80077fe <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80077f8:	2303      	movs	r3, #3
 80077fa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80077fc:	e0d6      	b.n	80079ac <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80077fe:	7bbb      	ldrb	r3, [r7, #14]
 8007800:	2b04      	cmp	r3, #4
 8007802:	f040 80d3 	bne.w	80079ac <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	220b      	movs	r2, #11
 800780a:	761a      	strb	r2, [r3, #24]
      break;
 800780c:	e0ce      	b.n	80079ac <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6899      	ldr	r1, [r3, #8]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	899a      	ldrh	r2, [r3, #12]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	795b      	ldrb	r3, [r3, #5]
 800781a:	2001      	movs	r0, #1
 800781c:	9000      	str	r0, [sp, #0]
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 f8ea 	bl	80079f8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800782a:	b29a      	uxth	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2206      	movs	r2, #6
 8007834:	761a      	strb	r2, [r3, #24]
      break;
 8007836:	e0c0      	b.n	80079ba <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	795b      	ldrb	r3, [r3, #5]
 800783c:	4619      	mov	r1, r3
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fc4c 	bl	80080dc <USBH_LL_GetURBState>
 8007844:	4603      	mov	r3, r0
 8007846:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007848:	7bbb      	ldrb	r3, [r7, #14]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d103      	bne.n	8007856 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2207      	movs	r2, #7
 8007852:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007854:	e0ac      	b.n	80079b0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007856:	7bbb      	ldrb	r3, [r7, #14]
 8007858:	2b05      	cmp	r3, #5
 800785a:	d105      	bne.n	8007868 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	220c      	movs	r2, #12
 8007860:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007862:	2303      	movs	r3, #3
 8007864:	73fb      	strb	r3, [r7, #15]
      break;
 8007866:	e0a3      	b.n	80079b0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007868:	7bbb      	ldrb	r3, [r7, #14]
 800786a:	2b02      	cmp	r3, #2
 800786c:	d103      	bne.n	8007876 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2205      	movs	r2, #5
 8007872:	761a      	strb	r2, [r3, #24]
      break;
 8007874:	e09c      	b.n	80079b0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007876:	7bbb      	ldrb	r3, [r7, #14]
 8007878:	2b04      	cmp	r3, #4
 800787a:	f040 8099 	bne.w	80079b0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	220b      	movs	r2, #11
 8007882:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007884:	2302      	movs	r3, #2
 8007886:	73fb      	strb	r3, [r7, #15]
      break;
 8007888:	e092      	b.n	80079b0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	791b      	ldrb	r3, [r3, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	2100      	movs	r1, #0
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f8d5 	bl	8007a42 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800789e:	b29a      	uxth	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2208      	movs	r2, #8
 80078a8:	761a      	strb	r2, [r3, #24]

      break;
 80078aa:	e086      	b.n	80079ba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	791b      	ldrb	r3, [r3, #4]
 80078b0:	4619      	mov	r1, r3
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fc12 	bl	80080dc <USBH_LL_GetURBState>
 80078b8:	4603      	mov	r3, r0
 80078ba:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80078bc:	7bbb      	ldrb	r3, [r7, #14]
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d105      	bne.n	80078ce <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	220d      	movs	r2, #13
 80078c6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80078c8:	2300      	movs	r3, #0
 80078ca:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80078cc:	e072      	b.n	80079b4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80078ce:	7bbb      	ldrb	r3, [r7, #14]
 80078d0:	2b04      	cmp	r3, #4
 80078d2:	d103      	bne.n	80078dc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	220b      	movs	r2, #11
 80078d8:	761a      	strb	r2, [r3, #24]
      break;
 80078da:	e06b      	b.n	80079b4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80078dc:	7bbb      	ldrb	r3, [r7, #14]
 80078de:	2b05      	cmp	r3, #5
 80078e0:	d168      	bne.n	80079b4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80078e2:	2303      	movs	r3, #3
 80078e4:	73fb      	strb	r3, [r7, #15]
      break;
 80078e6:	e065      	b.n	80079b4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	795b      	ldrb	r3, [r3, #5]
 80078ec:	2201      	movs	r2, #1
 80078ee:	9200      	str	r2, [sp, #0]
 80078f0:	2200      	movs	r2, #0
 80078f2:	2100      	movs	r1, #0
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f87f 	bl	80079f8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007900:	b29a      	uxth	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	220a      	movs	r2, #10
 800790a:	761a      	strb	r2, [r3, #24]
      break;
 800790c:	e055      	b.n	80079ba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	795b      	ldrb	r3, [r3, #5]
 8007912:	4619      	mov	r1, r3
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fbe1 	bl	80080dc <USBH_LL_GetURBState>
 800791a:	4603      	mov	r3, r0
 800791c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800791e:	7bbb      	ldrb	r3, [r7, #14]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d105      	bne.n	8007930 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007924:	2300      	movs	r3, #0
 8007926:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	220d      	movs	r2, #13
 800792c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800792e:	e043      	b.n	80079b8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007930:	7bbb      	ldrb	r3, [r7, #14]
 8007932:	2b02      	cmp	r3, #2
 8007934:	d103      	bne.n	800793e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2209      	movs	r2, #9
 800793a:	761a      	strb	r2, [r3, #24]
      break;
 800793c:	e03c      	b.n	80079b8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800793e:	7bbb      	ldrb	r3, [r7, #14]
 8007940:	2b04      	cmp	r3, #4
 8007942:	d139      	bne.n	80079b8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	220b      	movs	r2, #11
 8007948:	761a      	strb	r2, [r3, #24]
      break;
 800794a:	e035      	b.n	80079b8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	7e5b      	ldrb	r3, [r3, #25]
 8007950:	3301      	adds	r3, #1
 8007952:	b2da      	uxtb	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	765a      	strb	r2, [r3, #25]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	7e5b      	ldrb	r3, [r3, #25]
 800795c:	2b02      	cmp	r3, #2
 800795e:	d806      	bhi.n	800796e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2201      	movs	r2, #1
 800796a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800796c:	e025      	b.n	80079ba <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007974:	2106      	movs	r1, #6
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	795b      	ldrb	r3, [r3, #5]
 8007984:	4619      	mov	r1, r3
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f90c 	bl	8007ba4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	791b      	ldrb	r3, [r3, #4]
 8007990:	4619      	mov	r1, r3
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f906 	bl	8007ba4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800799e:	2302      	movs	r3, #2
 80079a0:	73fb      	strb	r3, [r7, #15]
      break;
 80079a2:	e00a      	b.n	80079ba <USBH_HandleControl+0x2de>

    default:
      break;
 80079a4:	bf00      	nop
 80079a6:	e008      	b.n	80079ba <USBH_HandleControl+0x2de>
      break;
 80079a8:	bf00      	nop
 80079aa:	e006      	b.n	80079ba <USBH_HandleControl+0x2de>
      break;
 80079ac:	bf00      	nop
 80079ae:	e004      	b.n	80079ba <USBH_HandleControl+0x2de>
      break;
 80079b0:	bf00      	nop
 80079b2:	e002      	b.n	80079ba <USBH_HandleControl+0x2de>
      break;
 80079b4:	bf00      	nop
 80079b6:	e000      	b.n	80079ba <USBH_HandleControl+0x2de>
      break;
 80079b8:	bf00      	nop
  }

  return status;
 80079ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b088      	sub	sp, #32
 80079c8:	af04      	add	r7, sp, #16
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	4613      	mov	r3, r2
 80079d0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80079d2:	79f9      	ldrb	r1, [r7, #7]
 80079d4:	2300      	movs	r3, #0
 80079d6:	9303      	str	r3, [sp, #12]
 80079d8:	2308      	movs	r3, #8
 80079da:	9302      	str	r3, [sp, #8]
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	9301      	str	r3, [sp, #4]
 80079e0:	2300      	movs	r3, #0
 80079e2:	9300      	str	r3, [sp, #0]
 80079e4:	2300      	movs	r3, #0
 80079e6:	2200      	movs	r2, #0
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f000 fb46 	bl	800807a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3710      	adds	r7, #16
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b088      	sub	sp, #32
 80079fc:	af04      	add	r7, sp, #16
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	4611      	mov	r1, r2
 8007a04:	461a      	mov	r2, r3
 8007a06:	460b      	mov	r3, r1
 8007a08:	80fb      	strh	r3, [r7, #6]
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d001      	beq.n	8007a1c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007a1c:	7979      	ldrb	r1, [r7, #5]
 8007a1e:	7e3b      	ldrb	r3, [r7, #24]
 8007a20:	9303      	str	r3, [sp, #12]
 8007a22:	88fb      	ldrh	r3, [r7, #6]
 8007a24:	9302      	str	r3, [sp, #8]
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	9301      	str	r3, [sp, #4]
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	9300      	str	r3, [sp, #0]
 8007a2e:	2300      	movs	r3, #0
 8007a30:	2200      	movs	r2, #0
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	f000 fb21 	bl	800807a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b088      	sub	sp, #32
 8007a46:	af04      	add	r7, sp, #16
 8007a48:	60f8      	str	r0, [r7, #12]
 8007a4a:	60b9      	str	r1, [r7, #8]
 8007a4c:	4611      	mov	r1, r2
 8007a4e:	461a      	mov	r2, r3
 8007a50:	460b      	mov	r3, r1
 8007a52:	80fb      	strh	r3, [r7, #6]
 8007a54:	4613      	mov	r3, r2
 8007a56:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007a58:	7979      	ldrb	r1, [r7, #5]
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	9303      	str	r3, [sp, #12]
 8007a5e:	88fb      	ldrh	r3, [r7, #6]
 8007a60:	9302      	str	r3, [sp, #8]
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	9301      	str	r3, [sp, #4]
 8007a66:	2301      	movs	r3, #1
 8007a68:	9300      	str	r3, [sp, #0]
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	68f8      	ldr	r0, [r7, #12]
 8007a70:	f000 fb03 	bl	800807a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007a74:	2300      	movs	r3, #0

}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b088      	sub	sp, #32
 8007a82:	af04      	add	r7, sp, #16
 8007a84:	60f8      	str	r0, [r7, #12]
 8007a86:	60b9      	str	r1, [r7, #8]
 8007a88:	4611      	mov	r1, r2
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	80fb      	strh	r3, [r7, #6]
 8007a90:	4613      	mov	r3, r2
 8007a92:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d001      	beq.n	8007aa2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007aa2:	7979      	ldrb	r1, [r7, #5]
 8007aa4:	7e3b      	ldrb	r3, [r7, #24]
 8007aa6:	9303      	str	r3, [sp, #12]
 8007aa8:	88fb      	ldrh	r3, [r7, #6]
 8007aaa:	9302      	str	r3, [sp, #8]
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	9301      	str	r3, [sp, #4]
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	f000 fade 	bl	800807a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3710      	adds	r7, #16
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b088      	sub	sp, #32
 8007acc:	af04      	add	r7, sp, #16
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	4611      	mov	r1, r2
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	80fb      	strh	r3, [r7, #6]
 8007ada:	4613      	mov	r3, r2
 8007adc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007ade:	7979      	ldrb	r1, [r7, #5]
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	9303      	str	r3, [sp, #12]
 8007ae4:	88fb      	ldrh	r3, [r7, #6]
 8007ae6:	9302      	str	r3, [sp, #8]
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	9301      	str	r3, [sp, #4]
 8007aec:	2301      	movs	r3, #1
 8007aee:	9300      	str	r3, [sp, #0]
 8007af0:	2302      	movs	r3, #2
 8007af2:	2201      	movs	r2, #1
 8007af4:	68f8      	ldr	r0, [r7, #12]
 8007af6:	f000 fac0 	bl	800807a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007afa:	2300      	movs	r3, #0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b086      	sub	sp, #24
 8007b08:	af04      	add	r7, sp, #16
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	4608      	mov	r0, r1
 8007b0e:	4611      	mov	r1, r2
 8007b10:	461a      	mov	r2, r3
 8007b12:	4603      	mov	r3, r0
 8007b14:	70fb      	strb	r3, [r7, #3]
 8007b16:	460b      	mov	r3, r1
 8007b18:	70bb      	strb	r3, [r7, #2]
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007b1e:	7878      	ldrb	r0, [r7, #1]
 8007b20:	78ba      	ldrb	r2, [r7, #2]
 8007b22:	78f9      	ldrb	r1, [r7, #3]
 8007b24:	8b3b      	ldrh	r3, [r7, #24]
 8007b26:	9302      	str	r3, [sp, #8]
 8007b28:	7d3b      	ldrb	r3, [r7, #20]
 8007b2a:	9301      	str	r3, [sp, #4]
 8007b2c:	7c3b      	ldrb	r3, [r7, #16]
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	4603      	mov	r3, r0
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 fa53 	bl	8007fde <USBH_LL_OpenPipe>

  return USBH_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3708      	adds	r7, #8
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b082      	sub	sp, #8
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007b4e:	78fb      	ldrb	r3, [r7, #3]
 8007b50:	4619      	mov	r1, r3
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 fa72 	bl	800803c <USBH_LL_ClosePipe>

  return USBH_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b084      	sub	sp, #16
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f836 	bl	8007be0 <USBH_GetFreePipe>
 8007b74:	4603      	mov	r3, r0
 8007b76:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007b78:	89fb      	ldrh	r3, [r7, #14]
 8007b7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d00a      	beq.n	8007b98 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007b82:	78fa      	ldrb	r2, [r7, #3]
 8007b84:	89fb      	ldrh	r3, [r7, #14]
 8007b86:	f003 030f 	and.w	r3, r3, #15
 8007b8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b8e:	6879      	ldr	r1, [r7, #4]
 8007b90:	33e0      	adds	r3, #224	; 0xe0
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	440b      	add	r3, r1
 8007b96:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007b98:	89fb      	ldrh	r3, [r7, #14]
 8007b9a:	b2db      	uxtb	r3, r3
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	460b      	mov	r3, r1
 8007bae:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007bb0:	78fb      	ldrb	r3, [r7, #3]
 8007bb2:	2b0a      	cmp	r3, #10
 8007bb4:	d80d      	bhi.n	8007bd2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007bb6:	78fb      	ldrb	r3, [r7, #3]
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	33e0      	adds	r3, #224	; 0xe0
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	4413      	add	r3, r2
 8007bc0:	685a      	ldr	r2, [r3, #4]
 8007bc2:	78fb      	ldrb	r3, [r7, #3]
 8007bc4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007bc8:	6879      	ldr	r1, [r7, #4]
 8007bca:	33e0      	adds	r3, #224	; 0xe0
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	440b      	add	r3, r1
 8007bd0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b085      	sub	sp, #20
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007be8:	2300      	movs	r3, #0
 8007bea:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007bec:	2300      	movs	r3, #0
 8007bee:	73fb      	strb	r3, [r7, #15]
 8007bf0:	e00f      	b.n	8007c12 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007bf2:	7bfb      	ldrb	r3, [r7, #15]
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	33e0      	adds	r3, #224	; 0xe0
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4413      	add	r3, r2
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d102      	bne.n	8007c0c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007c06:	7bfb      	ldrb	r3, [r7, #15]
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	e007      	b.n	8007c1c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007c0c:	7bfb      	ldrb	r3, [r7, #15]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	73fb      	strb	r3, [r7, #15]
 8007c12:	7bfb      	ldrb	r3, [r7, #15]
 8007c14:	2b0a      	cmp	r3, #10
 8007c16:	d9ec      	bls.n	8007bf2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007c18:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3714      	adds	r7, #20
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	490e      	ldr	r1, [pc, #56]	; (8007c68 <MX_USB_HOST_Init+0x40>)
 8007c30:	480e      	ldr	r0, [pc, #56]	; (8007c6c <MX_USB_HOST_Init+0x44>)
 8007c32:	f7fe fca1 	bl	8006578 <USBH_Init>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d001      	beq.n	8007c40 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007c3c:	f7f8 fe7e 	bl	800093c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007c40:	490b      	ldr	r1, [pc, #44]	; (8007c70 <MX_USB_HOST_Init+0x48>)
 8007c42:	480a      	ldr	r0, [pc, #40]	; (8007c6c <MX_USB_HOST_Init+0x44>)
 8007c44:	f7fe fd26 	bl	8006694 <USBH_RegisterClass>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d001      	beq.n	8007c52 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007c4e:	f7f8 fe75 	bl	800093c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007c52:	4806      	ldr	r0, [pc, #24]	; (8007c6c <MX_USB_HOST_Init+0x44>)
 8007c54:	f7fe fdaa 	bl	80067ac <USBH_Start>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d001      	beq.n	8007c62 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007c5e:	f7f8 fe6d 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007c62:	bf00      	nop
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	08007c89 	.word	0x08007c89
 8007c6c:	20000158 	.word	0x20000158
 8007c70:	2000000c 	.word	0x2000000c

08007c74 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007c78:	4802      	ldr	r0, [pc, #8]	; (8007c84 <MX_USB_HOST_Process+0x10>)
 8007c7a:	f7fe fda7 	bl	80067cc <USBH_Process>
}
 8007c7e:	bf00      	nop
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	20000158 	.word	0x20000158

08007c88 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	460b      	mov	r3, r1
 8007c92:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007c94:	78fb      	ldrb	r3, [r7, #3]
 8007c96:	3b01      	subs	r3, #1
 8007c98:	2b04      	cmp	r3, #4
 8007c9a:	d819      	bhi.n	8007cd0 <USBH_UserProcess+0x48>
 8007c9c:	a201      	add	r2, pc, #4	; (adr r2, 8007ca4 <USBH_UserProcess+0x1c>)
 8007c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca2:	bf00      	nop
 8007ca4:	08007cd1 	.word	0x08007cd1
 8007ca8:	08007cc1 	.word	0x08007cc1
 8007cac:	08007cd1 	.word	0x08007cd1
 8007cb0:	08007cc9 	.word	0x08007cc9
 8007cb4:	08007cb9 	.word	0x08007cb9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007cb8:	4b09      	ldr	r3, [pc, #36]	; (8007ce0 <USBH_UserProcess+0x58>)
 8007cba:	2203      	movs	r2, #3
 8007cbc:	701a      	strb	r2, [r3, #0]
  break;
 8007cbe:	e008      	b.n	8007cd2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007cc0:	4b07      	ldr	r3, [pc, #28]	; (8007ce0 <USBH_UserProcess+0x58>)
 8007cc2:	2202      	movs	r2, #2
 8007cc4:	701a      	strb	r2, [r3, #0]
  break;
 8007cc6:	e004      	b.n	8007cd2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007cc8:	4b05      	ldr	r3, [pc, #20]	; (8007ce0 <USBH_UserProcess+0x58>)
 8007cca:	2201      	movs	r2, #1
 8007ccc:	701a      	strb	r2, [r3, #0]
  break;
 8007cce:	e000      	b.n	8007cd2 <USBH_UserProcess+0x4a>

  default:
  break;
 8007cd0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007cd2:	bf00      	nop
 8007cd4:	370c      	adds	r7, #12
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	200000b0 	.word	0x200000b0

08007ce4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b08a      	sub	sp, #40	; 0x28
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cec:	f107 0314 	add.w	r3, r7, #20
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	601a      	str	r2, [r3, #0]
 8007cf4:	605a      	str	r2, [r3, #4]
 8007cf6:	609a      	str	r2, [r3, #8]
 8007cf8:	60da      	str	r2, [r3, #12]
 8007cfa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d04:	d147      	bne.n	8007d96 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d06:	2300      	movs	r3, #0
 8007d08:	613b      	str	r3, [r7, #16]
 8007d0a:	4b25      	ldr	r3, [pc, #148]	; (8007da0 <HAL_HCD_MspInit+0xbc>)
 8007d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d0e:	4a24      	ldr	r2, [pc, #144]	; (8007da0 <HAL_HCD_MspInit+0xbc>)
 8007d10:	f043 0301 	orr.w	r3, r3, #1
 8007d14:	6313      	str	r3, [r2, #48]	; 0x30
 8007d16:	4b22      	ldr	r3, [pc, #136]	; (8007da0 <HAL_HCD_MspInit+0xbc>)
 8007d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d1a:	f003 0301 	and.w	r3, r3, #1
 8007d1e:	613b      	str	r3, [r7, #16]
 8007d20:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007d22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007d30:	f107 0314 	add.w	r3, r7, #20
 8007d34:	4619      	mov	r1, r3
 8007d36:	481b      	ldr	r0, [pc, #108]	; (8007da4 <HAL_HCD_MspInit+0xc0>)
 8007d38:	f7f9 fa3c 	bl	80011b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007d3c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d42:	2302      	movs	r3, #2
 8007d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d46:	2300      	movs	r3, #0
 8007d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007d4e:	230a      	movs	r3, #10
 8007d50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d52:	f107 0314 	add.w	r3, r7, #20
 8007d56:	4619      	mov	r1, r3
 8007d58:	4812      	ldr	r0, [pc, #72]	; (8007da4 <HAL_HCD_MspInit+0xc0>)
 8007d5a:	f7f9 fa2b 	bl	80011b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007d5e:	4b10      	ldr	r3, [pc, #64]	; (8007da0 <HAL_HCD_MspInit+0xbc>)
 8007d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d62:	4a0f      	ldr	r2, [pc, #60]	; (8007da0 <HAL_HCD_MspInit+0xbc>)
 8007d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d68:	6353      	str	r3, [r2, #52]	; 0x34
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	60fb      	str	r3, [r7, #12]
 8007d6e:	4b0c      	ldr	r3, [pc, #48]	; (8007da0 <HAL_HCD_MspInit+0xbc>)
 8007d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d72:	4a0b      	ldr	r2, [pc, #44]	; (8007da0 <HAL_HCD_MspInit+0xbc>)
 8007d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d78:	6453      	str	r3, [r2, #68]	; 0x44
 8007d7a:	4b09      	ldr	r3, [pc, #36]	; (8007da0 <HAL_HCD_MspInit+0xbc>)
 8007d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d82:	60fb      	str	r3, [r7, #12]
 8007d84:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007d86:	2200      	movs	r2, #0
 8007d88:	2100      	movs	r1, #0
 8007d8a:	2043      	movs	r0, #67	; 0x43
 8007d8c:	f7f9 f949 	bl	8001022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007d90:	2043      	movs	r0, #67	; 0x43
 8007d92:	f7f9 f962 	bl	800105a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007d96:	bf00      	nop
 8007d98:	3728      	adds	r7, #40	; 0x28
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	40023800 	.word	0x40023800
 8007da4:	40020000 	.word	0x40020000

08007da8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7ff f8db 	bl	8006f72 <USBH_LL_IncTimer>
}
 8007dbc:	bf00      	nop
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7ff f913 	bl	8006ffe <USBH_LL_Connect>
}
 8007dd8:	bf00      	nop
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7ff f91c 	bl	800702c <USBH_LL_Disconnect>
}
 8007df4:	bf00      	nop
 8007df6:	3708      	adds	r7, #8
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	460b      	mov	r3, r1
 8007e06:	70fb      	strb	r3, [r7, #3]
 8007e08:	4613      	mov	r3, r2
 8007e0a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007e0c:	bf00      	nop
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7ff f8cd 	bl	8006fc6 <USBH_LL_PortEnabled>
}
 8007e2c:	bf00      	nop
 8007e2e:	3708      	adds	r7, #8
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7ff f8cd 	bl	8006fe2 <USBH_LL_PortDisabled>
}
 8007e48:	bf00      	nop
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d12a      	bne.n	8007eb8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007e62:	4a18      	ldr	r2, [pc, #96]	; (8007ec4 <USBH_LL_Init+0x74>)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a15      	ldr	r2, [pc, #84]	; (8007ec4 <USBH_LL_Init+0x74>)
 8007e6e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007e72:	4b14      	ldr	r3, [pc, #80]	; (8007ec4 <USBH_LL_Init+0x74>)
 8007e74:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007e78:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007e7a:	4b12      	ldr	r3, [pc, #72]	; (8007ec4 <USBH_LL_Init+0x74>)
 8007e7c:	2208      	movs	r2, #8
 8007e7e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007e80:	4b10      	ldr	r3, [pc, #64]	; (8007ec4 <USBH_LL_Init+0x74>)
 8007e82:	2201      	movs	r2, #1
 8007e84:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007e86:	4b0f      	ldr	r3, [pc, #60]	; (8007ec4 <USBH_LL_Init+0x74>)
 8007e88:	2200      	movs	r2, #0
 8007e8a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007e8c:	4b0d      	ldr	r3, [pc, #52]	; (8007ec4 <USBH_LL_Init+0x74>)
 8007e8e:	2202      	movs	r2, #2
 8007e90:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007e92:	4b0c      	ldr	r3, [pc, #48]	; (8007ec4 <USBH_LL_Init+0x74>)
 8007e94:	2200      	movs	r2, #0
 8007e96:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007e98:	480a      	ldr	r0, [pc, #40]	; (8007ec4 <USBH_LL_Init+0x74>)
 8007e9a:	f7f9 fb40 	bl	800151e <HAL_HCD_Init>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d001      	beq.n	8007ea8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007ea4:	f7f8 fd4a 	bl	800093c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007ea8:	4806      	ldr	r0, [pc, #24]	; (8007ec4 <USBH_LL_Init+0x74>)
 8007eaa:	f7f9 ff24 	bl	8001cf6 <HAL_HCD_GetCurrentFrame>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f7ff f84e 	bl	8006f54 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3708      	adds	r7, #8
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	20000530 	.word	0x20000530

08007ec8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7f9 fe93 	bl	8001c0a <HAL_HCD_Start>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007ee8:	7bfb      	ldrb	r3, [r7, #15]
 8007eea:	4618      	mov	r0, r3
 8007eec:	f000 f95c 	bl	80081a8 <USBH_Get_USB_Status>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ef4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3710      	adds	r7, #16
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}

08007efe <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007efe:	b580      	push	{r7, lr}
 8007f00:	b084      	sub	sp, #16
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f06:	2300      	movs	r3, #0
 8007f08:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7f9 fe9b 	bl	8001c50 <HAL_HCD_Stop>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
 8007f20:	4618      	mov	r0, r3
 8007f22:	f000 f941 	bl	80081a8 <USBH_Get_USB_Status>
 8007f26:	4603      	mov	r3, r0
 8007f28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3710      	adds	r7, #16
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7f9 fee3 	bl	8001d12 <HAL_HCD_GetCurrentSpeed>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b02      	cmp	r3, #2
 8007f50:	d00c      	beq.n	8007f6c <USBH_LL_GetSpeed+0x38>
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d80d      	bhi.n	8007f72 <USBH_LL_GetSpeed+0x3e>
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d002      	beq.n	8007f60 <USBH_LL_GetSpeed+0x2c>
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d003      	beq.n	8007f66 <USBH_LL_GetSpeed+0x32>
 8007f5e:	e008      	b.n	8007f72 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007f60:	2300      	movs	r3, #0
 8007f62:	73fb      	strb	r3, [r7, #15]
    break;
 8007f64:	e008      	b.n	8007f78 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007f66:	2301      	movs	r3, #1
 8007f68:	73fb      	strb	r3, [r7, #15]
    break;
 8007f6a:	e005      	b.n	8007f78 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007f6c:	2302      	movs	r3, #2
 8007f6e:	73fb      	strb	r3, [r7, #15]
    break;
 8007f70:	e002      	b.n	8007f78 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007f72:	2301      	movs	r3, #1
 8007f74:	73fb      	strb	r3, [r7, #15]
    break;
 8007f76:	bf00      	nop
  }
  return  speed;
 8007f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3710      	adds	r7, #16
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b084      	sub	sp, #16
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7f9 fe76 	bl	8001c8a <HAL_HCD_ResetPort>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007fa2:	7bfb      	ldrb	r3, [r7, #15]
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f000 f8ff 	bl	80081a8 <USBH_Get_USB_Status>
 8007faa:	4603      	mov	r3, r0
 8007fac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fae:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007fca:	78fa      	ldrb	r2, [r7, #3]
 8007fcc:	4611      	mov	r1, r2
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7f9 fe7d 	bl	8001cce <HAL_HCD_HC_GetXferCount>
 8007fd4:	4603      	mov	r3, r0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007fde:	b590      	push	{r4, r7, lr}
 8007fe0:	b089      	sub	sp, #36	; 0x24
 8007fe2:	af04      	add	r7, sp, #16
 8007fe4:	6078      	str	r0, [r7, #4]
 8007fe6:	4608      	mov	r0, r1
 8007fe8:	4611      	mov	r1, r2
 8007fea:	461a      	mov	r2, r3
 8007fec:	4603      	mov	r3, r0
 8007fee:	70fb      	strb	r3, [r7, #3]
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	70bb      	strb	r3, [r7, #2]
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008006:	787c      	ldrb	r4, [r7, #1]
 8008008:	78ba      	ldrb	r2, [r7, #2]
 800800a:	78f9      	ldrb	r1, [r7, #3]
 800800c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800800e:	9302      	str	r3, [sp, #8]
 8008010:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008014:	9301      	str	r3, [sp, #4]
 8008016:	f897 3020 	ldrb.w	r3, [r7, #32]
 800801a:	9300      	str	r3, [sp, #0]
 800801c:	4623      	mov	r3, r4
 800801e:	f7f9 fae0 	bl	80015e2 <HAL_HCD_HC_Init>
 8008022:	4603      	mov	r3, r0
 8008024:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008026:	7bfb      	ldrb	r3, [r7, #15]
 8008028:	4618      	mov	r0, r3
 800802a:	f000 f8bd 	bl	80081a8 <USBH_Get_USB_Status>
 800802e:	4603      	mov	r3, r0
 8008030:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008032:	7bbb      	ldrb	r3, [r7, #14]
}
 8008034:	4618      	mov	r0, r3
 8008036:	3714      	adds	r7, #20
 8008038:	46bd      	mov	sp, r7
 800803a:	bd90      	pop	{r4, r7, pc}

0800803c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	460b      	mov	r3, r1
 8008046:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008048:	2300      	movs	r3, #0
 800804a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800804c:	2300      	movs	r3, #0
 800804e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008056:	78fa      	ldrb	r2, [r7, #3]
 8008058:	4611      	mov	r1, r2
 800805a:	4618      	mov	r0, r3
 800805c:	f7f9 fb50 	bl	8001700 <HAL_HCD_HC_Halt>
 8008060:	4603      	mov	r3, r0
 8008062:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008064:	7bfb      	ldrb	r3, [r7, #15]
 8008066:	4618      	mov	r0, r3
 8008068:	f000 f89e 	bl	80081a8 <USBH_Get_USB_Status>
 800806c:	4603      	mov	r3, r0
 800806e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008070:	7bbb      	ldrb	r3, [r7, #14]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800807a:	b590      	push	{r4, r7, lr}
 800807c:	b089      	sub	sp, #36	; 0x24
 800807e:	af04      	add	r7, sp, #16
 8008080:	6078      	str	r0, [r7, #4]
 8008082:	4608      	mov	r0, r1
 8008084:	4611      	mov	r1, r2
 8008086:	461a      	mov	r2, r3
 8008088:	4603      	mov	r3, r0
 800808a:	70fb      	strb	r3, [r7, #3]
 800808c:	460b      	mov	r3, r1
 800808e:	70bb      	strb	r3, [r7, #2]
 8008090:	4613      	mov	r3, r2
 8008092:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008094:	2300      	movs	r3, #0
 8008096:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008098:	2300      	movs	r3, #0
 800809a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80080a2:	787c      	ldrb	r4, [r7, #1]
 80080a4:	78ba      	ldrb	r2, [r7, #2]
 80080a6:	78f9      	ldrb	r1, [r7, #3]
 80080a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80080ac:	9303      	str	r3, [sp, #12]
 80080ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80080b0:	9302      	str	r3, [sp, #8]
 80080b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b4:	9301      	str	r3, [sp, #4]
 80080b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	4623      	mov	r3, r4
 80080be:	f7f9 fb43 	bl	8001748 <HAL_HCD_HC_SubmitRequest>
 80080c2:	4603      	mov	r3, r0
 80080c4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
 80080c8:	4618      	mov	r0, r3
 80080ca:	f000 f86d 	bl	80081a8 <USBH_Get_USB_Status>
 80080ce:	4603      	mov	r3, r0
 80080d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3714      	adds	r7, #20
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd90      	pop	{r4, r7, pc}

080080dc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	460b      	mov	r3, r1
 80080e6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080ee:	78fa      	ldrb	r2, [r7, #3]
 80080f0:	4611      	mov	r1, r2
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7f9 fdd7 	bl	8001ca6 <HAL_HCD_HC_GetURBState>
 80080f8:	4603      	mov	r3, r0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3708      	adds	r7, #8
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b082      	sub	sp, #8
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
 800810a:	460b      	mov	r3, r1
 800810c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008114:	2b01      	cmp	r3, #1
 8008116:	d103      	bne.n	8008120 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008118:	78fb      	ldrb	r3, [r7, #3]
 800811a:	4618      	mov	r0, r3
 800811c:	f000 f870 	bl	8008200 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008120:	20c8      	movs	r0, #200	; 0xc8
 8008122:	f7f8 fe7f 	bl	8000e24 <HAL_Delay>
  return USBH_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008130:	b480      	push	{r7}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	460b      	mov	r3, r1
 800813a:	70fb      	strb	r3, [r7, #3]
 800813c:	4613      	mov	r3, r2
 800813e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008146:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008148:	78fb      	ldrb	r3, [r7, #3]
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	212c      	movs	r1, #44	; 0x2c
 800814e:	fb01 f303 	mul.w	r3, r1, r3
 8008152:	4413      	add	r3, r2
 8008154:	333b      	adds	r3, #59	; 0x3b
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d009      	beq.n	8008170 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800815c:	78fb      	ldrb	r3, [r7, #3]
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	212c      	movs	r1, #44	; 0x2c
 8008162:	fb01 f303 	mul.w	r3, r1, r3
 8008166:	4413      	add	r3, r2
 8008168:	3354      	adds	r3, #84	; 0x54
 800816a:	78ba      	ldrb	r2, [r7, #2]
 800816c:	701a      	strb	r2, [r3, #0]
 800816e:	e008      	b.n	8008182 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008170:	78fb      	ldrb	r3, [r7, #3]
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	212c      	movs	r1, #44	; 0x2c
 8008176:	fb01 f303 	mul.w	r3, r1, r3
 800817a:	4413      	add	r3, r2
 800817c:	3355      	adds	r3, #85	; 0x55
 800817e:	78ba      	ldrb	r2, [r7, #2]
 8008180:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3714      	adds	r7, #20
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f7f8 fe43 	bl	8000e24 <HAL_Delay>
}
 800819e:	bf00      	nop
 80081a0:	3708      	adds	r7, #8
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
	...

080081a8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	4603      	mov	r3, r0
 80081b0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081b2:	2300      	movs	r3, #0
 80081b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80081b6:	79fb      	ldrb	r3, [r7, #7]
 80081b8:	2b03      	cmp	r3, #3
 80081ba:	d817      	bhi.n	80081ec <USBH_Get_USB_Status+0x44>
 80081bc:	a201      	add	r2, pc, #4	; (adr r2, 80081c4 <USBH_Get_USB_Status+0x1c>)
 80081be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c2:	bf00      	nop
 80081c4:	080081d5 	.word	0x080081d5
 80081c8:	080081db 	.word	0x080081db
 80081cc:	080081e1 	.word	0x080081e1
 80081d0:	080081e7 	.word	0x080081e7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80081d4:	2300      	movs	r3, #0
 80081d6:	73fb      	strb	r3, [r7, #15]
    break;
 80081d8:	e00b      	b.n	80081f2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80081da:	2302      	movs	r3, #2
 80081dc:	73fb      	strb	r3, [r7, #15]
    break;
 80081de:	e008      	b.n	80081f2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80081e0:	2301      	movs	r3, #1
 80081e2:	73fb      	strb	r3, [r7, #15]
    break;
 80081e4:	e005      	b.n	80081f2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80081e6:	2302      	movs	r3, #2
 80081e8:	73fb      	strb	r3, [r7, #15]
    break;
 80081ea:	e002      	b.n	80081f2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80081ec:	2302      	movs	r3, #2
 80081ee:	73fb      	strb	r3, [r7, #15]
    break;
 80081f0:	bf00      	nop
  }
  return usb_status;
 80081f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	4603      	mov	r3, r0
 8008208:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800820a:	79fb      	ldrb	r3, [r7, #7]
 800820c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800820e:	79fb      	ldrb	r3, [r7, #7]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d102      	bne.n	800821a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008214:	2301      	movs	r3, #1
 8008216:	73fb      	strb	r3, [r7, #15]
 8008218:	e001      	b.n	800821e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800821a:	2300      	movs	r3, #0
 800821c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800821e:	7bfb      	ldrb	r3, [r7, #15]
 8008220:	461a      	mov	r2, r3
 8008222:	2101      	movs	r1, #1
 8008224:	4803      	ldr	r0, [pc, #12]	; (8008234 <MX_DriverVbusFS+0x34>)
 8008226:	f7f9 f961 	bl	80014ec <HAL_GPIO_WritePin>
}
 800822a:	bf00      	nop
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	40020800 	.word	0x40020800

08008238 <__errno>:
 8008238:	4b01      	ldr	r3, [pc, #4]	; (8008240 <__errno+0x8>)
 800823a:	6818      	ldr	r0, [r3, #0]
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	2000002c 	.word	0x2000002c

08008244 <__libc_init_array>:
 8008244:	b570      	push	{r4, r5, r6, lr}
 8008246:	4d0d      	ldr	r5, [pc, #52]	; (800827c <__libc_init_array+0x38>)
 8008248:	4c0d      	ldr	r4, [pc, #52]	; (8008280 <__libc_init_array+0x3c>)
 800824a:	1b64      	subs	r4, r4, r5
 800824c:	10a4      	asrs	r4, r4, #2
 800824e:	2600      	movs	r6, #0
 8008250:	42a6      	cmp	r6, r4
 8008252:	d109      	bne.n	8008268 <__libc_init_array+0x24>
 8008254:	4d0b      	ldr	r5, [pc, #44]	; (8008284 <__libc_init_array+0x40>)
 8008256:	4c0c      	ldr	r4, [pc, #48]	; (8008288 <__libc_init_array+0x44>)
 8008258:	f000 f8f8 	bl	800844c <_init>
 800825c:	1b64      	subs	r4, r4, r5
 800825e:	10a4      	asrs	r4, r4, #2
 8008260:	2600      	movs	r6, #0
 8008262:	42a6      	cmp	r6, r4
 8008264:	d105      	bne.n	8008272 <__libc_init_array+0x2e>
 8008266:	bd70      	pop	{r4, r5, r6, pc}
 8008268:	f855 3b04 	ldr.w	r3, [r5], #4
 800826c:	4798      	blx	r3
 800826e:	3601      	adds	r6, #1
 8008270:	e7ee      	b.n	8008250 <__libc_init_array+0xc>
 8008272:	f855 3b04 	ldr.w	r3, [r5], #4
 8008276:	4798      	blx	r3
 8008278:	3601      	adds	r6, #1
 800827a:	e7f2      	b.n	8008262 <__libc_init_array+0x1e>
 800827c:	08008488 	.word	0x08008488
 8008280:	08008488 	.word	0x08008488
 8008284:	08008488 	.word	0x08008488
 8008288:	0800848c 	.word	0x0800848c

0800828c <malloc>:
 800828c:	4b02      	ldr	r3, [pc, #8]	; (8008298 <malloc+0xc>)
 800828e:	4601      	mov	r1, r0
 8008290:	6818      	ldr	r0, [r3, #0]
 8008292:	f000 b863 	b.w	800835c <_malloc_r>
 8008296:	bf00      	nop
 8008298:	2000002c 	.word	0x2000002c

0800829c <free>:
 800829c:	4b02      	ldr	r3, [pc, #8]	; (80082a8 <free+0xc>)
 800829e:	4601      	mov	r1, r0
 80082a0:	6818      	ldr	r0, [r3, #0]
 80082a2:	f000 b80b 	b.w	80082bc <_free_r>
 80082a6:	bf00      	nop
 80082a8:	2000002c 	.word	0x2000002c

080082ac <memset>:
 80082ac:	4402      	add	r2, r0
 80082ae:	4603      	mov	r3, r0
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d100      	bne.n	80082b6 <memset+0xa>
 80082b4:	4770      	bx	lr
 80082b6:	f803 1b01 	strb.w	r1, [r3], #1
 80082ba:	e7f9      	b.n	80082b0 <memset+0x4>

080082bc <_free_r>:
 80082bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082be:	2900      	cmp	r1, #0
 80082c0:	d048      	beq.n	8008354 <_free_r+0x98>
 80082c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082c6:	9001      	str	r0, [sp, #4]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	f1a1 0404 	sub.w	r4, r1, #4
 80082ce:	bfb8      	it	lt
 80082d0:	18e4      	addlt	r4, r4, r3
 80082d2:	f000 f8ad 	bl	8008430 <__malloc_lock>
 80082d6:	4a20      	ldr	r2, [pc, #128]	; (8008358 <_free_r+0x9c>)
 80082d8:	9801      	ldr	r0, [sp, #4]
 80082da:	6813      	ldr	r3, [r2, #0]
 80082dc:	4615      	mov	r5, r2
 80082de:	b933      	cbnz	r3, 80082ee <_free_r+0x32>
 80082e0:	6063      	str	r3, [r4, #4]
 80082e2:	6014      	str	r4, [r2, #0]
 80082e4:	b003      	add	sp, #12
 80082e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082ea:	f000 b8a7 	b.w	800843c <__malloc_unlock>
 80082ee:	42a3      	cmp	r3, r4
 80082f0:	d90b      	bls.n	800830a <_free_r+0x4e>
 80082f2:	6821      	ldr	r1, [r4, #0]
 80082f4:	1862      	adds	r2, r4, r1
 80082f6:	4293      	cmp	r3, r2
 80082f8:	bf04      	itt	eq
 80082fa:	681a      	ldreq	r2, [r3, #0]
 80082fc:	685b      	ldreq	r3, [r3, #4]
 80082fe:	6063      	str	r3, [r4, #4]
 8008300:	bf04      	itt	eq
 8008302:	1852      	addeq	r2, r2, r1
 8008304:	6022      	streq	r2, [r4, #0]
 8008306:	602c      	str	r4, [r5, #0]
 8008308:	e7ec      	b.n	80082e4 <_free_r+0x28>
 800830a:	461a      	mov	r2, r3
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	b10b      	cbz	r3, 8008314 <_free_r+0x58>
 8008310:	42a3      	cmp	r3, r4
 8008312:	d9fa      	bls.n	800830a <_free_r+0x4e>
 8008314:	6811      	ldr	r1, [r2, #0]
 8008316:	1855      	adds	r5, r2, r1
 8008318:	42a5      	cmp	r5, r4
 800831a:	d10b      	bne.n	8008334 <_free_r+0x78>
 800831c:	6824      	ldr	r4, [r4, #0]
 800831e:	4421      	add	r1, r4
 8008320:	1854      	adds	r4, r2, r1
 8008322:	42a3      	cmp	r3, r4
 8008324:	6011      	str	r1, [r2, #0]
 8008326:	d1dd      	bne.n	80082e4 <_free_r+0x28>
 8008328:	681c      	ldr	r4, [r3, #0]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	6053      	str	r3, [r2, #4]
 800832e:	4421      	add	r1, r4
 8008330:	6011      	str	r1, [r2, #0]
 8008332:	e7d7      	b.n	80082e4 <_free_r+0x28>
 8008334:	d902      	bls.n	800833c <_free_r+0x80>
 8008336:	230c      	movs	r3, #12
 8008338:	6003      	str	r3, [r0, #0]
 800833a:	e7d3      	b.n	80082e4 <_free_r+0x28>
 800833c:	6825      	ldr	r5, [r4, #0]
 800833e:	1961      	adds	r1, r4, r5
 8008340:	428b      	cmp	r3, r1
 8008342:	bf04      	itt	eq
 8008344:	6819      	ldreq	r1, [r3, #0]
 8008346:	685b      	ldreq	r3, [r3, #4]
 8008348:	6063      	str	r3, [r4, #4]
 800834a:	bf04      	itt	eq
 800834c:	1949      	addeq	r1, r1, r5
 800834e:	6021      	streq	r1, [r4, #0]
 8008350:	6054      	str	r4, [r2, #4]
 8008352:	e7c7      	b.n	80082e4 <_free_r+0x28>
 8008354:	b003      	add	sp, #12
 8008356:	bd30      	pop	{r4, r5, pc}
 8008358:	200000b4 	.word	0x200000b4

0800835c <_malloc_r>:
 800835c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800835e:	1ccd      	adds	r5, r1, #3
 8008360:	f025 0503 	bic.w	r5, r5, #3
 8008364:	3508      	adds	r5, #8
 8008366:	2d0c      	cmp	r5, #12
 8008368:	bf38      	it	cc
 800836a:	250c      	movcc	r5, #12
 800836c:	2d00      	cmp	r5, #0
 800836e:	4606      	mov	r6, r0
 8008370:	db01      	blt.n	8008376 <_malloc_r+0x1a>
 8008372:	42a9      	cmp	r1, r5
 8008374:	d903      	bls.n	800837e <_malloc_r+0x22>
 8008376:	230c      	movs	r3, #12
 8008378:	6033      	str	r3, [r6, #0]
 800837a:	2000      	movs	r0, #0
 800837c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800837e:	f000 f857 	bl	8008430 <__malloc_lock>
 8008382:	4921      	ldr	r1, [pc, #132]	; (8008408 <_malloc_r+0xac>)
 8008384:	680a      	ldr	r2, [r1, #0]
 8008386:	4614      	mov	r4, r2
 8008388:	b99c      	cbnz	r4, 80083b2 <_malloc_r+0x56>
 800838a:	4f20      	ldr	r7, [pc, #128]	; (800840c <_malloc_r+0xb0>)
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	b923      	cbnz	r3, 800839a <_malloc_r+0x3e>
 8008390:	4621      	mov	r1, r4
 8008392:	4630      	mov	r0, r6
 8008394:	f000 f83c 	bl	8008410 <_sbrk_r>
 8008398:	6038      	str	r0, [r7, #0]
 800839a:	4629      	mov	r1, r5
 800839c:	4630      	mov	r0, r6
 800839e:	f000 f837 	bl	8008410 <_sbrk_r>
 80083a2:	1c43      	adds	r3, r0, #1
 80083a4:	d123      	bne.n	80083ee <_malloc_r+0x92>
 80083a6:	230c      	movs	r3, #12
 80083a8:	6033      	str	r3, [r6, #0]
 80083aa:	4630      	mov	r0, r6
 80083ac:	f000 f846 	bl	800843c <__malloc_unlock>
 80083b0:	e7e3      	b.n	800837a <_malloc_r+0x1e>
 80083b2:	6823      	ldr	r3, [r4, #0]
 80083b4:	1b5b      	subs	r3, r3, r5
 80083b6:	d417      	bmi.n	80083e8 <_malloc_r+0x8c>
 80083b8:	2b0b      	cmp	r3, #11
 80083ba:	d903      	bls.n	80083c4 <_malloc_r+0x68>
 80083bc:	6023      	str	r3, [r4, #0]
 80083be:	441c      	add	r4, r3
 80083c0:	6025      	str	r5, [r4, #0]
 80083c2:	e004      	b.n	80083ce <_malloc_r+0x72>
 80083c4:	6863      	ldr	r3, [r4, #4]
 80083c6:	42a2      	cmp	r2, r4
 80083c8:	bf0c      	ite	eq
 80083ca:	600b      	streq	r3, [r1, #0]
 80083cc:	6053      	strne	r3, [r2, #4]
 80083ce:	4630      	mov	r0, r6
 80083d0:	f000 f834 	bl	800843c <__malloc_unlock>
 80083d4:	f104 000b 	add.w	r0, r4, #11
 80083d8:	1d23      	adds	r3, r4, #4
 80083da:	f020 0007 	bic.w	r0, r0, #7
 80083de:	1ac2      	subs	r2, r0, r3
 80083e0:	d0cc      	beq.n	800837c <_malloc_r+0x20>
 80083e2:	1a1b      	subs	r3, r3, r0
 80083e4:	50a3      	str	r3, [r4, r2]
 80083e6:	e7c9      	b.n	800837c <_malloc_r+0x20>
 80083e8:	4622      	mov	r2, r4
 80083ea:	6864      	ldr	r4, [r4, #4]
 80083ec:	e7cc      	b.n	8008388 <_malloc_r+0x2c>
 80083ee:	1cc4      	adds	r4, r0, #3
 80083f0:	f024 0403 	bic.w	r4, r4, #3
 80083f4:	42a0      	cmp	r0, r4
 80083f6:	d0e3      	beq.n	80083c0 <_malloc_r+0x64>
 80083f8:	1a21      	subs	r1, r4, r0
 80083fa:	4630      	mov	r0, r6
 80083fc:	f000 f808 	bl	8008410 <_sbrk_r>
 8008400:	3001      	adds	r0, #1
 8008402:	d1dd      	bne.n	80083c0 <_malloc_r+0x64>
 8008404:	e7cf      	b.n	80083a6 <_malloc_r+0x4a>
 8008406:	bf00      	nop
 8008408:	200000b4 	.word	0x200000b4
 800840c:	200000b8 	.word	0x200000b8

08008410 <_sbrk_r>:
 8008410:	b538      	push	{r3, r4, r5, lr}
 8008412:	4d06      	ldr	r5, [pc, #24]	; (800842c <_sbrk_r+0x1c>)
 8008414:	2300      	movs	r3, #0
 8008416:	4604      	mov	r4, r0
 8008418:	4608      	mov	r0, r1
 800841a:	602b      	str	r3, [r5, #0]
 800841c:	f7f8 fb0c 	bl	8000a38 <_sbrk>
 8008420:	1c43      	adds	r3, r0, #1
 8008422:	d102      	bne.n	800842a <_sbrk_r+0x1a>
 8008424:	682b      	ldr	r3, [r5, #0]
 8008426:	b103      	cbz	r3, 800842a <_sbrk_r+0x1a>
 8008428:	6023      	str	r3, [r4, #0]
 800842a:	bd38      	pop	{r3, r4, r5, pc}
 800842c:	20000834 	.word	0x20000834

08008430 <__malloc_lock>:
 8008430:	4801      	ldr	r0, [pc, #4]	; (8008438 <__malloc_lock+0x8>)
 8008432:	f000 b809 	b.w	8008448 <__retarget_lock_acquire_recursive>
 8008436:	bf00      	nop
 8008438:	2000083c 	.word	0x2000083c

0800843c <__malloc_unlock>:
 800843c:	4801      	ldr	r0, [pc, #4]	; (8008444 <__malloc_unlock+0x8>)
 800843e:	f000 b804 	b.w	800844a <__retarget_lock_release_recursive>
 8008442:	bf00      	nop
 8008444:	2000083c 	.word	0x2000083c

08008448 <__retarget_lock_acquire_recursive>:
 8008448:	4770      	bx	lr

0800844a <__retarget_lock_release_recursive>:
 800844a:	4770      	bx	lr

0800844c <_init>:
 800844c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800844e:	bf00      	nop
 8008450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008452:	bc08      	pop	{r3}
 8008454:	469e      	mov	lr, r3
 8008456:	4770      	bx	lr

08008458 <_fini>:
 8008458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800845a:	bf00      	nop
 800845c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800845e:	bc08      	pop	{r3}
 8008460:	469e      	mov	lr, r3
 8008462:	4770      	bx	lr
