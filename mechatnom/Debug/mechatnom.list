
mechatnom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000877c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008904  08008904  00018904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008920  08008920  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008920  08008920  00018920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008928  08008928  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008928  08008928  00018928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800892c  0800892c  0001892c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008930  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000007d0  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000860  20000860  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dd51  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ec5  00000000  00000000  0003de11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f8  00000000  00000000  00041cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001170  00000000  00000000  00042fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002428c  00000000  00000000  00044140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018b75  00000000  00000000  000683cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d060a  00000000  00000000  00080f41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015154b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005060  00000000  00000000  001515a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080088ec 	.word	0x080088ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080088ec 	.word	0x080088ec

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <led_kontrol>:

#include "variables.h"
#include "usart.h"

void led_kontrol (void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	if (uart_echo==stop)
 80004c4:	4b2d      	ldr	r3, [pc, #180]	; (800057c <led_kontrol+0xbc>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	2b02      	cmp	r3, #2
 80004ca:	d127      	bne.n	800051c <led_kontrol+0x5c>
	{
		if (led_durum==0 && zaman>=1000)
 80004cc:	4b2c      	ldr	r3, [pc, #176]	; (8000580 <led_kontrol+0xc0>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d10b      	bne.n	80004ec <led_kontrol+0x2c>
 80004d4:	4b2b      	ldr	r3, [pc, #172]	; (8000584 <led_kontrol+0xc4>)
 80004d6:	881b      	ldrh	r3, [r3, #0]
 80004d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004dc:	d306      	bcc.n	80004ec <led_kontrol+0x2c>
		{
			led_durum=1;
 80004de:	4b28      	ldr	r3, [pc, #160]	; (8000580 <led_kontrol+0xc0>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	701a      	strb	r2, [r3, #0]
			zaman=0;
 80004e4:	4b27      	ldr	r3, [pc, #156]	; (8000584 <led_kontrol+0xc4>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	801a      	strh	r2, [r3, #0]
 80004ea:	e00e      	b.n	800050a <led_kontrol+0x4a>
		}
		else if(led_durum==1 && zaman>=1000)
 80004ec:	4b24      	ldr	r3, [pc, #144]	; (8000580 <led_kontrol+0xc0>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d10a      	bne.n	800050a <led_kontrol+0x4a>
 80004f4:	4b23      	ldr	r3, [pc, #140]	; (8000584 <led_kontrol+0xc4>)
 80004f6:	881b      	ldrh	r3, [r3, #0]
 80004f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004fc:	d305      	bcc.n	800050a <led_kontrol+0x4a>
		{
			led_durum=0;
 80004fe:	4b20      	ldr	r3, [pc, #128]	; (8000580 <led_kontrol+0xc0>)
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
			zaman=0;
 8000504:	4b1f      	ldr	r3, [pc, #124]	; (8000584 <led_kontrol+0xc4>)
 8000506:	2200      	movs	r2, #0
 8000508:	801a      	strh	r2, [r3, #0]
		}
		led_On_Off;
 800050a:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <led_kontrol+0xc0>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	461a      	mov	r2, r3
 8000510:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000514:	481c      	ldr	r0, [pc, #112]	; (8000588 <led_kontrol+0xc8>)
 8000516:	f001 f8cf 	bl	80016b8 <HAL_GPIO_WritePin>
		}
		led_On_Off;

	}

}
 800051a:	e02c      	b.n	8000576 <led_kontrol+0xb6>
	else if (uart_echo==start)
 800051c:	4b17      	ldr	r3, [pc, #92]	; (800057c <led_kontrol+0xbc>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d128      	bne.n	8000576 <led_kontrol+0xb6>
		if (led_durum==0 && zaman>=ledOff_sure)
 8000524:	4b16      	ldr	r3, [pc, #88]	; (8000580 <led_kontrol+0xc0>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d10c      	bne.n	8000546 <led_kontrol+0x86>
 800052c:	4b15      	ldr	r3, [pc, #84]	; (8000584 <led_kontrol+0xc4>)
 800052e:	881a      	ldrh	r2, [r3, #0]
 8000530:	4b16      	ldr	r3, [pc, #88]	; (800058c <led_kontrol+0xcc>)
 8000532:	881b      	ldrh	r3, [r3, #0]
 8000534:	429a      	cmp	r2, r3
 8000536:	d306      	bcc.n	8000546 <led_kontrol+0x86>
			led_durum=1;
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <led_kontrol+0xc0>)
 800053a:	2201      	movs	r2, #1
 800053c:	701a      	strb	r2, [r3, #0]
			zaman=0;
 800053e:	4b11      	ldr	r3, [pc, #68]	; (8000584 <led_kontrol+0xc4>)
 8000540:	2200      	movs	r2, #0
 8000542:	801a      	strh	r2, [r3, #0]
 8000544:	e00f      	b.n	8000566 <led_kontrol+0xa6>
		else if(led_durum==1 && zaman>=ledOn_sure)
 8000546:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <led_kontrol+0xc0>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b01      	cmp	r3, #1
 800054c:	d10b      	bne.n	8000566 <led_kontrol+0xa6>
 800054e:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <led_kontrol+0xc4>)
 8000550:	881a      	ldrh	r2, [r3, #0]
 8000552:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <led_kontrol+0xd0>)
 8000554:	881b      	ldrh	r3, [r3, #0]
 8000556:	429a      	cmp	r2, r3
 8000558:	d305      	bcc.n	8000566 <led_kontrol+0xa6>
			led_durum=0;
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <led_kontrol+0xc0>)
 800055c:	2200      	movs	r2, #0
 800055e:	701a      	strb	r2, [r3, #0]
			zaman=0;
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <led_kontrol+0xc4>)
 8000562:	2200      	movs	r2, #0
 8000564:	801a      	strh	r2, [r3, #0]
		led_On_Off;
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <led_kontrol+0xc0>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	461a      	mov	r2, r3
 800056c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000570:	4805      	ldr	r0, [pc, #20]	; (8000588 <led_kontrol+0xc8>)
 8000572:	f001 f8a1 	bl	80016b8 <HAL_GPIO_WritePin>
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	200000d1 	.word	0x200000d1
 8000580:	200000be 	.word	0x200000be
 8000584:	200000ca 	.word	0x200000ca
 8000588:	40020c00 	.word	0x40020c00
 800058c:	200000d6 	.word	0x200000d6
 8000590:	200000ce 	.word	0x200000ce

08000594 <uart_veri_oku>:
 *		komut 0x04 ise LedOff suresinin degerini ayarlar
 *		sure degerleri veri_hb ve veri_lb nin 16 bit veriye donusturulmesi ile elde e#dilir.
 */

void uart_veri_oku(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
	IT_uart_3_kontrol++;
 800059a:	4b3c      	ldr	r3, [pc, #240]	; (800068c <uart_veri_oku+0xf8>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	3301      	adds	r3, #1
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	4b3a      	ldr	r3, [pc, #232]	; (800068c <uart_veri_oku+0xf8>)
 80005a4:	701a      	strb	r2, [r3, #0]

	if(IT_uart_3_kontrol == sizeof(RX_veri))
 80005a6:	4b39      	ldr	r3, [pc, #228]	; (800068c <uart_veri_oku+0xf8>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b0a      	cmp	r3, #10
 80005ac:	d16a      	bne.n	8000684 <uart_veri_oku+0xf0>
	{
		IT_uart_3_kontrol = 0;
 80005ae:	4b37      	ldr	r3, [pc, #220]	; (800068c <uart_veri_oku+0xf8>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	701a      	strb	r2, [r3, #0]
		for (uint8_t i=0; i<sizeof(RX_veri); i++)
 80005b4:	2300      	movs	r3, #0
 80005b6:	71fb      	strb	r3, [r7, #7]
 80005b8:	e038      	b.n	800062c <uart_veri_oku+0x98>
		{
			if((RX_veri[i] == 0x36) && (RX_veri[i + 1] == 0x41))
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	4a34      	ldr	r2, [pc, #208]	; (8000690 <uart_veri_oku+0xfc>)
 80005be:	5cd3      	ldrb	r3, [r2, r3]
 80005c0:	2b36      	cmp	r3, #54	; 0x36
 80005c2:	d12d      	bne.n	8000620 <uart_veri_oku+0x8c>
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	3301      	adds	r3, #1
 80005c8:	4a31      	ldr	r2, [pc, #196]	; (8000690 <uart_veri_oku+0xfc>)
 80005ca:	5cd3      	ldrb	r3, [r2, r3]
 80005cc:	2b41      	cmp	r3, #65	; 0x41
 80005ce:	d127      	bne.n	8000620 <uart_veri_oku+0x8c>
			{
				komut = RX_veri[i+2];
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	3302      	adds	r3, #2
 80005d4:	4a2e      	ldr	r2, [pc, #184]	; (8000690 <uart_veri_oku+0xfc>)
 80005d6:	5cd2      	ldrb	r2, [r2, r3]
 80005d8:	4b2e      	ldr	r3, [pc, #184]	; (8000694 <uart_veri_oku+0x100>)
 80005da:	701a      	strb	r2, [r3, #0]
				veri_hb = RX_veri[i+3];
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	3303      	adds	r3, #3
 80005e0:	4a2b      	ldr	r2, [pc, #172]	; (8000690 <uart_veri_oku+0xfc>)
 80005e2:	5cd2      	ldrb	r2, [r2, r3]
 80005e4:	4b2c      	ldr	r3, [pc, #176]	; (8000698 <uart_veri_oku+0x104>)
 80005e6:	701a      	strb	r2, [r3, #0]
				veri_lb = RX_veri[i+4];
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	3304      	adds	r3, #4
 80005ec:	4a28      	ldr	r2, [pc, #160]	; (8000690 <uart_veri_oku+0xfc>)
 80005ee:	5cd2      	ldrb	r2, [r2, r3]
 80005f0:	4b2a      	ldr	r3, [pc, #168]	; (800069c <uart_veri_oku+0x108>)
 80005f2:	701a      	strb	r2, [r3, #0]

				veri= ((RX_veri[i+3] & 0x00FF) << 8) | (RX_veri[i+4] & 0x00FF);
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	3303      	adds	r3, #3
 80005f8:	4a25      	ldr	r2, [pc, #148]	; (8000690 <uart_veri_oku+0xfc>)
 80005fa:	5cd3      	ldrb	r3, [r2, r3]
 80005fc:	021b      	lsls	r3, r3, #8
 80005fe:	b21a      	sxth	r2, r3
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	3304      	adds	r3, #4
 8000604:	4922      	ldr	r1, [pc, #136]	; (8000690 <uart_veri_oku+0xfc>)
 8000606:	5ccb      	ldrb	r3, [r1, r3]
 8000608:	b21b      	sxth	r3, r3
 800060a:	4313      	orrs	r3, r2
 800060c:	b21b      	sxth	r3, r3
 800060e:	b29a      	uxth	r2, r3
 8000610:	4b23      	ldr	r3, [pc, #140]	; (80006a0 <uart_veri_oku+0x10c>)
 8000612:	801a      	strh	r2, [r3, #0]

				uart_baglanti_hatasi = 0;// uarttan alinan veri setinde anahtar uymuyorsa yanlis veri alındi diye uyari olusturulabilir
 8000614:	4b23      	ldr	r3, [pc, #140]	; (80006a4 <uart_veri_oku+0x110>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]

				i = sizeof(RX_veri);
 800061a:	230a      	movs	r3, #10
 800061c:	71fb      	strb	r3, [r7, #7]
 800061e:	e002      	b.n	8000626 <uart_veri_oku+0x92>
			}
			else
				uart_baglanti_hatasi = 1;
 8000620:	4b20      	ldr	r3, [pc, #128]	; (80006a4 <uart_veri_oku+0x110>)
 8000622:	2201      	movs	r2, #1
 8000624:	701a      	strb	r2, [r3, #0]
		for (uint8_t i=0; i<sizeof(RX_veri); i++)
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	3301      	adds	r3, #1
 800062a:	71fb      	strb	r3, [r7, #7]
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	2b09      	cmp	r3, #9
 8000630:	d9c3      	bls.n	80005ba <uart_veri_oku+0x26>
		}

		switch (komut){
 8000632:	4b18      	ldr	r3, [pc, #96]	; (8000694 <uart_veri_oku+0x100>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	3b01      	subs	r3, #1
 8000638:	2b03      	cmp	r3, #3
 800063a:	d81d      	bhi.n	8000678 <uart_veri_oku+0xe4>
 800063c:	a201      	add	r2, pc, #4	; (adr r2, 8000644 <uart_veri_oku+0xb0>)
 800063e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000642:	bf00      	nop
 8000644:	08000655 	.word	0x08000655
 8000648:	0800065d 	.word	0x0800065d
 800064c:	08000665 	.word	0x08000665
 8000650:	0800066f 	.word	0x0800066f
		case 0x01:
		{
			uart_echo = start;
 8000654:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <uart_veri_oku+0x114>)
 8000656:	2201      	movs	r2, #1
 8000658:	701a      	strb	r2, [r3, #0]
			break;
 800065a:	e00d      	b.n	8000678 <uart_veri_oku+0xe4>
		}
		case 0x02:
		{
			uart_echo = stop;
 800065c:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <uart_veri_oku+0x114>)
 800065e:	2202      	movs	r2, #2
 8000660:	701a      	strb	r2, [r3, #0]
			break;
 8000662:	e009      	b.n	8000678 <uart_veri_oku+0xe4>
		}
		case 0x03:
		{
			ledOn_sure = veri;
 8000664:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <uart_veri_oku+0x10c>)
 8000666:	881a      	ldrh	r2, [r3, #0]
 8000668:	4b10      	ldr	r3, [pc, #64]	; (80006ac <uart_veri_oku+0x118>)
 800066a:	801a      	strh	r2, [r3, #0]
			break;
 800066c:	e004      	b.n	8000678 <uart_veri_oku+0xe4>
		}
		case 0x04:
		{
			ledOff_sure = veri;
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <uart_veri_oku+0x10c>)
 8000670:	881a      	ldrh	r2, [r3, #0]
 8000672:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <uart_veri_oku+0x11c>)
 8000674:	801a      	strh	r2, [r3, #0]
			break;
 8000676:	bf00      	nop
		{
			;
		}
		}

		if (uart_echo == start) // stop komutu gelmedigi surece her uart verisi alindiktan sonra veriyi echo yapacak
 8000678:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <uart_veri_oku+0x114>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d101      	bne.n	8000684 <uart_veri_oku+0xf0>
		{
			uart_veri_gonder();
 8000680:	f000 f818 	bl	80006b4 <uart_veri_gonder>
		}
	}
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200000d2 	.word	0x200000d2
 8000690:	200000c0 	.word	0x200000c0
 8000694:	200000d0 	.word	0x200000d0
 8000698:	200000cc 	.word	0x200000cc
 800069c:	200000bd 	.word	0x200000bd
 80006a0:	200000d4 	.word	0x200000d4
 80006a4:	200000bc 	.word	0x200000bc
 80006a8:	200000d1 	.word	0x200000d1
 80006ac:	200000ce 	.word	0x200000ce
 80006b0:	200000d6 	.word	0x200000d6

080006b4 <uart_veri_gonder>:
 *			alıcı tarafta veri kaybı olmasın diye iki kez gönderiliyor.
 */


void uart_veri_gonder(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
	TX_veri[0]=0x36; // veri seti anahtar kodu
 80006ba:	4b16      	ldr	r3, [pc, #88]	; (8000714 <uart_veri_gonder+0x60>)
 80006bc:	2236      	movs	r2, #54	; 0x36
 80006be:	701a      	strb	r2, [r3, #0]
	TX_veri[1]=0x41; // veri seti anahtar kodu
 80006c0:	4b14      	ldr	r3, [pc, #80]	; (8000714 <uart_veri_gonder+0x60>)
 80006c2:	2241      	movs	r2, #65	; 0x41
 80006c4:	705a      	strb	r2, [r3, #1]
	TX_veri[2]=komut;
 80006c6:	4b14      	ldr	r3, [pc, #80]	; (8000718 <uart_veri_gonder+0x64>)
 80006c8:	781a      	ldrb	r2, [r3, #0]
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <uart_veri_gonder+0x60>)
 80006cc:	709a      	strb	r2, [r3, #2]
	TX_veri[3]=veri_hb; // gonderilen verinin high biti
 80006ce:	4b13      	ldr	r3, [pc, #76]	; (800071c <uart_veri_gonder+0x68>)
 80006d0:	781a      	ldrb	r2, [r3, #0]
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <uart_veri_gonder+0x60>)
 80006d4:	70da      	strb	r2, [r3, #3]
	TX_veri[4]=veri_lb; // gonderilen verinin low biti
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <uart_veri_gonder+0x6c>)
 80006d8:	781a      	ldrb	r2, [r3, #0]
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <uart_veri_gonder+0x60>)
 80006dc:	711a      	strb	r2, [r3, #4]

	for (uint8_t i=0;i<5;i++) // Alici taraf veriyi kacirirsa diye tekrarli gonderiyor
 80006de:	2300      	movs	r3, #0
 80006e0:	71fb      	strb	r3, [r7, #7]
 80006e2:	e009      	b.n	80006f8 <uart_veri_gonder+0x44>
	{
		TX_veri[i+5]=TX_veri[i];
 80006e4:	79fa      	ldrb	r2, [r7, #7]
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	3305      	adds	r3, #5
 80006ea:	490a      	ldr	r1, [pc, #40]	; (8000714 <uart_veri_gonder+0x60>)
 80006ec:	5c89      	ldrb	r1, [r1, r2]
 80006ee:	4a09      	ldr	r2, [pc, #36]	; (8000714 <uart_veri_gonder+0x60>)
 80006f0:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0;i<5;i++) // Alici taraf veriyi kacirirsa diye tekrarli gonderiyor
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	3301      	adds	r3, #1
 80006f6:	71fb      	strb	r3, [r7, #7]
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	2b04      	cmp	r3, #4
 80006fc:	d9f2      	bls.n	80006e4 <uart_veri_gonder+0x30>
	}

	HAL_UART_Transmit(&huart3, (uint8_t *)&TX_veri, sizeof(TX_veri), 250);
 80006fe:	23fa      	movs	r3, #250	; 0xfa
 8000700:	220a      	movs	r2, #10
 8000702:	4904      	ldr	r1, [pc, #16]	; (8000714 <uart_veri_gonder+0x60>)
 8000704:	4807      	ldr	r0, [pc, #28]	; (8000724 <uart_veri_gonder+0x70>)
 8000706:	f003 feae 	bl	8004466 <HAL_UART_Transmit>
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	200000d8 	.word	0x200000d8
 8000718:	200000d0 	.word	0x200000d0
 800071c:	200000cc 	.word	0x200000cc
 8000720:	200000bd 	.word	0x200000bd
 8000724:	2000012c 	.word	0x2000012c

08000728 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08c      	sub	sp, #48	; 0x30
 800072c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	61bb      	str	r3, [r7, #24]
 8000742:	4b93      	ldr	r3, [pc, #588]	; (8000990 <MX_GPIO_Init+0x268>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a92      	ldr	r2, [pc, #584]	; (8000990 <MX_GPIO_Init+0x268>)
 8000748:	f043 0310 	orr.w	r3, r3, #16
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b90      	ldr	r3, [pc, #576]	; (8000990 <MX_GPIO_Init+0x268>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0310 	and.w	r3, r3, #16
 8000756:	61bb      	str	r3, [r7, #24]
 8000758:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]
 800075e:	4b8c      	ldr	r3, [pc, #560]	; (8000990 <MX_GPIO_Init+0x268>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a8b      	ldr	r2, [pc, #556]	; (8000990 <MX_GPIO_Init+0x268>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b89      	ldr	r3, [pc, #548]	; (8000990 <MX_GPIO_Init+0x268>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	617b      	str	r3, [r7, #20]
 8000774:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b85      	ldr	r3, [pc, #532]	; (8000990 <MX_GPIO_Init+0x268>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a84      	ldr	r2, [pc, #528]	; (8000990 <MX_GPIO_Init+0x268>)
 8000780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b82      	ldr	r3, [pc, #520]	; (8000990 <MX_GPIO_Init+0x268>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b7e      	ldr	r3, [pc, #504]	; (8000990 <MX_GPIO_Init+0x268>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a7d      	ldr	r2, [pc, #500]	; (8000990 <MX_GPIO_Init+0x268>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b7b      	ldr	r3, [pc, #492]	; (8000990 <MX_GPIO_Init+0x268>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b77      	ldr	r3, [pc, #476]	; (8000990 <MX_GPIO_Init+0x268>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a76      	ldr	r2, [pc, #472]	; (8000990 <MX_GPIO_Init+0x268>)
 80007b8:	f043 0302 	orr.w	r3, r3, #2
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b74      	ldr	r3, [pc, #464]	; (8000990 <MX_GPIO_Init+0x268>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b70      	ldr	r3, [pc, #448]	; (8000990 <MX_GPIO_Init+0x268>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a6f      	ldr	r2, [pc, #444]	; (8000990 <MX_GPIO_Init+0x268>)
 80007d4:	f043 0308 	orr.w	r3, r3, #8
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b6d      	ldr	r3, [pc, #436]	; (8000990 <MX_GPIO_Init+0x268>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0308 	and.w	r3, r3, #8
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2108      	movs	r1, #8
 80007ea:	486a      	ldr	r0, [pc, #424]	; (8000994 <MX_GPIO_Init+0x26c>)
 80007ec:	f000 ff64 	bl	80016b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	2101      	movs	r1, #1
 80007f4:	4868      	ldr	r0, [pc, #416]	; (8000998 <MX_GPIO_Init+0x270>)
 80007f6:	f000 ff5f 	bl	80016b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007fa:	2200      	movs	r2, #0
 80007fc:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000800:	4866      	ldr	r0, [pc, #408]	; (800099c <MX_GPIO_Init+0x274>)
 8000802:	f000 ff59 	bl	80016b8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000806:	2308      	movs	r3, #8
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	485d      	ldr	r0, [pc, #372]	; (8000994 <MX_GPIO_Init+0x26c>)
 800081e:	f000 fdaf 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000822:	2301      	movs	r3, #1
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4619      	mov	r1, r3
 8000838:	4857      	ldr	r0, [pc, #348]	; (8000998 <MX_GPIO_Init+0x270>)
 800083a:	f000 fda1 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800083e:	2308      	movs	r3, #8
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000842:	2302      	movs	r3, #2
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800084e:	2305      	movs	r3, #5
 8000850:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	4619      	mov	r1, r3
 8000858:	484f      	ldr	r0, [pc, #316]	; (8000998 <MX_GPIO_Init+0x270>)
 800085a:	f000 fd91 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800085e:	2301      	movs	r3, #1
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000862:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	484b      	ldr	r0, [pc, #300]	; (80009a0 <MX_GPIO_Init+0x278>)
 8000874:	f000 fd84 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000878:	2310      	movs	r3, #16
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000888:	2306      	movs	r3, #6
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	4843      	ldr	r0, [pc, #268]	; (80009a0 <MX_GPIO_Init+0x278>)
 8000894:	f000 fd74 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000898:	23e0      	movs	r3, #224	; 0xe0
 800089a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	2302      	movs	r3, #2
 800089e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008a8:	2305      	movs	r3, #5
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	4619      	mov	r1, r3
 80008b2:	483b      	ldr	r0, [pc, #236]	; (80009a0 <MX_GPIO_Init+0x278>)
 80008b4:	f000 fd64 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008b8:	2304      	movs	r3, #4
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4619      	mov	r1, r3
 80008ca:	4836      	ldr	r0, [pc, #216]	; (80009a4 <MX_GPIO_Init+0x27c>)
 80008cc:	f000 fd58 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008e2:	2305      	movs	r3, #5
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	482d      	ldr	r0, [pc, #180]	; (80009a4 <MX_GPIO_Init+0x27c>)
 80008ee:	f000 fd47 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008f2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008f6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	4824      	ldr	r0, [pc, #144]	; (800099c <MX_GPIO_Init+0x274>)
 800090c:	f000 fd38 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000910:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000916:	2302      	movs	r3, #2
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000922:	2306      	movs	r3, #6
 8000924:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	481a      	ldr	r0, [pc, #104]	; (8000998 <MX_GPIO_Init+0x270>)
 800092e:	f000 fd27 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000932:	2320      	movs	r3, #32
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000936:	2300      	movs	r3, #0
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	4815      	ldr	r0, [pc, #84]	; (800099c <MX_GPIO_Init+0x274>)
 8000946:	f000 fd1b 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800094a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000950:	2312      	movs	r3, #18
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000954:	2301      	movs	r3, #1
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800095c:	2304      	movs	r3, #4
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	480f      	ldr	r0, [pc, #60]	; (80009a4 <MX_GPIO_Init+0x27c>)
 8000968:	f000 fd0a 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800096c:	2302      	movs	r3, #2
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000970:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4804      	ldr	r0, [pc, #16]	; (8000994 <MX_GPIO_Init+0x26c>)
 8000982:	f000 fcfd 	bl	8001380 <HAL_GPIO_Init>

}
 8000986:	bf00      	nop
 8000988:	3730      	adds	r7, #48	; 0x30
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800
 8000994:	40021000 	.word	0x40021000
 8000998:	40020800 	.word	0x40020800
 800099c:	40020c00 	.word	0x40020c00
 80009a0:	40020000 	.word	0x40020000
 80009a4:	40020400 	.word	0x40020400

080009a8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80009ac:	f000 faae 	bl	8000f0c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80009b0:	f000 f82e 	bl	8000a10 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80009b4:	f7ff feb8 	bl	8000728 <MX_GPIO_Init>
	MX_USB_HOST_Init();
 80009b8:	f007 fb86 	bl	80080c8 <MX_USB_HOST_Init>
	MX_TIM3_Init();
 80009bc:	f000 f96a 	bl	8000c94 <MX_TIM3_Init>
	MX_USART3_UART_Init();
 80009c0:	f000 f9de 	bl	8000d80 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim3);
 80009c4:	480d      	ldr	r0, [pc, #52]	; (80009fc <main+0x54>)
 80009c6:	f003 f8c5 	bl	8003b54 <HAL_TIM_Base_Start_IT>
	__HAL_UART_ENABLE_IT(&huart3,UART_IT_RXNE);
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <main+0x58>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	68da      	ldr	r2, [r3, #12]
 80009d0:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <main+0x58>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f042 0220 	orr.w	r2, r2, #32
 80009d8:	60da      	str	r2, [r3, #12]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	//baslangic deger atamalari
	uart_echo = stop;
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <main+0x5c>)
 80009dc:	2202      	movs	r2, #2
 80009de:	701a      	strb	r2, [r3, #0]
	ledOff_sure=3000;
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <main+0x60>)
 80009e2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80009e6:	801a      	strh	r2, [r3, #0]
	ledOn_sure=1000;
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <main+0x64>)
 80009ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009ee:	801a      	strh	r2, [r3, #0]
	while (1)
	{
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 80009f0:	f007 fb90 	bl	8008114 <MX_USB_HOST_Process>

		/* USER CODE BEGIN 3 */
		led_kontrol();
 80009f4:	f7ff fd64 	bl	80004c0 <led_kontrol>
		MX_USB_HOST_Process();
 80009f8:	e7fa      	b.n	80009f0 <main+0x48>
 80009fa:	bf00      	nop
 80009fc:	200000e4 	.word	0x200000e4
 8000a00:	2000012c 	.word	0x2000012c
 8000a04:	200000d1 	.word	0x200000d1
 8000a08:	200000d6 	.word	0x200000d6
 8000a0c:	200000ce 	.word	0x200000ce

08000a10 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b094      	sub	sp, #80	; 0x50
 8000a14:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a16:	f107 0320 	add.w	r3, r7, #32
 8000a1a:	2230      	movs	r2, #48	; 0x30
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f007 fe94 	bl	800874c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000a34:	2300      	movs	r3, #0
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	4b28      	ldr	r3, [pc, #160]	; (8000adc <SystemClock_Config+0xcc>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	4a27      	ldr	r2, [pc, #156]	; (8000adc <SystemClock_Config+0xcc>)
 8000a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a42:	6413      	str	r3, [r2, #64]	; 0x40
 8000a44:	4b25      	ldr	r3, [pc, #148]	; (8000adc <SystemClock_Config+0xcc>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a50:	2300      	movs	r3, #0
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	4b22      	ldr	r3, [pc, #136]	; (8000ae0 <SystemClock_Config+0xd0>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a21      	ldr	r2, [pc, #132]	; (8000ae0 <SystemClock_Config+0xd0>)
 8000a5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a5e:	6013      	str	r3, [r2, #0]
 8000a60:	4b1f      	ldr	r3, [pc, #124]	; (8000ae0 <SystemClock_Config+0xd0>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a76:	2302      	movs	r3, #2
 8000a78:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000a80:	2304      	movs	r3, #4
 8000a82:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000a84:	23a8      	movs	r3, #168	; 0xa8
 8000a86:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a8c:	2307      	movs	r3, #7
 8000a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a90:	f107 0320 	add.w	r3, r7, #32
 8000a94:	4618      	mov	r0, r3
 8000a96:	f002 fb99 	bl	80031cc <HAL_RCC_OscConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000aa0:	f000 f820 	bl	8000ae4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa4:	230f      	movs	r3, #15
 8000aa6:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000aac:	2380      	movs	r3, #128	; 0x80
 8000aae:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aba:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	2102      	movs	r1, #2
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f002 fdfa 	bl	80036bc <HAL_RCC_ClockConfig>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8000ace:	f000 f809 	bl	8000ae4 <Error_Handler>
	}
}
 8000ad2:	bf00      	nop
 8000ad4:	3750      	adds	r7, #80	; 0x50
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40007000 	.word	0x40007000

08000ae4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000aec:	e7fe      	b.n	8000aec <Error_Handler+0x8>
	...

08000af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <HAL_MspInit+0x4c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	4a0f      	ldr	r2, [pc, #60]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b04:	6453      	str	r3, [r2, #68]	; 0x44
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	4a08      	ldr	r2, [pc, #32]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b20:	6413      	str	r3, [r2, #64]	; 0x40
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b2e:	2007      	movs	r0, #7
 8000b30:	f000 fb52 	bl	80011d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40023800 	.word	0x40023800

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8000b44:	e7fe      	b.n	8000b44 <NMI_Handler+0x4>

08000b46 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8000b4a:	e7fe      	b.n	8000b4a <HardFault_Handler+0x4>

08000b4c <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8000b50:	e7fe      	b.n	8000b50 <MemManage_Handler+0x4>

08000b52 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8000b56:	e7fe      	b.n	8000b56 <BusFault_Handler+0x4>

08000b58 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8000b5c:	e7fe      	b.n	8000b5c <UsageFault_Handler+0x4>

08000b5e <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000b8c:	f000 fa10 	bl	8000fb0 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */
	zaman++;
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <TIM3_IRQHandler+0x2c>)
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <TIM3_IRQHandler+0x2c>)
 8000ba2:	801a      	strh	r2, [r3, #0]
	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 8000ba4:	4807      	ldr	r0, [pc, #28]	; (8000bc4 <TIM3_IRQHandler+0x30>)
 8000ba6:	f003 f845 	bl	8003c34 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM3_IRQn 1 */
	__HAL_UART_ENABLE_IT(&huart3,UART_IT_RXNE);
 8000baa:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <TIM3_IRQHandler+0x34>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	68da      	ldr	r2, [r3, #12]
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <TIM3_IRQHandler+0x34>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f042 0220 	orr.w	r2, r2, #32
 8000bb8:	60da      	str	r2, [r3, #12]
	/* USER CODE END TIM3_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	200000ca 	.word	0x200000ca
 8000bc4:	200000e4 	.word	0x200000e4
 8000bc8:	2000012c 	.word	0x2000012c

08000bcc <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART3_IRQn 0 */
	HAL_UART_Receive_IT(&huart3, (uint8_t*)&RX_veri, sizeof(RX_veri));
 8000bd0:	220a      	movs	r2, #10
 8000bd2:	4905      	ldr	r1, [pc, #20]	; (8000be8 <USART3_IRQHandler+0x1c>)
 8000bd4:	4805      	ldr	r0, [pc, #20]	; (8000bec <USART3_IRQHandler+0x20>)
 8000bd6:	f003 fcd8 	bl	800458a <HAL_UART_Receive_IT>
	uart_veri_oku();
 8000bda:	f7ff fcdb 	bl	8000594 <uart_veri_oku>

	/* USER CODE END USART3_IRQn 0 */
	HAL_UART_IRQHandler(&huart3);
 8000bde:	4803      	ldr	r0, [pc, #12]	; (8000bec <USART3_IRQHandler+0x20>)
 8000be0:	f003 fd04 	bl	80045ec <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART3_IRQn 1 */

	/* USER CODE END USART3_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	200000c0 	.word	0x200000c0
 8000bec:	2000012c 	.word	0x2000012c

08000bf0 <OTG_FS_IRQHandler>:

/**
 * @brief This function handles USB On The Go FS global interrupt.
 */
void OTG_FS_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN OTG_FS_IRQn 0 */

	/* USER CODE END OTG_FS_IRQn 0 */
	HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <OTG_FS_IRQHandler+0x10>)
 8000bf6:	f000 ffe3 	bl	8001bc0 <HAL_HCD_IRQHandler>
	/* USER CODE BEGIN OTG_FS_IRQn 1 */

	/* USER CODE END OTG_FS_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	2000054c 	.word	0x2000054c

08000c04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c0c:	4a14      	ldr	r2, [pc, #80]	; (8000c60 <_sbrk+0x5c>)
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <_sbrk+0x60>)
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c18:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <_sbrk+0x64>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d102      	bne.n	8000c26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c20:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <_sbrk+0x64>)
 8000c22:	4a12      	ldr	r2, [pc, #72]	; (8000c6c <_sbrk+0x68>)
 8000c24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <_sbrk+0x64>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d207      	bcs.n	8000c44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c34:	f007 fd50 	bl	80086d8 <__errno>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c42:	e009      	b.n	8000c58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c4a:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <_sbrk+0x64>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	4a05      	ldr	r2, [pc, #20]	; (8000c68 <_sbrk+0x64>)
 8000c54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c56:	68fb      	ldr	r3, [r7, #12]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3718      	adds	r7, #24
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20020000 	.word	0x20020000
 8000c64:	00000400 	.word	0x00000400
 8000c68:	200000ac 	.word	0x200000ac
 8000c6c:	20000860 	.word	0x20000860

08000c70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <SystemInit+0x20>)
 8000c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c7a:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <SystemInit+0x20>)
 8000c7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c9a:	f107 0308 	add.w	r3, r7, #8
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca8:	463b      	mov	r3, r7
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cb0:	4b1d      	ldr	r3, [pc, #116]	; (8000d28 <MX_TIM3_Init+0x94>)
 8000cb2:	4a1e      	ldr	r2, [pc, #120]	; (8000d2c <MX_TIM3_Init+0x98>)
 8000cb4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 85;
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <MX_TIM3_Init+0x94>)
 8000cb8:	2255      	movs	r2, #85	; 0x55
 8000cba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000cbc:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <MX_TIM3_Init+0x94>)
 8000cbe:	2210      	movs	r2, #16
 8000cc0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1001;
 8000cc2:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <MX_TIM3_Init+0x94>)
 8000cc4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8000cc8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cca:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <MX_TIM3_Init+0x94>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd0:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <MX_TIM3_Init+0x94>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cd6:	4814      	ldr	r0, [pc, #80]	; (8000d28 <MX_TIM3_Init+0x94>)
 8000cd8:	f002 feec 	bl	8003ab4 <HAL_TIM_Base_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000ce2:	f7ff feff 	bl	8000ae4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ce6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cec:	f107 0308 	add.w	r3, r7, #8
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	480d      	ldr	r0, [pc, #52]	; (8000d28 <MX_TIM3_Init+0x94>)
 8000cf4:	f003 f8a6 	bl	8003e44 <HAL_TIM_ConfigClockSource>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000cfe:	f7ff fef1 	bl	8000ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d02:	2300      	movs	r3, #0
 8000d04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4806      	ldr	r0, [pc, #24]	; (8000d28 <MX_TIM3_Init+0x94>)
 8000d10:	f003 facc 	bl	80042ac <HAL_TIMEx_MasterConfigSynchronization>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000d1a:	f7ff fee3 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	200000e4 	.word	0x200000e4
 8000d2c:	40000400 	.word	0x40000400

08000d30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a0e      	ldr	r2, [pc, #56]	; (8000d78 <HAL_TIM_Base_MspInit+0x48>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d115      	bne.n	8000d6e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <HAL_TIM_Base_MspInit+0x4c>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	4a0c      	ldr	r2, [pc, #48]	; (8000d7c <HAL_TIM_Base_MspInit+0x4c>)
 8000d4c:	f043 0302 	orr.w	r3, r3, #2
 8000d50:	6413      	str	r3, [r2, #64]	; 0x40
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <HAL_TIM_Base_MspInit+0x4c>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2100      	movs	r1, #0
 8000d62:	201d      	movs	r0, #29
 8000d64:	f000 fa43 	bl	80011ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d68:	201d      	movs	r0, #29
 8000d6a:	f000 fa5c 	bl	8001226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000d6e:	bf00      	nop
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40000400 	.word	0x40000400
 8000d7c:	40023800 	.word	0x40023800

08000d80 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d84:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <MX_USART3_UART_Init+0x4c>)
 8000d86:	4a12      	ldr	r2, [pc, #72]	; (8000dd0 <MX_USART3_UART_Init+0x50>)
 8000d88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <MX_USART3_UART_Init+0x4c>)
 8000d8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <MX_USART3_UART_Init+0x4c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <MX_USART3_UART_Init+0x4c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <MX_USART3_UART_Init+0x4c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000da4:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <MX_USART3_UART_Init+0x4c>)
 8000da6:	220c      	movs	r2, #12
 8000da8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <MX_USART3_UART_Init+0x4c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <MX_USART3_UART_Init+0x4c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000db6:	4805      	ldr	r0, [pc, #20]	; (8000dcc <MX_USART3_UART_Init+0x4c>)
 8000db8:	f003 fb08 	bl	80043cc <HAL_UART_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000dc2:	f7ff fe8f 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	2000012c 	.word	0x2000012c
 8000dd0:	40004800 	.word	0x40004800

08000dd4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a2d      	ldr	r2, [pc, #180]	; (8000ea8 <HAL_UART_MspInit+0xd4>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d153      	bne.n	8000e9e <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	4b2c      	ldr	r3, [pc, #176]	; (8000eac <HAL_UART_MspInit+0xd8>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	4a2b      	ldr	r2, [pc, #172]	; (8000eac <HAL_UART_MspInit+0xd8>)
 8000e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e04:	6413      	str	r3, [r2, #64]	; 0x40
 8000e06:	4b29      	ldr	r3, [pc, #164]	; (8000eac <HAL_UART_MspInit+0xd8>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	4b25      	ldr	r3, [pc, #148]	; (8000eac <HAL_UART_MspInit+0xd8>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a24      	ldr	r2, [pc, #144]	; (8000eac <HAL_UART_MspInit+0xd8>)
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b22      	ldr	r3, [pc, #136]	; (8000eac <HAL_UART_MspInit+0xd8>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	4b1e      	ldr	r3, [pc, #120]	; (8000eac <HAL_UART_MspInit+0xd8>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a1d      	ldr	r2, [pc, #116]	; (8000eac <HAL_UART_MspInit+0xd8>)
 8000e38:	f043 0308 	orr.w	r3, r3, #8
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <HAL_UART_MspInit+0xd8>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0308 	and.w	r3, r3, #8
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e5c:	2307      	movs	r3, #7
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4619      	mov	r1, r3
 8000e66:	4812      	ldr	r0, [pc, #72]	; (8000eb0 <HAL_UART_MspInit+0xdc>)
 8000e68:	f000 fa8a 	bl	8001380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e7e:	2307      	movs	r3, #7
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4619      	mov	r1, r3
 8000e88:	480a      	ldr	r0, [pc, #40]	; (8000eb4 <HAL_UART_MspInit+0xe0>)
 8000e8a:	f000 fa79 	bl	8001380 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2100      	movs	r1, #0
 8000e92:	2027      	movs	r0, #39	; 0x27
 8000e94:	f000 f9ab 	bl	80011ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e98:	2027      	movs	r0, #39	; 0x27
 8000e9a:	f000 f9c4 	bl	8001226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e9e:	bf00      	nop
 8000ea0:	3728      	adds	r7, #40	; 0x28
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40004800 	.word	0x40004800
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40020400 	.word	0x40020400
 8000eb4:	40020c00 	.word	0x40020c00

08000eb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000eb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ebc:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ebe:	490e      	ldr	r1, [pc, #56]	; (8000ef8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ec0:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec4:	e002      	b.n	8000ecc <LoopCopyDataInit>

08000ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eca:	3304      	adds	r3, #4

08000ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed0:	d3f9      	bcc.n	8000ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ed4:	4c0b      	ldr	r4, [pc, #44]	; (8000f04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed8:	e001      	b.n	8000ede <LoopFillZerobss>

08000eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000edc:	3204      	adds	r2, #4

08000ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee0:	d3fb      	bcc.n	8000eda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ee2:	f7ff fec5 	bl	8000c70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ee6:	f007 fbfd 	bl	80086e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eea:	f7ff fd5d 	bl	80009a8 <main>
  bx  lr    
 8000eee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ef0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ef4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000efc:	08008930 	.word	0x08008930
  ldr r2, =_sbss
 8000f00:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000f04:	20000860 	.word	0x20000860

08000f08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f08:	e7fe      	b.n	8000f08 <ADC_IRQHandler>
	...

08000f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <HAL_Init+0x40>)
 8000f16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <HAL_Init+0x40>)
 8000f22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <HAL_Init+0x40>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a07      	ldr	r2, [pc, #28]	; (8000f4c <HAL_Init+0x40>)
 8000f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f34:	2003      	movs	r0, #3
 8000f36:	f000 f94f 	bl	80011d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f000 f808 	bl	8000f50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f40:	f7ff fdd6 	bl	8000af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40023c00 	.word	0x40023c00

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <HAL_InitTick+0x54>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_InitTick+0x58>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4619      	mov	r1, r3
 8000f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 f967 	bl	8001242 <HAL_SYSTICK_Config>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e00e      	b.n	8000f9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b0f      	cmp	r3, #15
 8000f82:	d80a      	bhi.n	8000f9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f84:	2200      	movs	r2, #0
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8c:	f000 f92f 	bl	80011ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f90:	4a06      	ldr	r2, [pc, #24]	; (8000fac <HAL_InitTick+0x5c>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f96:	2300      	movs	r3, #0
 8000f98:	e000      	b.n	8000f9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	20000004 	.word	0x20000004

08000fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_IncTick+0x20>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_IncTick+0x24>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <HAL_IncTick+0x24>)
 8000fc2:	6013      	str	r3, [r2, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000008 	.word	0x20000008
 8000fd4:	20000170 	.word	0x20000170

08000fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return uwTick;
 8000fdc:	4b03      	ldr	r3, [pc, #12]	; (8000fec <HAL_GetTick+0x14>)
 8000fde:	681b      	ldr	r3, [r3, #0]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000170 	.word	0x20000170

08000ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff8:	f7ff ffee 	bl	8000fd8 <HAL_GetTick>
 8000ffc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001008:	d005      	beq.n	8001016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <HAL_Delay+0x44>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4413      	add	r3, r2
 8001014:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001016:	bf00      	nop
 8001018:	f7ff ffde 	bl	8000fd8 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	429a      	cmp	r2, r3
 8001026:	d8f7      	bhi.n	8001018 <HAL_Delay+0x28>
  {
  }
}
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000008 	.word	0x20000008

08001038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <__NVIC_SetPriorityGrouping+0x44>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001054:	4013      	ands	r3, r2
 8001056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001060:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800106a:	4a04      	ldr	r2, [pc, #16]	; (800107c <__NVIC_SetPriorityGrouping+0x44>)
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	60d3      	str	r3, [r2, #12]
}
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <__NVIC_GetPriorityGrouping+0x18>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	0a1b      	lsrs	r3, r3, #8
 800108a:	f003 0307 	and.w	r3, r3, #7
}
 800108e:	4618      	mov	r0, r3
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	db0b      	blt.n	80010c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	f003 021f 	and.w	r2, r3, #31
 80010b4:	4907      	ldr	r1, [pc, #28]	; (80010d4 <__NVIC_EnableIRQ+0x38>)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	095b      	lsrs	r3, r3, #5
 80010bc:	2001      	movs	r0, #1
 80010be:	fa00 f202 	lsl.w	r2, r0, r2
 80010c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000e100 	.word	0xe000e100

080010d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	6039      	str	r1, [r7, #0]
 80010e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	db0a      	blt.n	8001102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	490c      	ldr	r1, [pc, #48]	; (8001124 <__NVIC_SetPriority+0x4c>)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	0112      	lsls	r2, r2, #4
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	440b      	add	r3, r1
 80010fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001100:	e00a      	b.n	8001118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4908      	ldr	r1, [pc, #32]	; (8001128 <__NVIC_SetPriority+0x50>)
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	f003 030f 	and.w	r3, r3, #15
 800110e:	3b04      	subs	r3, #4
 8001110:	0112      	lsls	r2, r2, #4
 8001112:	b2d2      	uxtb	r2, r2
 8001114:	440b      	add	r3, r1
 8001116:	761a      	strb	r2, [r3, #24]
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000e100 	.word	0xe000e100
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800112c:	b480      	push	{r7}
 800112e:	b089      	sub	sp, #36	; 0x24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	f1c3 0307 	rsb	r3, r3, #7
 8001146:	2b04      	cmp	r3, #4
 8001148:	bf28      	it	cs
 800114a:	2304      	movcs	r3, #4
 800114c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3304      	adds	r3, #4
 8001152:	2b06      	cmp	r3, #6
 8001154:	d902      	bls.n	800115c <NVIC_EncodePriority+0x30>
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3b03      	subs	r3, #3
 800115a:	e000      	b.n	800115e <NVIC_EncodePriority+0x32>
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001160:	f04f 32ff 	mov.w	r2, #4294967295
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43da      	mvns	r2, r3
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	401a      	ands	r2, r3
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001174:	f04f 31ff 	mov.w	r1, #4294967295
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	fa01 f303 	lsl.w	r3, r1, r3
 800117e:	43d9      	mvns	r1, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001184:	4313      	orrs	r3, r2
         );
}
 8001186:	4618      	mov	r0, r3
 8001188:	3724      	adds	r7, #36	; 0x24
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011a4:	d301      	bcc.n	80011aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011a6:	2301      	movs	r3, #1
 80011a8:	e00f      	b.n	80011ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011aa:	4a0a      	ldr	r2, [pc, #40]	; (80011d4 <SysTick_Config+0x40>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011b2:	210f      	movs	r1, #15
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295
 80011b8:	f7ff ff8e 	bl	80010d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <SysTick_Config+0x40>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c2:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <SysTick_Config+0x40>)
 80011c4:	2207      	movs	r2, #7
 80011c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	e000e010 	.word	0xe000e010

080011d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ff29 	bl	8001038 <__NVIC_SetPriorityGrouping>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b086      	sub	sp, #24
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	4603      	mov	r3, r0
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
 80011fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001200:	f7ff ff3e 	bl	8001080 <__NVIC_GetPriorityGrouping>
 8001204:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	68b9      	ldr	r1, [r7, #8]
 800120a:	6978      	ldr	r0, [r7, #20]
 800120c:	f7ff ff8e 	bl	800112c <NVIC_EncodePriority>
 8001210:	4602      	mov	r2, r0
 8001212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff5d 	bl	80010d8 <__NVIC_SetPriority>
}
 800121e:	bf00      	nop
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	4603      	mov	r3, r0
 800122e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff31 	bl	800109c <__NVIC_EnableIRQ>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ffa2 	bl	8001194 <SysTick_Config>
 8001250:	4603      	mov	r3, r0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b084      	sub	sp, #16
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001266:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001268:	f7ff feb6 	bl	8000fd8 <HAL_GetTick>
 800126c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d008      	beq.n	800128c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2280      	movs	r2, #128	; 0x80
 800127e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e052      	b.n	8001332 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f022 0216 	bic.w	r2, r2, #22
 800129a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	695a      	ldr	r2, [r3, #20]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012aa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d103      	bne.n	80012bc <HAL_DMA_Abort+0x62>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d007      	beq.n	80012cc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f022 0208 	bic.w	r2, r2, #8
 80012ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f022 0201 	bic.w	r2, r2, #1
 80012da:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012dc:	e013      	b.n	8001306 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012de:	f7ff fe7b 	bl	8000fd8 <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b05      	cmp	r3, #5
 80012ea:	d90c      	bls.n	8001306 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2220      	movs	r2, #32
 80012f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2203      	movs	r2, #3
 80012f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e015      	b.n	8001332 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1e4      	bne.n	80012de <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001318:	223f      	movs	r2, #63	; 0x3f
 800131a:	409a      	lsls	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2201      	movs	r2, #1
 8001324:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d004      	beq.n	8001358 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2280      	movs	r2, #128	; 0x80
 8001352:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e00c      	b.n	8001372 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2205      	movs	r2, #5
 800135c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f022 0201 	bic.w	r2, r2, #1
 800136e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
	...

08001380 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001380:	b480      	push	{r7}
 8001382:	b089      	sub	sp, #36	; 0x24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001392:	2300      	movs	r3, #0
 8001394:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
 800139a:	e16b      	b.n	8001674 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800139c:	2201      	movs	r2, #1
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	f040 815a 	bne.w	800166e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f003 0303 	and.w	r3, r3, #3
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d005      	beq.n	80013d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d130      	bne.n	8001434 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	2203      	movs	r2, #3
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	68da      	ldr	r2, [r3, #12]
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001408:	2201      	movs	r2, #1
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	091b      	lsrs	r3, r3, #4
 800141e:	f003 0201 	and.w	r2, r3, #1
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 0303 	and.w	r3, r3, #3
 800143c:	2b03      	cmp	r3, #3
 800143e:	d017      	beq.n	8001470 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	2203      	movs	r2, #3
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 0303 	and.w	r3, r3, #3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d123      	bne.n	80014c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	08da      	lsrs	r2, r3, #3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3208      	adds	r2, #8
 8001484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001488:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	220f      	movs	r2, #15
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	691a      	ldr	r2, [r3, #16]
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	08da      	lsrs	r2, r3, #3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3208      	adds	r2, #8
 80014be:	69b9      	ldr	r1, [r7, #24]
 80014c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	2203      	movs	r2, #3
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 0203 	and.w	r2, r3, #3
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001500:	2b00      	cmp	r3, #0
 8001502:	f000 80b4 	beq.w	800166e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	4b60      	ldr	r3, [pc, #384]	; (800168c <HAL_GPIO_Init+0x30c>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	4a5f      	ldr	r2, [pc, #380]	; (800168c <HAL_GPIO_Init+0x30c>)
 8001510:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001514:	6453      	str	r3, [r2, #68]	; 0x44
 8001516:	4b5d      	ldr	r3, [pc, #372]	; (800168c <HAL_GPIO_Init+0x30c>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001522:	4a5b      	ldr	r2, [pc, #364]	; (8001690 <HAL_GPIO_Init+0x310>)
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	089b      	lsrs	r3, r3, #2
 8001528:	3302      	adds	r3, #2
 800152a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800152e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	220f      	movs	r2, #15
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43db      	mvns	r3, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4013      	ands	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a52      	ldr	r2, [pc, #328]	; (8001694 <HAL_GPIO_Init+0x314>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d02b      	beq.n	80015a6 <HAL_GPIO_Init+0x226>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a51      	ldr	r2, [pc, #324]	; (8001698 <HAL_GPIO_Init+0x318>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d025      	beq.n	80015a2 <HAL_GPIO_Init+0x222>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a50      	ldr	r2, [pc, #320]	; (800169c <HAL_GPIO_Init+0x31c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d01f      	beq.n	800159e <HAL_GPIO_Init+0x21e>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a4f      	ldr	r2, [pc, #316]	; (80016a0 <HAL_GPIO_Init+0x320>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d019      	beq.n	800159a <HAL_GPIO_Init+0x21a>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4e      	ldr	r2, [pc, #312]	; (80016a4 <HAL_GPIO_Init+0x324>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d013      	beq.n	8001596 <HAL_GPIO_Init+0x216>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a4d      	ldr	r2, [pc, #308]	; (80016a8 <HAL_GPIO_Init+0x328>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d00d      	beq.n	8001592 <HAL_GPIO_Init+0x212>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4c      	ldr	r2, [pc, #304]	; (80016ac <HAL_GPIO_Init+0x32c>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d007      	beq.n	800158e <HAL_GPIO_Init+0x20e>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a4b      	ldr	r2, [pc, #300]	; (80016b0 <HAL_GPIO_Init+0x330>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d101      	bne.n	800158a <HAL_GPIO_Init+0x20a>
 8001586:	2307      	movs	r3, #7
 8001588:	e00e      	b.n	80015a8 <HAL_GPIO_Init+0x228>
 800158a:	2308      	movs	r3, #8
 800158c:	e00c      	b.n	80015a8 <HAL_GPIO_Init+0x228>
 800158e:	2306      	movs	r3, #6
 8001590:	e00a      	b.n	80015a8 <HAL_GPIO_Init+0x228>
 8001592:	2305      	movs	r3, #5
 8001594:	e008      	b.n	80015a8 <HAL_GPIO_Init+0x228>
 8001596:	2304      	movs	r3, #4
 8001598:	e006      	b.n	80015a8 <HAL_GPIO_Init+0x228>
 800159a:	2303      	movs	r3, #3
 800159c:	e004      	b.n	80015a8 <HAL_GPIO_Init+0x228>
 800159e:	2302      	movs	r3, #2
 80015a0:	e002      	b.n	80015a8 <HAL_GPIO_Init+0x228>
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <HAL_GPIO_Init+0x228>
 80015a6:	2300      	movs	r3, #0
 80015a8:	69fa      	ldr	r2, [r7, #28]
 80015aa:	f002 0203 	and.w	r2, r2, #3
 80015ae:	0092      	lsls	r2, r2, #2
 80015b0:	4093      	lsls	r3, r2
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015b8:	4935      	ldr	r1, [pc, #212]	; (8001690 <HAL_GPIO_Init+0x310>)
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	089b      	lsrs	r3, r3, #2
 80015be:	3302      	adds	r3, #2
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015c6:	4b3b      	ldr	r3, [pc, #236]	; (80016b4 <HAL_GPIO_Init+0x334>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	43db      	mvns	r3, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4013      	ands	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015ea:	4a32      	ldr	r2, [pc, #200]	; (80016b4 <HAL_GPIO_Init+0x334>)
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015f0:	4b30      	ldr	r3, [pc, #192]	; (80016b4 <HAL_GPIO_Init+0x334>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001614:	4a27      	ldr	r2, [pc, #156]	; (80016b4 <HAL_GPIO_Init+0x334>)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800161a:	4b26      	ldr	r3, [pc, #152]	; (80016b4 <HAL_GPIO_Init+0x334>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	43db      	mvns	r3, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4013      	ands	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800163e:	4a1d      	ldr	r2, [pc, #116]	; (80016b4 <HAL_GPIO_Init+0x334>)
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001644:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <HAL_GPIO_Init+0x334>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001668:	4a12      	ldr	r2, [pc, #72]	; (80016b4 <HAL_GPIO_Init+0x334>)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3301      	adds	r3, #1
 8001672:	61fb      	str	r3, [r7, #28]
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	2b0f      	cmp	r3, #15
 8001678:	f67f ae90 	bls.w	800139c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800167c:	bf00      	nop
 800167e:	bf00      	nop
 8001680:	3724      	adds	r7, #36	; 0x24
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	40023800 	.word	0x40023800
 8001690:	40013800 	.word	0x40013800
 8001694:	40020000 	.word	0x40020000
 8001698:	40020400 	.word	0x40020400
 800169c:	40020800 	.word	0x40020800
 80016a0:	40020c00 	.word	0x40020c00
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40021400 	.word	0x40021400
 80016ac:	40021800 	.word	0x40021800
 80016b0:	40021c00 	.word	0x40021c00
 80016b4:	40013c00 	.word	0x40013c00

080016b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	807b      	strh	r3, [r7, #2]
 80016c4:	4613      	mov	r3, r2
 80016c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016c8:	787b      	ldrb	r3, [r7, #1]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ce:	887a      	ldrh	r2, [r7, #2]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016d4:	e003      	b.n	80016de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016d6:	887b      	ldrh	r3, [r7, #2]
 80016d8:	041a      	lsls	r2, r3, #16
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	619a      	str	r2, [r3, #24]
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80016ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ec:	b08f      	sub	sp, #60	; 0x3c
 80016ee:	af0a      	add	r7, sp, #40	; 0x28
 80016f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e054      	b.n	80017a6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d106      	bne.n	800171c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f006 fd34 	bl	8008184 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2203      	movs	r2, #3
 8001720:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172c:	2b00      	cmp	r3, #0
 800172e:	d102      	bne.n	8001736 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f003 fe8a 	bl	8005454 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	603b      	str	r3, [r7, #0]
 8001746:	687e      	ldr	r6, [r7, #4]
 8001748:	466d      	mov	r5, sp
 800174a:	f106 0410 	add.w	r4, r6, #16
 800174e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001750:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001752:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001754:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001756:	e894 0003 	ldmia.w	r4, {r0, r1}
 800175a:	e885 0003 	stmia.w	r5, {r0, r1}
 800175e:	1d33      	adds	r3, r6, #4
 8001760:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001762:	6838      	ldr	r0, [r7, #0]
 8001764:	f003 fe04 	bl	8005370 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2101      	movs	r1, #1
 800176e:	4618      	mov	r0, r3
 8001770:	f003 fe81 	bl	8005476 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	603b      	str	r3, [r7, #0]
 800177a:	687e      	ldr	r6, [r7, #4]
 800177c:	466d      	mov	r5, sp
 800177e:	f106 0410 	add.w	r4, r6, #16
 8001782:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001784:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001786:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001788:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800178a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800178e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001792:	1d33      	adds	r3, r6, #4
 8001794:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001796:	6838      	ldr	r0, [r7, #0]
 8001798:	f003 ffe8 	bl	800576c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017ae <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80017ae:	b590      	push	{r4, r7, lr}
 80017b0:	b089      	sub	sp, #36	; 0x24
 80017b2:	af04      	add	r7, sp, #16
 80017b4:	6078      	str	r0, [r7, #4]
 80017b6:	4608      	mov	r0, r1
 80017b8:	4611      	mov	r1, r2
 80017ba:	461a      	mov	r2, r3
 80017bc:	4603      	mov	r3, r0
 80017be:	70fb      	strb	r3, [r7, #3]
 80017c0:	460b      	mov	r3, r1
 80017c2:	70bb      	strb	r3, [r7, #2]
 80017c4:	4613      	mov	r3, r2
 80017c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d101      	bne.n	80017d6 <HAL_HCD_HC_Init+0x28>
 80017d2:	2302      	movs	r3, #2
 80017d4:	e076      	b.n	80018c4 <HAL_HCD_HC_Init+0x116>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80017de:	78fb      	ldrb	r3, [r7, #3]
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	212c      	movs	r1, #44	; 0x2c
 80017e4:	fb01 f303 	mul.w	r3, r1, r3
 80017e8:	4413      	add	r3, r2
 80017ea:	333d      	adds	r3, #61	; 0x3d
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80017f0:	78fb      	ldrb	r3, [r7, #3]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	212c      	movs	r1, #44	; 0x2c
 80017f6:	fb01 f303 	mul.w	r3, r1, r3
 80017fa:	4413      	add	r3, r2
 80017fc:	3338      	adds	r3, #56	; 0x38
 80017fe:	787a      	ldrb	r2, [r7, #1]
 8001800:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001802:	78fb      	ldrb	r3, [r7, #3]
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	212c      	movs	r1, #44	; 0x2c
 8001808:	fb01 f303 	mul.w	r3, r1, r3
 800180c:	4413      	add	r3, r2
 800180e:	3340      	adds	r3, #64	; 0x40
 8001810:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001812:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001814:	78fb      	ldrb	r3, [r7, #3]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	212c      	movs	r1, #44	; 0x2c
 800181a:	fb01 f303 	mul.w	r3, r1, r3
 800181e:	4413      	add	r3, r2
 8001820:	3339      	adds	r3, #57	; 0x39
 8001822:	78fa      	ldrb	r2, [r7, #3]
 8001824:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001826:	78fb      	ldrb	r3, [r7, #3]
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	212c      	movs	r1, #44	; 0x2c
 800182c:	fb01 f303 	mul.w	r3, r1, r3
 8001830:	4413      	add	r3, r2
 8001832:	333f      	adds	r3, #63	; 0x3f
 8001834:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001838:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800183a:	78fb      	ldrb	r3, [r7, #3]
 800183c:	78ba      	ldrb	r2, [r7, #2]
 800183e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001842:	b2d0      	uxtb	r0, r2
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	212c      	movs	r1, #44	; 0x2c
 8001848:	fb01 f303 	mul.w	r3, r1, r3
 800184c:	4413      	add	r3, r2
 800184e:	333a      	adds	r3, #58	; 0x3a
 8001850:	4602      	mov	r2, r0
 8001852:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001854:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001858:	2b00      	cmp	r3, #0
 800185a:	da09      	bge.n	8001870 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800185c:	78fb      	ldrb	r3, [r7, #3]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	212c      	movs	r1, #44	; 0x2c
 8001862:	fb01 f303 	mul.w	r3, r1, r3
 8001866:	4413      	add	r3, r2
 8001868:	333b      	adds	r3, #59	; 0x3b
 800186a:	2201      	movs	r2, #1
 800186c:	701a      	strb	r2, [r3, #0]
 800186e:	e008      	b.n	8001882 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001870:	78fb      	ldrb	r3, [r7, #3]
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	212c      	movs	r1, #44	; 0x2c
 8001876:	fb01 f303 	mul.w	r3, r1, r3
 800187a:	4413      	add	r3, r2
 800187c:	333b      	adds	r3, #59	; 0x3b
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	212c      	movs	r1, #44	; 0x2c
 8001888:	fb01 f303 	mul.w	r3, r1, r3
 800188c:	4413      	add	r3, r2
 800188e:	333c      	adds	r3, #60	; 0x3c
 8001890:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001894:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6818      	ldr	r0, [r3, #0]
 800189a:	787c      	ldrb	r4, [r7, #1]
 800189c:	78ba      	ldrb	r2, [r7, #2]
 800189e:	78f9      	ldrb	r1, [r7, #3]
 80018a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80018a2:	9302      	str	r3, [sp, #8]
 80018a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018a8:	9301      	str	r3, [sp, #4]
 80018aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	4623      	mov	r3, r4
 80018b2:	f004 f8d5 	bl	8005a60 <USB_HC_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd90      	pop	{r4, r7, pc}

080018cc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80018d8:	2300      	movs	r3, #0
 80018da:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d101      	bne.n	80018ea <HAL_HCD_HC_Halt+0x1e>
 80018e6:	2302      	movs	r3, #2
 80018e8:	e00f      	b.n	800190a <HAL_HCD_HC_Halt+0x3e>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	78fa      	ldrb	r2, [r7, #3]
 80018f8:	4611      	mov	r1, r2
 80018fa:	4618      	mov	r0, r3
 80018fc:	f004 fb11 	bl	8005f22 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001908:	7bfb      	ldrb	r3, [r7, #15]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	4608      	mov	r0, r1
 800191e:	4611      	mov	r1, r2
 8001920:	461a      	mov	r2, r3
 8001922:	4603      	mov	r3, r0
 8001924:	70fb      	strb	r3, [r7, #3]
 8001926:	460b      	mov	r3, r1
 8001928:	70bb      	strb	r3, [r7, #2]
 800192a:	4613      	mov	r3, r2
 800192c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800192e:	78fb      	ldrb	r3, [r7, #3]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	212c      	movs	r1, #44	; 0x2c
 8001934:	fb01 f303 	mul.w	r3, r1, r3
 8001938:	4413      	add	r3, r2
 800193a:	333b      	adds	r3, #59	; 0x3b
 800193c:	78ba      	ldrb	r2, [r7, #2]
 800193e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001940:	78fb      	ldrb	r3, [r7, #3]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	212c      	movs	r1, #44	; 0x2c
 8001946:	fb01 f303 	mul.w	r3, r1, r3
 800194a:	4413      	add	r3, r2
 800194c:	333f      	adds	r3, #63	; 0x3f
 800194e:	787a      	ldrb	r2, [r7, #1]
 8001950:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001952:	7c3b      	ldrb	r3, [r7, #16]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d112      	bne.n	800197e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001958:	78fb      	ldrb	r3, [r7, #3]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	212c      	movs	r1, #44	; 0x2c
 800195e:	fb01 f303 	mul.w	r3, r1, r3
 8001962:	4413      	add	r3, r2
 8001964:	3342      	adds	r3, #66	; 0x42
 8001966:	2203      	movs	r2, #3
 8001968:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800196a:	78fb      	ldrb	r3, [r7, #3]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	212c      	movs	r1, #44	; 0x2c
 8001970:	fb01 f303 	mul.w	r3, r1, r3
 8001974:	4413      	add	r3, r2
 8001976:	333d      	adds	r3, #61	; 0x3d
 8001978:	7f3a      	ldrb	r2, [r7, #28]
 800197a:	701a      	strb	r2, [r3, #0]
 800197c:	e008      	b.n	8001990 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800197e:	78fb      	ldrb	r3, [r7, #3]
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	212c      	movs	r1, #44	; 0x2c
 8001984:	fb01 f303 	mul.w	r3, r1, r3
 8001988:	4413      	add	r3, r2
 800198a:	3342      	adds	r3, #66	; 0x42
 800198c:	2202      	movs	r2, #2
 800198e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001990:	787b      	ldrb	r3, [r7, #1]
 8001992:	2b03      	cmp	r3, #3
 8001994:	f200 80c6 	bhi.w	8001b24 <HAL_HCD_HC_SubmitRequest+0x210>
 8001998:	a201      	add	r2, pc, #4	; (adr r2, 80019a0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800199a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800199e:	bf00      	nop
 80019a0:	080019b1 	.word	0x080019b1
 80019a4:	08001b11 	.word	0x08001b11
 80019a8:	08001a15 	.word	0x08001a15
 80019ac:	08001a93 	.word	0x08001a93
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80019b0:	7c3b      	ldrb	r3, [r7, #16]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	f040 80b8 	bne.w	8001b28 <HAL_HCD_HC_SubmitRequest+0x214>
 80019b8:	78bb      	ldrb	r3, [r7, #2]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f040 80b4 	bne.w	8001b28 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80019c0:	8b3b      	ldrh	r3, [r7, #24]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d108      	bne.n	80019d8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80019c6:	78fb      	ldrb	r3, [r7, #3]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	212c      	movs	r1, #44	; 0x2c
 80019cc:	fb01 f303 	mul.w	r3, r1, r3
 80019d0:	4413      	add	r3, r2
 80019d2:	3355      	adds	r3, #85	; 0x55
 80019d4:	2201      	movs	r2, #1
 80019d6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019d8:	78fb      	ldrb	r3, [r7, #3]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	212c      	movs	r1, #44	; 0x2c
 80019de:	fb01 f303 	mul.w	r3, r1, r3
 80019e2:	4413      	add	r3, r2
 80019e4:	3355      	adds	r3, #85	; 0x55
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d109      	bne.n	8001a00 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019ec:	78fb      	ldrb	r3, [r7, #3]
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	212c      	movs	r1, #44	; 0x2c
 80019f2:	fb01 f303 	mul.w	r3, r1, r3
 80019f6:	4413      	add	r3, r2
 80019f8:	3342      	adds	r3, #66	; 0x42
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019fe:	e093      	b.n	8001b28 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a00:	78fb      	ldrb	r3, [r7, #3]
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	212c      	movs	r1, #44	; 0x2c
 8001a06:	fb01 f303 	mul.w	r3, r1, r3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3342      	adds	r3, #66	; 0x42
 8001a0e:	2202      	movs	r2, #2
 8001a10:	701a      	strb	r2, [r3, #0]
      break;
 8001a12:	e089      	b.n	8001b28 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001a14:	78bb      	ldrb	r3, [r7, #2]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d11d      	bne.n	8001a56 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a1a:	78fb      	ldrb	r3, [r7, #3]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	212c      	movs	r1, #44	; 0x2c
 8001a20:	fb01 f303 	mul.w	r3, r1, r3
 8001a24:	4413      	add	r3, r2
 8001a26:	3355      	adds	r3, #85	; 0x55
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d109      	bne.n	8001a42 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a2e:	78fb      	ldrb	r3, [r7, #3]
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	212c      	movs	r1, #44	; 0x2c
 8001a34:	fb01 f303 	mul.w	r3, r1, r3
 8001a38:	4413      	add	r3, r2
 8001a3a:	3342      	adds	r3, #66	; 0x42
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001a40:	e073      	b.n	8001b2a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a42:	78fb      	ldrb	r3, [r7, #3]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	212c      	movs	r1, #44	; 0x2c
 8001a48:	fb01 f303 	mul.w	r3, r1, r3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	3342      	adds	r3, #66	; 0x42
 8001a50:	2202      	movs	r2, #2
 8001a52:	701a      	strb	r2, [r3, #0]
      break;
 8001a54:	e069      	b.n	8001b2a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a56:	78fb      	ldrb	r3, [r7, #3]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	212c      	movs	r1, #44	; 0x2c
 8001a5c:	fb01 f303 	mul.w	r3, r1, r3
 8001a60:	4413      	add	r3, r2
 8001a62:	3354      	adds	r3, #84	; 0x54
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d109      	bne.n	8001a7e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a6a:	78fb      	ldrb	r3, [r7, #3]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	212c      	movs	r1, #44	; 0x2c
 8001a70:	fb01 f303 	mul.w	r3, r1, r3
 8001a74:	4413      	add	r3, r2
 8001a76:	3342      	adds	r3, #66	; 0x42
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]
      break;
 8001a7c:	e055      	b.n	8001b2a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a7e:	78fb      	ldrb	r3, [r7, #3]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	212c      	movs	r1, #44	; 0x2c
 8001a84:	fb01 f303 	mul.w	r3, r1, r3
 8001a88:	4413      	add	r3, r2
 8001a8a:	3342      	adds	r3, #66	; 0x42
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	701a      	strb	r2, [r3, #0]
      break;
 8001a90:	e04b      	b.n	8001b2a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001a92:	78bb      	ldrb	r3, [r7, #2]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d11d      	bne.n	8001ad4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a98:	78fb      	ldrb	r3, [r7, #3]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	212c      	movs	r1, #44	; 0x2c
 8001a9e:	fb01 f303 	mul.w	r3, r1, r3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	3355      	adds	r3, #85	; 0x55
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d109      	bne.n	8001ac0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001aac:	78fb      	ldrb	r3, [r7, #3]
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	212c      	movs	r1, #44	; 0x2c
 8001ab2:	fb01 f303 	mul.w	r3, r1, r3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	3342      	adds	r3, #66	; 0x42
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001abe:	e034      	b.n	8001b2a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ac0:	78fb      	ldrb	r3, [r7, #3]
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	212c      	movs	r1, #44	; 0x2c
 8001ac6:	fb01 f303 	mul.w	r3, r1, r3
 8001aca:	4413      	add	r3, r2
 8001acc:	3342      	adds	r3, #66	; 0x42
 8001ace:	2202      	movs	r2, #2
 8001ad0:	701a      	strb	r2, [r3, #0]
      break;
 8001ad2:	e02a      	b.n	8001b2a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ad4:	78fb      	ldrb	r3, [r7, #3]
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	212c      	movs	r1, #44	; 0x2c
 8001ada:	fb01 f303 	mul.w	r3, r1, r3
 8001ade:	4413      	add	r3, r2
 8001ae0:	3354      	adds	r3, #84	; 0x54
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d109      	bne.n	8001afc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ae8:	78fb      	ldrb	r3, [r7, #3]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	212c      	movs	r1, #44	; 0x2c
 8001aee:	fb01 f303 	mul.w	r3, r1, r3
 8001af2:	4413      	add	r3, r2
 8001af4:	3342      	adds	r3, #66	; 0x42
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
      break;
 8001afa:	e016      	b.n	8001b2a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	212c      	movs	r1, #44	; 0x2c
 8001b02:	fb01 f303 	mul.w	r3, r1, r3
 8001b06:	4413      	add	r3, r2
 8001b08:	3342      	adds	r3, #66	; 0x42
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	701a      	strb	r2, [r3, #0]
      break;
 8001b0e:	e00c      	b.n	8001b2a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	212c      	movs	r1, #44	; 0x2c
 8001b16:	fb01 f303 	mul.w	r3, r1, r3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	3342      	adds	r3, #66	; 0x42
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
      break;
 8001b22:	e002      	b.n	8001b2a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001b24:	bf00      	nop
 8001b26:	e000      	b.n	8001b2a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001b28:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b2a:	78fb      	ldrb	r3, [r7, #3]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	212c      	movs	r1, #44	; 0x2c
 8001b30:	fb01 f303 	mul.w	r3, r1, r3
 8001b34:	4413      	add	r3, r2
 8001b36:	3344      	adds	r3, #68	; 0x44
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001b3c:	78fb      	ldrb	r3, [r7, #3]
 8001b3e:	8b3a      	ldrh	r2, [r7, #24]
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	202c      	movs	r0, #44	; 0x2c
 8001b44:	fb00 f303 	mul.w	r3, r0, r3
 8001b48:	440b      	add	r3, r1
 8001b4a:	334c      	adds	r3, #76	; 0x4c
 8001b4c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001b4e:	78fb      	ldrb	r3, [r7, #3]
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	212c      	movs	r1, #44	; 0x2c
 8001b54:	fb01 f303 	mul.w	r3, r1, r3
 8001b58:	4413      	add	r3, r2
 8001b5a:	3360      	adds	r3, #96	; 0x60
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001b60:	78fb      	ldrb	r3, [r7, #3]
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	212c      	movs	r1, #44	; 0x2c
 8001b66:	fb01 f303 	mul.w	r3, r1, r3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3350      	adds	r3, #80	; 0x50
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b72:	78fb      	ldrb	r3, [r7, #3]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	212c      	movs	r1, #44	; 0x2c
 8001b78:	fb01 f303 	mul.w	r3, r1, r3
 8001b7c:	4413      	add	r3, r2
 8001b7e:	3339      	adds	r3, #57	; 0x39
 8001b80:	78fa      	ldrb	r2, [r7, #3]
 8001b82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001b84:	78fb      	ldrb	r3, [r7, #3]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	212c      	movs	r1, #44	; 0x2c
 8001b8a:	fb01 f303 	mul.w	r3, r1, r3
 8001b8e:	4413      	add	r3, r2
 8001b90:	3361      	adds	r3, #97	; 0x61
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6818      	ldr	r0, [r3, #0]
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	222c      	movs	r2, #44	; 0x2c
 8001b9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ba2:	3338      	adds	r3, #56	; 0x38
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	18d1      	adds	r1, r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	461a      	mov	r2, r3
 8001bb0:	f004 f864 	bl	8005c7c <USB_HC_StartXfer>
 8001bb4:	4603      	mov	r3, r0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop

08001bc0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f003 fd87 	bl	80056ea <USB_GetMode>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	f040 80f6 	bne.w	8001dd0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f003 fd6b 	bl	80056c4 <USB_ReadInterrupts>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 80ec 	beq.w	8001dce <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f003 fd62 	bl	80056c4 <USB_ReadInterrupts>
 8001c00:	4603      	mov	r3, r0
 8001c02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c0a:	d104      	bne.n	8001c16 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c14:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f003 fd52 	bl	80056c4 <USB_ReadInterrupts>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c2a:	d104      	bne.n	8001c36 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c34:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f003 fd42 	bl	80056c4 <USB_ReadInterrupts>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c4a:	d104      	bne.n	8001c56 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c54:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f003 fd32 	bl	80056c4 <USB_ReadInterrupts>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d103      	bne.n	8001c72 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2202      	movs	r2, #2
 8001c70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f003 fd24 	bl	80056c4 <USB_ReadInterrupts>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c86:	d11c      	bne.n	8001cc2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c90:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10f      	bne.n	8001cc2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001ca2:	2110      	movs	r1, #16
 8001ca4:	6938      	ldr	r0, [r7, #16]
 8001ca6:	f003 fc33 	bl	8005510 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001caa:	6938      	ldr	r0, [r7, #16]
 8001cac:	f003 fc54 	bl	8005558 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f003 fe0c 	bl	80058d4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f006 fadf 	bl	8008280 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f003 fcfc 	bl	80056c4 <USB_ReadInterrupts>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cd2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cd6:	d102      	bne.n	8001cde <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f001 fa03 	bl	80030e4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f003 fcee 	bl	80056c4 <USB_ReadInterrupts>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	2b08      	cmp	r3, #8
 8001cf0:	d106      	bne.n	8001d00 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f006 faa8 	bl	8008248 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2208      	movs	r2, #8
 8001cfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f003 fcdd 	bl	80056c4 <USB_ReadInterrupts>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	f003 0310 	and.w	r3, r3, #16
 8001d10:	2b10      	cmp	r3, #16
 8001d12:	d101      	bne.n	8001d18 <HAL_HCD_IRQHandler+0x158>
 8001d14:	2301      	movs	r3, #1
 8001d16:	e000      	b.n	8001d1a <HAL_HCD_IRQHandler+0x15a>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d012      	beq.n	8001d44 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	699a      	ldr	r2, [r3, #24]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0210 	bic.w	r2, r2, #16
 8001d2c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f001 f906 	bl	8002f40 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	699a      	ldr	r2, [r3, #24]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0210 	orr.w	r2, r2, #16
 8001d42:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f003 fcbb 	bl	80056c4 <USB_ReadInterrupts>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d58:	d13a      	bne.n	8001dd0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f004 f8ce 	bl	8005f00 <USB_HC_ReadInterrupt>
 8001d64:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	e025      	b.n	8001db8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	fa22 f303 	lsr.w	r3, r2, r3
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d018      	beq.n	8001db2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	015a      	lsls	r2, r3, #5
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4413      	add	r3, r2
 8001d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d96:	d106      	bne.n	8001da6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f8ab 	bl	8001efa <HCD_HC_IN_IRQHandler>
 8001da4:	e005      	b.n	8001db2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	4619      	mov	r1, r3
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 fcc6 	bl	800273e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	3301      	adds	r3, #1
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d3d4      	bcc.n	8001d6c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dca:	615a      	str	r2, [r3, #20]
 8001dcc:	e000      	b.n	8001dd0 <HAL_HCD_IRQHandler+0x210>
      return;
 8001dce:	bf00      	nop
    }
  }
}
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_HCD_Start+0x16>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e013      	b.n	8001e14 <HAL_HCD_Start+0x3e>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2101      	movs	r1, #1
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f003 fdce 	bl	800599c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f003 fb14 	bl	8005432 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d101      	bne.n	8001e32 <HAL_HCD_Stop+0x16>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e00d      	b.n	8001e4e <HAL_HCD_Stop+0x32>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f004 f9c8 	bl	80061d4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f003 fd70 	bl	8005948 <USB_ResetPort>
 8001e68:	4603      	mov	r3, r0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001e7e:	78fb      	ldrb	r3, [r7, #3]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	212c      	movs	r1, #44	; 0x2c
 8001e84:	fb01 f303 	mul.w	r3, r1, r3
 8001e88:	4413      	add	r3, r2
 8001e8a:	3360      	adds	r3, #96	; 0x60
 8001e8c:	781b      	ldrb	r3, [r3, #0]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001ea6:	78fb      	ldrb	r3, [r7, #3]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	212c      	movs	r1, #44	; 0x2c
 8001eac:	fb01 f303 	mul.w	r3, r1, r3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	3350      	adds	r3, #80	; 0x50
 8001eb4:	681b      	ldr	r3, [r3, #0]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f003 fdb4 	bl	8005a3c <USB_GetCurrentFrame>
 8001ed4:	4603      	mov	r3, r0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f003 fd8f 	bl	8005a0e <USB_GetHostSpeed>
 8001ef0:	4603      	mov	r3, r0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b086      	sub	sp, #24
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	460b      	mov	r3, r1
 8001f04:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	015a      	lsls	r2, r3, #5
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 0304 	and.w	r3, r3, #4
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d119      	bne.n	8001f5e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	015a      	lsls	r2, r3, #5
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4413      	add	r3, r2
 8001f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f36:	461a      	mov	r2, r3
 8001f38:	2304      	movs	r3, #4
 8001f3a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	015a      	lsls	r2, r3, #5
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	4413      	add	r3, r2
 8001f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	0151      	lsls	r1, r2, #5
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	440a      	add	r2, r1
 8001f52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f56:	f043 0302 	orr.w	r3, r3, #2
 8001f5a:	60d3      	str	r3, [r2, #12]
 8001f5c:	e101      	b.n	8002162 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	015a      	lsls	r2, r3, #5
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	4413      	add	r3, r2
 8001f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f74:	d12b      	bne.n	8001fce <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	015a      	lsls	r2, r3, #5
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f82:	461a      	mov	r2, r3
 8001f84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f88:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	212c      	movs	r1, #44	; 0x2c
 8001f90:	fb01 f303 	mul.w	r3, r1, r3
 8001f94:	4413      	add	r3, r2
 8001f96:	3361      	adds	r3, #97	; 0x61
 8001f98:	2207      	movs	r2, #7
 8001f9a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	015a      	lsls	r2, r3, #5
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	0151      	lsls	r1, r2, #5
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	440a      	add	r2, r1
 8001fb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fb6:	f043 0302 	orr.w	r3, r3, #2
 8001fba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	4611      	mov	r1, r2
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f003 ffab 	bl	8005f22 <USB_HC_Halt>
 8001fcc:	e0c9      	b.n	8002162 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	015a      	lsls	r2, r3, #5
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 0320 	and.w	r3, r3, #32
 8001fe0:	2b20      	cmp	r3, #32
 8001fe2:	d109      	bne.n	8001ff8 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	015a      	lsls	r2, r3, #5
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4413      	add	r3, r2
 8001fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	2320      	movs	r3, #32
 8001ff4:	6093      	str	r3, [r2, #8]
 8001ff6:	e0b4      	b.n	8002162 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	015a      	lsls	r2, r3, #5
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	4413      	add	r3, r2
 8002000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b08      	cmp	r3, #8
 800200c:	d133      	bne.n	8002076 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	015a      	lsls	r2, r3, #5
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4413      	add	r3, r2
 8002016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	0151      	lsls	r1, r2, #5
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	440a      	add	r2, r1
 8002024:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002028:	f043 0302 	orr.w	r3, r3, #2
 800202c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	212c      	movs	r1, #44	; 0x2c
 8002034:	fb01 f303 	mul.w	r3, r1, r3
 8002038:	4413      	add	r3, r2
 800203a:	3361      	adds	r3, #97	; 0x61
 800203c:	2205      	movs	r2, #5
 800203e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	015a      	lsls	r2, r3, #5
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4413      	add	r3, r2
 8002048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204c:	461a      	mov	r2, r3
 800204e:	2310      	movs	r3, #16
 8002050:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	015a      	lsls	r2, r3, #5
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	4413      	add	r3, r2
 800205a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205e:	461a      	mov	r2, r3
 8002060:	2308      	movs	r3, #8
 8002062:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	4611      	mov	r1, r2
 800206e:	4618      	mov	r0, r3
 8002070:	f003 ff57 	bl	8005f22 <USB_HC_Halt>
 8002074:	e075      	b.n	8002162 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	015a      	lsls	r2, r3, #5
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4413      	add	r3, r2
 800207e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800208c:	d134      	bne.n	80020f8 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	015a      	lsls	r2, r3, #5
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4413      	add	r3, r2
 8002096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	0151      	lsls	r1, r2, #5
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	440a      	add	r2, r1
 80020a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020a8:	f043 0302 	orr.w	r3, r3, #2
 80020ac:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	212c      	movs	r1, #44	; 0x2c
 80020b4:	fb01 f303 	mul.w	r3, r1, r3
 80020b8:	4413      	add	r3, r2
 80020ba:	3361      	adds	r3, #97	; 0x61
 80020bc:	2208      	movs	r2, #8
 80020be:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	015a      	lsls	r2, r3, #5
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	4413      	add	r3, r2
 80020c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020cc:	461a      	mov	r2, r3
 80020ce:	2310      	movs	r3, #16
 80020d0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	015a      	lsls	r2, r3, #5
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4413      	add	r3, r2
 80020da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020de:	461a      	mov	r2, r3
 80020e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020e4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	4611      	mov	r1, r2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f003 ff16 	bl	8005f22 <USB_HC_Halt>
 80020f6:	e034      	b.n	8002162 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	015a      	lsls	r2, r3, #5
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	4413      	add	r3, r2
 8002100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210a:	2b80      	cmp	r3, #128	; 0x80
 800210c:	d129      	bne.n	8002162 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	015a      	lsls	r2, r3, #5
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4413      	add	r3, r2
 8002116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	0151      	lsls	r1, r2, #5
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	440a      	add	r2, r1
 8002124:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002128:	f043 0302 	orr.w	r3, r3, #2
 800212c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	212c      	movs	r1, #44	; 0x2c
 8002134:	fb01 f303 	mul.w	r3, r1, r3
 8002138:	4413      	add	r3, r2
 800213a:	3361      	adds	r3, #97	; 0x61
 800213c:	2206      	movs	r2, #6
 800213e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	4611      	mov	r1, r2
 800214a:	4618      	mov	r0, r3
 800214c:	f003 fee9 	bl	8005f22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	015a      	lsls	r2, r3, #5
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4413      	add	r3, r2
 8002158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800215c:	461a      	mov	r2, r3
 800215e:	2380      	movs	r3, #128	; 0x80
 8002160:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	015a      	lsls	r2, r3, #5
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4413      	add	r3, r2
 800216a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002178:	d122      	bne.n	80021c0 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	015a      	lsls	r2, r3, #5
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4413      	add	r3, r2
 8002182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	0151      	lsls	r1, r2, #5
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	440a      	add	r2, r1
 8002190:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002194:	f043 0302 	orr.w	r3, r3, #2
 8002198:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	b2d2      	uxtb	r2, r2
 80021a2:	4611      	mov	r1, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f003 febc 	bl	8005f22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	015a      	lsls	r2, r3, #5
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b6:	461a      	mov	r2, r3
 80021b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021bc:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80021be:	e2ba      	b.n	8002736 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	015a      	lsls	r2, r3, #5
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4413      	add	r3, r2
 80021c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	f040 811b 	bne.w	800240e <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d019      	beq.n	8002214 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	212c      	movs	r1, #44	; 0x2c
 80021e6:	fb01 f303 	mul.w	r3, r1, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	3348      	adds	r3, #72	; 0x48
 80021ee:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	0159      	lsls	r1, r3, #5
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	440b      	add	r3, r1
 80021f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002202:	1ad2      	subs	r2, r2, r3
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	202c      	movs	r0, #44	; 0x2c
 800220a:	fb00 f303 	mul.w	r3, r0, r3
 800220e:	440b      	add	r3, r1
 8002210:	3350      	adds	r3, #80	; 0x50
 8002212:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	212c      	movs	r1, #44	; 0x2c
 800221a:	fb01 f303 	mul.w	r3, r1, r3
 800221e:	4413      	add	r3, r2
 8002220:	3361      	adds	r3, #97	; 0x61
 8002222:	2201      	movs	r2, #1
 8002224:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	212c      	movs	r1, #44	; 0x2c
 800222c:	fb01 f303 	mul.w	r3, r1, r3
 8002230:	4413      	add	r3, r2
 8002232:	335c      	adds	r3, #92	; 0x5c
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	015a      	lsls	r2, r3, #5
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4413      	add	r3, r2
 8002240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002244:	461a      	mov	r2, r3
 8002246:	2301      	movs	r3, #1
 8002248:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	212c      	movs	r1, #44	; 0x2c
 8002250:	fb01 f303 	mul.w	r3, r1, r3
 8002254:	4413      	add	r3, r2
 8002256:	333f      	adds	r3, #63	; 0x3f
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d009      	beq.n	8002272 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	212c      	movs	r1, #44	; 0x2c
 8002264:	fb01 f303 	mul.w	r3, r1, r3
 8002268:	4413      	add	r3, r2
 800226a:	333f      	adds	r3, #63	; 0x3f
 800226c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800226e:	2b02      	cmp	r3, #2
 8002270:	d121      	bne.n	80022b6 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	015a      	lsls	r2, r3, #5
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4413      	add	r3, r2
 800227a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	0151      	lsls	r1, r2, #5
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	440a      	add	r2, r1
 8002288:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800228c:	f043 0302 	orr.w	r3, r3, #2
 8002290:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	4611      	mov	r1, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f003 fe40 	bl	8005f22 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	015a      	lsls	r2, r3, #5
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ae:	461a      	mov	r2, r3
 80022b0:	2310      	movs	r3, #16
 80022b2:	6093      	str	r3, [r2, #8]
 80022b4:	e066      	b.n	8002384 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	212c      	movs	r1, #44	; 0x2c
 80022bc:	fb01 f303 	mul.w	r3, r1, r3
 80022c0:	4413      	add	r3, r2
 80022c2:	333f      	adds	r3, #63	; 0x3f
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b03      	cmp	r3, #3
 80022c8:	d127      	bne.n	800231a <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	015a      	lsls	r2, r3, #5
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4413      	add	r3, r2
 80022d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	0151      	lsls	r1, r2, #5
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	440a      	add	r2, r1
 80022e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80022e8:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	212c      	movs	r1, #44	; 0x2c
 80022f0:	fb01 f303 	mul.w	r3, r1, r3
 80022f4:	4413      	add	r3, r2
 80022f6:	3360      	adds	r3, #96	; 0x60
 80022f8:	2201      	movs	r2, #1
 80022fa:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	b2d9      	uxtb	r1, r3
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	202c      	movs	r0, #44	; 0x2c
 8002306:	fb00 f303 	mul.w	r3, r0, r3
 800230a:	4413      	add	r3, r2
 800230c:	3360      	adds	r3, #96	; 0x60
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	461a      	mov	r2, r3
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f005 ffc2 	bl	800829c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002318:	e034      	b.n	8002384 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	212c      	movs	r1, #44	; 0x2c
 8002320:	fb01 f303 	mul.w	r3, r1, r3
 8002324:	4413      	add	r3, r2
 8002326:	333f      	adds	r3, #63	; 0x3f
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d12a      	bne.n	8002384 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	212c      	movs	r1, #44	; 0x2c
 8002334:	fb01 f303 	mul.w	r3, r1, r3
 8002338:	4413      	add	r3, r2
 800233a:	3360      	adds	r3, #96	; 0x60
 800233c:	2201      	movs	r2, #1
 800233e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	212c      	movs	r1, #44	; 0x2c
 8002346:	fb01 f303 	mul.w	r3, r1, r3
 800234a:	4413      	add	r3, r2
 800234c:	3354      	adds	r3, #84	; 0x54
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	f083 0301 	eor.w	r3, r3, #1
 8002354:	b2d8      	uxtb	r0, r3
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	212c      	movs	r1, #44	; 0x2c
 800235c:	fb01 f303 	mul.w	r3, r1, r3
 8002360:	4413      	add	r3, r2
 8002362:	3354      	adds	r3, #84	; 0x54
 8002364:	4602      	mov	r2, r0
 8002366:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	b2d9      	uxtb	r1, r3
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	202c      	movs	r0, #44	; 0x2c
 8002372:	fb00 f303 	mul.w	r3, r0, r3
 8002376:	4413      	add	r3, r2
 8002378:	3360      	adds	r3, #96	; 0x60
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	461a      	mov	r2, r3
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f005 ff8c 	bl	800829c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d12b      	bne.n	80023e4 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	212c      	movs	r1, #44	; 0x2c
 8002392:	fb01 f303 	mul.w	r3, r1, r3
 8002396:	4413      	add	r3, r2
 8002398:	3348      	adds	r3, #72	; 0x48
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	202c      	movs	r0, #44	; 0x2c
 80023a2:	fb00 f202 	mul.w	r2, r0, r2
 80023a6:	440a      	add	r2, r1
 80023a8:	3240      	adds	r2, #64	; 0x40
 80023aa:	8812      	ldrh	r2, [r2, #0]
 80023ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 81be 	beq.w	8002736 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	212c      	movs	r1, #44	; 0x2c
 80023c0:	fb01 f303 	mul.w	r3, r1, r3
 80023c4:	4413      	add	r3, r2
 80023c6:	3354      	adds	r3, #84	; 0x54
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	f083 0301 	eor.w	r3, r3, #1
 80023ce:	b2d8      	uxtb	r0, r3
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	212c      	movs	r1, #44	; 0x2c
 80023d6:	fb01 f303 	mul.w	r3, r1, r3
 80023da:	4413      	add	r3, r2
 80023dc:	3354      	adds	r3, #84	; 0x54
 80023de:	4602      	mov	r2, r0
 80023e0:	701a      	strb	r2, [r3, #0]
}
 80023e2:	e1a8      	b.n	8002736 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	212c      	movs	r1, #44	; 0x2c
 80023ea:	fb01 f303 	mul.w	r3, r1, r3
 80023ee:	4413      	add	r3, r2
 80023f0:	3354      	adds	r3, #84	; 0x54
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	f083 0301 	eor.w	r3, r3, #1
 80023f8:	b2d8      	uxtb	r0, r3
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	212c      	movs	r1, #44	; 0x2c
 8002400:	fb01 f303 	mul.w	r3, r1, r3
 8002404:	4413      	add	r3, r2
 8002406:	3354      	adds	r3, #84	; 0x54
 8002408:	4602      	mov	r2, r0
 800240a:	701a      	strb	r2, [r3, #0]
}
 800240c:	e193      	b.n	8002736 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	015a      	lsls	r2, r3, #5
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4413      	add	r3, r2
 8002416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b02      	cmp	r3, #2
 8002422:	f040 8106 	bne.w	8002632 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	015a      	lsls	r2, r3, #5
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4413      	add	r3, r2
 800242e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	0151      	lsls	r1, r2, #5
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	440a      	add	r2, r1
 800243c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002440:	f023 0302 	bic.w	r3, r3, #2
 8002444:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	212c      	movs	r1, #44	; 0x2c
 800244c:	fb01 f303 	mul.w	r3, r1, r3
 8002450:	4413      	add	r3, r2
 8002452:	3361      	adds	r3, #97	; 0x61
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d109      	bne.n	800246e <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	212c      	movs	r1, #44	; 0x2c
 8002460:	fb01 f303 	mul.w	r3, r1, r3
 8002464:	4413      	add	r3, r2
 8002466:	3360      	adds	r3, #96	; 0x60
 8002468:	2201      	movs	r2, #1
 800246a:	701a      	strb	r2, [r3, #0]
 800246c:	e0c9      	b.n	8002602 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	212c      	movs	r1, #44	; 0x2c
 8002474:	fb01 f303 	mul.w	r3, r1, r3
 8002478:	4413      	add	r3, r2
 800247a:	3361      	adds	r3, #97	; 0x61
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b05      	cmp	r3, #5
 8002480:	d109      	bne.n	8002496 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	212c      	movs	r1, #44	; 0x2c
 8002488:	fb01 f303 	mul.w	r3, r1, r3
 800248c:	4413      	add	r3, r2
 800248e:	3360      	adds	r3, #96	; 0x60
 8002490:	2205      	movs	r2, #5
 8002492:	701a      	strb	r2, [r3, #0]
 8002494:	e0b5      	b.n	8002602 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	212c      	movs	r1, #44	; 0x2c
 800249c:	fb01 f303 	mul.w	r3, r1, r3
 80024a0:	4413      	add	r3, r2
 80024a2:	3361      	adds	r3, #97	; 0x61
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b06      	cmp	r3, #6
 80024a8:	d009      	beq.n	80024be <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	212c      	movs	r1, #44	; 0x2c
 80024b0:	fb01 f303 	mul.w	r3, r1, r3
 80024b4:	4413      	add	r3, r2
 80024b6:	3361      	adds	r3, #97	; 0x61
 80024b8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024ba:	2b08      	cmp	r3, #8
 80024bc:	d150      	bne.n	8002560 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	212c      	movs	r1, #44	; 0x2c
 80024c4:	fb01 f303 	mul.w	r3, r1, r3
 80024c8:	4413      	add	r3, r2
 80024ca:	335c      	adds	r3, #92	; 0x5c
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	1c5a      	adds	r2, r3, #1
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	202c      	movs	r0, #44	; 0x2c
 80024d6:	fb00 f303 	mul.w	r3, r0, r3
 80024da:	440b      	add	r3, r1
 80024dc:	335c      	adds	r3, #92	; 0x5c
 80024de:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	212c      	movs	r1, #44	; 0x2c
 80024e6:	fb01 f303 	mul.w	r3, r1, r3
 80024ea:	4413      	add	r3, r2
 80024ec:	335c      	adds	r3, #92	; 0x5c
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d912      	bls.n	800251a <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	212c      	movs	r1, #44	; 0x2c
 80024fa:	fb01 f303 	mul.w	r3, r1, r3
 80024fe:	4413      	add	r3, r2
 8002500:	335c      	adds	r3, #92	; 0x5c
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	212c      	movs	r1, #44	; 0x2c
 800250c:	fb01 f303 	mul.w	r3, r1, r3
 8002510:	4413      	add	r3, r2
 8002512:	3360      	adds	r3, #96	; 0x60
 8002514:	2204      	movs	r2, #4
 8002516:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002518:	e073      	b.n	8002602 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	212c      	movs	r1, #44	; 0x2c
 8002520:	fb01 f303 	mul.w	r3, r1, r3
 8002524:	4413      	add	r3, r2
 8002526:	3360      	adds	r3, #96	; 0x60
 8002528:	2202      	movs	r2, #2
 800252a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	015a      	lsls	r2, r3, #5
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4413      	add	r3, r2
 8002534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002542:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800254a:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	015a      	lsls	r2, r3, #5
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4413      	add	r3, r2
 8002554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002558:	461a      	mov	r2, r3
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800255e:	e050      	b.n	8002602 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	212c      	movs	r1, #44	; 0x2c
 8002566:	fb01 f303 	mul.w	r3, r1, r3
 800256a:	4413      	add	r3, r2
 800256c:	3361      	adds	r3, #97	; 0x61
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b03      	cmp	r3, #3
 8002572:	d122      	bne.n	80025ba <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	212c      	movs	r1, #44	; 0x2c
 800257a:	fb01 f303 	mul.w	r3, r1, r3
 800257e:	4413      	add	r3, r2
 8002580:	3360      	adds	r3, #96	; 0x60
 8002582:	2202      	movs	r2, #2
 8002584:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	015a      	lsls	r2, r3, #5
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4413      	add	r3, r2
 800258e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800259c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025a4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	015a      	lsls	r2, r3, #5
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	4413      	add	r3, r2
 80025ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b2:	461a      	mov	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	e023      	b.n	8002602 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	212c      	movs	r1, #44	; 0x2c
 80025c0:	fb01 f303 	mul.w	r3, r1, r3
 80025c4:	4413      	add	r3, r2
 80025c6:	3361      	adds	r3, #97	; 0x61
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b07      	cmp	r3, #7
 80025cc:	d119      	bne.n	8002602 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	212c      	movs	r1, #44	; 0x2c
 80025d4:	fb01 f303 	mul.w	r3, r1, r3
 80025d8:	4413      	add	r3, r2
 80025da:	335c      	adds	r3, #92	; 0x5c
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	202c      	movs	r0, #44	; 0x2c
 80025e6:	fb00 f303 	mul.w	r3, r0, r3
 80025ea:	440b      	add	r3, r1
 80025ec:	335c      	adds	r3, #92	; 0x5c
 80025ee:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	212c      	movs	r1, #44	; 0x2c
 80025f6:	fb01 f303 	mul.w	r3, r1, r3
 80025fa:	4413      	add	r3, r2
 80025fc:	3360      	adds	r3, #96	; 0x60
 80025fe:	2204      	movs	r2, #4
 8002600:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	015a      	lsls	r2, r3, #5
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4413      	add	r3, r2
 800260a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260e:	461a      	mov	r2, r3
 8002610:	2302      	movs	r3, #2
 8002612:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	b2d9      	uxtb	r1, r3
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	202c      	movs	r0, #44	; 0x2c
 800261e:	fb00 f303 	mul.w	r3, r0, r3
 8002622:	4413      	add	r3, r2
 8002624:	3360      	adds	r3, #96	; 0x60
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	461a      	mov	r2, r3
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f005 fe36 	bl	800829c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002630:	e081      	b.n	8002736 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	015a      	lsls	r2, r3, #5
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4413      	add	r3, r2
 800263a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 0310 	and.w	r3, r3, #16
 8002644:	2b10      	cmp	r3, #16
 8002646:	d176      	bne.n	8002736 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	212c      	movs	r1, #44	; 0x2c
 800264e:	fb01 f303 	mul.w	r3, r1, r3
 8002652:	4413      	add	r3, r2
 8002654:	333f      	adds	r3, #63	; 0x3f
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b03      	cmp	r3, #3
 800265a:	d121      	bne.n	80026a0 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	212c      	movs	r1, #44	; 0x2c
 8002662:	fb01 f303 	mul.w	r3, r1, r3
 8002666:	4413      	add	r3, r2
 8002668:	335c      	adds	r3, #92	; 0x5c
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	015a      	lsls	r2, r3, #5
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	4413      	add	r3, r2
 8002676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	0151      	lsls	r1, r2, #5
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	440a      	add	r2, r1
 8002684:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002688:	f043 0302 	orr.w	r3, r3, #2
 800268c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	4611      	mov	r1, r2
 8002698:	4618      	mov	r0, r3
 800269a:	f003 fc42 	bl	8005f22 <USB_HC_Halt>
 800269e:	e041      	b.n	8002724 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	212c      	movs	r1, #44	; 0x2c
 80026a6:	fb01 f303 	mul.w	r3, r1, r3
 80026aa:	4413      	add	r3, r2
 80026ac:	333f      	adds	r3, #63	; 0x3f
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d009      	beq.n	80026c8 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	212c      	movs	r1, #44	; 0x2c
 80026ba:	fb01 f303 	mul.w	r3, r1, r3
 80026be:	4413      	add	r3, r2
 80026c0:	333f      	adds	r3, #63	; 0x3f
 80026c2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d12d      	bne.n	8002724 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	212c      	movs	r1, #44	; 0x2c
 80026ce:	fb01 f303 	mul.w	r3, r1, r3
 80026d2:	4413      	add	r3, r2
 80026d4:	335c      	adds	r3, #92	; 0x5c
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d120      	bne.n	8002724 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	212c      	movs	r1, #44	; 0x2c
 80026e8:	fb01 f303 	mul.w	r3, r1, r3
 80026ec:	4413      	add	r3, r2
 80026ee:	3361      	adds	r3, #97	; 0x61
 80026f0:	2203      	movs	r2, #3
 80026f2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	015a      	lsls	r2, r3, #5
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	4413      	add	r3, r2
 80026fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	0151      	lsls	r1, r2, #5
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	440a      	add	r2, r1
 800270a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800270e:	f043 0302 	orr.w	r3, r3, #2
 8002712:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	4611      	mov	r1, r2
 800271e:	4618      	mov	r0, r3
 8002720:	f003 fbff 	bl	8005f22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4413      	add	r3, r2
 800272c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002730:	461a      	mov	r2, r3
 8002732:	2310      	movs	r3, #16
 8002734:	6093      	str	r3, [r2, #8]
}
 8002736:	bf00      	nop
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b088      	sub	sp, #32
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	460b      	mov	r3, r1
 8002748:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002754:	78fb      	ldrb	r3, [r7, #3]
 8002756:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	015a      	lsls	r2, r3, #5
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	4413      	add	r3, r2
 8002760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 0304 	and.w	r3, r3, #4
 800276a:	2b04      	cmp	r3, #4
 800276c:	d119      	bne.n	80027a2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	015a      	lsls	r2, r3, #5
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	4413      	add	r3, r2
 8002776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277a:	461a      	mov	r2, r3
 800277c:	2304      	movs	r3, #4
 800277e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	015a      	lsls	r2, r3, #5
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	4413      	add	r3, r2
 8002788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	0151      	lsls	r1, r2, #5
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	440a      	add	r2, r1
 8002796:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800279a:	f043 0302 	orr.w	r3, r3, #2
 800279e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80027a0:	e3ca      	b.n	8002f38 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	015a      	lsls	r2, r3, #5
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	4413      	add	r3, r2
 80027aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 0320 	and.w	r3, r3, #32
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	d13e      	bne.n	8002836 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c4:	461a      	mov	r2, r3
 80027c6:	2320      	movs	r3, #32
 80027c8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	212c      	movs	r1, #44	; 0x2c
 80027d0:	fb01 f303 	mul.w	r3, r1, r3
 80027d4:	4413      	add	r3, r2
 80027d6:	333d      	adds	r3, #61	; 0x3d
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	f040 83ac 	bne.w	8002f38 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	212c      	movs	r1, #44	; 0x2c
 80027e6:	fb01 f303 	mul.w	r3, r1, r3
 80027ea:	4413      	add	r3, r2
 80027ec:	333d      	adds	r3, #61	; 0x3d
 80027ee:	2200      	movs	r2, #0
 80027f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	212c      	movs	r1, #44	; 0x2c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	3360      	adds	r3, #96	; 0x60
 8002800:	2202      	movs	r2, #2
 8002802:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	015a      	lsls	r2, r3, #5
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	4413      	add	r3, r2
 800280c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	0151      	lsls	r1, r2, #5
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	440a      	add	r2, r1
 800281a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800281e:	f043 0302 	orr.w	r3, r3, #2
 8002822:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	4611      	mov	r1, r2
 800282e:	4618      	mov	r0, r3
 8002830:	f003 fb77 	bl	8005f22 <USB_HC_Halt>
}
 8002834:	e380      	b.n	8002f38 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	015a      	lsls	r2, r3, #5
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	4413      	add	r3, r2
 800283e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800284c:	d122      	bne.n	8002894 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	4413      	add	r3, r2
 8002856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	0151      	lsls	r1, r2, #5
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	440a      	add	r2, r1
 8002864:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002868:	f043 0302 	orr.w	r3, r3, #2
 800286c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	4611      	mov	r1, r2
 8002878:	4618      	mov	r0, r3
 800287a:	f003 fb52 	bl	8005f22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	015a      	lsls	r2, r3, #5
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	4413      	add	r3, r2
 8002886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288a:	461a      	mov	r2, r3
 800288c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002890:	6093      	str	r3, [r2, #8]
}
 8002892:	e351      	b.n	8002f38 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	015a      	lsls	r2, r3, #5
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	4413      	add	r3, r2
 800289c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d150      	bne.n	800294c <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	212c      	movs	r1, #44	; 0x2c
 80028b0:	fb01 f303 	mul.w	r3, r1, r3
 80028b4:	4413      	add	r3, r2
 80028b6:	335c      	adds	r3, #92	; 0x5c
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	015a      	lsls	r2, r3, #5
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ce:	2b40      	cmp	r3, #64	; 0x40
 80028d0:	d111      	bne.n	80028f6 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	212c      	movs	r1, #44	; 0x2c
 80028d8:	fb01 f303 	mul.w	r3, r1, r3
 80028dc:	4413      	add	r3, r2
 80028de:	333d      	adds	r3, #61	; 0x3d
 80028e0:	2201      	movs	r2, #1
 80028e2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	015a      	lsls	r2, r3, #5
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	4413      	add	r3, r2
 80028ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f0:	461a      	mov	r2, r3
 80028f2:	2340      	movs	r3, #64	; 0x40
 80028f4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	015a      	lsls	r2, r3, #5
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	4413      	add	r3, r2
 80028fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	0151      	lsls	r1, r2, #5
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	440a      	add	r2, r1
 800290c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002910:	f043 0302 	orr.w	r3, r3, #2
 8002914:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	4611      	mov	r1, r2
 8002920:	4618      	mov	r0, r3
 8002922:	f003 fafe 	bl	8005f22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	015a      	lsls	r2, r3, #5
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	4413      	add	r3, r2
 800292e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002932:	461a      	mov	r2, r3
 8002934:	2301      	movs	r3, #1
 8002936:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	212c      	movs	r1, #44	; 0x2c
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	4413      	add	r3, r2
 8002944:	3361      	adds	r3, #97	; 0x61
 8002946:	2201      	movs	r2, #1
 8002948:	701a      	strb	r2, [r3, #0]
}
 800294a:	e2f5      	b.n	8002f38 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	015a      	lsls	r2, r3, #5
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	4413      	add	r3, r2
 8002954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295e:	2b40      	cmp	r3, #64	; 0x40
 8002960:	d13c      	bne.n	80029dc <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	212c      	movs	r1, #44	; 0x2c
 8002968:	fb01 f303 	mul.w	r3, r1, r3
 800296c:	4413      	add	r3, r2
 800296e:	3361      	adds	r3, #97	; 0x61
 8002970:	2204      	movs	r2, #4
 8002972:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	212c      	movs	r1, #44	; 0x2c
 800297a:	fb01 f303 	mul.w	r3, r1, r3
 800297e:	4413      	add	r3, r2
 8002980:	333d      	adds	r3, #61	; 0x3d
 8002982:	2201      	movs	r2, #1
 8002984:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	212c      	movs	r1, #44	; 0x2c
 800298c:	fb01 f303 	mul.w	r3, r1, r3
 8002990:	4413      	add	r3, r2
 8002992:	335c      	adds	r3, #92	; 0x5c
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	0151      	lsls	r1, r2, #5
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	440a      	add	r2, r1
 80029ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029b2:	f043 0302 	orr.w	r3, r3, #2
 80029b6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	4611      	mov	r1, r2
 80029c2:	4618      	mov	r0, r3
 80029c4:	f003 faad 	bl	8005f22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	015a      	lsls	r2, r3, #5
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d4:	461a      	mov	r2, r3
 80029d6:	2340      	movs	r3, #64	; 0x40
 80029d8:	6093      	str	r3, [r2, #8]
}
 80029da:	e2ad      	b.n	8002f38 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	015a      	lsls	r2, r3, #5
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d12a      	bne.n	8002a48 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	015a      	lsls	r2, r3, #5
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fe:	461a      	mov	r2, r3
 8002a00:	2308      	movs	r3, #8
 8002a02:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	015a      	lsls	r2, r3, #5
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	0151      	lsls	r1, r2, #5
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	440a      	add	r2, r1
 8002a1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a1e:	f043 0302 	orr.w	r3, r3, #2
 8002a22:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	4611      	mov	r1, r2
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f003 fa77 	bl	8005f22 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	212c      	movs	r1, #44	; 0x2c
 8002a3a:	fb01 f303 	mul.w	r3, r1, r3
 8002a3e:	4413      	add	r3, r2
 8002a40:	3361      	adds	r3, #97	; 0x61
 8002a42:	2205      	movs	r2, #5
 8002a44:	701a      	strb	r2, [r3, #0]
}
 8002a46:	e277      	b.n	8002f38 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	015a      	lsls	r2, r3, #5
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	4413      	add	r3, r2
 8002a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 0310 	and.w	r3, r3, #16
 8002a5a:	2b10      	cmp	r3, #16
 8002a5c:	d150      	bne.n	8002b00 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	212c      	movs	r1, #44	; 0x2c
 8002a64:	fb01 f303 	mul.w	r3, r1, r3
 8002a68:	4413      	add	r3, r2
 8002a6a:	335c      	adds	r3, #92	; 0x5c
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	212c      	movs	r1, #44	; 0x2c
 8002a76:	fb01 f303 	mul.w	r3, r1, r3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3361      	adds	r3, #97	; 0x61
 8002a7e:	2203      	movs	r2, #3
 8002a80:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	212c      	movs	r1, #44	; 0x2c
 8002a88:	fb01 f303 	mul.w	r3, r1, r3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	333d      	adds	r3, #61	; 0x3d
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d112      	bne.n	8002abc <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	212c      	movs	r1, #44	; 0x2c
 8002a9c:	fb01 f303 	mul.w	r3, r1, r3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	333c      	adds	r3, #60	; 0x3c
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d108      	bne.n	8002abc <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	212c      	movs	r1, #44	; 0x2c
 8002ab0:	fb01 f303 	mul.w	r3, r1, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	333d      	adds	r3, #61	; 0x3d
 8002ab8:	2201      	movs	r2, #1
 8002aba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	015a      	lsls	r2, r3, #5
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	0151      	lsls	r1, r2, #5
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	440a      	add	r2, r1
 8002ad2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ad6:	f043 0302 	orr.w	r3, r3, #2
 8002ada:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	4611      	mov	r1, r2
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f003 fa1b 	bl	8005f22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af8:	461a      	mov	r2, r3
 8002afa:	2310      	movs	r3, #16
 8002afc:	6093      	str	r3, [r2, #8]
}
 8002afe:	e21b      	b.n	8002f38 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	015a      	lsls	r2, r3, #5
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b12:	2b80      	cmp	r3, #128	; 0x80
 8002b14:	d174      	bne.n	8002c00 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d121      	bne.n	8002b62 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	212c      	movs	r1, #44	; 0x2c
 8002b24:	fb01 f303 	mul.w	r3, r1, r3
 8002b28:	4413      	add	r3, r2
 8002b2a:	3361      	adds	r3, #97	; 0x61
 8002b2c:	2206      	movs	r2, #6
 8002b2e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	015a      	lsls	r2, r3, #5
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	4413      	add	r3, r2
 8002b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	0151      	lsls	r1, r2, #5
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	440a      	add	r2, r1
 8002b46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b4a:	f043 0302 	orr.w	r3, r3, #2
 8002b4e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	4611      	mov	r1, r2
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f003 f9e1 	bl	8005f22 <USB_HC_Halt>
 8002b60:	e044      	b.n	8002bec <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	212c      	movs	r1, #44	; 0x2c
 8002b68:	fb01 f303 	mul.w	r3, r1, r3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	335c      	adds	r3, #92	; 0x5c
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	202c      	movs	r0, #44	; 0x2c
 8002b7a:	fb00 f303 	mul.w	r3, r0, r3
 8002b7e:	440b      	add	r3, r1
 8002b80:	335c      	adds	r3, #92	; 0x5c
 8002b82:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	212c      	movs	r1, #44	; 0x2c
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	335c      	adds	r3, #92	; 0x5c
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d920      	bls.n	8002bda <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	212c      	movs	r1, #44	; 0x2c
 8002b9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	335c      	adds	r3, #92	; 0x5c
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	212c      	movs	r1, #44	; 0x2c
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3360      	adds	r3, #96	; 0x60
 8002bb8:	2204      	movs	r2, #4
 8002bba:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	b2d9      	uxtb	r1, r3
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	202c      	movs	r0, #44	; 0x2c
 8002bc6:	fb00 f303 	mul.w	r3, r0, r3
 8002bca:	4413      	add	r3, r2
 8002bcc:	3360      	adds	r3, #96	; 0x60
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f005 fb62 	bl	800829c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002bd8:	e008      	b.n	8002bec <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	212c      	movs	r1, #44	; 0x2c
 8002be0:	fb01 f303 	mul.w	r3, r1, r3
 8002be4:	4413      	add	r3, r2
 8002be6:	3360      	adds	r3, #96	; 0x60
 8002be8:	2202      	movs	r2, #2
 8002bea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	015a      	lsls	r2, r3, #5
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	2380      	movs	r3, #128	; 0x80
 8002bfc:	6093      	str	r3, [r2, #8]
}
 8002bfe:	e19b      	b.n	8002f38 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	015a      	lsls	r2, r3, #5
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	4413      	add	r3, r2
 8002c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c16:	d134      	bne.n	8002c82 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	015a      	lsls	r2, r3, #5
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	0151      	lsls	r1, r2, #5
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	440a      	add	r2, r1
 8002c2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c32:	f043 0302 	orr.w	r3, r3, #2
 8002c36:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	4611      	mov	r1, r2
 8002c42:	4618      	mov	r0, r3
 8002c44:	f003 f96d 	bl	8005f22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c54:	461a      	mov	r2, r3
 8002c56:	2310      	movs	r3, #16
 8002c58:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c66:	461a      	mov	r2, r3
 8002c68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	212c      	movs	r1, #44	; 0x2c
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	4413      	add	r3, r2
 8002c7a:	3361      	adds	r3, #97	; 0x61
 8002c7c:	2208      	movs	r2, #8
 8002c7e:	701a      	strb	r2, [r3, #0]
}
 8002c80:	e15a      	b.n	8002f38 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	015a      	lsls	r2, r3, #5
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	4413      	add	r3, r2
 8002c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	f040 814f 	bne.w	8002f38 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	015a      	lsls	r2, r3, #5
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	0151      	lsls	r1, r2, #5
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	440a      	add	r2, r1
 8002cb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cb4:	f023 0302 	bic.w	r3, r3, #2
 8002cb8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	212c      	movs	r1, #44	; 0x2c
 8002cc0:	fb01 f303 	mul.w	r3, r1, r3
 8002cc4:	4413      	add	r3, r2
 8002cc6:	3361      	adds	r3, #97	; 0x61
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d17d      	bne.n	8002dca <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	212c      	movs	r1, #44	; 0x2c
 8002cd4:	fb01 f303 	mul.w	r3, r1, r3
 8002cd8:	4413      	add	r3, r2
 8002cda:	3360      	adds	r3, #96	; 0x60
 8002cdc:	2201      	movs	r2, #1
 8002cde:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	212c      	movs	r1, #44	; 0x2c
 8002ce6:	fb01 f303 	mul.w	r3, r1, r3
 8002cea:	4413      	add	r3, r2
 8002cec:	333f      	adds	r3, #63	; 0x3f
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d00a      	beq.n	8002d0a <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	212c      	movs	r1, #44	; 0x2c
 8002cfa:	fb01 f303 	mul.w	r3, r1, r3
 8002cfe:	4413      	add	r3, r2
 8002d00:	333f      	adds	r3, #63	; 0x3f
 8002d02:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	f040 8100 	bne.w	8002f0a <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d113      	bne.n	8002d3a <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	212c      	movs	r1, #44	; 0x2c
 8002d18:	fb01 f303 	mul.w	r3, r1, r3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3355      	adds	r3, #85	; 0x55
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	f083 0301 	eor.w	r3, r3, #1
 8002d26:	b2d8      	uxtb	r0, r3
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	212c      	movs	r1, #44	; 0x2c
 8002d2e:	fb01 f303 	mul.w	r3, r1, r3
 8002d32:	4413      	add	r3, r2
 8002d34:	3355      	adds	r3, #85	; 0x55
 8002d36:	4602      	mov	r2, r0
 8002d38:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	f040 80e3 	bne.w	8002f0a <HCD_HC_OUT_IRQHandler+0x7cc>
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	212c      	movs	r1, #44	; 0x2c
 8002d4a:	fb01 f303 	mul.w	r3, r1, r3
 8002d4e:	4413      	add	r3, r2
 8002d50:	334c      	adds	r3, #76	; 0x4c
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 80d8 	beq.w	8002f0a <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	212c      	movs	r1, #44	; 0x2c
 8002d60:	fb01 f303 	mul.w	r3, r1, r3
 8002d64:	4413      	add	r3, r2
 8002d66:	334c      	adds	r3, #76	; 0x4c
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	202c      	movs	r0, #44	; 0x2c
 8002d70:	fb00 f202 	mul.w	r2, r0, r2
 8002d74:	440a      	add	r2, r1
 8002d76:	3240      	adds	r2, #64	; 0x40
 8002d78:	8812      	ldrh	r2, [r2, #0]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	202c      	movs	r0, #44	; 0x2c
 8002d84:	fb00 f202 	mul.w	r2, r0, r2
 8002d88:	440a      	add	r2, r1
 8002d8a:	3240      	adds	r2, #64	; 0x40
 8002d8c:	8812      	ldrh	r2, [r2, #0]
 8002d8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 80b5 	beq.w	8002f0a <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	212c      	movs	r1, #44	; 0x2c
 8002da6:	fb01 f303 	mul.w	r3, r1, r3
 8002daa:	4413      	add	r3, r2
 8002dac:	3355      	adds	r3, #85	; 0x55
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	f083 0301 	eor.w	r3, r3, #1
 8002db4:	b2d8      	uxtb	r0, r3
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	212c      	movs	r1, #44	; 0x2c
 8002dbc:	fb01 f303 	mul.w	r3, r1, r3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	3355      	adds	r3, #85	; 0x55
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	701a      	strb	r2, [r3, #0]
 8002dc8:	e09f      	b.n	8002f0a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	212c      	movs	r1, #44	; 0x2c
 8002dd0:	fb01 f303 	mul.w	r3, r1, r3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3361      	adds	r3, #97	; 0x61
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b03      	cmp	r3, #3
 8002ddc:	d109      	bne.n	8002df2 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	212c      	movs	r1, #44	; 0x2c
 8002de4:	fb01 f303 	mul.w	r3, r1, r3
 8002de8:	4413      	add	r3, r2
 8002dea:	3360      	adds	r3, #96	; 0x60
 8002dec:	2202      	movs	r2, #2
 8002dee:	701a      	strb	r2, [r3, #0]
 8002df0:	e08b      	b.n	8002f0a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	212c      	movs	r1, #44	; 0x2c
 8002df8:	fb01 f303 	mul.w	r3, r1, r3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3361      	adds	r3, #97	; 0x61
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d109      	bne.n	8002e1a <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	212c      	movs	r1, #44	; 0x2c
 8002e0c:	fb01 f303 	mul.w	r3, r1, r3
 8002e10:	4413      	add	r3, r2
 8002e12:	3360      	adds	r3, #96	; 0x60
 8002e14:	2202      	movs	r2, #2
 8002e16:	701a      	strb	r2, [r3, #0]
 8002e18:	e077      	b.n	8002f0a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	212c      	movs	r1, #44	; 0x2c
 8002e20:	fb01 f303 	mul.w	r3, r1, r3
 8002e24:	4413      	add	r3, r2
 8002e26:	3361      	adds	r3, #97	; 0x61
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	2b05      	cmp	r3, #5
 8002e2c:	d109      	bne.n	8002e42 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	212c      	movs	r1, #44	; 0x2c
 8002e34:	fb01 f303 	mul.w	r3, r1, r3
 8002e38:	4413      	add	r3, r2
 8002e3a:	3360      	adds	r3, #96	; 0x60
 8002e3c:	2205      	movs	r2, #5
 8002e3e:	701a      	strb	r2, [r3, #0]
 8002e40:	e063      	b.n	8002f0a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	212c      	movs	r1, #44	; 0x2c
 8002e48:	fb01 f303 	mul.w	r3, r1, r3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3361      	adds	r3, #97	; 0x61
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	2b06      	cmp	r3, #6
 8002e54:	d009      	beq.n	8002e6a <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	212c      	movs	r1, #44	; 0x2c
 8002e5c:	fb01 f303 	mul.w	r3, r1, r3
 8002e60:	4413      	add	r3, r2
 8002e62:	3361      	adds	r3, #97	; 0x61
 8002e64:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e66:	2b08      	cmp	r3, #8
 8002e68:	d14f      	bne.n	8002f0a <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	212c      	movs	r1, #44	; 0x2c
 8002e70:	fb01 f303 	mul.w	r3, r1, r3
 8002e74:	4413      	add	r3, r2
 8002e76:	335c      	adds	r3, #92	; 0x5c
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	202c      	movs	r0, #44	; 0x2c
 8002e82:	fb00 f303 	mul.w	r3, r0, r3
 8002e86:	440b      	add	r3, r1
 8002e88:	335c      	adds	r3, #92	; 0x5c
 8002e8a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	212c      	movs	r1, #44	; 0x2c
 8002e92:	fb01 f303 	mul.w	r3, r1, r3
 8002e96:	4413      	add	r3, r2
 8002e98:	335c      	adds	r3, #92	; 0x5c
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d912      	bls.n	8002ec6 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	212c      	movs	r1, #44	; 0x2c
 8002ea6:	fb01 f303 	mul.w	r3, r1, r3
 8002eaa:	4413      	add	r3, r2
 8002eac:	335c      	adds	r3, #92	; 0x5c
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	212c      	movs	r1, #44	; 0x2c
 8002eb8:	fb01 f303 	mul.w	r3, r1, r3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	3360      	adds	r3, #96	; 0x60
 8002ec0:	2204      	movs	r2, #4
 8002ec2:	701a      	strb	r2, [r3, #0]
 8002ec4:	e021      	b.n	8002f0a <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	212c      	movs	r1, #44	; 0x2c
 8002ecc:	fb01 f303 	mul.w	r3, r1, r3
 8002ed0:	4413      	add	r3, r2
 8002ed2:	3360      	adds	r3, #96	; 0x60
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	015a      	lsls	r2, r3, #5
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	4413      	add	r3, r2
 8002ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002eee:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ef6:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	015a      	lsls	r2, r3, #5
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	4413      	add	r3, r2
 8002f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f04:	461a      	mov	r2, r3
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	015a      	lsls	r2, r3, #5
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	4413      	add	r3, r2
 8002f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f16:	461a      	mov	r2, r3
 8002f18:	2302      	movs	r3, #2
 8002f1a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	b2d9      	uxtb	r1, r3
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	202c      	movs	r0, #44	; 0x2c
 8002f26:	fb00 f303 	mul.w	r3, r0, r3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	3360      	adds	r3, #96	; 0x60
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	461a      	mov	r2, r3
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f005 f9b2 	bl	800829c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f38:	bf00      	nop
 8002f3a:	3720      	adds	r7, #32
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08a      	sub	sp, #40	; 0x28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	f003 030f 	and.w	r3, r3, #15
 8002f60:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	0c5b      	lsrs	r3, r3, #17
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	091b      	lsrs	r3, r3, #4
 8002f70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f74:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d004      	beq.n	8002f86 <HCD_RXQLVL_IRQHandler+0x46>
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	2b05      	cmp	r3, #5
 8002f80:	f000 80a9 	beq.w	80030d6 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002f84:	e0aa      	b.n	80030dc <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 80a6 	beq.w	80030da <HCD_RXQLVL_IRQHandler+0x19a>
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	212c      	movs	r1, #44	; 0x2c
 8002f94:	fb01 f303 	mul.w	r3, r1, r3
 8002f98:	4413      	add	r3, r2
 8002f9a:	3344      	adds	r3, #68	; 0x44
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 809b 	beq.w	80030da <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	212c      	movs	r1, #44	; 0x2c
 8002faa:	fb01 f303 	mul.w	r3, r1, r3
 8002fae:	4413      	add	r3, r2
 8002fb0:	3350      	adds	r3, #80	; 0x50
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	441a      	add	r2, r3
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	202c      	movs	r0, #44	; 0x2c
 8002fbe:	fb00 f303 	mul.w	r3, r0, r3
 8002fc2:	440b      	add	r3, r1
 8002fc4:	334c      	adds	r3, #76	; 0x4c
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d87a      	bhi.n	80030c2 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6818      	ldr	r0, [r3, #0]
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	212c      	movs	r1, #44	; 0x2c
 8002fd6:	fb01 f303 	mul.w	r3, r1, r3
 8002fda:	4413      	add	r3, r2
 8002fdc:	3344      	adds	r3, #68	; 0x44
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	b292      	uxth	r2, r2
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	f002 fb15 	bl	8005614 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	212c      	movs	r1, #44	; 0x2c
 8002ff0:	fb01 f303 	mul.w	r3, r1, r3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3344      	adds	r3, #68	; 0x44
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	441a      	add	r2, r3
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	202c      	movs	r0, #44	; 0x2c
 8003004:	fb00 f303 	mul.w	r3, r0, r3
 8003008:	440b      	add	r3, r1
 800300a:	3344      	adds	r3, #68	; 0x44
 800300c:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	212c      	movs	r1, #44	; 0x2c
 8003014:	fb01 f303 	mul.w	r3, r1, r3
 8003018:	4413      	add	r3, r2
 800301a:	3350      	adds	r3, #80	; 0x50
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	441a      	add	r2, r3
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	202c      	movs	r0, #44	; 0x2c
 8003028:	fb00 f303 	mul.w	r3, r0, r3
 800302c:	440b      	add	r3, r1
 800302e:	3350      	adds	r3, #80	; 0x50
 8003030:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	6a3b      	ldr	r3, [r7, #32]
 8003038:	4413      	add	r3, r2
 800303a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	0cdb      	lsrs	r3, r3, #19
 8003042:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003046:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	212c      	movs	r1, #44	; 0x2c
 800304e:	fb01 f303 	mul.w	r3, r1, r3
 8003052:	4413      	add	r3, r2
 8003054:	3340      	adds	r3, #64	; 0x40
 8003056:	881b      	ldrh	r3, [r3, #0]
 8003058:	461a      	mov	r2, r3
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	4293      	cmp	r3, r2
 800305e:	d13c      	bne.n	80030da <HCD_RXQLVL_IRQHandler+0x19a>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d039      	beq.n	80030da <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	015a      	lsls	r2, r3, #5
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	4413      	add	r3, r2
 800306e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800307c:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003084:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	015a      	lsls	r2, r3, #5
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	4413      	add	r3, r2
 800308e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003092:	461a      	mov	r2, r3
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	212c      	movs	r1, #44	; 0x2c
 800309e:	fb01 f303 	mul.w	r3, r1, r3
 80030a2:	4413      	add	r3, r2
 80030a4:	3354      	adds	r3, #84	; 0x54
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	f083 0301 	eor.w	r3, r3, #1
 80030ac:	b2d8      	uxtb	r0, r3
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	212c      	movs	r1, #44	; 0x2c
 80030b4:	fb01 f303 	mul.w	r3, r1, r3
 80030b8:	4413      	add	r3, r2
 80030ba:	3354      	adds	r3, #84	; 0x54
 80030bc:	4602      	mov	r2, r0
 80030be:	701a      	strb	r2, [r3, #0]
      break;
 80030c0:	e00b      	b.n	80030da <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	212c      	movs	r1, #44	; 0x2c
 80030c8:	fb01 f303 	mul.w	r3, r1, r3
 80030cc:	4413      	add	r3, r2
 80030ce:	3360      	adds	r3, #96	; 0x60
 80030d0:	2204      	movs	r2, #4
 80030d2:	701a      	strb	r2, [r3, #0]
      break;
 80030d4:	e001      	b.n	80030da <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80030d6:	bf00      	nop
 80030d8:	e000      	b.n	80030dc <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80030da:	bf00      	nop
  }
}
 80030dc:	bf00      	nop
 80030de:	3728      	adds	r7, #40	; 0x28
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003110:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b02      	cmp	r3, #2
 800311a:	d10b      	bne.n	8003134 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b01      	cmp	r3, #1
 8003124:	d102      	bne.n	800312c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f005 f89c 	bl	8008264 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	f043 0302 	orr.w	r3, r3, #2
 8003132:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	2b08      	cmp	r3, #8
 800313c:	d132      	bne.n	80031a4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	f043 0308 	orr.w	r3, r3, #8
 8003144:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b04      	cmp	r3, #4
 800314e:	d126      	bne.n	800319e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d113      	bne.n	8003180 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800315e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003162:	d106      	bne.n	8003172 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2102      	movs	r1, #2
 800316a:	4618      	mov	r0, r3
 800316c:	f002 fbb2 	bl	80058d4 <USB_InitFSLSPClkSel>
 8003170:	e011      	b.n	8003196 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2101      	movs	r1, #1
 8003178:	4618      	mov	r0, r3
 800317a:	f002 fbab 	bl	80058d4 <USB_InitFSLSPClkSel>
 800317e:	e00a      	b.n	8003196 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d106      	bne.n	8003196 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800318e:	461a      	mov	r2, r3
 8003190:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003194:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f005 f88e 	bl	80082b8 <HAL_HCD_PortEnabled_Callback>
 800319c:	e002      	b.n	80031a4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f005 f898 	bl	80082d4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f003 0320 	and.w	r3, r3, #32
 80031aa:	2b20      	cmp	r3, #32
 80031ac:	d103      	bne.n	80031b6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	f043 0320 	orr.w	r3, r3, #32
 80031b4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80031bc:	461a      	mov	r2, r3
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	6013      	str	r3, [r2, #0]
}
 80031c2:	bf00      	nop
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e264      	b.n	80036a8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d075      	beq.n	80032d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031ea:	4ba3      	ldr	r3, [pc, #652]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 030c 	and.w	r3, r3, #12
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d00c      	beq.n	8003210 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031f6:	4ba0      	ldr	r3, [pc, #640]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031fe:	2b08      	cmp	r3, #8
 8003200:	d112      	bne.n	8003228 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003202:	4b9d      	ldr	r3, [pc, #628]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800320a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800320e:	d10b      	bne.n	8003228 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003210:	4b99      	ldr	r3, [pc, #612]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d05b      	beq.n	80032d4 <HAL_RCC_OscConfig+0x108>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d157      	bne.n	80032d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e23f      	b.n	80036a8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003230:	d106      	bne.n	8003240 <HAL_RCC_OscConfig+0x74>
 8003232:	4b91      	ldr	r3, [pc, #580]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a90      	ldr	r2, [pc, #576]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 8003238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	e01d      	b.n	800327c <HAL_RCC_OscConfig+0xb0>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003248:	d10c      	bne.n	8003264 <HAL_RCC_OscConfig+0x98>
 800324a:	4b8b      	ldr	r3, [pc, #556]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a8a      	ldr	r2, [pc, #552]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 8003250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	4b88      	ldr	r3, [pc, #544]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a87      	ldr	r2, [pc, #540]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 800325c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	e00b      	b.n	800327c <HAL_RCC_OscConfig+0xb0>
 8003264:	4b84      	ldr	r3, [pc, #528]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a83      	ldr	r2, [pc, #524]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 800326a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800326e:	6013      	str	r3, [r2, #0]
 8003270:	4b81      	ldr	r3, [pc, #516]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a80      	ldr	r2, [pc, #512]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 8003276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800327a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d013      	beq.n	80032ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003284:	f7fd fea8 	bl	8000fd8 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800328c:	f7fd fea4 	bl	8000fd8 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b64      	cmp	r3, #100	; 0x64
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e204      	b.n	80036a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329e:	4b76      	ldr	r3, [pc, #472]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f0      	beq.n	800328c <HAL_RCC_OscConfig+0xc0>
 80032aa:	e014      	b.n	80032d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ac:	f7fd fe94 	bl	8000fd8 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032b4:	f7fd fe90 	bl	8000fd8 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b64      	cmp	r3, #100	; 0x64
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e1f0      	b.n	80036a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c6:	4b6c      	ldr	r3, [pc, #432]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f0      	bne.n	80032b4 <HAL_RCC_OscConfig+0xe8>
 80032d2:	e000      	b.n	80032d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d063      	beq.n	80033aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032e2:	4b65      	ldr	r3, [pc, #404]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 030c 	and.w	r3, r3, #12
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00b      	beq.n	8003306 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ee:	4b62      	ldr	r3, [pc, #392]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d11c      	bne.n	8003334 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032fa:	4b5f      	ldr	r3, [pc, #380]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d116      	bne.n	8003334 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003306:	4b5c      	ldr	r3, [pc, #368]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d005      	beq.n	800331e <HAL_RCC_OscConfig+0x152>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d001      	beq.n	800331e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e1c4      	b.n	80036a8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800331e:	4b56      	ldr	r3, [pc, #344]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	4952      	ldr	r1, [pc, #328]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 800332e:	4313      	orrs	r3, r2
 8003330:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003332:	e03a      	b.n	80033aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d020      	beq.n	800337e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800333c:	4b4f      	ldr	r3, [pc, #316]	; (800347c <HAL_RCC_OscConfig+0x2b0>)
 800333e:	2201      	movs	r2, #1
 8003340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003342:	f7fd fe49 	bl	8000fd8 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800334a:	f7fd fe45 	bl	8000fd8 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e1a5      	b.n	80036a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335c:	4b46      	ldr	r3, [pc, #280]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0f0      	beq.n	800334a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003368:	4b43      	ldr	r3, [pc, #268]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	4940      	ldr	r1, [pc, #256]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 8003378:	4313      	orrs	r3, r2
 800337a:	600b      	str	r3, [r1, #0]
 800337c:	e015      	b.n	80033aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800337e:	4b3f      	ldr	r3, [pc, #252]	; (800347c <HAL_RCC_OscConfig+0x2b0>)
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003384:	f7fd fe28 	bl	8000fd8 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800338c:	f7fd fe24 	bl	8000fd8 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e184      	b.n	80036a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800339e:	4b36      	ldr	r3, [pc, #216]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1f0      	bne.n	800338c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0308 	and.w	r3, r3, #8
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d030      	beq.n	8003418 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d016      	beq.n	80033ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033be:	4b30      	ldr	r3, [pc, #192]	; (8003480 <HAL_RCC_OscConfig+0x2b4>)
 80033c0:	2201      	movs	r2, #1
 80033c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c4:	f7fd fe08 	bl	8000fd8 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033cc:	f7fd fe04 	bl	8000fd8 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e164      	b.n	80036a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033de:	4b26      	ldr	r3, [pc, #152]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 80033e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0f0      	beq.n	80033cc <HAL_RCC_OscConfig+0x200>
 80033ea:	e015      	b.n	8003418 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ec:	4b24      	ldr	r3, [pc, #144]	; (8003480 <HAL_RCC_OscConfig+0x2b4>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f2:	f7fd fdf1 	bl	8000fd8 <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f8:	e008      	b.n	800340c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033fa:	f7fd fded 	bl	8000fd8 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e14d      	b.n	80036a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800340c:	4b1a      	ldr	r3, [pc, #104]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 800340e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1f0      	bne.n	80033fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 80a0 	beq.w	8003566 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003426:	2300      	movs	r3, #0
 8003428:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800342a:	4b13      	ldr	r3, [pc, #76]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10f      	bne.n	8003456 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003436:	2300      	movs	r3, #0
 8003438:	60bb      	str	r3, [r7, #8]
 800343a:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	4a0e      	ldr	r2, [pc, #56]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 8003440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003444:	6413      	str	r3, [r2, #64]	; 0x40
 8003446:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344e:	60bb      	str	r3, [r7, #8]
 8003450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003452:	2301      	movs	r3, #1
 8003454:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003456:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <HAL_RCC_OscConfig+0x2b8>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345e:	2b00      	cmp	r3, #0
 8003460:	d121      	bne.n	80034a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003462:	4b08      	ldr	r3, [pc, #32]	; (8003484 <HAL_RCC_OscConfig+0x2b8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a07      	ldr	r2, [pc, #28]	; (8003484 <HAL_RCC_OscConfig+0x2b8>)
 8003468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800346c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800346e:	f7fd fdb3 	bl	8000fd8 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003474:	e011      	b.n	800349a <HAL_RCC_OscConfig+0x2ce>
 8003476:	bf00      	nop
 8003478:	40023800 	.word	0x40023800
 800347c:	42470000 	.word	0x42470000
 8003480:	42470e80 	.word	0x42470e80
 8003484:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003488:	f7fd fda6 	bl	8000fd8 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e106      	b.n	80036a8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349a:	4b85      	ldr	r3, [pc, #532]	; (80036b0 <HAL_RCC_OscConfig+0x4e4>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0f0      	beq.n	8003488 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d106      	bne.n	80034bc <HAL_RCC_OscConfig+0x2f0>
 80034ae:	4b81      	ldr	r3, [pc, #516]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 80034b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b2:	4a80      	ldr	r2, [pc, #512]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	6713      	str	r3, [r2, #112]	; 0x70
 80034ba:	e01c      	b.n	80034f6 <HAL_RCC_OscConfig+0x32a>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	2b05      	cmp	r3, #5
 80034c2:	d10c      	bne.n	80034de <HAL_RCC_OscConfig+0x312>
 80034c4:	4b7b      	ldr	r3, [pc, #492]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 80034c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c8:	4a7a      	ldr	r2, [pc, #488]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 80034ca:	f043 0304 	orr.w	r3, r3, #4
 80034ce:	6713      	str	r3, [r2, #112]	; 0x70
 80034d0:	4b78      	ldr	r3, [pc, #480]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 80034d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d4:	4a77      	ldr	r2, [pc, #476]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 80034d6:	f043 0301 	orr.w	r3, r3, #1
 80034da:	6713      	str	r3, [r2, #112]	; 0x70
 80034dc:	e00b      	b.n	80034f6 <HAL_RCC_OscConfig+0x32a>
 80034de:	4b75      	ldr	r3, [pc, #468]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 80034e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e2:	4a74      	ldr	r2, [pc, #464]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 80034e4:	f023 0301 	bic.w	r3, r3, #1
 80034e8:	6713      	str	r3, [r2, #112]	; 0x70
 80034ea:	4b72      	ldr	r3, [pc, #456]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 80034ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ee:	4a71      	ldr	r2, [pc, #452]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 80034f0:	f023 0304 	bic.w	r3, r3, #4
 80034f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d015      	beq.n	800352a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fe:	f7fd fd6b 	bl	8000fd8 <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003504:	e00a      	b.n	800351c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003506:	f7fd fd67 	bl	8000fd8 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	f241 3288 	movw	r2, #5000	; 0x1388
 8003514:	4293      	cmp	r3, r2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e0c5      	b.n	80036a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800351c:	4b65      	ldr	r3, [pc, #404]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 800351e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0ee      	beq.n	8003506 <HAL_RCC_OscConfig+0x33a>
 8003528:	e014      	b.n	8003554 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352a:	f7fd fd55 	bl	8000fd8 <HAL_GetTick>
 800352e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003530:	e00a      	b.n	8003548 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003532:	f7fd fd51 	bl	8000fd8 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003540:	4293      	cmp	r3, r2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e0af      	b.n	80036a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003548:	4b5a      	ldr	r3, [pc, #360]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 800354a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1ee      	bne.n	8003532 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003554:	7dfb      	ldrb	r3, [r7, #23]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d105      	bne.n	8003566 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800355a:	4b56      	ldr	r3, [pc, #344]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	4a55      	ldr	r2, [pc, #340]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 8003560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003564:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 809b 	beq.w	80036a6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003570:	4b50      	ldr	r3, [pc, #320]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 030c 	and.w	r3, r3, #12
 8003578:	2b08      	cmp	r3, #8
 800357a:	d05c      	beq.n	8003636 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	2b02      	cmp	r3, #2
 8003582:	d141      	bne.n	8003608 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003584:	4b4c      	ldr	r3, [pc, #304]	; (80036b8 <HAL_RCC_OscConfig+0x4ec>)
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358a:	f7fd fd25 	bl	8000fd8 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003592:	f7fd fd21 	bl	8000fd8 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e081      	b.n	80036a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a4:	4b43      	ldr	r3, [pc, #268]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1f0      	bne.n	8003592 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69da      	ldr	r2, [r3, #28]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	431a      	orrs	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	019b      	lsls	r3, r3, #6
 80035c0:	431a      	orrs	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c6:	085b      	lsrs	r3, r3, #1
 80035c8:	3b01      	subs	r3, #1
 80035ca:	041b      	lsls	r3, r3, #16
 80035cc:	431a      	orrs	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d2:	061b      	lsls	r3, r3, #24
 80035d4:	4937      	ldr	r1, [pc, #220]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035da:	4b37      	ldr	r3, [pc, #220]	; (80036b8 <HAL_RCC_OscConfig+0x4ec>)
 80035dc:	2201      	movs	r2, #1
 80035de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e0:	f7fd fcfa 	bl	8000fd8 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e8:	f7fd fcf6 	bl	8000fd8 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e056      	b.n	80036a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035fa:	4b2e      	ldr	r3, [pc, #184]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0f0      	beq.n	80035e8 <HAL_RCC_OscConfig+0x41c>
 8003606:	e04e      	b.n	80036a6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003608:	4b2b      	ldr	r3, [pc, #172]	; (80036b8 <HAL_RCC_OscConfig+0x4ec>)
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360e:	f7fd fce3 	bl	8000fd8 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003616:	f7fd fcdf 	bl	8000fd8 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e03f      	b.n	80036a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003628:	4b22      	ldr	r3, [pc, #136]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1f0      	bne.n	8003616 <HAL_RCC_OscConfig+0x44a>
 8003634:	e037      	b.n	80036a6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d101      	bne.n	8003642 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e032      	b.n	80036a8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003642:	4b1c      	ldr	r3, [pc, #112]	; (80036b4 <HAL_RCC_OscConfig+0x4e8>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d028      	beq.n	80036a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800365a:	429a      	cmp	r2, r3
 800365c:	d121      	bne.n	80036a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003668:	429a      	cmp	r2, r3
 800366a:	d11a      	bne.n	80036a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003672:	4013      	ands	r3, r2
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003678:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800367a:	4293      	cmp	r3, r2
 800367c:	d111      	bne.n	80036a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003688:	085b      	lsrs	r3, r3, #1
 800368a:	3b01      	subs	r3, #1
 800368c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800368e:	429a      	cmp	r2, r3
 8003690:	d107      	bne.n	80036a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800369e:	429a      	cmp	r2, r3
 80036a0:	d001      	beq.n	80036a6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40007000 	.word	0x40007000
 80036b4:	40023800 	.word	0x40023800
 80036b8:	42470060 	.word	0x42470060

080036bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e0cc      	b.n	800386a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036d0:	4b68      	ldr	r3, [pc, #416]	; (8003874 <HAL_RCC_ClockConfig+0x1b8>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d90c      	bls.n	80036f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036de:	4b65      	ldr	r3, [pc, #404]	; (8003874 <HAL_RCC_ClockConfig+0x1b8>)
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e6:	4b63      	ldr	r3, [pc, #396]	; (8003874 <HAL_RCC_ClockConfig+0x1b8>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d001      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e0b8      	b.n	800386a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d020      	beq.n	8003746 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003710:	4b59      	ldr	r3, [pc, #356]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	4a58      	ldr	r2, [pc, #352]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800371a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0308 	and.w	r3, r3, #8
 8003724:	2b00      	cmp	r3, #0
 8003726:	d005      	beq.n	8003734 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003728:	4b53      	ldr	r3, [pc, #332]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	4a52      	ldr	r2, [pc, #328]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800372e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003732:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003734:	4b50      	ldr	r3, [pc, #320]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	494d      	ldr	r1, [pc, #308]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	4313      	orrs	r3, r2
 8003744:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d044      	beq.n	80037dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d107      	bne.n	800376a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800375a:	4b47      	ldr	r3, [pc, #284]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d119      	bne.n	800379a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e07f      	b.n	800386a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2b02      	cmp	r3, #2
 8003770:	d003      	beq.n	800377a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003776:	2b03      	cmp	r3, #3
 8003778:	d107      	bne.n	800378a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800377a:	4b3f      	ldr	r3, [pc, #252]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d109      	bne.n	800379a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e06f      	b.n	800386a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800378a:	4b3b      	ldr	r3, [pc, #236]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e067      	b.n	800386a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800379a:	4b37      	ldr	r3, [pc, #220]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f023 0203 	bic.w	r2, r3, #3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	4934      	ldr	r1, [pc, #208]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037ac:	f7fd fc14 	bl	8000fd8 <HAL_GetTick>
 80037b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b2:	e00a      	b.n	80037ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b4:	f7fd fc10 	bl	8000fd8 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e04f      	b.n	800386a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ca:	4b2b      	ldr	r3, [pc, #172]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 020c 	and.w	r2, r3, #12
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	429a      	cmp	r2, r3
 80037da:	d1eb      	bne.n	80037b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037dc:	4b25      	ldr	r3, [pc, #148]	; (8003874 <HAL_RCC_ClockConfig+0x1b8>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d20c      	bcs.n	8003804 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ea:	4b22      	ldr	r3, [pc, #136]	; (8003874 <HAL_RCC_ClockConfig+0x1b8>)
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f2:	4b20      	ldr	r3, [pc, #128]	; (8003874 <HAL_RCC_ClockConfig+0x1b8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d001      	beq.n	8003804 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e032      	b.n	800386a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d008      	beq.n	8003822 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003810:	4b19      	ldr	r3, [pc, #100]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	4916      	ldr	r1, [pc, #88]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	4313      	orrs	r3, r2
 8003820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b00      	cmp	r3, #0
 800382c:	d009      	beq.n	8003842 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800382e:	4b12      	ldr	r3, [pc, #72]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	490e      	ldr	r1, [pc, #56]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800383e:	4313      	orrs	r3, r2
 8003840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003842:	f000 f821 	bl	8003888 <HAL_RCC_GetSysClockFreq>
 8003846:	4602      	mov	r2, r0
 8003848:	4b0b      	ldr	r3, [pc, #44]	; (8003878 <HAL_RCC_ClockConfig+0x1bc>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	091b      	lsrs	r3, r3, #4
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	490a      	ldr	r1, [pc, #40]	; (800387c <HAL_RCC_ClockConfig+0x1c0>)
 8003854:	5ccb      	ldrb	r3, [r1, r3]
 8003856:	fa22 f303 	lsr.w	r3, r2, r3
 800385a:	4a09      	ldr	r2, [pc, #36]	; (8003880 <HAL_RCC_ClockConfig+0x1c4>)
 800385c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800385e:	4b09      	ldr	r3, [pc, #36]	; (8003884 <HAL_RCC_ClockConfig+0x1c8>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f7fd fb74 	bl	8000f50 <HAL_InitTick>

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40023c00 	.word	0x40023c00
 8003878:	40023800 	.word	0x40023800
 800387c:	08008908 	.word	0x08008908
 8003880:	20000000 	.word	0x20000000
 8003884:	20000004 	.word	0x20000004

08003888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003888:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800388c:	b084      	sub	sp, #16
 800388e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003890:	2300      	movs	r3, #0
 8003892:	607b      	str	r3, [r7, #4]
 8003894:	2300      	movs	r3, #0
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	2300      	movs	r3, #0
 800389a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038a0:	4b67      	ldr	r3, [pc, #412]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 030c 	and.w	r3, r3, #12
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d00d      	beq.n	80038c8 <HAL_RCC_GetSysClockFreq+0x40>
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	f200 80bd 	bhi.w	8003a2c <HAL_RCC_GetSysClockFreq+0x1a4>
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d002      	beq.n	80038bc <HAL_RCC_GetSysClockFreq+0x34>
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d003      	beq.n	80038c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80038ba:	e0b7      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038bc:	4b61      	ldr	r3, [pc, #388]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80038be:	60bb      	str	r3, [r7, #8]
       break;
 80038c0:	e0b7      	b.n	8003a32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038c2:	4b61      	ldr	r3, [pc, #388]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80038c4:	60bb      	str	r3, [r7, #8]
      break;
 80038c6:	e0b4      	b.n	8003a32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038c8:	4b5d      	ldr	r3, [pc, #372]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038d2:	4b5b      	ldr	r3, [pc, #364]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d04d      	beq.n	800397a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038de:	4b58      	ldr	r3, [pc, #352]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	099b      	lsrs	r3, r3, #6
 80038e4:	461a      	mov	r2, r3
 80038e6:	f04f 0300 	mov.w	r3, #0
 80038ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80038ee:	f04f 0100 	mov.w	r1, #0
 80038f2:	ea02 0800 	and.w	r8, r2, r0
 80038f6:	ea03 0901 	and.w	r9, r3, r1
 80038fa:	4640      	mov	r0, r8
 80038fc:	4649      	mov	r1, r9
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	f04f 0300 	mov.w	r3, #0
 8003906:	014b      	lsls	r3, r1, #5
 8003908:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800390c:	0142      	lsls	r2, r0, #5
 800390e:	4610      	mov	r0, r2
 8003910:	4619      	mov	r1, r3
 8003912:	ebb0 0008 	subs.w	r0, r0, r8
 8003916:	eb61 0109 	sbc.w	r1, r1, r9
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	018b      	lsls	r3, r1, #6
 8003924:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003928:	0182      	lsls	r2, r0, #6
 800392a:	1a12      	subs	r2, r2, r0
 800392c:	eb63 0301 	sbc.w	r3, r3, r1
 8003930:	f04f 0000 	mov.w	r0, #0
 8003934:	f04f 0100 	mov.w	r1, #0
 8003938:	00d9      	lsls	r1, r3, #3
 800393a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800393e:	00d0      	lsls	r0, r2, #3
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	eb12 0208 	adds.w	r2, r2, r8
 8003948:	eb43 0309 	adc.w	r3, r3, r9
 800394c:	f04f 0000 	mov.w	r0, #0
 8003950:	f04f 0100 	mov.w	r1, #0
 8003954:	0259      	lsls	r1, r3, #9
 8003956:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800395a:	0250      	lsls	r0, r2, #9
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	4610      	mov	r0, r2
 8003962:	4619      	mov	r1, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	461a      	mov	r2, r3
 8003968:	f04f 0300 	mov.w	r3, #0
 800396c:	f7fc fc2c 	bl	80001c8 <__aeabi_uldivmod>
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	4613      	mov	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	e04a      	b.n	8003a10 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800397a:	4b31      	ldr	r3, [pc, #196]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	099b      	lsrs	r3, r3, #6
 8003980:	461a      	mov	r2, r3
 8003982:	f04f 0300 	mov.w	r3, #0
 8003986:	f240 10ff 	movw	r0, #511	; 0x1ff
 800398a:	f04f 0100 	mov.w	r1, #0
 800398e:	ea02 0400 	and.w	r4, r2, r0
 8003992:	ea03 0501 	and.w	r5, r3, r1
 8003996:	4620      	mov	r0, r4
 8003998:	4629      	mov	r1, r5
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	014b      	lsls	r3, r1, #5
 80039a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80039a8:	0142      	lsls	r2, r0, #5
 80039aa:	4610      	mov	r0, r2
 80039ac:	4619      	mov	r1, r3
 80039ae:	1b00      	subs	r0, r0, r4
 80039b0:	eb61 0105 	sbc.w	r1, r1, r5
 80039b4:	f04f 0200 	mov.w	r2, #0
 80039b8:	f04f 0300 	mov.w	r3, #0
 80039bc:	018b      	lsls	r3, r1, #6
 80039be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80039c2:	0182      	lsls	r2, r0, #6
 80039c4:	1a12      	subs	r2, r2, r0
 80039c6:	eb63 0301 	sbc.w	r3, r3, r1
 80039ca:	f04f 0000 	mov.w	r0, #0
 80039ce:	f04f 0100 	mov.w	r1, #0
 80039d2:	00d9      	lsls	r1, r3, #3
 80039d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039d8:	00d0      	lsls	r0, r2, #3
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	1912      	adds	r2, r2, r4
 80039e0:	eb45 0303 	adc.w	r3, r5, r3
 80039e4:	f04f 0000 	mov.w	r0, #0
 80039e8:	f04f 0100 	mov.w	r1, #0
 80039ec:	0299      	lsls	r1, r3, #10
 80039ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80039f2:	0290      	lsls	r0, r2, #10
 80039f4:	4602      	mov	r2, r0
 80039f6:	460b      	mov	r3, r1
 80039f8:	4610      	mov	r0, r2
 80039fa:	4619      	mov	r1, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	461a      	mov	r2, r3
 8003a00:	f04f 0300 	mov.w	r3, #0
 8003a04:	f7fc fbe0 	bl	80001c8 <__aeabi_uldivmod>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a10:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	0c1b      	lsrs	r3, r3, #16
 8003a16:	f003 0303 	and.w	r3, r3, #3
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a28:	60bb      	str	r3, [r7, #8]
      break;
 8003a2a:	e002      	b.n	8003a32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a2c:	4b05      	ldr	r3, [pc, #20]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003a2e:	60bb      	str	r3, [r7, #8]
      break;
 8003a30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a32:	68bb      	ldr	r3, [r7, #8]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a3e:	bf00      	nop
 8003a40:	40023800 	.word	0x40023800
 8003a44:	00f42400 	.word	0x00f42400
 8003a48:	007a1200 	.word	0x007a1200

08003a4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a50:	4b03      	ldr	r3, [pc, #12]	; (8003a60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a52:	681b      	ldr	r3, [r3, #0]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	20000000 	.word	0x20000000

08003a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a68:	f7ff fff0 	bl	8003a4c <HAL_RCC_GetHCLKFreq>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	0a9b      	lsrs	r3, r3, #10
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	4903      	ldr	r1, [pc, #12]	; (8003a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a7a:	5ccb      	ldrb	r3, [r1, r3]
 8003a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40023800 	.word	0x40023800
 8003a88:	08008918 	.word	0x08008918

08003a8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a90:	f7ff ffdc 	bl	8003a4c <HAL_RCC_GetHCLKFreq>
 8003a94:	4602      	mov	r2, r0
 8003a96:	4b05      	ldr	r3, [pc, #20]	; (8003aac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	0b5b      	lsrs	r3, r3, #13
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	4903      	ldr	r1, [pc, #12]	; (8003ab0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aa2:	5ccb      	ldrb	r3, [r1, r3]
 8003aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	08008918 	.word	0x08008918

08003ab4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e041      	b.n	8003b4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d106      	bne.n	8003ae0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7fd f928 	bl	8000d30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3304      	adds	r3, #4
 8003af0:	4619      	mov	r1, r3
 8003af2:	4610      	mov	r0, r2
 8003af4:	f000 faa0 	bl	8004038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d001      	beq.n	8003b6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e04e      	b.n	8003c0a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68da      	ldr	r2, [r3, #12]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0201 	orr.w	r2, r2, #1
 8003b82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a23      	ldr	r2, [pc, #140]	; (8003c18 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d022      	beq.n	8003bd4 <HAL_TIM_Base_Start_IT+0x80>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b96:	d01d      	beq.n	8003bd4 <HAL_TIM_Base_Start_IT+0x80>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a1f      	ldr	r2, [pc, #124]	; (8003c1c <HAL_TIM_Base_Start_IT+0xc8>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d018      	beq.n	8003bd4 <HAL_TIM_Base_Start_IT+0x80>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a1e      	ldr	r2, [pc, #120]	; (8003c20 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d013      	beq.n	8003bd4 <HAL_TIM_Base_Start_IT+0x80>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a1c      	ldr	r2, [pc, #112]	; (8003c24 <HAL_TIM_Base_Start_IT+0xd0>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d00e      	beq.n	8003bd4 <HAL_TIM_Base_Start_IT+0x80>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a1b      	ldr	r2, [pc, #108]	; (8003c28 <HAL_TIM_Base_Start_IT+0xd4>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d009      	beq.n	8003bd4 <HAL_TIM_Base_Start_IT+0x80>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a19      	ldr	r2, [pc, #100]	; (8003c2c <HAL_TIM_Base_Start_IT+0xd8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d004      	beq.n	8003bd4 <HAL_TIM_Base_Start_IT+0x80>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a18      	ldr	r2, [pc, #96]	; (8003c30 <HAL_TIM_Base_Start_IT+0xdc>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d111      	bne.n	8003bf8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2b06      	cmp	r3, #6
 8003be4:	d010      	beq.n	8003c08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f042 0201 	orr.w	r2, r2, #1
 8003bf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf6:	e007      	b.n	8003c08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0201 	orr.w	r2, r2, #1
 8003c06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	40010000 	.word	0x40010000
 8003c1c:	40000400 	.word	0x40000400
 8003c20:	40000800 	.word	0x40000800
 8003c24:	40000c00 	.word	0x40000c00
 8003c28:	40010400 	.word	0x40010400
 8003c2c:	40014000 	.word	0x40014000
 8003c30:	40001800 	.word	0x40001800

08003c34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d122      	bne.n	8003c90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d11b      	bne.n	8003c90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f06f 0202 	mvn.w	r2, #2
 8003c60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	f003 0303 	and.w	r3, r3, #3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f9bf 	bl	8003ffa <HAL_TIM_IC_CaptureCallback>
 8003c7c:	e005      	b.n	8003c8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f9b1 	bl	8003fe6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f9c2 	bl	800400e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d122      	bne.n	8003ce4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b04      	cmp	r3, #4
 8003caa:	d11b      	bne.n	8003ce4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f06f 0204 	mvn.w	r2, #4
 8003cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2202      	movs	r2, #2
 8003cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f995 	bl	8003ffa <HAL_TIM_IC_CaptureCallback>
 8003cd0:	e005      	b.n	8003cde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f987 	bl	8003fe6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f998 	bl	800400e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	f003 0308 	and.w	r3, r3, #8
 8003cee:	2b08      	cmp	r3, #8
 8003cf0:	d122      	bne.n	8003d38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f003 0308 	and.w	r3, r3, #8
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	d11b      	bne.n	8003d38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f06f 0208 	mvn.w	r2, #8
 8003d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2204      	movs	r2, #4
 8003d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	f003 0303 	and.w	r3, r3, #3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f96b 	bl	8003ffa <HAL_TIM_IC_CaptureCallback>
 8003d24:	e005      	b.n	8003d32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f95d 	bl	8003fe6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f96e 	bl	800400e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	f003 0310 	and.w	r3, r3, #16
 8003d42:	2b10      	cmp	r3, #16
 8003d44:	d122      	bne.n	8003d8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f003 0310 	and.w	r3, r3, #16
 8003d50:	2b10      	cmp	r3, #16
 8003d52:	d11b      	bne.n	8003d8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f06f 0210 	mvn.w	r2, #16
 8003d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2208      	movs	r2, #8
 8003d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f941 	bl	8003ffa <HAL_TIM_IC_CaptureCallback>
 8003d78:	e005      	b.n	8003d86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f933 	bl	8003fe6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f944 	bl	800400e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d10e      	bne.n	8003db8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d107      	bne.n	8003db8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f06f 0201 	mvn.w	r2, #1
 8003db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f90d 	bl	8003fd2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc2:	2b80      	cmp	r3, #128	; 0x80
 8003dc4:	d10e      	bne.n	8003de4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd0:	2b80      	cmp	r3, #128	; 0x80
 8003dd2:	d107      	bne.n	8003de4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 faea 	bl	80043b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dee:	2b40      	cmp	r3, #64	; 0x40
 8003df0:	d10e      	bne.n	8003e10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfc:	2b40      	cmp	r3, #64	; 0x40
 8003dfe:	d107      	bne.n	8003e10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f909 	bl	8004022 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	f003 0320 	and.w	r3, r3, #32
 8003e1a:	2b20      	cmp	r3, #32
 8003e1c:	d10e      	bne.n	8003e3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f003 0320 	and.w	r3, r3, #32
 8003e28:	2b20      	cmp	r3, #32
 8003e2a:	d107      	bne.n	8003e3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f06f 0220 	mvn.w	r2, #32
 8003e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 fab4 	bl	80043a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e3c:	bf00      	nop
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d101      	bne.n	8003e60 <HAL_TIM_ConfigClockSource+0x1c>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	e0b4      	b.n	8003fca <HAL_TIM_ConfigClockSource+0x186>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e98:	d03e      	beq.n	8003f18 <HAL_TIM_ConfigClockSource+0xd4>
 8003e9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e9e:	f200 8087 	bhi.w	8003fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea6:	f000 8086 	beq.w	8003fb6 <HAL_TIM_ConfigClockSource+0x172>
 8003eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eae:	d87f      	bhi.n	8003fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb0:	2b70      	cmp	r3, #112	; 0x70
 8003eb2:	d01a      	beq.n	8003eea <HAL_TIM_ConfigClockSource+0xa6>
 8003eb4:	2b70      	cmp	r3, #112	; 0x70
 8003eb6:	d87b      	bhi.n	8003fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb8:	2b60      	cmp	r3, #96	; 0x60
 8003eba:	d050      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x11a>
 8003ebc:	2b60      	cmp	r3, #96	; 0x60
 8003ebe:	d877      	bhi.n	8003fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec0:	2b50      	cmp	r3, #80	; 0x50
 8003ec2:	d03c      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0xfa>
 8003ec4:	2b50      	cmp	r3, #80	; 0x50
 8003ec6:	d873      	bhi.n	8003fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec8:	2b40      	cmp	r3, #64	; 0x40
 8003eca:	d058      	beq.n	8003f7e <HAL_TIM_ConfigClockSource+0x13a>
 8003ecc:	2b40      	cmp	r3, #64	; 0x40
 8003ece:	d86f      	bhi.n	8003fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed0:	2b30      	cmp	r3, #48	; 0x30
 8003ed2:	d064      	beq.n	8003f9e <HAL_TIM_ConfigClockSource+0x15a>
 8003ed4:	2b30      	cmp	r3, #48	; 0x30
 8003ed6:	d86b      	bhi.n	8003fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed8:	2b20      	cmp	r3, #32
 8003eda:	d060      	beq.n	8003f9e <HAL_TIM_ConfigClockSource+0x15a>
 8003edc:	2b20      	cmp	r3, #32
 8003ede:	d867      	bhi.n	8003fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d05c      	beq.n	8003f9e <HAL_TIM_ConfigClockSource+0x15a>
 8003ee4:	2b10      	cmp	r3, #16
 8003ee6:	d05a      	beq.n	8003f9e <HAL_TIM_ConfigClockSource+0x15a>
 8003ee8:	e062      	b.n	8003fb0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6818      	ldr	r0, [r3, #0]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	6899      	ldr	r1, [r3, #8]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f000 f9b7 	bl	800426c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	609a      	str	r2, [r3, #8]
      break;
 8003f16:	e04f      	b.n	8003fb8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6818      	ldr	r0, [r3, #0]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	6899      	ldr	r1, [r3, #8]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f000 f9a0 	bl	800426c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689a      	ldr	r2, [r3, #8]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f3a:	609a      	str	r2, [r3, #8]
      break;
 8003f3c:	e03c      	b.n	8003fb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6818      	ldr	r0, [r3, #0]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	6859      	ldr	r1, [r3, #4]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f000 f914 	bl	8004178 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2150      	movs	r1, #80	; 0x50
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 f96d 	bl	8004236 <TIM_ITRx_SetConfig>
      break;
 8003f5c:	e02c      	b.n	8003fb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6818      	ldr	r0, [r3, #0]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	6859      	ldr	r1, [r3, #4]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	f000 f933 	bl	80041d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2160      	movs	r1, #96	; 0x60
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 f95d 	bl	8004236 <TIM_ITRx_SetConfig>
      break;
 8003f7c:	e01c      	b.n	8003fb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6818      	ldr	r0, [r3, #0]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	6859      	ldr	r1, [r3, #4]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	f000 f8f4 	bl	8004178 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2140      	movs	r1, #64	; 0x40
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 f94d 	bl	8004236 <TIM_ITRx_SetConfig>
      break;
 8003f9c:	e00c      	b.n	8003fb8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	4610      	mov	r0, r2
 8003faa:	f000 f944 	bl	8004236 <TIM_ITRx_SetConfig>
      break;
 8003fae:	e003      	b.n	8003fb8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fb4:	e000      	b.n	8003fb8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003fb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800400e:	b480      	push	{r7}
 8004010:	b083      	sub	sp, #12
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004022:	b480      	push	{r7}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
	...

08004038 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a40      	ldr	r2, [pc, #256]	; (800414c <TIM_Base_SetConfig+0x114>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d013      	beq.n	8004078 <TIM_Base_SetConfig+0x40>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004056:	d00f      	beq.n	8004078 <TIM_Base_SetConfig+0x40>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a3d      	ldr	r2, [pc, #244]	; (8004150 <TIM_Base_SetConfig+0x118>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d00b      	beq.n	8004078 <TIM_Base_SetConfig+0x40>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a3c      	ldr	r2, [pc, #240]	; (8004154 <TIM_Base_SetConfig+0x11c>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d007      	beq.n	8004078 <TIM_Base_SetConfig+0x40>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a3b      	ldr	r2, [pc, #236]	; (8004158 <TIM_Base_SetConfig+0x120>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d003      	beq.n	8004078 <TIM_Base_SetConfig+0x40>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a3a      	ldr	r2, [pc, #232]	; (800415c <TIM_Base_SetConfig+0x124>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d108      	bne.n	800408a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	4313      	orrs	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a2f      	ldr	r2, [pc, #188]	; (800414c <TIM_Base_SetConfig+0x114>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d02b      	beq.n	80040ea <TIM_Base_SetConfig+0xb2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004098:	d027      	beq.n	80040ea <TIM_Base_SetConfig+0xb2>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a2c      	ldr	r2, [pc, #176]	; (8004150 <TIM_Base_SetConfig+0x118>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d023      	beq.n	80040ea <TIM_Base_SetConfig+0xb2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a2b      	ldr	r2, [pc, #172]	; (8004154 <TIM_Base_SetConfig+0x11c>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d01f      	beq.n	80040ea <TIM_Base_SetConfig+0xb2>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a2a      	ldr	r2, [pc, #168]	; (8004158 <TIM_Base_SetConfig+0x120>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d01b      	beq.n	80040ea <TIM_Base_SetConfig+0xb2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a29      	ldr	r2, [pc, #164]	; (800415c <TIM_Base_SetConfig+0x124>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d017      	beq.n	80040ea <TIM_Base_SetConfig+0xb2>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a28      	ldr	r2, [pc, #160]	; (8004160 <TIM_Base_SetConfig+0x128>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d013      	beq.n	80040ea <TIM_Base_SetConfig+0xb2>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a27      	ldr	r2, [pc, #156]	; (8004164 <TIM_Base_SetConfig+0x12c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d00f      	beq.n	80040ea <TIM_Base_SetConfig+0xb2>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a26      	ldr	r2, [pc, #152]	; (8004168 <TIM_Base_SetConfig+0x130>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d00b      	beq.n	80040ea <TIM_Base_SetConfig+0xb2>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a25      	ldr	r2, [pc, #148]	; (800416c <TIM_Base_SetConfig+0x134>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d007      	beq.n	80040ea <TIM_Base_SetConfig+0xb2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a24      	ldr	r2, [pc, #144]	; (8004170 <TIM_Base_SetConfig+0x138>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d003      	beq.n	80040ea <TIM_Base_SetConfig+0xb2>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a23      	ldr	r2, [pc, #140]	; (8004174 <TIM_Base_SetConfig+0x13c>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d108      	bne.n	80040fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	4313      	orrs	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a0a      	ldr	r2, [pc, #40]	; (800414c <TIM_Base_SetConfig+0x114>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d003      	beq.n	8004130 <TIM_Base_SetConfig+0xf8>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a0c      	ldr	r2, [pc, #48]	; (800415c <TIM_Base_SetConfig+0x124>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d103      	bne.n	8004138 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	615a      	str	r2, [r3, #20]
}
 800413e:	bf00      	nop
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	40010000 	.word	0x40010000
 8004150:	40000400 	.word	0x40000400
 8004154:	40000800 	.word	0x40000800
 8004158:	40000c00 	.word	0x40000c00
 800415c:	40010400 	.word	0x40010400
 8004160:	40014000 	.word	0x40014000
 8004164:	40014400 	.word	0x40014400
 8004168:	40014800 	.word	0x40014800
 800416c:	40001800 	.word	0x40001800
 8004170:	40001c00 	.word	0x40001c00
 8004174:	40002000 	.word	0x40002000

08004178 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004178:	b480      	push	{r7}
 800417a:	b087      	sub	sp, #28
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	f023 0201 	bic.w	r2, r3, #1
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f023 030a 	bic.w	r3, r3, #10
 80041b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	621a      	str	r2, [r3, #32]
}
 80041ca:	bf00      	nop
 80041cc:	371c      	adds	r7, #28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b087      	sub	sp, #28
 80041da:	af00      	add	r7, sp, #0
 80041dc:	60f8      	str	r0, [r7, #12]
 80041de:	60b9      	str	r1, [r7, #8]
 80041e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	f023 0210 	bic.w	r2, r3, #16
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004200:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	031b      	lsls	r3, r3, #12
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	4313      	orrs	r3, r2
 800420a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004212:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	011b      	lsls	r3, r3, #4
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	4313      	orrs	r3, r2
 800421c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	621a      	str	r2, [r3, #32]
}
 800422a:	bf00      	nop
 800422c:	371c      	adds	r7, #28
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004236:	b480      	push	{r7}
 8004238:	b085      	sub	sp, #20
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
 800423e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4313      	orrs	r3, r2
 8004254:	f043 0307 	orr.w	r3, r3, #7
 8004258:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	609a      	str	r2, [r3, #8]
}
 8004260:	bf00      	nop
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800426c:	b480      	push	{r7}
 800426e:	b087      	sub	sp, #28
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
 8004278:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004286:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	021a      	lsls	r2, r3, #8
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	431a      	orrs	r2, r3
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	4313      	orrs	r3, r2
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	4313      	orrs	r3, r2
 8004298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	609a      	str	r2, [r3, #8]
}
 80042a0:	bf00      	nop
 80042a2:	371c      	adds	r7, #28
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d101      	bne.n	80042c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042c0:	2302      	movs	r3, #2
 80042c2:	e05a      	b.n	800437a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a21      	ldr	r2, [pc, #132]	; (8004388 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d022      	beq.n	800434e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004310:	d01d      	beq.n	800434e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a1d      	ldr	r2, [pc, #116]	; (800438c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d018      	beq.n	800434e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a1b      	ldr	r2, [pc, #108]	; (8004390 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d013      	beq.n	800434e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a1a      	ldr	r2, [pc, #104]	; (8004394 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d00e      	beq.n	800434e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a18      	ldr	r2, [pc, #96]	; (8004398 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d009      	beq.n	800434e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a17      	ldr	r2, [pc, #92]	; (800439c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d004      	beq.n	800434e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a15      	ldr	r2, [pc, #84]	; (80043a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d10c      	bne.n	8004368 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004354:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	4313      	orrs	r3, r2
 800435e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	40010000 	.word	0x40010000
 800438c:	40000400 	.word	0x40000400
 8004390:	40000800 	.word	0x40000800
 8004394:	40000c00 	.word	0x40000c00
 8004398:	40010400 	.word	0x40010400
 800439c:	40014000 	.word	0x40014000
 80043a0:	40001800 	.word	0x40001800

080043a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e03f      	b.n	800445e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d106      	bne.n	80043f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7fc fcee 	bl	8000dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2224      	movs	r2, #36	; 0x24
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68da      	ldr	r2, [r3, #12]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800440e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 fde5 	bl	8004fe0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	691a      	ldr	r2, [r3, #16]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004424:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	695a      	ldr	r2, [r3, #20]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004434:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68da      	ldr	r2, [r3, #12]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004444:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2220      	movs	r2, #32
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b08a      	sub	sp, #40	; 0x28
 800446a:	af02      	add	r7, sp, #8
 800446c:	60f8      	str	r0, [r7, #12]
 800446e:	60b9      	str	r1, [r7, #8]
 8004470:	603b      	str	r3, [r7, #0]
 8004472:	4613      	mov	r3, r2
 8004474:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004476:	2300      	movs	r3, #0
 8004478:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b20      	cmp	r3, #32
 8004484:	d17c      	bne.n	8004580 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d002      	beq.n	8004492 <HAL_UART_Transmit+0x2c>
 800448c:	88fb      	ldrh	r3, [r7, #6]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e075      	b.n	8004582 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800449c:	2b01      	cmp	r3, #1
 800449e:	d101      	bne.n	80044a4 <HAL_UART_Transmit+0x3e>
 80044a0:	2302      	movs	r3, #2
 80044a2:	e06e      	b.n	8004582 <HAL_UART_Transmit+0x11c>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2221      	movs	r2, #33	; 0x21
 80044b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044ba:	f7fc fd8d 	bl	8000fd8 <HAL_GetTick>
 80044be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	88fa      	ldrh	r2, [r7, #6]
 80044c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	88fa      	ldrh	r2, [r7, #6]
 80044ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d4:	d108      	bne.n	80044e8 <HAL_UART_Transmit+0x82>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d104      	bne.n	80044e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	61bb      	str	r3, [r7, #24]
 80044e6:	e003      	b.n	80044f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044ec:	2300      	movs	r3, #0
 80044ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80044f8:	e02a      	b.n	8004550 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2200      	movs	r2, #0
 8004502:	2180      	movs	r1, #128	; 0x80
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f000 fb29 	bl	8004b5c <UART_WaitOnFlagUntilTimeout>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e036      	b.n	8004582 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10b      	bne.n	8004532 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	881b      	ldrh	r3, [r3, #0]
 800451e:	461a      	mov	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004528:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	3302      	adds	r3, #2
 800452e:	61bb      	str	r3, [r7, #24]
 8004530:	e007      	b.n	8004542 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	781a      	ldrb	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	3301      	adds	r3, #1
 8004540:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004546:	b29b      	uxth	r3, r3
 8004548:	3b01      	subs	r3, #1
 800454a:	b29a      	uxth	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004554:	b29b      	uxth	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1cf      	bne.n	80044fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2200      	movs	r2, #0
 8004562:	2140      	movs	r1, #64	; 0x40
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 faf9 	bl	8004b5c <UART_WaitOnFlagUntilTimeout>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e006      	b.n	8004582 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2220      	movs	r2, #32
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800457c:	2300      	movs	r3, #0
 800457e:	e000      	b.n	8004582 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004580:	2302      	movs	r3, #2
  }
}
 8004582:	4618      	mov	r0, r3
 8004584:	3720      	adds	r7, #32
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b084      	sub	sp, #16
 800458e:	af00      	add	r7, sp, #0
 8004590:	60f8      	str	r0, [r7, #12]
 8004592:	60b9      	str	r1, [r7, #8]
 8004594:	4613      	mov	r3, r2
 8004596:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b20      	cmp	r3, #32
 80045a2:	d11d      	bne.n	80045e0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <HAL_UART_Receive_IT+0x26>
 80045aa:	88fb      	ldrh	r3, [r7, #6]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d101      	bne.n	80045b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e016      	b.n	80045e2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d101      	bne.n	80045c2 <HAL_UART_Receive_IT+0x38>
 80045be:	2302      	movs	r3, #2
 80045c0:	e00f      	b.n	80045e2 <HAL_UART_Receive_IT+0x58>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80045d0:	88fb      	ldrh	r3, [r7, #6]
 80045d2:	461a      	mov	r2, r3
 80045d4:	68b9      	ldr	r1, [r7, #8]
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f000 fb2e 	bl	8004c38 <UART_Start_Receive_IT>
 80045dc:	4603      	mov	r3, r0
 80045de:	e000      	b.n	80045e2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80045e0:	2302      	movs	r3, #2
  }
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b0ba      	sub	sp, #232	; 0xe8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004612:	2300      	movs	r3, #0
 8004614:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004618:	2300      	movs	r3, #0
 800461a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800461e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004622:	f003 030f 	and.w	r3, r3, #15
 8004626:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800462a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10f      	bne.n	8004652 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004636:	f003 0320 	and.w	r3, r3, #32
 800463a:	2b00      	cmp	r3, #0
 800463c:	d009      	beq.n	8004652 <HAL_UART_IRQHandler+0x66>
 800463e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004642:	f003 0320 	and.w	r3, r3, #32
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 fc0d 	bl	8004e6a <UART_Receive_IT>
      return;
 8004650:	e256      	b.n	8004b00 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004652:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 80de 	beq.w	8004818 <HAL_UART_IRQHandler+0x22c>
 800465c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	d106      	bne.n	8004676 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800466c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 80d1 	beq.w	8004818 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00b      	beq.n	800469a <HAL_UART_IRQHandler+0xae>
 8004682:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468a:	2b00      	cmp	r3, #0
 800468c:	d005      	beq.n	800469a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	f043 0201 	orr.w	r2, r3, #1
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800469a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800469e:	f003 0304 	and.w	r3, r3, #4
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00b      	beq.n	80046be <HAL_UART_IRQHandler+0xd2>
 80046a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d005      	beq.n	80046be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	f043 0202 	orr.w	r2, r3, #2
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00b      	beq.n	80046e2 <HAL_UART_IRQHandler+0xf6>
 80046ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d005      	beq.n	80046e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	f043 0204 	orr.w	r2, r3, #4
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80046e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e6:	f003 0308 	and.w	r3, r3, #8
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d011      	beq.n	8004712 <HAL_UART_IRQHandler+0x126>
 80046ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046f2:	f003 0320 	and.w	r3, r3, #32
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d105      	bne.n	8004706 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80046fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d005      	beq.n	8004712 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	f043 0208 	orr.w	r2, r3, #8
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 81ed 	beq.w	8004af6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800471c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004720:	f003 0320 	and.w	r3, r3, #32
 8004724:	2b00      	cmp	r3, #0
 8004726:	d008      	beq.n	800473a <HAL_UART_IRQHandler+0x14e>
 8004728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800472c:	f003 0320 	and.w	r3, r3, #32
 8004730:	2b00      	cmp	r3, #0
 8004732:	d002      	beq.n	800473a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 fb98 	bl	8004e6a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004744:	2b40      	cmp	r3, #64	; 0x40
 8004746:	bf0c      	ite	eq
 8004748:	2301      	moveq	r3, #1
 800474a:	2300      	movne	r3, #0
 800474c:	b2db      	uxtb	r3, r3
 800474e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	f003 0308 	and.w	r3, r3, #8
 800475a:	2b00      	cmp	r3, #0
 800475c:	d103      	bne.n	8004766 <HAL_UART_IRQHandler+0x17a>
 800475e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004762:	2b00      	cmp	r3, #0
 8004764:	d04f      	beq.n	8004806 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 faa0 	bl	8004cac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004776:	2b40      	cmp	r3, #64	; 0x40
 8004778:	d141      	bne.n	80047fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3314      	adds	r3, #20
 8004780:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004784:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004788:	e853 3f00 	ldrex	r3, [r3]
 800478c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004790:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004794:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004798:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	3314      	adds	r3, #20
 80047a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80047a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80047aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80047b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80047b6:	e841 2300 	strex	r3, r2, [r1]
 80047ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80047be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1d9      	bne.n	800477a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d013      	beq.n	80047f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d2:	4a7d      	ldr	r2, [pc, #500]	; (80049c8 <HAL_UART_IRQHandler+0x3dc>)
 80047d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fc fdad 	bl	800133a <HAL_DMA_Abort_IT>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d016      	beq.n	8004814 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047f0:	4610      	mov	r0, r2
 80047f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f4:	e00e      	b.n	8004814 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f99a 	bl	8004b30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047fc:	e00a      	b.n	8004814 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f996 	bl	8004b30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004804:	e006      	b.n	8004814 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f992 	bl	8004b30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004812:	e170      	b.n	8004af6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004814:	bf00      	nop
    return;
 8004816:	e16e      	b.n	8004af6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481c:	2b01      	cmp	r3, #1
 800481e:	f040 814a 	bne.w	8004ab6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004826:	f003 0310 	and.w	r3, r3, #16
 800482a:	2b00      	cmp	r3, #0
 800482c:	f000 8143 	beq.w	8004ab6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004834:	f003 0310 	and.w	r3, r3, #16
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 813c 	beq.w	8004ab6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800483e:	2300      	movs	r3, #0
 8004840:	60bb      	str	r3, [r7, #8]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	60bb      	str	r3, [r7, #8]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	60bb      	str	r3, [r7, #8]
 8004852:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485e:	2b40      	cmp	r3, #64	; 0x40
 8004860:	f040 80b4 	bne.w	80049cc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004870:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004874:	2b00      	cmp	r3, #0
 8004876:	f000 8140 	beq.w	8004afa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800487e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004882:	429a      	cmp	r2, r3
 8004884:	f080 8139 	bcs.w	8004afa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800488e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800489a:	f000 8088 	beq.w	80049ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	330c      	adds	r3, #12
 80048a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048ac:	e853 3f00 	ldrex	r3, [r3]
 80048b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80048b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	330c      	adds	r3, #12
 80048c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80048ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80048ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80048d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80048da:	e841 2300 	strex	r3, r2, [r1]
 80048de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80048e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1d9      	bne.n	800489e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	3314      	adds	r3, #20
 80048f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048f4:	e853 3f00 	ldrex	r3, [r3]
 80048f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80048fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048fc:	f023 0301 	bic.w	r3, r3, #1
 8004900:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3314      	adds	r3, #20
 800490a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800490e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004912:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004914:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004916:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800491a:	e841 2300 	strex	r3, r2, [r1]
 800491e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004920:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1e1      	bne.n	80048ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	3314      	adds	r3, #20
 800492c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004930:	e853 3f00 	ldrex	r3, [r3]
 8004934:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004936:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004938:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800493c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	3314      	adds	r3, #20
 8004946:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800494a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800494c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004950:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004952:	e841 2300 	strex	r3, r2, [r1]
 8004956:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004958:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1e3      	bne.n	8004926 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2220      	movs	r2, #32
 8004962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	330c      	adds	r3, #12
 8004972:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004976:	e853 3f00 	ldrex	r3, [r3]
 800497a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800497c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800497e:	f023 0310 	bic.w	r3, r3, #16
 8004982:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	330c      	adds	r3, #12
 800498c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004990:	65ba      	str	r2, [r7, #88]	; 0x58
 8004992:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004994:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004996:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004998:	e841 2300 	strex	r3, r2, [r1]
 800499c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800499e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1e3      	bne.n	800496c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7fc fc56 	bl	800125a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	4619      	mov	r1, r3
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f8c0 	bl	8004b44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049c4:	e099      	b.n	8004afa <HAL_UART_IRQHandler+0x50e>
 80049c6:	bf00      	nop
 80049c8:	08004d73 	.word	0x08004d73
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 808b 	beq.w	8004afe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80049e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 8086 	beq.w	8004afe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	330c      	adds	r3, #12
 80049f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fc:	e853 3f00 	ldrex	r3, [r3]
 8004a00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	330c      	adds	r3, #12
 8004a12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004a16:	647a      	str	r2, [r7, #68]	; 0x44
 8004a18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a1e:	e841 2300 	strex	r3, r2, [r1]
 8004a22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1e3      	bne.n	80049f2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3314      	adds	r3, #20
 8004a30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	e853 3f00 	ldrex	r3, [r3]
 8004a38:	623b      	str	r3, [r7, #32]
   return(result);
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	f023 0301 	bic.w	r3, r3, #1
 8004a40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	3314      	adds	r3, #20
 8004a4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a4e:	633a      	str	r2, [r7, #48]	; 0x30
 8004a50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a56:	e841 2300 	strex	r3, r2, [r1]
 8004a5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1e3      	bne.n	8004a2a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2220      	movs	r2, #32
 8004a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	330c      	adds	r3, #12
 8004a76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	e853 3f00 	ldrex	r3, [r3]
 8004a7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f023 0310 	bic.w	r3, r3, #16
 8004a86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	330c      	adds	r3, #12
 8004a90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004a94:	61fa      	str	r2, [r7, #28]
 8004a96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a98:	69b9      	ldr	r1, [r7, #24]
 8004a9a:	69fa      	ldr	r2, [r7, #28]
 8004a9c:	e841 2300 	strex	r3, r2, [r1]
 8004aa0:	617b      	str	r3, [r7, #20]
   return(result);
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1e3      	bne.n	8004a70 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004aa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004aac:	4619      	mov	r1, r3
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f848 	bl	8004b44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ab4:	e023      	b.n	8004afe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d009      	beq.n	8004ad6 <HAL_UART_IRQHandler+0x4ea>
 8004ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f963 	bl	8004d9a <UART_Transmit_IT>
    return;
 8004ad4:	e014      	b.n	8004b00 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00e      	beq.n	8004b00 <HAL_UART_IRQHandler+0x514>
 8004ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d008      	beq.n	8004b00 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f9a3 	bl	8004e3a <UART_EndTransmit_IT>
    return;
 8004af4:	e004      	b.n	8004b00 <HAL_UART_IRQHandler+0x514>
    return;
 8004af6:	bf00      	nop
 8004af8:	e002      	b.n	8004b00 <HAL_UART_IRQHandler+0x514>
      return;
 8004afa:	bf00      	nop
 8004afc:	e000      	b.n	8004b00 <HAL_UART_IRQHandler+0x514>
      return;
 8004afe:	bf00      	nop
  }
}
 8004b00:	37e8      	adds	r7, #232	; 0xe8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop

08004b08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b090      	sub	sp, #64	; 0x40
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	603b      	str	r3, [r7, #0]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b6c:	e050      	b.n	8004c10 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b74:	d04c      	beq.n	8004c10 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d007      	beq.n	8004b8c <UART_WaitOnFlagUntilTimeout+0x30>
 8004b7c:	f7fc fa2c 	bl	8000fd8 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d241      	bcs.n	8004c10 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	330c      	adds	r3, #12
 8004b92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b96:	e853 3f00 	ldrex	r3, [r3]
 8004b9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	330c      	adds	r3, #12
 8004baa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004bac:	637a      	str	r2, [r7, #52]	; 0x34
 8004bae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bb4:	e841 2300 	strex	r3, r2, [r1]
 8004bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1e5      	bne.n	8004b8c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	3314      	adds	r3, #20
 8004bc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	e853 3f00 	ldrex	r3, [r3]
 8004bce:	613b      	str	r3, [r7, #16]
   return(result);
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	f023 0301 	bic.w	r3, r3, #1
 8004bd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	3314      	adds	r3, #20
 8004bde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004be0:	623a      	str	r2, [r7, #32]
 8004be2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be4:	69f9      	ldr	r1, [r7, #28]
 8004be6:	6a3a      	ldr	r2, [r7, #32]
 8004be8:	e841 2300 	strex	r3, r2, [r1]
 8004bec:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1e5      	bne.n	8004bc0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e00f      	b.n	8004c30 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	bf0c      	ite	eq
 8004c20:	2301      	moveq	r3, #1
 8004c22:	2300      	movne	r3, #0
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	461a      	mov	r2, r3
 8004c28:	79fb      	ldrb	r3, [r7, #7]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d09f      	beq.n	8004b6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3740      	adds	r7, #64	; 0x40
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	4613      	mov	r3, r2
 8004c44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	88fa      	ldrh	r2, [r7, #6]
 8004c50:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	88fa      	ldrh	r2, [r7, #6]
 8004c56:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2222      	movs	r2, #34	; 0x22
 8004c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68da      	ldr	r2, [r3, #12]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c7c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	695a      	ldr	r2, [r3, #20]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f042 0201 	orr.w	r2, r2, #1
 8004c8c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68da      	ldr	r2, [r3, #12]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f042 0220 	orr.w	r2, r2, #32
 8004c9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b095      	sub	sp, #84	; 0x54
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	330c      	adds	r3, #12
 8004cba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cbe:	e853 3f00 	ldrex	r3, [r3]
 8004cc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	330c      	adds	r3, #12
 8004cd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cd4:	643a      	str	r2, [r7, #64]	; 0x40
 8004cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cdc:	e841 2300 	strex	r3, r2, [r1]
 8004ce0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1e5      	bne.n	8004cb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3314      	adds	r3, #20
 8004cee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	e853 3f00 	ldrex	r3, [r3]
 8004cf6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	f023 0301 	bic.w	r3, r3, #1
 8004cfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	3314      	adds	r3, #20
 8004d06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d10:	e841 2300 	strex	r3, r2, [r1]
 8004d14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1e5      	bne.n	8004ce8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d119      	bne.n	8004d58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	330c      	adds	r3, #12
 8004d2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	e853 3f00 	ldrex	r3, [r3]
 8004d32:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f023 0310 	bic.w	r3, r3, #16
 8004d3a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	330c      	adds	r3, #12
 8004d42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d44:	61ba      	str	r2, [r7, #24]
 8004d46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d48:	6979      	ldr	r1, [r7, #20]
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	e841 2300 	strex	r3, r2, [r1]
 8004d50:	613b      	str	r3, [r7, #16]
   return(result);
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1e5      	bne.n	8004d24 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d66:	bf00      	nop
 8004d68:	3754      	adds	r7, #84	; 0x54
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b084      	sub	sp, #16
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f7ff fecf 	bl	8004b30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d92:	bf00      	nop
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b085      	sub	sp, #20
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b21      	cmp	r3, #33	; 0x21
 8004dac:	d13e      	bne.n	8004e2c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004db6:	d114      	bne.n	8004de2 <UART_Transmit_IT+0x48>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d110      	bne.n	8004de2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dd4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	1c9a      	adds	r2, r3, #2
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	621a      	str	r2, [r3, #32]
 8004de0:	e008      	b.n	8004df4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	1c59      	adds	r1, r3, #1
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	6211      	str	r1, [r2, #32]
 8004dec:	781a      	ldrb	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	4619      	mov	r1, r3
 8004e02:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10f      	bne.n	8004e28 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68da      	ldr	r2, [r3, #12]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e16:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e26:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	e000      	b.n	8004e2e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e2c:	2302      	movs	r3, #2
  }
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b082      	sub	sp, #8
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68da      	ldr	r2, [r3, #12]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e50:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7ff fe54 	bl	8004b08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b08c      	sub	sp, #48	; 0x30
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b22      	cmp	r3, #34	; 0x22
 8004e7c:	f040 80ab 	bne.w	8004fd6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e88:	d117      	bne.n	8004eba <UART_Receive_IT+0x50>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d113      	bne.n	8004eba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e92:	2300      	movs	r3, #0
 8004e94:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb2:	1c9a      	adds	r2, r3, #2
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	629a      	str	r2, [r3, #40]	; 0x28
 8004eb8:	e026      	b.n	8004f08 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ecc:	d007      	beq.n	8004ede <UART_Receive_IT+0x74>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10a      	bne.n	8004eec <UART_Receive_IT+0x82>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d106      	bne.n	8004eec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee8:	701a      	strb	r2, [r3, #0]
 8004eea:	e008      	b.n	8004efe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f02:	1c5a      	adds	r2, r3, #1
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	4619      	mov	r1, r3
 8004f16:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d15a      	bne.n	8004fd2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0220 	bic.w	r2, r2, #32
 8004f2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	695a      	ldr	r2, [r3, #20]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 0201 	bic.w	r2, r2, #1
 8004f4a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d135      	bne.n	8004fc8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	330c      	adds	r3, #12
 8004f68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	e853 3f00 	ldrex	r3, [r3]
 8004f70:	613b      	str	r3, [r7, #16]
   return(result);
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	f023 0310 	bic.w	r3, r3, #16
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	330c      	adds	r3, #12
 8004f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f82:	623a      	str	r2, [r7, #32]
 8004f84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f86:	69f9      	ldr	r1, [r7, #28]
 8004f88:	6a3a      	ldr	r2, [r7, #32]
 8004f8a:	e841 2300 	strex	r3, r2, [r1]
 8004f8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1e5      	bne.n	8004f62 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0310 	and.w	r3, r3, #16
 8004fa0:	2b10      	cmp	r3, #16
 8004fa2:	d10a      	bne.n	8004fba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	60fb      	str	r3, [r7, #12]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f7ff fdbf 	bl	8004b44 <HAL_UARTEx_RxEventCallback>
 8004fc6:	e002      	b.n	8004fce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f7ff fda7 	bl	8004b1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	e002      	b.n	8004fd8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	e000      	b.n	8004fd8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004fd6:	2302      	movs	r3, #2
  }
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3730      	adds	r7, #48	; 0x30
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe4:	b09f      	sub	sp, #124	; 0x7c
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff6:	68d9      	ldr	r1, [r3, #12]
 8004ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	ea40 0301 	orr.w	r3, r0, r1
 8005000:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005004:	689a      	ldr	r2, [r3, #8]
 8005006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	431a      	orrs	r2, r3
 800500c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	431a      	orrs	r2, r3
 8005012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	4313      	orrs	r3, r2
 8005018:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800501a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005024:	f021 010c 	bic.w	r1, r1, #12
 8005028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800502e:	430b      	orrs	r3, r1
 8005030:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800503c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800503e:	6999      	ldr	r1, [r3, #24]
 8005040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	ea40 0301 	orr.w	r3, r0, r1
 8005048:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800504a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	4bc5      	ldr	r3, [pc, #788]	; (8005364 <UART_SetConfig+0x384>)
 8005050:	429a      	cmp	r2, r3
 8005052:	d004      	beq.n	800505e <UART_SetConfig+0x7e>
 8005054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	4bc3      	ldr	r3, [pc, #780]	; (8005368 <UART_SetConfig+0x388>)
 800505a:	429a      	cmp	r2, r3
 800505c:	d103      	bne.n	8005066 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800505e:	f7fe fd15 	bl	8003a8c <HAL_RCC_GetPCLK2Freq>
 8005062:	6778      	str	r0, [r7, #116]	; 0x74
 8005064:	e002      	b.n	800506c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005066:	f7fe fcfd 	bl	8003a64 <HAL_RCC_GetPCLK1Freq>
 800506a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800506c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800506e:	69db      	ldr	r3, [r3, #28]
 8005070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005074:	f040 80b6 	bne.w	80051e4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005078:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800507a:	461c      	mov	r4, r3
 800507c:	f04f 0500 	mov.w	r5, #0
 8005080:	4622      	mov	r2, r4
 8005082:	462b      	mov	r3, r5
 8005084:	1891      	adds	r1, r2, r2
 8005086:	6439      	str	r1, [r7, #64]	; 0x40
 8005088:	415b      	adcs	r3, r3
 800508a:	647b      	str	r3, [r7, #68]	; 0x44
 800508c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005090:	1912      	adds	r2, r2, r4
 8005092:	eb45 0303 	adc.w	r3, r5, r3
 8005096:	f04f 0000 	mov.w	r0, #0
 800509a:	f04f 0100 	mov.w	r1, #0
 800509e:	00d9      	lsls	r1, r3, #3
 80050a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050a4:	00d0      	lsls	r0, r2, #3
 80050a6:	4602      	mov	r2, r0
 80050a8:	460b      	mov	r3, r1
 80050aa:	1911      	adds	r1, r2, r4
 80050ac:	6639      	str	r1, [r7, #96]	; 0x60
 80050ae:	416b      	adcs	r3, r5
 80050b0:	667b      	str	r3, [r7, #100]	; 0x64
 80050b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	461a      	mov	r2, r3
 80050b8:	f04f 0300 	mov.w	r3, #0
 80050bc:	1891      	adds	r1, r2, r2
 80050be:	63b9      	str	r1, [r7, #56]	; 0x38
 80050c0:	415b      	adcs	r3, r3
 80050c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80050c8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80050cc:	f7fb f87c 	bl	80001c8 <__aeabi_uldivmod>
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	4ba5      	ldr	r3, [pc, #660]	; (800536c <UART_SetConfig+0x38c>)
 80050d6:	fba3 2302 	umull	r2, r3, r3, r2
 80050da:	095b      	lsrs	r3, r3, #5
 80050dc:	011e      	lsls	r6, r3, #4
 80050de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050e0:	461c      	mov	r4, r3
 80050e2:	f04f 0500 	mov.w	r5, #0
 80050e6:	4622      	mov	r2, r4
 80050e8:	462b      	mov	r3, r5
 80050ea:	1891      	adds	r1, r2, r2
 80050ec:	6339      	str	r1, [r7, #48]	; 0x30
 80050ee:	415b      	adcs	r3, r3
 80050f0:	637b      	str	r3, [r7, #52]	; 0x34
 80050f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80050f6:	1912      	adds	r2, r2, r4
 80050f8:	eb45 0303 	adc.w	r3, r5, r3
 80050fc:	f04f 0000 	mov.w	r0, #0
 8005100:	f04f 0100 	mov.w	r1, #0
 8005104:	00d9      	lsls	r1, r3, #3
 8005106:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800510a:	00d0      	lsls	r0, r2, #3
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	1911      	adds	r1, r2, r4
 8005112:	65b9      	str	r1, [r7, #88]	; 0x58
 8005114:	416b      	adcs	r3, r5
 8005116:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	461a      	mov	r2, r3
 800511e:	f04f 0300 	mov.w	r3, #0
 8005122:	1891      	adds	r1, r2, r2
 8005124:	62b9      	str	r1, [r7, #40]	; 0x28
 8005126:	415b      	adcs	r3, r3
 8005128:	62fb      	str	r3, [r7, #44]	; 0x2c
 800512a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800512e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005132:	f7fb f849 	bl	80001c8 <__aeabi_uldivmod>
 8005136:	4602      	mov	r2, r0
 8005138:	460b      	mov	r3, r1
 800513a:	4b8c      	ldr	r3, [pc, #560]	; (800536c <UART_SetConfig+0x38c>)
 800513c:	fba3 1302 	umull	r1, r3, r3, r2
 8005140:	095b      	lsrs	r3, r3, #5
 8005142:	2164      	movs	r1, #100	; 0x64
 8005144:	fb01 f303 	mul.w	r3, r1, r3
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	3332      	adds	r3, #50	; 0x32
 800514e:	4a87      	ldr	r2, [pc, #540]	; (800536c <UART_SetConfig+0x38c>)
 8005150:	fba2 2303 	umull	r2, r3, r2, r3
 8005154:	095b      	lsrs	r3, r3, #5
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800515c:	441e      	add	r6, r3
 800515e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005160:	4618      	mov	r0, r3
 8005162:	f04f 0100 	mov.w	r1, #0
 8005166:	4602      	mov	r2, r0
 8005168:	460b      	mov	r3, r1
 800516a:	1894      	adds	r4, r2, r2
 800516c:	623c      	str	r4, [r7, #32]
 800516e:	415b      	adcs	r3, r3
 8005170:	627b      	str	r3, [r7, #36]	; 0x24
 8005172:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005176:	1812      	adds	r2, r2, r0
 8005178:	eb41 0303 	adc.w	r3, r1, r3
 800517c:	f04f 0400 	mov.w	r4, #0
 8005180:	f04f 0500 	mov.w	r5, #0
 8005184:	00dd      	lsls	r5, r3, #3
 8005186:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800518a:	00d4      	lsls	r4, r2, #3
 800518c:	4622      	mov	r2, r4
 800518e:	462b      	mov	r3, r5
 8005190:	1814      	adds	r4, r2, r0
 8005192:	653c      	str	r4, [r7, #80]	; 0x50
 8005194:	414b      	adcs	r3, r1
 8005196:	657b      	str	r3, [r7, #84]	; 0x54
 8005198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	461a      	mov	r2, r3
 800519e:	f04f 0300 	mov.w	r3, #0
 80051a2:	1891      	adds	r1, r2, r2
 80051a4:	61b9      	str	r1, [r7, #24]
 80051a6:	415b      	adcs	r3, r3
 80051a8:	61fb      	str	r3, [r7, #28]
 80051aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80051b2:	f7fb f809 	bl	80001c8 <__aeabi_uldivmod>
 80051b6:	4602      	mov	r2, r0
 80051b8:	460b      	mov	r3, r1
 80051ba:	4b6c      	ldr	r3, [pc, #432]	; (800536c <UART_SetConfig+0x38c>)
 80051bc:	fba3 1302 	umull	r1, r3, r3, r2
 80051c0:	095b      	lsrs	r3, r3, #5
 80051c2:	2164      	movs	r1, #100	; 0x64
 80051c4:	fb01 f303 	mul.w	r3, r1, r3
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	3332      	adds	r3, #50	; 0x32
 80051ce:	4a67      	ldr	r2, [pc, #412]	; (800536c <UART_SetConfig+0x38c>)
 80051d0:	fba2 2303 	umull	r2, r3, r2, r3
 80051d4:	095b      	lsrs	r3, r3, #5
 80051d6:	f003 0207 	and.w	r2, r3, #7
 80051da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4432      	add	r2, r6
 80051e0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051e2:	e0b9      	b.n	8005358 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051e6:	461c      	mov	r4, r3
 80051e8:	f04f 0500 	mov.w	r5, #0
 80051ec:	4622      	mov	r2, r4
 80051ee:	462b      	mov	r3, r5
 80051f0:	1891      	adds	r1, r2, r2
 80051f2:	6139      	str	r1, [r7, #16]
 80051f4:	415b      	adcs	r3, r3
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80051fc:	1912      	adds	r2, r2, r4
 80051fe:	eb45 0303 	adc.w	r3, r5, r3
 8005202:	f04f 0000 	mov.w	r0, #0
 8005206:	f04f 0100 	mov.w	r1, #0
 800520a:	00d9      	lsls	r1, r3, #3
 800520c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005210:	00d0      	lsls	r0, r2, #3
 8005212:	4602      	mov	r2, r0
 8005214:	460b      	mov	r3, r1
 8005216:	eb12 0804 	adds.w	r8, r2, r4
 800521a:	eb43 0905 	adc.w	r9, r3, r5
 800521e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	4618      	mov	r0, r3
 8005224:	f04f 0100 	mov.w	r1, #0
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	f04f 0300 	mov.w	r3, #0
 8005230:	008b      	lsls	r3, r1, #2
 8005232:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005236:	0082      	lsls	r2, r0, #2
 8005238:	4640      	mov	r0, r8
 800523a:	4649      	mov	r1, r9
 800523c:	f7fa ffc4 	bl	80001c8 <__aeabi_uldivmod>
 8005240:	4602      	mov	r2, r0
 8005242:	460b      	mov	r3, r1
 8005244:	4b49      	ldr	r3, [pc, #292]	; (800536c <UART_SetConfig+0x38c>)
 8005246:	fba3 2302 	umull	r2, r3, r3, r2
 800524a:	095b      	lsrs	r3, r3, #5
 800524c:	011e      	lsls	r6, r3, #4
 800524e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005250:	4618      	mov	r0, r3
 8005252:	f04f 0100 	mov.w	r1, #0
 8005256:	4602      	mov	r2, r0
 8005258:	460b      	mov	r3, r1
 800525a:	1894      	adds	r4, r2, r2
 800525c:	60bc      	str	r4, [r7, #8]
 800525e:	415b      	adcs	r3, r3
 8005260:	60fb      	str	r3, [r7, #12]
 8005262:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005266:	1812      	adds	r2, r2, r0
 8005268:	eb41 0303 	adc.w	r3, r1, r3
 800526c:	f04f 0400 	mov.w	r4, #0
 8005270:	f04f 0500 	mov.w	r5, #0
 8005274:	00dd      	lsls	r5, r3, #3
 8005276:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800527a:	00d4      	lsls	r4, r2, #3
 800527c:	4622      	mov	r2, r4
 800527e:	462b      	mov	r3, r5
 8005280:	1814      	adds	r4, r2, r0
 8005282:	64bc      	str	r4, [r7, #72]	; 0x48
 8005284:	414b      	adcs	r3, r1
 8005286:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	4618      	mov	r0, r3
 800528e:	f04f 0100 	mov.w	r1, #0
 8005292:	f04f 0200 	mov.w	r2, #0
 8005296:	f04f 0300 	mov.w	r3, #0
 800529a:	008b      	lsls	r3, r1, #2
 800529c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052a0:	0082      	lsls	r2, r0, #2
 80052a2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80052a6:	f7fa ff8f 	bl	80001c8 <__aeabi_uldivmod>
 80052aa:	4602      	mov	r2, r0
 80052ac:	460b      	mov	r3, r1
 80052ae:	4b2f      	ldr	r3, [pc, #188]	; (800536c <UART_SetConfig+0x38c>)
 80052b0:	fba3 1302 	umull	r1, r3, r3, r2
 80052b4:	095b      	lsrs	r3, r3, #5
 80052b6:	2164      	movs	r1, #100	; 0x64
 80052b8:	fb01 f303 	mul.w	r3, r1, r3
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	011b      	lsls	r3, r3, #4
 80052c0:	3332      	adds	r3, #50	; 0x32
 80052c2:	4a2a      	ldr	r2, [pc, #168]	; (800536c <UART_SetConfig+0x38c>)
 80052c4:	fba2 2303 	umull	r2, r3, r2, r3
 80052c8:	095b      	lsrs	r3, r3, #5
 80052ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052ce:	441e      	add	r6, r3
 80052d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052d2:	4618      	mov	r0, r3
 80052d4:	f04f 0100 	mov.w	r1, #0
 80052d8:	4602      	mov	r2, r0
 80052da:	460b      	mov	r3, r1
 80052dc:	1894      	adds	r4, r2, r2
 80052de:	603c      	str	r4, [r7, #0]
 80052e0:	415b      	adcs	r3, r3
 80052e2:	607b      	str	r3, [r7, #4]
 80052e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052e8:	1812      	adds	r2, r2, r0
 80052ea:	eb41 0303 	adc.w	r3, r1, r3
 80052ee:	f04f 0400 	mov.w	r4, #0
 80052f2:	f04f 0500 	mov.w	r5, #0
 80052f6:	00dd      	lsls	r5, r3, #3
 80052f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80052fc:	00d4      	lsls	r4, r2, #3
 80052fe:	4622      	mov	r2, r4
 8005300:	462b      	mov	r3, r5
 8005302:	eb12 0a00 	adds.w	sl, r2, r0
 8005306:	eb43 0b01 	adc.w	fp, r3, r1
 800530a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	4618      	mov	r0, r3
 8005310:	f04f 0100 	mov.w	r1, #0
 8005314:	f04f 0200 	mov.w	r2, #0
 8005318:	f04f 0300 	mov.w	r3, #0
 800531c:	008b      	lsls	r3, r1, #2
 800531e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005322:	0082      	lsls	r2, r0, #2
 8005324:	4650      	mov	r0, sl
 8005326:	4659      	mov	r1, fp
 8005328:	f7fa ff4e 	bl	80001c8 <__aeabi_uldivmod>
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	4b0e      	ldr	r3, [pc, #56]	; (800536c <UART_SetConfig+0x38c>)
 8005332:	fba3 1302 	umull	r1, r3, r3, r2
 8005336:	095b      	lsrs	r3, r3, #5
 8005338:	2164      	movs	r1, #100	; 0x64
 800533a:	fb01 f303 	mul.w	r3, r1, r3
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	011b      	lsls	r3, r3, #4
 8005342:	3332      	adds	r3, #50	; 0x32
 8005344:	4a09      	ldr	r2, [pc, #36]	; (800536c <UART_SetConfig+0x38c>)
 8005346:	fba2 2303 	umull	r2, r3, r2, r3
 800534a:	095b      	lsrs	r3, r3, #5
 800534c:	f003 020f 	and.w	r2, r3, #15
 8005350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4432      	add	r2, r6
 8005356:	609a      	str	r2, [r3, #8]
}
 8005358:	bf00      	nop
 800535a:	377c      	adds	r7, #124	; 0x7c
 800535c:	46bd      	mov	sp, r7
 800535e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005362:	bf00      	nop
 8005364:	40011000 	.word	0x40011000
 8005368:	40011400 	.word	0x40011400
 800536c:	51eb851f 	.word	0x51eb851f

08005370 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005370:	b084      	sub	sp, #16
 8005372:	b580      	push	{r7, lr}
 8005374:	b084      	sub	sp, #16
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
 800537a:	f107 001c 	add.w	r0, r7, #28
 800537e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005384:	2b01      	cmp	r3, #1
 8005386:	d122      	bne.n	80053ce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800539c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80053b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d105      	bne.n	80053c2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f9a0 	bl	8005708 <USB_CoreReset>
 80053c8:	4603      	mov	r3, r0
 80053ca:	73fb      	strb	r3, [r7, #15]
 80053cc:	e01a      	b.n	8005404 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f994 	bl	8005708 <USB_CoreReset>
 80053e0:	4603      	mov	r3, r0
 80053e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80053e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d106      	bne.n	80053f8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	639a      	str	r2, [r3, #56]	; 0x38
 80053f6:	e005      	b.n	8005404 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005406:	2b01      	cmp	r3, #1
 8005408:	d10b      	bne.n	8005422 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f043 0206 	orr.w	r2, r3, #6
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f043 0220 	orr.w	r2, r3, #32
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005422:	7bfb      	ldrb	r3, [r7, #15]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800542e:	b004      	add	sp, #16
 8005430:	4770      	bx	lr

08005432 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005432:	b480      	push	{r7}
 8005434:	b083      	sub	sp, #12
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f043 0201 	orr.w	r2, r3, #1
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f023 0201 	bic.w	r2, r3, #1
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b084      	sub	sp, #16
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
 800547e:	460b      	mov	r3, r1
 8005480:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005482:	2300      	movs	r3, #0
 8005484:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005492:	78fb      	ldrb	r3, [r7, #3]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d115      	bne.n	80054c4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054a4:	2001      	movs	r0, #1
 80054a6:	f7fb fda3 	bl	8000ff0 <HAL_Delay>
      ms++;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	3301      	adds	r3, #1
 80054ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 f91a 	bl	80056ea <USB_GetMode>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d01e      	beq.n	80054fa <USB_SetCurrentMode+0x84>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2b31      	cmp	r3, #49	; 0x31
 80054c0:	d9f0      	bls.n	80054a4 <USB_SetCurrentMode+0x2e>
 80054c2:	e01a      	b.n	80054fa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80054c4:	78fb      	ldrb	r3, [r7, #3]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d115      	bne.n	80054f6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054d6:	2001      	movs	r0, #1
 80054d8:	f7fb fd8a 	bl	8000ff0 <HAL_Delay>
      ms++;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	3301      	adds	r3, #1
 80054e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f901 	bl	80056ea <USB_GetMode>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d005      	beq.n	80054fa <USB_SetCurrentMode+0x84>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2b31      	cmp	r3, #49	; 0x31
 80054f2:	d9f0      	bls.n	80054d6 <USB_SetCurrentMode+0x60>
 80054f4:	e001      	b.n	80054fa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e005      	b.n	8005506 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2b32      	cmp	r3, #50	; 0x32
 80054fe:	d101      	bne.n	8005504 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e000      	b.n	8005506 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
	...

08005510 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800551a:	2300      	movs	r3, #0
 800551c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	019b      	lsls	r3, r3, #6
 8005522:	f043 0220 	orr.w	r2, r3, #32
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	3301      	adds	r3, #1
 800552e:	60fb      	str	r3, [r7, #12]
 8005530:	4a08      	ldr	r2, [pc, #32]	; (8005554 <USB_FlushTxFifo+0x44>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d901      	bls.n	800553a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e006      	b.n	8005548 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	f003 0320 	and.w	r3, r3, #32
 8005542:	2b20      	cmp	r3, #32
 8005544:	d0f1      	beq.n	800552a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	00030d40 	.word	0x00030d40

08005558 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005560:	2300      	movs	r3, #0
 8005562:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2210      	movs	r2, #16
 8005568:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	3301      	adds	r3, #1
 800556e:	60fb      	str	r3, [r7, #12]
 8005570:	4a08      	ldr	r2, [pc, #32]	; (8005594 <USB_FlushRxFifo+0x3c>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d901      	bls.n	800557a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e006      	b.n	8005588 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	f003 0310 	and.w	r3, r3, #16
 8005582:	2b10      	cmp	r3, #16
 8005584:	d0f1      	beq.n	800556a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	00030d40 	.word	0x00030d40

08005598 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005598:	b480      	push	{r7}
 800559a:	b089      	sub	sp, #36	; 0x24
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	4611      	mov	r1, r2
 80055a4:	461a      	mov	r2, r3
 80055a6:	460b      	mov	r3, r1
 80055a8:	71fb      	strb	r3, [r7, #7]
 80055aa:	4613      	mov	r3, r2
 80055ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80055b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d123      	bne.n	8005606 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80055be:	88bb      	ldrh	r3, [r7, #4]
 80055c0:	3303      	adds	r3, #3
 80055c2:	089b      	lsrs	r3, r3, #2
 80055c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80055c6:	2300      	movs	r3, #0
 80055c8:	61bb      	str	r3, [r7, #24]
 80055ca:	e018      	b.n	80055fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80055cc:	79fb      	ldrb	r3, [r7, #7]
 80055ce:	031a      	lsls	r2, r3, #12
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055d8:	461a      	mov	r2, r3
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	3301      	adds	r3, #1
 80055e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	3301      	adds	r3, #1
 80055ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	3301      	adds	r3, #1
 80055f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	3301      	adds	r3, #1
 80055f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	3301      	adds	r3, #1
 80055fc:	61bb      	str	r3, [r7, #24]
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	429a      	cmp	r2, r3
 8005604:	d3e2      	bcc.n	80055cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3724      	adds	r7, #36	; 0x24
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005614:	b480      	push	{r7}
 8005616:	b08b      	sub	sp, #44	; 0x2c
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	4613      	mov	r3, r2
 8005620:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800562a:	88fb      	ldrh	r3, [r7, #6]
 800562c:	089b      	lsrs	r3, r3, #2
 800562e:	b29b      	uxth	r3, r3
 8005630:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005632:	88fb      	ldrh	r3, [r7, #6]
 8005634:	f003 0303 	and.w	r3, r3, #3
 8005638:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800563a:	2300      	movs	r3, #0
 800563c:	623b      	str	r3, [r7, #32]
 800563e:	e014      	b.n	800566a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	601a      	str	r2, [r3, #0]
    pDest++;
 800564c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564e:	3301      	adds	r3, #1
 8005650:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005654:	3301      	adds	r3, #1
 8005656:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	3301      	adds	r3, #1
 800565c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005660:	3301      	adds	r3, #1
 8005662:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005664:	6a3b      	ldr	r3, [r7, #32]
 8005666:	3301      	adds	r3, #1
 8005668:	623b      	str	r3, [r7, #32]
 800566a:	6a3a      	ldr	r2, [r7, #32]
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	429a      	cmp	r2, r3
 8005670:	d3e6      	bcc.n	8005640 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005672:	8bfb      	ldrh	r3, [r7, #30]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d01e      	beq.n	80056b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005678:	2300      	movs	r3, #0
 800567a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005682:	461a      	mov	r2, r3
 8005684:	f107 0310 	add.w	r3, r7, #16
 8005688:	6812      	ldr	r2, [r2, #0]
 800568a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	b2db      	uxtb	r3, r3
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	fa22 f303 	lsr.w	r3, r2, r3
 8005698:	b2da      	uxtb	r2, r3
 800569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569c:	701a      	strb	r2, [r3, #0]
      i++;
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	3301      	adds	r3, #1
 80056a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	3301      	adds	r3, #1
 80056a8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80056aa:	8bfb      	ldrh	r3, [r7, #30]
 80056ac:	3b01      	subs	r3, #1
 80056ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80056b0:	8bfb      	ldrh	r3, [r7, #30]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1ea      	bne.n	800568c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	372c      	adds	r7, #44	; 0x2c
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	4013      	ands	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80056dc:	68fb      	ldr	r3, [r7, #12]
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b083      	sub	sp, #12
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	f003 0301 	and.w	r3, r3, #1
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
	...

08005708 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005710:	2300      	movs	r3, #0
 8005712:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	3301      	adds	r3, #1
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	4a13      	ldr	r2, [pc, #76]	; (8005768 <USB_CoreReset+0x60>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d901      	bls.n	8005724 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e01a      	b.n	800575a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	2b00      	cmp	r3, #0
 800572a:	daf3      	bge.n	8005714 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800572c:	2300      	movs	r3, #0
 800572e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	f043 0201 	orr.w	r2, r3, #1
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	3301      	adds	r3, #1
 8005740:	60fb      	str	r3, [r7, #12]
 8005742:	4a09      	ldr	r2, [pc, #36]	; (8005768 <USB_CoreReset+0x60>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d901      	bls.n	800574c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e006      	b.n	800575a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b01      	cmp	r3, #1
 8005756:	d0f1      	beq.n	800573c <USB_CoreReset+0x34>

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	00030d40 	.word	0x00030d40

0800576c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800576c:	b084      	sub	sp, #16
 800576e:	b580      	push	{r7, lr}
 8005770:	b084      	sub	sp, #16
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	f107 001c 	add.w	r0, r7, #28
 800577a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005788:	461a      	mov	r2, r3
 800578a:	2300      	movs	r3, #0
 800578c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005792:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057aa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d018      	beq.n	80057f0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d10a      	bne.n	80057da <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057d2:	f043 0304 	orr.w	r3, r3, #4
 80057d6:	6013      	str	r3, [r2, #0]
 80057d8:	e014      	b.n	8005804 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057e8:	f023 0304 	bic.w	r3, r3, #4
 80057ec:	6013      	str	r3, [r2, #0]
 80057ee:	e009      	b.n	8005804 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057fe:	f023 0304 	bic.w	r3, r3, #4
 8005802:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005804:	2110      	movs	r1, #16
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f7ff fe82 	bl	8005510 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f7ff fea3 	bl	8005558 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005812:	2300      	movs	r3, #0
 8005814:	60fb      	str	r3, [r7, #12]
 8005816:	e015      	b.n	8005844 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	015a      	lsls	r2, r3, #5
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	4413      	add	r3, r2
 8005820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005824:	461a      	mov	r2, r3
 8005826:	f04f 33ff 	mov.w	r3, #4294967295
 800582a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	4413      	add	r3, r2
 8005834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005838:	461a      	mov	r2, r3
 800583a:	2300      	movs	r3, #0
 800583c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	3301      	adds	r3, #1
 8005842:	60fb      	str	r3, [r7, #12]
 8005844:	6a3b      	ldr	r3, [r7, #32]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	429a      	cmp	r2, r3
 800584a:	d3e5      	bcc.n	8005818 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f04f 32ff 	mov.w	r2, #4294967295
 8005858:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800585e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00b      	beq.n	800587e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800586c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a13      	ldr	r2, [pc, #76]	; (80058c0 <USB_HostInit+0x154>)
 8005872:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a13      	ldr	r2, [pc, #76]	; (80058c4 <USB_HostInit+0x158>)
 8005878:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800587c:	e009      	b.n	8005892 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2280      	movs	r2, #128	; 0x80
 8005882:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a10      	ldr	r2, [pc, #64]	; (80058c8 <USB_HostInit+0x15c>)
 8005888:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a0f      	ldr	r2, [pc, #60]	; (80058cc <USB_HostInit+0x160>)
 800588e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005894:	2b00      	cmp	r3, #0
 8005896:	d105      	bne.n	80058a4 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	f043 0210 	orr.w	r2, r3, #16
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	699a      	ldr	r2, [r3, #24]
 80058a8:	4b09      	ldr	r3, [pc, #36]	; (80058d0 <USB_HostInit+0x164>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058bc:	b004      	add	sp, #16
 80058be:	4770      	bx	lr
 80058c0:	01000200 	.word	0x01000200
 80058c4:	00e00300 	.word	0x00e00300
 80058c8:	00600080 	.word	0x00600080
 80058cc:	004000e0 	.word	0x004000e0
 80058d0:	a3200008 	.word	0xa3200008

080058d4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	460b      	mov	r3, r1
 80058de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058f2:	f023 0303 	bic.w	r3, r3, #3
 80058f6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	78fb      	ldrb	r3, [r7, #3]
 8005902:	f003 0303 	and.w	r3, r3, #3
 8005906:	68f9      	ldr	r1, [r7, #12]
 8005908:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800590c:	4313      	orrs	r3, r2
 800590e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005910:	78fb      	ldrb	r3, [r7, #3]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d107      	bne.n	8005926 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800591c:	461a      	mov	r2, r3
 800591e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005922:	6053      	str	r3, [r2, #4]
 8005924:	e009      	b.n	800593a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005926:	78fb      	ldrb	r3, [r7, #3]
 8005928:	2b02      	cmp	r3, #2
 800592a:	d106      	bne.n	800593a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005932:	461a      	mov	r2, r3
 8005934:	f241 7370 	movw	r3, #6000	; 0x1770
 8005938:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3714      	adds	r7, #20
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005968:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005976:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005978:	2064      	movs	r0, #100	; 0x64
 800597a:	f7fb fb39 	bl	8000ff0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005986:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800598a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800598c:	200a      	movs	r0, #10
 800598e:	f7fb fb2f 	bl	8000ff0 <HAL_Delay>

  return HAL_OK;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	460b      	mov	r3, r1
 80059a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80059ac:	2300      	movs	r3, #0
 80059ae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80059c0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d109      	bne.n	80059e0 <USB_DriveVbus+0x44>
 80059cc:	78fb      	ldrb	r3, [r7, #3]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d106      	bne.n	80059e0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80059da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80059de:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ea:	d109      	bne.n	8005a00 <USB_DriveVbus+0x64>
 80059ec:	78fb      	ldrb	r3, [r7, #3]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d106      	bne.n	8005a00 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80059fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059fe:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b085      	sub	sp, #20
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	0c5b      	lsrs	r3, r3, #17
 8005a2c:	f003 0303 	and.w	r3, r3, #3
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3714      	adds	r7, #20
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	b29b      	uxth	r3, r3
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
	...

08005a60 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b088      	sub	sp, #32
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	4608      	mov	r0, r1
 8005a6a:	4611      	mov	r1, r2
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	4603      	mov	r3, r0
 8005a70:	70fb      	strb	r3, [r7, #3]
 8005a72:	460b      	mov	r3, r1
 8005a74:	70bb      	strb	r3, [r7, #2]
 8005a76:	4613      	mov	r3, r2
 8005a78:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005a82:	78fb      	ldrb	r3, [r7, #3]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f04f 33ff 	mov.w	r3, #4294967295
 8005a94:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005a96:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005a9a:	2b03      	cmp	r3, #3
 8005a9c:	d87e      	bhi.n	8005b9c <USB_HC_Init+0x13c>
 8005a9e:	a201      	add	r2, pc, #4	; (adr r2, 8005aa4 <USB_HC_Init+0x44>)
 8005aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa4:	08005ab5 	.word	0x08005ab5
 8005aa8:	08005b5f 	.word	0x08005b5f
 8005aac:	08005ab5 	.word	0x08005ab5
 8005ab0:	08005b21 	.word	0x08005b21
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ab4:	78fb      	ldrb	r3, [r7, #3]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	f240 439d 	movw	r3, #1181	; 0x49d
 8005ac6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005ac8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	da10      	bge.n	8005af2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005ad0:	78fb      	ldrb	r3, [r7, #3]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	78fa      	ldrb	r2, [r7, #3]
 8005ae0:	0151      	lsls	r1, r2, #5
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	440a      	add	r2, r1
 8005ae6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aee:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005af0:	e057      	b.n	8005ba2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d051      	beq.n	8005ba2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005afe:	78fb      	ldrb	r3, [r7, #3]
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	78fa      	ldrb	r2, [r7, #3]
 8005b0e:	0151      	lsls	r1, r2, #5
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	440a      	add	r2, r1
 8005b14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b18:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005b1c:	60d3      	str	r3, [r2, #12]
      break;
 8005b1e:	e040      	b.n	8005ba2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b20:	78fb      	ldrb	r3, [r7, #3]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	f240 639d 	movw	r3, #1693	; 0x69d
 8005b32:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005b34:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	da34      	bge.n	8005ba6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005b3c:	78fb      	ldrb	r3, [r7, #3]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	78fa      	ldrb	r2, [r7, #3]
 8005b4c:	0151      	lsls	r1, r2, #5
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	440a      	add	r2, r1
 8005b52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b5a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005b5c:	e023      	b.n	8005ba6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b5e:	78fb      	ldrb	r3, [r7, #3]
 8005b60:	015a      	lsls	r2, r3, #5
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	4413      	add	r3, r2
 8005b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	f240 2325 	movw	r3, #549	; 0x225
 8005b70:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005b72:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	da17      	bge.n	8005baa <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005b7a:	78fb      	ldrb	r3, [r7, #3]
 8005b7c:	015a      	lsls	r2, r3, #5
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	4413      	add	r3, r2
 8005b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	78fa      	ldrb	r2, [r7, #3]
 8005b8a:	0151      	lsls	r1, r2, #5
 8005b8c:	693a      	ldr	r2, [r7, #16]
 8005b8e:	440a      	add	r2, r1
 8005b90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b94:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005b98:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005b9a:	e006      	b.n	8005baa <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	77fb      	strb	r3, [r7, #31]
      break;
 8005ba0:	e004      	b.n	8005bac <USB_HC_Init+0x14c>
      break;
 8005ba2:	bf00      	nop
 8005ba4:	e002      	b.n	8005bac <USB_HC_Init+0x14c>
      break;
 8005ba6:	bf00      	nop
 8005ba8:	e000      	b.n	8005bac <USB_HC_Init+0x14c>
      break;
 8005baa:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bb2:	699a      	ldr	r2, [r3, #24]
 8005bb4:	78fb      	ldrb	r3, [r7, #3]
 8005bb6:	f003 030f 	and.w	r3, r3, #15
 8005bba:	2101      	movs	r1, #1
 8005bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8005bc0:	6939      	ldr	r1, [r7, #16]
 8005bc2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005bd6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	da03      	bge.n	8005be6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005be2:	61bb      	str	r3, [r7, #24]
 8005be4:	e001      	b.n	8005bea <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005be6:	2300      	movs	r3, #0
 8005be8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7ff ff0f 	bl	8005a0e <USB_GetHostSpeed>
 8005bf0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005bf2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d106      	bne.n	8005c08 <USB_HC_Init+0x1a8>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d003      	beq.n	8005c08 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005c00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c04:	617b      	str	r3, [r7, #20]
 8005c06:	e001      	b.n	8005c0c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c0c:	787b      	ldrb	r3, [r7, #1]
 8005c0e:	059b      	lsls	r3, r3, #22
 8005c10:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005c14:	78bb      	ldrb	r3, [r7, #2]
 8005c16:	02db      	lsls	r3, r3, #11
 8005c18:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c1c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005c1e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005c22:	049b      	lsls	r3, r3, #18
 8005c24:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005c28:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005c2a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005c2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005c30:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c36:	78fb      	ldrb	r3, [r7, #3]
 8005c38:	0159      	lsls	r1, r3, #5
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	440b      	add	r3, r1
 8005c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c42:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c48:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005c4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005c4e:	2b03      	cmp	r3, #3
 8005c50:	d10f      	bne.n	8005c72 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005c52:	78fb      	ldrb	r3, [r7, #3]
 8005c54:	015a      	lsls	r2, r3, #5
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	78fa      	ldrb	r2, [r7, #3]
 8005c62:	0151      	lsls	r1, r2, #5
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	440a      	add	r2, r1
 8005c68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c70:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005c72:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3720      	adds	r7, #32
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b08c      	sub	sp, #48	; 0x30
 8005c80:	af02      	add	r7, sp, #8
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	4613      	mov	r3, r2
 8005c88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	785b      	ldrb	r3, [r3, #1]
 8005c92:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005c94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c98:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d02d      	beq.n	8005d02 <USB_HC_StartXfer+0x86>
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	791b      	ldrb	r3, [r3, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d129      	bne.n	8005d02 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005cae:	79fb      	ldrb	r3, [r7, #7]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d117      	bne.n	8005ce4 <USB_HC_StartXfer+0x68>
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	79db      	ldrb	r3, [r3, #7]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d003      	beq.n	8005cc4 <USB_HC_StartXfer+0x48>
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	79db      	ldrb	r3, [r3, #7]
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d10f      	bne.n	8005ce4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	6a3b      	ldr	r3, [r7, #32]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	69fa      	ldr	r2, [r7, #28]
 8005cd4:	0151      	lsls	r1, r2, #5
 8005cd6:	6a3a      	ldr	r2, [r7, #32]
 8005cd8:	440a      	add	r2, r1
 8005cda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005ce4:	79fb      	ldrb	r3, [r7, #7]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10b      	bne.n	8005d02 <USB_HC_StartXfer+0x86>
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	795b      	ldrb	r3, [r3, #5]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d107      	bne.n	8005d02 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	785b      	ldrb	r3, [r3, #1]
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f000 fa2f 	bl	800615c <USB_DoPing>
      return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	e0f8      	b.n	8005ef4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d018      	beq.n	8005d3c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	8912      	ldrh	r2, [r2, #8]
 8005d12:	4413      	add	r3, r2
 8005d14:	3b01      	subs	r3, #1
 8005d16:	68ba      	ldr	r2, [r7, #8]
 8005d18:	8912      	ldrh	r2, [r2, #8]
 8005d1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d1e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005d20:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005d22:	8b7b      	ldrh	r3, [r7, #26]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d90b      	bls.n	8005d40 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005d28:	8b7b      	ldrh	r3, [r7, #26]
 8005d2a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005d2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	8912      	ldrh	r2, [r2, #8]
 8005d32:	fb02 f203 	mul.w	r2, r2, r3
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	611a      	str	r2, [r3, #16]
 8005d3a:	e001      	b.n	8005d40 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	78db      	ldrb	r3, [r3, #3]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d007      	beq.n	8005d58 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005d48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	8912      	ldrh	r2, [r2, #8]
 8005d4e:	fb02 f203 	mul.w	r2, r2, r3
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	611a      	str	r2, [r3, #16]
 8005d56:	e003      	b.n	8005d60 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	695a      	ldr	r2, [r3, #20]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005d68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d6a:	04d9      	lsls	r1, r3, #19
 8005d6c:	4b63      	ldr	r3, [pc, #396]	; (8005efc <USB_HC_StartXfer+0x280>)
 8005d6e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d70:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	7a9b      	ldrb	r3, [r3, #10]
 8005d76:	075b      	lsls	r3, r3, #29
 8005d78:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d7c:	69f9      	ldr	r1, [r7, #28]
 8005d7e:	0148      	lsls	r0, r1, #5
 8005d80:	6a39      	ldr	r1, [r7, #32]
 8005d82:	4401      	add	r1, r0
 8005d84:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005d88:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d8a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005d8c:	79fb      	ldrb	r3, [r7, #7]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d009      	beq.n	8005da6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	68d9      	ldr	r1, [r3, #12]
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da2:	460a      	mov	r2, r1
 8005da4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	bf0c      	ite	eq
 8005db6:	2301      	moveq	r3, #1
 8005db8:	2300      	movne	r3, #0
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	6a3b      	ldr	r3, [r7, #32]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	69fa      	ldr	r2, [r7, #28]
 8005dce:	0151      	lsls	r1, r2, #5
 8005dd0:	6a3a      	ldr	r2, [r7, #32]
 8005dd2:	440a      	add	r2, r1
 8005dd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dd8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ddc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	7e7b      	ldrb	r3, [r7, #25]
 8005dee:	075b      	lsls	r3, r3, #29
 8005df0:	69f9      	ldr	r1, [r7, #28]
 8005df2:	0148      	lsls	r0, r1, #5
 8005df4:	6a39      	ldr	r1, [r7, #32]
 8005df6:	4401      	add	r1, r0
 8005df8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	6a3b      	ldr	r3, [r7, #32]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e16:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	78db      	ldrb	r3, [r3, #3]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d004      	beq.n	8005e2a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e26:	613b      	str	r3, [r7, #16]
 8005e28:	e003      	b.n	8005e32 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e30:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e38:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	6a3b      	ldr	r3, [r7, #32]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e46:	461a      	mov	r2, r3
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005e4c:	79fb      	ldrb	r3, [r7, #7]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005e52:	2300      	movs	r3, #0
 8005e54:	e04e      	b.n	8005ef4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	78db      	ldrb	r3, [r3, #3]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d149      	bne.n	8005ef2 <USB_HC_StartXfer+0x276>
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d045      	beq.n	8005ef2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	79db      	ldrb	r3, [r3, #7]
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	d830      	bhi.n	8005ed0 <USB_HC_StartXfer+0x254>
 8005e6e:	a201      	add	r2, pc, #4	; (adr r2, 8005e74 <USB_HC_StartXfer+0x1f8>)
 8005e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e74:	08005e85 	.word	0x08005e85
 8005e78:	08005ea9 	.word	0x08005ea9
 8005e7c:	08005e85 	.word	0x08005e85
 8005e80:	08005ea9 	.word	0x08005ea9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	3303      	adds	r3, #3
 8005e8a:	089b      	lsrs	r3, r3, #2
 8005e8c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005e8e:	8afa      	ldrh	r2, [r7, #22]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d91c      	bls.n	8005ed4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	f043 0220 	orr.w	r2, r3, #32
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	619a      	str	r2, [r3, #24]
        }
        break;
 8005ea6:	e015      	b.n	8005ed4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	695b      	ldr	r3, [r3, #20]
 8005eac:	3303      	adds	r3, #3
 8005eae:	089b      	lsrs	r3, r3, #2
 8005eb0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005eb2:	8afa      	ldrh	r2, [r7, #22]
 8005eb4:	6a3b      	ldr	r3, [r7, #32]
 8005eb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d90a      	bls.n	8005ed8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	619a      	str	r2, [r3, #24]
        }
        break;
 8005ece:	e003      	b.n	8005ed8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005ed0:	bf00      	nop
 8005ed2:	e002      	b.n	8005eda <USB_HC_StartXfer+0x25e>
        break;
 8005ed4:	bf00      	nop
 8005ed6:	e000      	b.n	8005eda <USB_HC_StartXfer+0x25e>
        break;
 8005ed8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	68d9      	ldr	r1, [r3, #12]
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	785a      	ldrb	r2, [r3, #1]
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	2000      	movs	r0, #0
 8005eea:	9000      	str	r0, [sp, #0]
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f7ff fb53 	bl	8005598 <USB_WritePacket>
  }

  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3728      	adds	r7, #40	; 0x28
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	1ff80000 	.word	0x1ff80000

08005f00 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	b29b      	uxth	r3, r3
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b089      	sub	sp, #36	; 0x24
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8005f32:	78fb      	ldrb	r3, [r7, #3]
 8005f34:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8005f36:	2300      	movs	r3, #0
 8005f38:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	015a      	lsls	r2, r3, #5
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	0c9b      	lsrs	r3, r3, #18
 8005f4a:	f003 0303 	and.w	r3, r3, #3
 8005f4e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	0fdb      	lsrs	r3, r3, #31
 8005f60:	f003 0301 	and.w	r3, r3, #1
 8005f64:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f003 0320 	and.w	r3, r3, #32
 8005f6e:	2b20      	cmp	r3, #32
 8005f70:	d104      	bne.n	8005f7c <USB_HC_Halt+0x5a>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d101      	bne.n	8005f7c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	e0e8      	b.n	800614e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d002      	beq.n	8005f88 <USB_HC_Halt+0x66>
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d173      	bne.n	8006070 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	0151      	lsls	r1, r2, #5
 8005f9a:	69ba      	ldr	r2, [r7, #24]
 8005f9c:	440a      	add	r2, r1
 8005f9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fa2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fa6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f003 0320 	and.w	r3, r3, #32
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f040 80cb 	bne.w	800614c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d143      	bne.n	800604a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	0151      	lsls	r1, r2, #5
 8005fd4:	69ba      	ldr	r2, [r7, #24]
 8005fd6:	440a      	add	r2, r1
 8005fd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fe0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	015a      	lsls	r2, r3, #5
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	4413      	add	r3, r2
 8005fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	0151      	lsls	r1, r2, #5
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	440a      	add	r2, r1
 8005ff8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ffc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006000:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	015a      	lsls	r2, r3, #5
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	4413      	add	r3, r2
 800600a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	0151      	lsls	r1, r2, #5
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	440a      	add	r2, r1
 8006018:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800601c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006020:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	3301      	adds	r3, #1
 8006026:	61fb      	str	r3, [r7, #28]
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800602e:	d81d      	bhi.n	800606c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	4413      	add	r3, r2
 8006038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006042:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006046:	d0ec      	beq.n	8006022 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006048:	e080      	b.n	800614c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	015a      	lsls	r2, r3, #5
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	4413      	add	r3, r2
 8006052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	0151      	lsls	r1, r2, #5
 800605c:	69ba      	ldr	r2, [r7, #24]
 800605e:	440a      	add	r2, r1
 8006060:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006064:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006068:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800606a:	e06f      	b.n	800614c <USB_HC_Halt+0x22a>
            break;
 800606c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800606e:	e06d      	b.n	800614c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	4413      	add	r3, r2
 8006078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	0151      	lsls	r1, r2, #5
 8006082:	69ba      	ldr	r2, [r7, #24]
 8006084:	440a      	add	r2, r1
 8006086:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800608a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800608e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d143      	bne.n	8006128 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	0151      	lsls	r1, r2, #5
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	440a      	add	r2, r1
 80060b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060be:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	015a      	lsls	r2, r3, #5
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	0151      	lsls	r1, r2, #5
 80060d2:	69ba      	ldr	r2, [r7, #24]
 80060d4:	440a      	add	r2, r1
 80060d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060de:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	015a      	lsls	r2, r3, #5
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	4413      	add	r3, r2
 80060e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	0151      	lsls	r1, r2, #5
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	440a      	add	r2, r1
 80060f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80060fe:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	3301      	adds	r3, #1
 8006104:	61fb      	str	r3, [r7, #28]
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800610c:	d81d      	bhi.n	800614a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	4413      	add	r3, r2
 8006116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006120:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006124:	d0ec      	beq.n	8006100 <USB_HC_Halt+0x1de>
 8006126:	e011      	b.n	800614c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	4413      	add	r3, r2
 8006130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	0151      	lsls	r1, r2, #5
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	440a      	add	r2, r1
 800613e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006142:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006146:	6013      	str	r3, [r2, #0]
 8006148:	e000      	b.n	800614c <USB_HC_Halt+0x22a>
          break;
 800614a:	bf00      	nop
    }
  }

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3724      	adds	r7, #36	; 0x24
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
	...

0800615c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	460b      	mov	r3, r1
 8006166:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800616c:	78fb      	ldrb	r3, [r7, #3]
 800616e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006170:	2301      	movs	r3, #1
 8006172:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	04da      	lsls	r2, r3, #19
 8006178:	4b15      	ldr	r3, [pc, #84]	; (80061d0 <USB_DoPing+0x74>)
 800617a:	4013      	ands	r3, r2
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	0151      	lsls	r1, r2, #5
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	440a      	add	r2, r1
 8006184:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006188:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800618c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	4413      	add	r3, r2
 8006196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061a4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061ac:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ba:	461a      	mov	r2, r3
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	371c      	adds	r7, #28
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	1ff80000 	.word	0x1ff80000

080061d4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80061e0:	2300      	movs	r3, #0
 80061e2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7ff f935 	bl	8005454 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80061ea:	2110      	movs	r1, #16
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7ff f98f 	bl	8005510 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f7ff f9b0 	bl	8005558 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80061f8:	2300      	movs	r3, #0
 80061fa:	613b      	str	r3, [r7, #16]
 80061fc:	e01f      	b.n	800623e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	4413      	add	r3, r2
 8006206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006214:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800621c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006224:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	4413      	add	r3, r2
 800622e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006232:	461a      	mov	r2, r3
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	3301      	adds	r3, #1
 800623c:	613b      	str	r3, [r7, #16]
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	2b0f      	cmp	r3, #15
 8006242:	d9dc      	bls.n	80061fe <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006244:	2300      	movs	r3, #0
 8006246:	613b      	str	r3, [r7, #16]
 8006248:	e034      	b.n	80062b4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	015a      	lsls	r2, r3, #5
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	4413      	add	r3, r2
 8006252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006260:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006268:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006270:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	4413      	add	r3, r2
 800627a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800627e:	461a      	mov	r2, r3
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	3301      	adds	r3, #1
 8006288:	617b      	str	r3, [r7, #20]
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006290:	d80c      	bhi.n	80062ac <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	015a      	lsls	r2, r3, #5
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	4413      	add	r3, r2
 800629a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062a8:	d0ec      	beq.n	8006284 <USB_StopHost+0xb0>
 80062aa:	e000      	b.n	80062ae <USB_StopHost+0xda>
        break;
 80062ac:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	3301      	adds	r3, #1
 80062b2:	613b      	str	r3, [r7, #16]
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	2b0f      	cmp	r3, #15
 80062b8:	d9c7      	bls.n	800624a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062c0:	461a      	mov	r2, r3
 80062c2:	f04f 33ff 	mov.w	r3, #4294967295
 80062c6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f04f 32ff 	mov.w	r2, #4294967295
 80062ce:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f7ff f8ae 	bl	8005432 <USB_EnableGlobalInt>

  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3718      	adds	r7, #24
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80062e0:	b590      	push	{r4, r7, lr}
 80062e2:	b089      	sub	sp, #36	; 0x24
 80062e4:	af04      	add	r7, sp, #16
 80062e6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80062e8:	2301      	movs	r3, #1
 80062ea:	2202      	movs	r2, #2
 80062ec:	2102      	movs	r1, #2
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fc66 	bl	8006bc0 <USBH_FindInterface>
 80062f4:	4603      	mov	r3, r0
 80062f6:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80062f8:	7bfb      	ldrb	r3, [r7, #15]
 80062fa:	2bff      	cmp	r3, #255	; 0xff
 80062fc:	d002      	beq.n	8006304 <USBH_CDC_InterfaceInit+0x24>
 80062fe:	7bfb      	ldrb	r3, [r7, #15]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d901      	bls.n	8006308 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006304:	2302      	movs	r3, #2
 8006306:	e13d      	b.n	8006584 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006308:	7bfb      	ldrb	r3, [r7, #15]
 800630a:	4619      	mov	r1, r3
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 fc3b 	bl	8006b88 <USBH_SelectInterface>
 8006312:	4603      	mov	r3, r0
 8006314:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006316:	7bbb      	ldrb	r3, [r7, #14]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d001      	beq.n	8006320 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800631c:	2302      	movs	r3, #2
 800631e:	e131      	b.n	8006584 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006326:	2050      	movs	r0, #80	; 0x50
 8006328:	f002 fa00 	bl	800872c <malloc>
 800632c:	4603      	mov	r3, r0
 800632e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006336:	69db      	ldr	r3, [r3, #28]
 8006338:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d101      	bne.n	8006344 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006340:	2302      	movs	r3, #2
 8006342:	e11f      	b.n	8006584 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006344:	2250      	movs	r2, #80	; 0x50
 8006346:	2100      	movs	r1, #0
 8006348:	68b8      	ldr	r0, [r7, #8]
 800634a:	f002 f9ff 	bl	800874c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800634e:	7bfb      	ldrb	r3, [r7, #15]
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	211a      	movs	r1, #26
 8006354:	fb01 f303 	mul.w	r3, r1, r3
 8006358:	4413      	add	r3, r2
 800635a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	b25b      	sxtb	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	da15      	bge.n	8006392 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006366:	7bfb      	ldrb	r3, [r7, #15]
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	211a      	movs	r1, #26
 800636c:	fb01 f303 	mul.w	r3, r1, r3
 8006370:	4413      	add	r3, r2
 8006372:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006376:	781a      	ldrb	r2, [r3, #0]
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800637c:	7bfb      	ldrb	r3, [r7, #15]
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	211a      	movs	r1, #26
 8006382:	fb01 f303 	mul.w	r3, r1, r3
 8006386:	4413      	add	r3, r2
 8006388:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800638c:	881a      	ldrh	r2, [r3, #0]
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	785b      	ldrb	r3, [r3, #1]
 8006396:	4619      	mov	r1, r3
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f001 fe32 	bl	8008002 <USBH_AllocPipe>
 800639e:	4603      	mov	r3, r0
 80063a0:	461a      	mov	r2, r3
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	7819      	ldrb	r1, [r3, #0]
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	7858      	ldrb	r0, [r3, #1]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	8952      	ldrh	r2, [r2, #10]
 80063be:	9202      	str	r2, [sp, #8]
 80063c0:	2203      	movs	r2, #3
 80063c2:	9201      	str	r2, [sp, #4]
 80063c4:	9300      	str	r3, [sp, #0]
 80063c6:	4623      	mov	r3, r4
 80063c8:	4602      	mov	r2, r0
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f001 fdea 	bl	8007fa4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	2200      	movs	r2, #0
 80063d6:	4619      	mov	r1, r3
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f002 f8f9 	bl	80085d0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80063de:	2300      	movs	r3, #0
 80063e0:	2200      	movs	r2, #0
 80063e2:	210a      	movs	r1, #10
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 fbeb 	bl	8006bc0 <USBH_FindInterface>
 80063ea:	4603      	mov	r3, r0
 80063ec:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80063ee:	7bfb      	ldrb	r3, [r7, #15]
 80063f0:	2bff      	cmp	r3, #255	; 0xff
 80063f2:	d002      	beq.n	80063fa <USBH_CDC_InterfaceInit+0x11a>
 80063f4:	7bfb      	ldrb	r3, [r7, #15]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d901      	bls.n	80063fe <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80063fa:	2302      	movs	r3, #2
 80063fc:	e0c2      	b.n	8006584 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80063fe:	7bfb      	ldrb	r3, [r7, #15]
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	211a      	movs	r1, #26
 8006404:	fb01 f303 	mul.w	r3, r1, r3
 8006408:	4413      	add	r3, r2
 800640a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	b25b      	sxtb	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	da16      	bge.n	8006444 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006416:	7bfb      	ldrb	r3, [r7, #15]
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	211a      	movs	r1, #26
 800641c:	fb01 f303 	mul.w	r3, r1, r3
 8006420:	4413      	add	r3, r2
 8006422:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006426:	781a      	ldrb	r2, [r3, #0]
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800642c:	7bfb      	ldrb	r3, [r7, #15]
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	211a      	movs	r1, #26
 8006432:	fb01 f303 	mul.w	r3, r1, r3
 8006436:	4413      	add	r3, r2
 8006438:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800643c:	881a      	ldrh	r2, [r3, #0]
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	835a      	strh	r2, [r3, #26]
 8006442:	e015      	b.n	8006470 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006444:	7bfb      	ldrb	r3, [r7, #15]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	211a      	movs	r1, #26
 800644a:	fb01 f303 	mul.w	r3, r1, r3
 800644e:	4413      	add	r3, r2
 8006450:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006454:	781a      	ldrb	r2, [r3, #0]
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800645a:	7bfb      	ldrb	r3, [r7, #15]
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	211a      	movs	r1, #26
 8006460:	fb01 f303 	mul.w	r3, r1, r3
 8006464:	4413      	add	r3, r2
 8006466:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800646a:	881a      	ldrh	r2, [r3, #0]
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006470:	7bfb      	ldrb	r3, [r7, #15]
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	211a      	movs	r1, #26
 8006476:	fb01 f303 	mul.w	r3, r1, r3
 800647a:	4413      	add	r3, r2
 800647c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	b25b      	sxtb	r3, r3
 8006484:	2b00      	cmp	r3, #0
 8006486:	da16      	bge.n	80064b6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006488:	7bfb      	ldrb	r3, [r7, #15]
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	211a      	movs	r1, #26
 800648e:	fb01 f303 	mul.w	r3, r1, r3
 8006492:	4413      	add	r3, r2
 8006494:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006498:	781a      	ldrb	r2, [r3, #0]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800649e:	7bfb      	ldrb	r3, [r7, #15]
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	211a      	movs	r1, #26
 80064a4:	fb01 f303 	mul.w	r3, r1, r3
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80064ae:	881a      	ldrh	r2, [r3, #0]
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	835a      	strh	r2, [r3, #26]
 80064b4:	e015      	b.n	80064e2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80064b6:	7bfb      	ldrb	r3, [r7, #15]
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	211a      	movs	r1, #26
 80064bc:	fb01 f303 	mul.w	r3, r1, r3
 80064c0:	4413      	add	r3, r2
 80064c2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80064c6:	781a      	ldrb	r2, [r3, #0]
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	211a      	movs	r1, #26
 80064d2:	fb01 f303 	mul.w	r3, r1, r3
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80064dc:	881a      	ldrh	r2, [r3, #0]
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	7b9b      	ldrb	r3, [r3, #14]
 80064e6:	4619      	mov	r1, r3
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f001 fd8a 	bl	8008002 <USBH_AllocPipe>
 80064ee:	4603      	mov	r3, r0
 80064f0:	461a      	mov	r2, r3
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	7bdb      	ldrb	r3, [r3, #15]
 80064fa:	4619      	mov	r1, r3
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f001 fd80 	bl	8008002 <USBH_AllocPipe>
 8006502:	4603      	mov	r3, r0
 8006504:	461a      	mov	r2, r3
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	7b59      	ldrb	r1, [r3, #13]
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	7b98      	ldrb	r0, [r3, #14]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	8b12      	ldrh	r2, [r2, #24]
 8006522:	9202      	str	r2, [sp, #8]
 8006524:	2202      	movs	r2, #2
 8006526:	9201      	str	r2, [sp, #4]
 8006528:	9300      	str	r3, [sp, #0]
 800652a:	4623      	mov	r3, r4
 800652c:	4602      	mov	r2, r0
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f001 fd38 	bl	8007fa4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	7b19      	ldrb	r1, [r3, #12]
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	7bd8      	ldrb	r0, [r3, #15]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	8b52      	ldrh	r2, [r2, #26]
 800654c:	9202      	str	r2, [sp, #8]
 800654e:	2202      	movs	r2, #2
 8006550:	9201      	str	r2, [sp, #4]
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	4623      	mov	r3, r4
 8006556:	4602      	mov	r2, r0
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f001 fd23 	bl	8007fa4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	7b5b      	ldrb	r3, [r3, #13]
 800656a:	2200      	movs	r2, #0
 800656c:	4619      	mov	r1, r3
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f002 f82e 	bl	80085d0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	7b1b      	ldrb	r3, [r3, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	4619      	mov	r1, r3
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f002 f827 	bl	80085d0 <USBH_LL_SetToggle>

  return USBH_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	bd90      	pop	{r4, r7, pc}

0800658c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800659a:	69db      	ldr	r3, [r3, #28]
 800659c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00e      	beq.n	80065c4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	4619      	mov	r1, r3
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f001 fd18 	bl	8007fe2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	4619      	mov	r1, r3
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f001 fd43 	bl	8008044 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	7b1b      	ldrb	r3, [r3, #12]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00e      	beq.n	80065ea <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	7b1b      	ldrb	r3, [r3, #12]
 80065d0:	4619      	mov	r1, r3
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f001 fd05 	bl	8007fe2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	7b1b      	ldrb	r3, [r3, #12]
 80065dc:	4619      	mov	r1, r3
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f001 fd30 	bl	8008044 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2200      	movs	r2, #0
 80065e8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	7b5b      	ldrb	r3, [r3, #13]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00e      	beq.n	8006610 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	7b5b      	ldrb	r3, [r3, #13]
 80065f6:	4619      	mov	r1, r3
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f001 fcf2 	bl	8007fe2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	7b5b      	ldrb	r3, [r3, #13]
 8006602:	4619      	mov	r1, r3
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f001 fd1d 	bl	8008044 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006616:	69db      	ldr	r3, [r3, #28]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00b      	beq.n	8006634 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006622:	69db      	ldr	r3, [r3, #28]
 8006624:	4618      	mov	r0, r3
 8006626:	f002 f889 	bl	800873c <free>
    phost->pActiveClass->pData = 0U;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006630:	2200      	movs	r2, #0
 8006632:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}

0800663e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800663e:	b580      	push	{r7, lr}
 8006640:	b084      	sub	sp, #16
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	3340      	adds	r3, #64	; 0x40
 8006654:	4619      	mov	r1, r3
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f8b1 	bl	80067be <GetLineCoding>
 800665c:	4603      	mov	r3, r0
 800665e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006660:	7afb      	ldrb	r3, [r7, #11]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d105      	bne.n	8006672 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800666c:	2102      	movs	r1, #2
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006672:	7afb      	ldrb	r3, [r7, #11]
}
 8006674:	4618      	mov	r0, r3
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006684:	2301      	movs	r3, #1
 8006686:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006688:	2300      	movs	r3, #0
 800668a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006692:	69db      	ldr	r3, [r3, #28]
 8006694:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800669c:	2b04      	cmp	r3, #4
 800669e:	d877      	bhi.n	8006790 <USBH_CDC_Process+0x114>
 80066a0:	a201      	add	r2, pc, #4	; (adr r2, 80066a8 <USBH_CDC_Process+0x2c>)
 80066a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a6:	bf00      	nop
 80066a8:	080066bd 	.word	0x080066bd
 80066ac:	080066c3 	.word	0x080066c3
 80066b0:	080066f3 	.word	0x080066f3
 80066b4:	08006767 	.word	0x08006767
 80066b8:	08006775 	.word	0x08006775
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80066bc:	2300      	movs	r3, #0
 80066be:	73fb      	strb	r3, [r7, #15]
      break;
 80066c0:	e06d      	b.n	800679e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066c6:	4619      	mov	r1, r3
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 f897 	bl	80067fc <SetLineCoding>
 80066ce:	4603      	mov	r3, r0
 80066d0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80066d2:	7bbb      	ldrb	r3, [r7, #14]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d104      	bne.n	80066e2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80066e0:	e058      	b.n	8006794 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80066e2:	7bbb      	ldrb	r3, [r7, #14]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d055      	beq.n	8006794 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	2204      	movs	r2, #4
 80066ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80066f0:	e050      	b.n	8006794 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	3340      	adds	r3, #64	; 0x40
 80066f6:	4619      	mov	r1, r3
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f860 	bl	80067be <GetLineCoding>
 80066fe:	4603      	mov	r3, r0
 8006700:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006702:	7bbb      	ldrb	r3, [r7, #14]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d126      	bne.n	8006756 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800671a:	791b      	ldrb	r3, [r3, #4]
 800671c:	429a      	cmp	r2, r3
 800671e:	d13b      	bne.n	8006798 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800672a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800672c:	429a      	cmp	r2, r3
 800672e:	d133      	bne.n	8006798 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800673a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800673c:	429a      	cmp	r2, r3
 800673e:	d12b      	bne.n	8006798 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006748:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800674a:	429a      	cmp	r2, r3
 800674c:	d124      	bne.n	8006798 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f958 	bl	8006a04 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006754:	e020      	b.n	8006798 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006756:	7bbb      	ldrb	r3, [r7, #14]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d01d      	beq.n	8006798 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	2204      	movs	r2, #4
 8006760:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006764:	e018      	b.n	8006798 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f867 	bl	800683a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 f8da 	bl	8006926 <CDC_ProcessReception>
      break;
 8006772:	e014      	b.n	800679e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006774:	2100      	movs	r1, #0
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 ffe3 	bl	8007742 <USBH_ClrFeature>
 800677c:	4603      	mov	r3, r0
 800677e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006780:	7bbb      	ldrb	r3, [r7, #14]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10a      	bne.n	800679c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800678e:	e005      	b.n	800679c <USBH_CDC_Process+0x120>

    default:
      break;
 8006790:	bf00      	nop
 8006792:	e004      	b.n	800679e <USBH_CDC_Process+0x122>
      break;
 8006794:	bf00      	nop
 8006796:	e002      	b.n	800679e <USBH_CDC_Process+0x122>
      break;
 8006798:	bf00      	nop
 800679a:	e000      	b.n	800679e <USBH_CDC_Process+0x122>
      break;
 800679c:	bf00      	nop

  }

  return status;
 800679e:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr

080067be <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b082      	sub	sp, #8
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
 80067c6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	22a1      	movs	r2, #161	; 0xa1
 80067cc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2221      	movs	r2, #33	; 0x21
 80067d2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2207      	movs	r2, #7
 80067e4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	2207      	movs	r2, #7
 80067ea:	4619      	mov	r1, r3
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f001 f988 	bl	8007b02 <USBH_CtlReq>
 80067f2:	4603      	mov	r3, r0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3708      	adds	r7, #8
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2221      	movs	r2, #33	; 0x21
 800680a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2220      	movs	r2, #32
 8006810:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2207      	movs	r2, #7
 8006822:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	2207      	movs	r2, #7
 8006828:	4619      	mov	r1, r3
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f001 f969 	bl	8007b02 <USBH_CtlReq>
 8006830:	4603      	mov	r3, r0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3708      	adds	r7, #8
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b086      	sub	sp, #24
 800683e:	af02      	add	r7, sp, #8
 8006840:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006848:	69db      	ldr	r3, [r3, #28]
 800684a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800684c:	2300      	movs	r3, #0
 800684e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006856:	2b01      	cmp	r3, #1
 8006858:	d002      	beq.n	8006860 <CDC_ProcessTransmission+0x26>
 800685a:	2b02      	cmp	r3, #2
 800685c:	d023      	beq.n	80068a6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800685e:	e05e      	b.n	800691e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	8b12      	ldrh	r2, [r2, #24]
 8006868:	4293      	cmp	r3, r2
 800686a:	d90b      	bls.n	8006884 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	69d9      	ldr	r1, [r3, #28]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8b1a      	ldrh	r2, [r3, #24]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	7b5b      	ldrb	r3, [r3, #13]
 8006878:	2001      	movs	r0, #1
 800687a:	9000      	str	r0, [sp, #0]
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f001 fb4e 	bl	8007f1e <USBH_BulkSendData>
 8006882:	e00b      	b.n	800689c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800688c:	b29a      	uxth	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	7b5b      	ldrb	r3, [r3, #13]
 8006892:	2001      	movs	r0, #1
 8006894:	9000      	str	r0, [sp, #0]
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f001 fb41 	bl	8007f1e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80068a4:	e03b      	b.n	800691e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	7b5b      	ldrb	r3, [r3, #13]
 80068aa:	4619      	mov	r1, r3
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f001 fe65 	bl	800857c <USBH_LL_GetURBState>
 80068b2:	4603      	mov	r3, r0
 80068b4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80068b6:	7afb      	ldrb	r3, [r7, #11]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d128      	bne.n	800690e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	8b12      	ldrh	r2, [r2, #24]
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d90e      	bls.n	80068e6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	8b12      	ldrh	r2, [r2, #24]
 80068d0:	1a9a      	subs	r2, r3, r2
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	69db      	ldr	r3, [r3, #28]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	8b12      	ldrh	r2, [r2, #24]
 80068de:	441a      	add	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	61da      	str	r2, [r3, #28]
 80068e4:	e002      	b.n	80068ec <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d004      	beq.n	80068fe <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80068fc:	e00e      	b.n	800691c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f868 	bl	80069dc <USBH_CDC_TransmitCallback>
      break;
 800690c:	e006      	b.n	800691c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800690e:	7afb      	ldrb	r3, [r7, #11]
 8006910:	2b02      	cmp	r3, #2
 8006912:	d103      	bne.n	800691c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800691c:	bf00      	nop
  }
}
 800691e:	bf00      	nop
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b086      	sub	sp, #24
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006934:	69db      	ldr	r3, [r3, #28]
 8006936:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006938:	2300      	movs	r3, #0
 800693a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006942:	2b03      	cmp	r3, #3
 8006944:	d002      	beq.n	800694c <CDC_ProcessReception+0x26>
 8006946:	2b04      	cmp	r3, #4
 8006948:	d00e      	beq.n	8006968 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800694a:	e043      	b.n	80069d4 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	6a19      	ldr	r1, [r3, #32]
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	8b5a      	ldrh	r2, [r3, #26]
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	7b1b      	ldrb	r3, [r3, #12]
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f001 fb05 	bl	8007f68 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	2204      	movs	r2, #4
 8006962:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006966:	e035      	b.n	80069d4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	7b1b      	ldrb	r3, [r3, #12]
 800696c:	4619      	mov	r1, r3
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f001 fe04 	bl	800857c <USBH_LL_GetURBState>
 8006974:	4603      	mov	r3, r0
 8006976:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006978:	7cfb      	ldrb	r3, [r7, #19]
 800697a:	2b01      	cmp	r3, #1
 800697c:	d129      	bne.n	80069d2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	7b1b      	ldrb	r3, [r3, #12]
 8006982:	4619      	mov	r1, r3
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f001 fd67 	bl	8008458 <USBH_LL_GetLastXferSize>
 800698a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	429a      	cmp	r2, r3
 8006994:	d016      	beq.n	80069c4 <CDC_ProcessReception+0x9e>
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	8b5b      	ldrh	r3, [r3, #26]
 800699a:	461a      	mov	r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4293      	cmp	r3, r2
 80069a0:	d910      	bls.n	80069c4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	1ad2      	subs	r2, r2, r3
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	6a1a      	ldr	r2, [r3, #32]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	441a      	add	r2, r3
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	2203      	movs	r2, #3
 80069be:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80069c2:	e006      	b.n	80069d2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 f80f 	bl	80069f0 <USBH_CDC_ReceiveCallback>
      break;
 80069d2:	bf00      	nop
  }
}
 80069d4:	bf00      	nop
 80069d6:	3718      	adds	r7, #24
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80069e4:	bf00      	nop
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006a0c:	bf00      	nop
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	4613      	mov	r3, r2
 8006a24:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d101      	bne.n	8006a30 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	e029      	b.n	8006a84 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	79fa      	ldrb	r2, [r7, #7]
 8006a34:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f000 f81f 	bl	8006a8c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d003      	beq.n	8006a7c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f001 fc37 	bl	80082f0 <USBH_LL_Init>

  return USBH_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006a94:	2300      	movs	r3, #0
 8006a96:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006a98:	2300      	movs	r3, #0
 8006a9a:	60fb      	str	r3, [r7, #12]
 8006a9c:	e009      	b.n	8006ab2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	33e0      	adds	r3, #224	; 0xe0
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	60fb      	str	r3, [r7, #12]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2b0e      	cmp	r3, #14
 8006ab6:	d9f2      	bls.n	8006a9e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006ab8:	2300      	movs	r3, #0
 8006aba:	60fb      	str	r3, [r7, #12]
 8006abc:	e009      	b.n	8006ad2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006ac8:	2200      	movs	r2, #0
 8006aca:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	60fb      	str	r3, [r7, #12]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ad8:	d3f1      	bcc.n	8006abe <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2240      	movs	r2, #64	; 0x40
 8006afe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3714      	adds	r7, #20
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d016      	beq.n	8006b76 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10e      	bne.n	8006b70 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006b58:	1c59      	adds	r1, r3, #1
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	33de      	adds	r3, #222	; 0xde
 8006b64:	6839      	ldr	r1, [r7, #0]
 8006b66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	73fb      	strb	r3, [r7, #15]
 8006b6e:	e004      	b.n	8006b7a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006b70:	2302      	movs	r3, #2
 8006b72:	73fb      	strb	r3, [r7, #15]
 8006b74:	e001      	b.n	8006b7a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006b76:	2302      	movs	r3, #2
 8006b78:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3714      	adds	r7, #20
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	460b      	mov	r3, r1
 8006b92:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006b94:	2300      	movs	r3, #0
 8006b96:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006b9e:	78fa      	ldrb	r2, [r7, #3]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d204      	bcs.n	8006bae <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	78fa      	ldrb	r2, [r7, #3]
 8006ba8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006bac:	e001      	b.n	8006bb2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006bae:	2302      	movs	r3, #2
 8006bb0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3714      	adds	r7, #20
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b087      	sub	sp, #28
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	4608      	mov	r0, r1
 8006bca:	4611      	mov	r1, r2
 8006bcc:	461a      	mov	r2, r3
 8006bce:	4603      	mov	r3, r0
 8006bd0:	70fb      	strb	r3, [r7, #3]
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	70bb      	strb	r3, [r7, #2]
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006bde:	2300      	movs	r3, #0
 8006be0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006be8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006bea:	e025      	b.n	8006c38 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006bec:	7dfb      	ldrb	r3, [r7, #23]
 8006bee:	221a      	movs	r2, #26
 8006bf0:	fb02 f303 	mul.w	r3, r2, r3
 8006bf4:	3308      	adds	r3, #8
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	3302      	adds	r3, #2
 8006bfc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	795b      	ldrb	r3, [r3, #5]
 8006c02:	78fa      	ldrb	r2, [r7, #3]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d002      	beq.n	8006c0e <USBH_FindInterface+0x4e>
 8006c08:	78fb      	ldrb	r3, [r7, #3]
 8006c0a:	2bff      	cmp	r3, #255	; 0xff
 8006c0c:	d111      	bne.n	8006c32 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006c12:	78ba      	ldrb	r2, [r7, #2]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d002      	beq.n	8006c1e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c18:	78bb      	ldrb	r3, [r7, #2]
 8006c1a:	2bff      	cmp	r3, #255	; 0xff
 8006c1c:	d109      	bne.n	8006c32 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c22:	787a      	ldrb	r2, [r7, #1]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d002      	beq.n	8006c2e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006c28:	787b      	ldrb	r3, [r7, #1]
 8006c2a:	2bff      	cmp	r3, #255	; 0xff
 8006c2c:	d101      	bne.n	8006c32 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006c2e:	7dfb      	ldrb	r3, [r7, #23]
 8006c30:	e006      	b.n	8006c40 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006c32:	7dfb      	ldrb	r3, [r7, #23]
 8006c34:	3301      	adds	r3, #1
 8006c36:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006c38:	7dfb      	ldrb	r3, [r7, #23]
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d9d6      	bls.n	8006bec <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006c3e:	23ff      	movs	r3, #255	; 0xff
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	371c      	adds	r7, #28
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f001 fb87 	bl	8008368 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006c5a:	2101      	movs	r1, #1
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f001 fca0 	bl	80085a2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3708      	adds	r7, #8
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b088      	sub	sp, #32
 8006c70:	af04      	add	r7, sp, #16
 8006c72:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006c74:	2302      	movs	r3, #2
 8006c76:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d102      	bne.n	8006c8e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2203      	movs	r2, #3
 8006c8c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b0b      	cmp	r3, #11
 8006c96:	f200 81b3 	bhi.w	8007000 <USBH_Process+0x394>
 8006c9a:	a201      	add	r2, pc, #4	; (adr r2, 8006ca0 <USBH_Process+0x34>)
 8006c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca0:	08006cd1 	.word	0x08006cd1
 8006ca4:	08006d03 	.word	0x08006d03
 8006ca8:	08006d6b 	.word	0x08006d6b
 8006cac:	08006f9b 	.word	0x08006f9b
 8006cb0:	08007001 	.word	0x08007001
 8006cb4:	08006e0f 	.word	0x08006e0f
 8006cb8:	08006f41 	.word	0x08006f41
 8006cbc:	08006e45 	.word	0x08006e45
 8006cc0:	08006e65 	.word	0x08006e65
 8006cc4:	08006e85 	.word	0x08006e85
 8006cc8:	08006eb3 	.word	0x08006eb3
 8006ccc:	08006f83 	.word	0x08006f83
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f000 8193 	beq.w	8007004 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006ce4:	20c8      	movs	r0, #200	; 0xc8
 8006ce6:	f001 fca3 	bl	8008630 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f001 fb99 	bl	8008422 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006d00:	e180      	b.n	8007004 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d107      	bne.n	8006d1c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2202      	movs	r2, #2
 8006d18:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006d1a:	e182      	b.n	8007022 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006d22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d26:	d914      	bls.n	8006d52 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006d2e:	3301      	adds	r3, #1
 8006d30:	b2da      	uxtb	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006d3e:	2b03      	cmp	r3, #3
 8006d40:	d903      	bls.n	8006d4a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	220d      	movs	r2, #13
 8006d46:	701a      	strb	r2, [r3, #0]
      break;
 8006d48:	e16b      	b.n	8007022 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	701a      	strb	r2, [r3, #0]
      break;
 8006d50:	e167      	b.n	8007022 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006d58:	f103 020a 	add.w	r2, r3, #10
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006d62:	200a      	movs	r0, #10
 8006d64:	f001 fc64 	bl	8008630 <USBH_Delay>
      break;
 8006d68:	e15b      	b.n	8007022 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d005      	beq.n	8006d80 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d7a:	2104      	movs	r1, #4
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006d80:	2064      	movs	r0, #100	; 0x64
 8006d82:	f001 fc55 	bl	8008630 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f001 fb24 	bl	80083d4 <USBH_LL_GetSpeed>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	461a      	mov	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2205      	movs	r2, #5
 8006d9a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f001 f92f 	bl	8008002 <USBH_AllocPipe>
 8006da4:	4603      	mov	r3, r0
 8006da6:	461a      	mov	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006dac:	2180      	movs	r1, #128	; 0x80
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f001 f927 	bl	8008002 <USBH_AllocPipe>
 8006db4:	4603      	mov	r3, r0
 8006db6:	461a      	mov	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	7919      	ldrb	r1, [r3, #4]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006dd0:	b292      	uxth	r2, r2
 8006dd2:	9202      	str	r2, [sp, #8]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	9201      	str	r2, [sp, #4]
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2280      	movs	r2, #128	; 0x80
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f001 f8e0 	bl	8007fa4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	7959      	ldrb	r1, [r3, #5]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006df8:	b292      	uxth	r2, r2
 8006dfa:	9202      	str	r2, [sp, #8]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	9201      	str	r2, [sp, #4]
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	4603      	mov	r3, r0
 8006e04:	2200      	movs	r2, #0
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f001 f8cc 	bl	8007fa4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006e0c:	e109      	b.n	8007022 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f90c 	bl	800702c <USBH_HandleEnum>
 8006e14:	4603      	mov	r3, r0
 8006e16:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006e18:	7bbb      	ldrb	r3, [r7, #14]
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f040 80f3 	bne.w	8007008 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d103      	bne.n	8006e3c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2208      	movs	r2, #8
 8006e38:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006e3a:	e0e5      	b.n	8007008 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2207      	movs	r2, #7
 8006e40:	701a      	strb	r2, [r3, #0]
      break;
 8006e42:	e0e1      	b.n	8007008 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f000 80de 	beq.w	800700c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e56:	2101      	movs	r1, #1
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2208      	movs	r2, #8
 8006e60:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006e62:	e0d3      	b.n	800700c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 fc20 	bl	80076b4 <USBH_SetCfg>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f040 80ca 	bne.w	8007010 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2209      	movs	r2, #9
 8006e80:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006e82:	e0c5      	b.n	8007010 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006e8a:	f003 0320 	and.w	r3, r3, #32
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00b      	beq.n	8006eaa <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006e92:	2101      	movs	r1, #1
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fc30 	bl	80076fa <USBH_SetFeature>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f040 80b9 	bne.w	8007014 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	220a      	movs	r2, #10
 8006ea6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006ea8:	e0b4      	b.n	8007014 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	220a      	movs	r2, #10
 8006eae:	701a      	strb	r2, [r3, #0]
      break;
 8006eb0:	e0b0      	b.n	8007014 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f000 80ad 	beq.w	8007018 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	73fb      	strb	r3, [r7, #15]
 8006eca:	e016      	b.n	8006efa <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006ecc:	7bfa      	ldrb	r2, [r7, #15]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	32de      	adds	r2, #222	; 0xde
 8006ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed6:	791a      	ldrb	r2, [r3, #4]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d108      	bne.n	8006ef4 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006ee2:	7bfa      	ldrb	r2, [r7, #15]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	32de      	adds	r2, #222	; 0xde
 8006ee8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006ef2:	e005      	b.n	8006f00 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006ef4:	7bfb      	ldrb	r3, [r7, #15]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	73fb      	strb	r3, [r7, #15]
 8006efa:	7bfb      	ldrb	r3, [r7, #15]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d0e5      	beq.n	8006ecc <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d016      	beq.n	8006f38 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	4798      	blx	r3
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d109      	bne.n	8006f30 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2206      	movs	r2, #6
 8006f20:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f28:	2103      	movs	r1, #3
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006f2e:	e073      	b.n	8007018 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	220d      	movs	r2, #13
 8006f34:	701a      	strb	r2, [r3, #0]
      break;
 8006f36:	e06f      	b.n	8007018 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	220d      	movs	r2, #13
 8006f3c:	701a      	strb	r2, [r3, #0]
      break;
 8006f3e:	e06b      	b.n	8007018 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d017      	beq.n	8006f7a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	4798      	blx	r3
 8006f56:	4603      	mov	r3, r0
 8006f58:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006f5a:	7bbb      	ldrb	r3, [r7, #14]
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d103      	bne.n	8006f6a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	220b      	movs	r2, #11
 8006f66:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006f68:	e058      	b.n	800701c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8006f6a:	7bbb      	ldrb	r3, [r7, #14]
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d154      	bne.n	800701c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	220d      	movs	r2, #13
 8006f76:	701a      	strb	r2, [r3, #0]
      break;
 8006f78:	e050      	b.n	800701c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	220d      	movs	r2, #13
 8006f7e:	701a      	strb	r2, [r3, #0]
      break;
 8006f80:	e04c      	b.n	800701c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d049      	beq.n	8007020 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f92:	695b      	ldr	r3, [r3, #20]
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	4798      	blx	r3
      }
      break;
 8006f98:	e042      	b.n	8007020 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f7ff fd72 	bl	8006a8c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d009      	beq.n	8006fc6 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d005      	beq.n	8006fdc <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006fd6:	2105      	movs	r1, #5
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d107      	bne.n	8006ff8 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f7ff fe2b 	bl	8006c4c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006ff6:	e014      	b.n	8007022 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f001 f9b5 	bl	8008368 <USBH_LL_Start>
      break;
 8006ffe:	e010      	b.n	8007022 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007000:	bf00      	nop
 8007002:	e00e      	b.n	8007022 <USBH_Process+0x3b6>
      break;
 8007004:	bf00      	nop
 8007006:	e00c      	b.n	8007022 <USBH_Process+0x3b6>
      break;
 8007008:	bf00      	nop
 800700a:	e00a      	b.n	8007022 <USBH_Process+0x3b6>
    break;
 800700c:	bf00      	nop
 800700e:	e008      	b.n	8007022 <USBH_Process+0x3b6>
      break;
 8007010:	bf00      	nop
 8007012:	e006      	b.n	8007022 <USBH_Process+0x3b6>
      break;
 8007014:	bf00      	nop
 8007016:	e004      	b.n	8007022 <USBH_Process+0x3b6>
      break;
 8007018:	bf00      	nop
 800701a:	e002      	b.n	8007022 <USBH_Process+0x3b6>
      break;
 800701c:	bf00      	nop
 800701e:	e000      	b.n	8007022 <USBH_Process+0x3b6>
      break;
 8007020:	bf00      	nop
  }
  return USBH_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b088      	sub	sp, #32
 8007030:	af04      	add	r7, sp, #16
 8007032:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007034:	2301      	movs	r3, #1
 8007036:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007038:	2301      	movs	r3, #1
 800703a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	785b      	ldrb	r3, [r3, #1]
 8007040:	2b07      	cmp	r3, #7
 8007042:	f200 81c1 	bhi.w	80073c8 <USBH_HandleEnum+0x39c>
 8007046:	a201      	add	r2, pc, #4	; (adr r2, 800704c <USBH_HandleEnum+0x20>)
 8007048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704c:	0800706d 	.word	0x0800706d
 8007050:	0800712b 	.word	0x0800712b
 8007054:	08007195 	.word	0x08007195
 8007058:	08007223 	.word	0x08007223
 800705c:	0800728d 	.word	0x0800728d
 8007060:	080072fd 	.word	0x080072fd
 8007064:	08007343 	.word	0x08007343
 8007068:	08007389 	.word	0x08007389
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800706c:	2108      	movs	r1, #8
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 fa50 	bl	8007514 <USBH_Get_DevDesc>
 8007074:	4603      	mov	r3, r0
 8007076:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007078:	7bbb      	ldrb	r3, [r7, #14]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d130      	bne.n	80070e0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	7919      	ldrb	r1, [r3, #4]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80070a2:	b292      	uxth	r2, r2
 80070a4:	9202      	str	r2, [sp, #8]
 80070a6:	2200      	movs	r2, #0
 80070a8:	9201      	str	r2, [sp, #4]
 80070aa:	9300      	str	r3, [sp, #0]
 80070ac:	4603      	mov	r3, r0
 80070ae:	2280      	movs	r2, #128	; 0x80
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 ff77 	bl	8007fa4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	7959      	ldrb	r1, [r3, #5]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80070ca:	b292      	uxth	r2, r2
 80070cc:	9202      	str	r2, [sp, #8]
 80070ce:	2200      	movs	r2, #0
 80070d0:	9201      	str	r2, [sp, #4]
 80070d2:	9300      	str	r3, [sp, #0]
 80070d4:	4603      	mov	r3, r0
 80070d6:	2200      	movs	r2, #0
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 ff63 	bl	8007fa4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80070de:	e175      	b.n	80073cc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070e0:	7bbb      	ldrb	r3, [r7, #14]
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	f040 8172 	bne.w	80073cc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070ee:	3301      	adds	r3, #1
 80070f0:	b2da      	uxtb	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070fe:	2b03      	cmp	r3, #3
 8007100:	d903      	bls.n	800710a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	220d      	movs	r2, #13
 8007106:	701a      	strb	r2, [r3, #0]
      break;
 8007108:	e160      	b.n	80073cc <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	795b      	ldrb	r3, [r3, #5]
 800710e:	4619      	mov	r1, r3
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 ff97 	bl	8008044 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	791b      	ldrb	r3, [r3, #4]
 800711a:	4619      	mov	r1, r3
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 ff91 	bl	8008044 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	701a      	strb	r2, [r3, #0]
      break;
 8007128:	e150      	b.n	80073cc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800712a:	2112      	movs	r1, #18
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 f9f1 	bl	8007514 <USBH_Get_DevDesc>
 8007132:	4603      	mov	r3, r0
 8007134:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007136:	7bbb      	ldrb	r3, [r7, #14]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d103      	bne.n	8007144 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2202      	movs	r2, #2
 8007140:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007142:	e145      	b.n	80073d0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007144:	7bbb      	ldrb	r3, [r7, #14]
 8007146:	2b03      	cmp	r3, #3
 8007148:	f040 8142 	bne.w	80073d0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007152:	3301      	adds	r3, #1
 8007154:	b2da      	uxtb	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007162:	2b03      	cmp	r3, #3
 8007164:	d903      	bls.n	800716e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	220d      	movs	r2, #13
 800716a:	701a      	strb	r2, [r3, #0]
      break;
 800716c:	e130      	b.n	80073d0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	795b      	ldrb	r3, [r3, #5]
 8007172:	4619      	mov	r1, r3
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 ff65 	bl	8008044 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	791b      	ldrb	r3, [r3, #4]
 800717e:	4619      	mov	r1, r3
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 ff5f 	bl	8008044 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	701a      	strb	r2, [r3, #0]
      break;
 8007192:	e11d      	b.n	80073d0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007194:	2101      	movs	r1, #1
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fa68 	bl	800766c <USBH_SetAddress>
 800719c:	4603      	mov	r3, r0
 800719e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80071a0:	7bbb      	ldrb	r3, [r7, #14]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d132      	bne.n	800720c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80071a6:	2002      	movs	r0, #2
 80071a8:	f001 fa42 	bl	8008630 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2203      	movs	r2, #3
 80071b8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	7919      	ldrb	r1, [r3, #4]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80071ce:	b292      	uxth	r2, r2
 80071d0:	9202      	str	r2, [sp, #8]
 80071d2:	2200      	movs	r2, #0
 80071d4:	9201      	str	r2, [sp, #4]
 80071d6:	9300      	str	r3, [sp, #0]
 80071d8:	4603      	mov	r3, r0
 80071da:	2280      	movs	r2, #128	; 0x80
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fee1 	bl	8007fa4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	7959      	ldrb	r1, [r3, #5]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80071f6:	b292      	uxth	r2, r2
 80071f8:	9202      	str	r2, [sp, #8]
 80071fa:	2200      	movs	r2, #0
 80071fc:	9201      	str	r2, [sp, #4]
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	4603      	mov	r3, r0
 8007202:	2200      	movs	r2, #0
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 fecd 	bl	8007fa4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800720a:	e0e3      	b.n	80073d4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800720c:	7bbb      	ldrb	r3, [r7, #14]
 800720e:	2b03      	cmp	r3, #3
 8007210:	f040 80e0 	bne.w	80073d4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	220d      	movs	r2, #13
 8007218:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	705a      	strb	r2, [r3, #1]
      break;
 8007220:	e0d8      	b.n	80073d4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007222:	2109      	movs	r1, #9
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 f99d 	bl	8007564 <USBH_Get_CfgDesc>
 800722a:	4603      	mov	r3, r0
 800722c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800722e:	7bbb      	ldrb	r3, [r7, #14]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d103      	bne.n	800723c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2204      	movs	r2, #4
 8007238:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800723a:	e0cd      	b.n	80073d8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800723c:	7bbb      	ldrb	r3, [r7, #14]
 800723e:	2b03      	cmp	r3, #3
 8007240:	f040 80ca 	bne.w	80073d8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800724a:	3301      	adds	r3, #1
 800724c:	b2da      	uxtb	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800725a:	2b03      	cmp	r3, #3
 800725c:	d903      	bls.n	8007266 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	220d      	movs	r2, #13
 8007262:	701a      	strb	r2, [r3, #0]
      break;
 8007264:	e0b8      	b.n	80073d8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	795b      	ldrb	r3, [r3, #5]
 800726a:	4619      	mov	r1, r3
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fee9 	bl	8008044 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	791b      	ldrb	r3, [r3, #4]
 8007276:	4619      	mov	r1, r3
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 fee3 	bl	8008044 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	701a      	strb	r2, [r3, #0]
      break;
 800728a:	e0a5      	b.n	80073d8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007292:	4619      	mov	r1, r3
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 f965 	bl	8007564 <USBH_Get_CfgDesc>
 800729a:	4603      	mov	r3, r0
 800729c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800729e:	7bbb      	ldrb	r3, [r7, #14]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d103      	bne.n	80072ac <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2205      	movs	r2, #5
 80072a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80072aa:	e097      	b.n	80073dc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072ac:	7bbb      	ldrb	r3, [r7, #14]
 80072ae:	2b03      	cmp	r3, #3
 80072b0:	f040 8094 	bne.w	80073dc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072ba:	3301      	adds	r3, #1
 80072bc:	b2da      	uxtb	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072ca:	2b03      	cmp	r3, #3
 80072cc:	d903      	bls.n	80072d6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	220d      	movs	r2, #13
 80072d2:	701a      	strb	r2, [r3, #0]
      break;
 80072d4:	e082      	b.n	80073dc <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	795b      	ldrb	r3, [r3, #5]
 80072da:	4619      	mov	r1, r3
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 feb1 	bl	8008044 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	791b      	ldrb	r3, [r3, #4]
 80072e6:	4619      	mov	r1, r3
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 feab 	bl	8008044 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	701a      	strb	r2, [r3, #0]
      break;
 80072fa:	e06f      	b.n	80073dc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007302:	2b00      	cmp	r3, #0
 8007304:	d019      	beq.n	800733a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007312:	23ff      	movs	r3, #255	; 0xff
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f949 	bl	80075ac <USBH_Get_StringDesc>
 800731a:	4603      	mov	r3, r0
 800731c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800731e:	7bbb      	ldrb	r3, [r7, #14]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d103      	bne.n	800732c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2206      	movs	r2, #6
 8007328:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800732a:	e059      	b.n	80073e0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800732c:	7bbb      	ldrb	r3, [r7, #14]
 800732e:	2b03      	cmp	r3, #3
 8007330:	d156      	bne.n	80073e0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2206      	movs	r2, #6
 8007336:	705a      	strb	r2, [r3, #1]
      break;
 8007338:	e052      	b.n	80073e0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2206      	movs	r2, #6
 800733e:	705a      	strb	r2, [r3, #1]
      break;
 8007340:	e04e      	b.n	80073e0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007348:	2b00      	cmp	r3, #0
 800734a:	d019      	beq.n	8007380 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007358:	23ff      	movs	r3, #255	; 0xff
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f926 	bl	80075ac <USBH_Get_StringDesc>
 8007360:	4603      	mov	r3, r0
 8007362:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007364:	7bbb      	ldrb	r3, [r7, #14]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d103      	bne.n	8007372 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2207      	movs	r2, #7
 800736e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007370:	e038      	b.n	80073e4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007372:	7bbb      	ldrb	r3, [r7, #14]
 8007374:	2b03      	cmp	r3, #3
 8007376:	d135      	bne.n	80073e4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2207      	movs	r2, #7
 800737c:	705a      	strb	r2, [r3, #1]
      break;
 800737e:	e031      	b.n	80073e4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2207      	movs	r2, #7
 8007384:	705a      	strb	r2, [r3, #1]
      break;
 8007386:	e02d      	b.n	80073e4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800738e:	2b00      	cmp	r3, #0
 8007390:	d017      	beq.n	80073c2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800739e:	23ff      	movs	r3, #255	; 0xff
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 f903 	bl	80075ac <USBH_Get_StringDesc>
 80073a6:	4603      	mov	r3, r0
 80073a8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80073aa:	7bbb      	ldrb	r3, [r7, #14]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d102      	bne.n	80073b6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80073b0:	2300      	movs	r3, #0
 80073b2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80073b4:	e018      	b.n	80073e8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073b6:	7bbb      	ldrb	r3, [r7, #14]
 80073b8:	2b03      	cmp	r3, #3
 80073ba:	d115      	bne.n	80073e8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80073bc:	2300      	movs	r3, #0
 80073be:	73fb      	strb	r3, [r7, #15]
      break;
 80073c0:	e012      	b.n	80073e8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80073c2:	2300      	movs	r3, #0
 80073c4:	73fb      	strb	r3, [r7, #15]
      break;
 80073c6:	e00f      	b.n	80073e8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80073c8:	bf00      	nop
 80073ca:	e00e      	b.n	80073ea <USBH_HandleEnum+0x3be>
      break;
 80073cc:	bf00      	nop
 80073ce:	e00c      	b.n	80073ea <USBH_HandleEnum+0x3be>
      break;
 80073d0:	bf00      	nop
 80073d2:	e00a      	b.n	80073ea <USBH_HandleEnum+0x3be>
      break;
 80073d4:	bf00      	nop
 80073d6:	e008      	b.n	80073ea <USBH_HandleEnum+0x3be>
      break;
 80073d8:	bf00      	nop
 80073da:	e006      	b.n	80073ea <USBH_HandleEnum+0x3be>
      break;
 80073dc:	bf00      	nop
 80073de:	e004      	b.n	80073ea <USBH_HandleEnum+0x3be>
      break;
 80073e0:	bf00      	nop
 80073e2:	e002      	b.n	80073ea <USBH_HandleEnum+0x3be>
      break;
 80073e4:	bf00      	nop
 80073e6:	e000      	b.n	80073ea <USBH_HandleEnum+0x3be>
      break;
 80073e8:	bf00      	nop
  }
  return Status;
 80073ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	683a      	ldr	r2, [r7, #0]
 8007402:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007406:	bf00      	nop
 8007408:	370c      	adds	r7, #12
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b082      	sub	sp, #8
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007420:	1c5a      	adds	r2, r3, #1
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 f804 	bl	8007436 <USBH_HandleSof>
}
 800742e:	bf00      	nop
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b082      	sub	sp, #8
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	b2db      	uxtb	r3, r3
 8007444:	2b0b      	cmp	r3, #11
 8007446:	d10a      	bne.n	800745e <USBH_HandleSof+0x28>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800744e:	2b00      	cmp	r3, #0
 8007450:	d005      	beq.n	800745e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	4798      	blx	r3
  }
}
 800745e:	bf00      	nop
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007466:	b480      	push	{r7}
 8007468:	b083      	sub	sp, #12
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007476:	bf00      	nop
}
 8007478:	370c      	adds	r7, #12
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr

08007482 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007482:	b480      	push	{r7}
 8007484:	b083      	sub	sp, #12
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007492:	bf00      	nop
}
 8007494:	370c      	adds	r7, #12
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr

0800749e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800749e:	b480      	push	{r7}
 80074a0:	b083      	sub	sp, #12
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2201      	movs	r2, #1
 80074aa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 ff56 	bl	800839e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	791b      	ldrb	r3, [r3, #4]
 80074f6:	4619      	mov	r1, r3
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 fda3 	bl	8008044 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	795b      	ldrb	r3, [r3, #5]
 8007502:	4619      	mov	r1, r3
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fd9d 	bl	8008044 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3708      	adds	r7, #8
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b086      	sub	sp, #24
 8007518:	af02      	add	r7, sp, #8
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	460b      	mov	r3, r1
 800751e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007526:	78fb      	ldrb	r3, [r7, #3]
 8007528:	b29b      	uxth	r3, r3
 800752a:	9300      	str	r3, [sp, #0]
 800752c:	4613      	mov	r3, r2
 800752e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007532:	2100      	movs	r1, #0
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 f864 	bl	8007602 <USBH_GetDescriptor>
 800753a:	4603      	mov	r3, r0
 800753c:	73fb      	strb	r3, [r7, #15]
 800753e:	7bfb      	ldrb	r3, [r7, #15]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d10a      	bne.n	800755a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f203 3026 	addw	r0, r3, #806	; 0x326
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007550:	78fa      	ldrb	r2, [r7, #3]
 8007552:	b292      	uxth	r2, r2
 8007554:	4619      	mov	r1, r3
 8007556:	f000 f918 	bl	800778a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800755a:	7bfb      	ldrb	r3, [r7, #15]
}
 800755c:	4618      	mov	r0, r3
 800755e:	3710      	adds	r7, #16
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af02      	add	r7, sp, #8
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	460b      	mov	r3, r1
 800756e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	331c      	adds	r3, #28
 8007574:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007576:	887b      	ldrh	r3, [r7, #2]
 8007578:	9300      	str	r3, [sp, #0]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007580:	2100      	movs	r1, #0
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f83d 	bl	8007602 <USBH_GetDescriptor>
 8007588:	4603      	mov	r3, r0
 800758a:	72fb      	strb	r3, [r7, #11]
 800758c:	7afb      	ldrb	r3, [r7, #11]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d107      	bne.n	80075a2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007598:	887a      	ldrh	r2, [r7, #2]
 800759a:	68f9      	ldr	r1, [r7, #12]
 800759c:	4618      	mov	r0, r3
 800759e:	f000 f964 	bl	800786a <USBH_ParseCfgDesc>
  }

  return status;
 80075a2:	7afb      	ldrb	r3, [r7, #11]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b088      	sub	sp, #32
 80075b0:	af02      	add	r7, sp, #8
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	607a      	str	r2, [r7, #4]
 80075b6:	461a      	mov	r2, r3
 80075b8:	460b      	mov	r3, r1
 80075ba:	72fb      	strb	r3, [r7, #11]
 80075bc:	4613      	mov	r3, r2
 80075be:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80075c0:	7afb      	ldrb	r3, [r7, #11]
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80075c8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80075d0:	893b      	ldrh	r3, [r7, #8]
 80075d2:	9300      	str	r3, [sp, #0]
 80075d4:	460b      	mov	r3, r1
 80075d6:	2100      	movs	r1, #0
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	f000 f812 	bl	8007602 <USBH_GetDescriptor>
 80075de:	4603      	mov	r3, r0
 80075e0:	75fb      	strb	r3, [r7, #23]
 80075e2:	7dfb      	ldrb	r3, [r7, #23]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d107      	bne.n	80075f8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80075ee:	893a      	ldrh	r2, [r7, #8]
 80075f0:	6879      	ldr	r1, [r7, #4]
 80075f2:	4618      	mov	r0, r3
 80075f4:	f000 fa37 	bl	8007a66 <USBH_ParseStringDesc>
  }

  return status;
 80075f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3718      	adds	r7, #24
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b084      	sub	sp, #16
 8007606:	af00      	add	r7, sp, #0
 8007608:	60f8      	str	r0, [r7, #12]
 800760a:	607b      	str	r3, [r7, #4]
 800760c:	460b      	mov	r3, r1
 800760e:	72fb      	strb	r3, [r7, #11]
 8007610:	4613      	mov	r3, r2
 8007612:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	789b      	ldrb	r3, [r3, #2]
 8007618:	2b01      	cmp	r3, #1
 800761a:	d11c      	bne.n	8007656 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800761c:	7afb      	ldrb	r3, [r7, #11]
 800761e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007622:	b2da      	uxtb	r2, r3
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2206      	movs	r2, #6
 800762c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	893a      	ldrh	r2, [r7, #8]
 8007632:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007634:	893b      	ldrh	r3, [r7, #8]
 8007636:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800763a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800763e:	d104      	bne.n	800764a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f240 4209 	movw	r2, #1033	; 0x409
 8007646:	829a      	strh	r2, [r3, #20]
 8007648:	e002      	b.n	8007650 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	8b3a      	ldrh	r2, [r7, #24]
 8007654:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007656:	8b3b      	ldrh	r3, [r7, #24]
 8007658:	461a      	mov	r2, r3
 800765a:	6879      	ldr	r1, [r7, #4]
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f000 fa50 	bl	8007b02 <USBH_CtlReq>
 8007662:	4603      	mov	r3, r0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3710      	adds	r7, #16
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	460b      	mov	r3, r1
 8007676:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	789b      	ldrb	r3, [r3, #2]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d10f      	bne.n	80076a0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2205      	movs	r2, #5
 800768a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800768c:	78fb      	ldrb	r3, [r7, #3]
 800768e:	b29a      	uxth	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80076a0:	2200      	movs	r2, #0
 80076a2:	2100      	movs	r1, #0
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 fa2c 	bl	8007b02 <USBH_CtlReq>
 80076aa:	4603      	mov	r3, r0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3708      	adds	r7, #8
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	460b      	mov	r3, r1
 80076be:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	789b      	ldrb	r3, [r3, #2]
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d10e      	bne.n	80076e6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2209      	movs	r2, #9
 80076d2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	887a      	ldrh	r2, [r7, #2]
 80076d8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80076e6:	2200      	movs	r2, #0
 80076e8:	2100      	movs	r1, #0
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fa09 	bl	8007b02 <USBH_CtlReq>
 80076f0:	4603      	mov	r3, r0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3708      	adds	r7, #8
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b082      	sub	sp, #8
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
 8007702:	460b      	mov	r3, r1
 8007704:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	789b      	ldrb	r3, [r3, #2]
 800770a:	2b01      	cmp	r3, #1
 800770c:	d10f      	bne.n	800772e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2203      	movs	r2, #3
 8007718:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800771a:	78fb      	ldrb	r3, [r7, #3]
 800771c:	b29a      	uxth	r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800772e:	2200      	movs	r2, #0
 8007730:	2100      	movs	r1, #0
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f9e5 	bl	8007b02 <USBH_CtlReq>
 8007738:	4603      	mov	r3, r0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b082      	sub	sp, #8
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	460b      	mov	r3, r1
 800774c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	789b      	ldrb	r3, [r3, #2]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d10f      	bne.n	8007776 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2202      	movs	r2, #2
 800775a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007768:	78fb      	ldrb	r3, [r7, #3]
 800776a:	b29a      	uxth	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007776:	2200      	movs	r2, #0
 8007778:	2100      	movs	r1, #0
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f9c1 	bl	8007b02 <USBH_CtlReq>
 8007780:	4603      	mov	r3, r0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3708      	adds	r7, #8
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800778a:	b480      	push	{r7}
 800778c:	b085      	sub	sp, #20
 800778e:	af00      	add	r7, sp, #0
 8007790:	60f8      	str	r0, [r7, #12]
 8007792:	60b9      	str	r1, [r7, #8]
 8007794:	4613      	mov	r3, r2
 8007796:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	781a      	ldrb	r2, [r3, #0]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	785a      	ldrb	r2, [r3, #1]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	3302      	adds	r3, #2
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	3303      	adds	r3, #3
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	021b      	lsls	r3, r3, #8
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	4313      	orrs	r3, r2
 80077be:	b29a      	uxth	r2, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	791a      	ldrb	r2, [r3, #4]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	795a      	ldrb	r2, [r3, #5]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	799a      	ldrb	r2, [r3, #6]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	79da      	ldrb	r2, [r3, #7]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80077e4:	88fb      	ldrh	r3, [r7, #6]
 80077e6:	2b08      	cmp	r3, #8
 80077e8:	d939      	bls.n	800785e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	3308      	adds	r3, #8
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	3309      	adds	r3, #9
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	021b      	lsls	r3, r3, #8
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	4313      	orrs	r3, r2
 8007800:	b29a      	uxth	r2, r3
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	330a      	adds	r3, #10
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	b29a      	uxth	r2, r3
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	330b      	adds	r3, #11
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	b29b      	uxth	r3, r3
 8007816:	021b      	lsls	r3, r3, #8
 8007818:	b29b      	uxth	r3, r3
 800781a:	4313      	orrs	r3, r2
 800781c:	b29a      	uxth	r2, r3
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	330c      	adds	r3, #12
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	b29a      	uxth	r2, r3
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	330d      	adds	r3, #13
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	b29b      	uxth	r3, r3
 8007832:	021b      	lsls	r3, r3, #8
 8007834:	b29b      	uxth	r3, r3
 8007836:	4313      	orrs	r3, r2
 8007838:	b29a      	uxth	r2, r3
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	7b9a      	ldrb	r2, [r3, #14]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	7bda      	ldrb	r2, [r3, #15]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	7c1a      	ldrb	r2, [r3, #16]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	7c5a      	ldrb	r2, [r3, #17]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	745a      	strb	r2, [r3, #17]
  }
}
 800785e:	bf00      	nop
 8007860:	3714      	adds	r7, #20
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr

0800786a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b08a      	sub	sp, #40	; 0x28
 800786e:	af00      	add	r7, sp, #0
 8007870:	60f8      	str	r0, [r7, #12]
 8007872:	60b9      	str	r1, [r7, #8]
 8007874:	4613      	mov	r3, r2
 8007876:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800787c:	2300      	movs	r3, #0
 800787e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007882:	2300      	movs	r3, #0
 8007884:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	781a      	ldrb	r2, [r3, #0]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	785a      	ldrb	r2, [r3, #1]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	3302      	adds	r3, #2
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	3303      	adds	r3, #3
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	021b      	lsls	r3, r3, #8
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	4313      	orrs	r3, r2
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	791a      	ldrb	r2, [r3, #4]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	795a      	ldrb	r2, [r3, #5]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	799a      	ldrb	r2, [r3, #6]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	79da      	ldrb	r2, [r3, #7]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	7a1a      	ldrb	r2, [r3, #8]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80078e0:	88fb      	ldrh	r3, [r7, #6]
 80078e2:	2b09      	cmp	r3, #9
 80078e4:	d95f      	bls.n	80079a6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80078e6:	2309      	movs	r3, #9
 80078e8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80078ea:	2300      	movs	r3, #0
 80078ec:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80078ee:	e051      	b.n	8007994 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80078f0:	f107 0316 	add.w	r3, r7, #22
 80078f4:	4619      	mov	r1, r3
 80078f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078f8:	f000 f8e8 	bl	8007acc <USBH_GetNextDesc>
 80078fc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80078fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007900:	785b      	ldrb	r3, [r3, #1]
 8007902:	2b04      	cmp	r3, #4
 8007904:	d146      	bne.n	8007994 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007906:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800790a:	221a      	movs	r2, #26
 800790c:	fb02 f303 	mul.w	r3, r2, r3
 8007910:	3308      	adds	r3, #8
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	4413      	add	r3, r2
 8007916:	3302      	adds	r3, #2
 8007918:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800791a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800791c:	69f8      	ldr	r0, [r7, #28]
 800791e:	f000 f846 	bl	80079ae <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007922:	2300      	movs	r3, #0
 8007924:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007928:	2300      	movs	r3, #0
 800792a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800792c:	e022      	b.n	8007974 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800792e:	f107 0316 	add.w	r3, r7, #22
 8007932:	4619      	mov	r1, r3
 8007934:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007936:	f000 f8c9 	bl	8007acc <USBH_GetNextDesc>
 800793a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800793c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793e:	785b      	ldrb	r3, [r3, #1]
 8007940:	2b05      	cmp	r3, #5
 8007942:	d117      	bne.n	8007974 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007944:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007948:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800794c:	3201      	adds	r2, #1
 800794e:	00d2      	lsls	r2, r2, #3
 8007950:	211a      	movs	r1, #26
 8007952:	fb01 f303 	mul.w	r3, r1, r3
 8007956:	4413      	add	r3, r2
 8007958:	3308      	adds	r3, #8
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	4413      	add	r3, r2
 800795e:	3304      	adds	r3, #4
 8007960:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007962:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007964:	69b8      	ldr	r0, [r7, #24]
 8007966:	f000 f851 	bl	8007a0c <USBH_ParseEPDesc>
            ep_ix++;
 800796a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800796e:	3301      	adds	r3, #1
 8007970:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	791b      	ldrb	r3, [r3, #4]
 8007978:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800797c:	429a      	cmp	r2, r3
 800797e:	d204      	bcs.n	800798a <USBH_ParseCfgDesc+0x120>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	885a      	ldrh	r2, [r3, #2]
 8007984:	8afb      	ldrh	r3, [r7, #22]
 8007986:	429a      	cmp	r2, r3
 8007988:	d8d1      	bhi.n	800792e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800798a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800798e:	3301      	adds	r3, #1
 8007990:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007994:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007998:	2b01      	cmp	r3, #1
 800799a:	d804      	bhi.n	80079a6 <USBH_ParseCfgDesc+0x13c>
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	885a      	ldrh	r2, [r3, #2]
 80079a0:	8afb      	ldrh	r3, [r7, #22]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d8a4      	bhi.n	80078f0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80079a6:	bf00      	nop
 80079a8:	3728      	adds	r7, #40	; 0x28
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80079ae:	b480      	push	{r7}
 80079b0:	b083      	sub	sp, #12
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
 80079b6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	781a      	ldrb	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	785a      	ldrb	r2, [r3, #1]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	789a      	ldrb	r2, [r3, #2]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	78da      	ldrb	r2, [r3, #3]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	791a      	ldrb	r2, [r3, #4]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	795a      	ldrb	r2, [r3, #5]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	799a      	ldrb	r2, [r3, #6]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	79da      	ldrb	r2, [r3, #7]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	7a1a      	ldrb	r2, [r3, #8]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	721a      	strb	r2, [r3, #8]
}
 8007a00:	bf00      	nop
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	781a      	ldrb	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	785a      	ldrb	r2, [r3, #1]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	789a      	ldrb	r2, [r3, #2]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	78da      	ldrb	r2, [r3, #3]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	3304      	adds	r3, #4
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	3305      	adds	r3, #5
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	021b      	lsls	r3, r3, #8
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	799a      	ldrb	r2, [r3, #6]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	719a      	strb	r2, [r3, #6]
}
 8007a5a:	bf00      	nop
 8007a5c:	370c      	adds	r7, #12
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr

08007a66 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007a66:	b480      	push	{r7}
 8007a68:	b087      	sub	sp, #28
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	60f8      	str	r0, [r7, #12]
 8007a6e:	60b9      	str	r1, [r7, #8]
 8007a70:	4613      	mov	r3, r2
 8007a72:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	3301      	adds	r3, #1
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	2b03      	cmp	r3, #3
 8007a7c:	d120      	bne.n	8007ac0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	1e9a      	subs	r2, r3, #2
 8007a84:	88fb      	ldrh	r3, [r7, #6]
 8007a86:	4293      	cmp	r3, r2
 8007a88:	bf28      	it	cs
 8007a8a:	4613      	movcs	r3, r2
 8007a8c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	3302      	adds	r3, #2
 8007a92:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007a94:	2300      	movs	r3, #0
 8007a96:	82fb      	strh	r3, [r7, #22]
 8007a98:	e00b      	b.n	8007ab2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007a9a:	8afb      	ldrh	r3, [r7, #22]
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	781a      	ldrb	r2, [r3, #0]
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007aac:	8afb      	ldrh	r3, [r7, #22]
 8007aae:	3302      	adds	r3, #2
 8007ab0:	82fb      	strh	r3, [r7, #22]
 8007ab2:	8afa      	ldrh	r2, [r7, #22]
 8007ab4:	8abb      	ldrh	r3, [r7, #20]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d3ef      	bcc.n	8007a9a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	2200      	movs	r2, #0
 8007abe:	701a      	strb	r2, [r3, #0]
  }
}
 8007ac0:	bf00      	nop
 8007ac2:	371c      	adds	r7, #28
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	881a      	ldrh	r2, [r3, #0]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	4413      	add	r3, r2
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4413      	add	r3, r2
 8007af2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007af4:	68fb      	ldr	r3, [r7, #12]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3714      	adds	r7, #20
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr

08007b02 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b086      	sub	sp, #24
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	60f8      	str	r0, [r7, #12]
 8007b0a:	60b9      	str	r1, [r7, #8]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007b10:	2301      	movs	r3, #1
 8007b12:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	789b      	ldrb	r3, [r3, #2]
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d002      	beq.n	8007b22 <USBH_CtlReq+0x20>
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d00f      	beq.n	8007b40 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007b20:	e027      	b.n	8007b72 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	68ba      	ldr	r2, [r7, #8]
 8007b26:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	88fa      	ldrh	r2, [r7, #6]
 8007b2c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2201      	movs	r2, #1
 8007b32:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2202      	movs	r2, #2
 8007b38:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	75fb      	strb	r3, [r7, #23]
      break;
 8007b3e:	e018      	b.n	8007b72 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f000 f81b 	bl	8007b7c <USBH_HandleControl>
 8007b46:	4603      	mov	r3, r0
 8007b48:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007b4a:	7dfb      	ldrb	r3, [r7, #23]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d002      	beq.n	8007b56 <USBH_CtlReq+0x54>
 8007b50:	7dfb      	ldrb	r3, [r7, #23]
 8007b52:	2b03      	cmp	r3, #3
 8007b54:	d106      	bne.n	8007b64 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	761a      	strb	r2, [r3, #24]
      break;
 8007b62:	e005      	b.n	8007b70 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007b64:	7dfb      	ldrb	r3, [r7, #23]
 8007b66:	2b02      	cmp	r3, #2
 8007b68:	d102      	bne.n	8007b70 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	709a      	strb	r2, [r3, #2]
      break;
 8007b70:	bf00      	nop
  }
  return status;
 8007b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3718      	adds	r7, #24
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b086      	sub	sp, #24
 8007b80:	af02      	add	r7, sp, #8
 8007b82:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007b84:	2301      	movs	r3, #1
 8007b86:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	7e1b      	ldrb	r3, [r3, #24]
 8007b90:	3b01      	subs	r3, #1
 8007b92:	2b0a      	cmp	r3, #10
 8007b94:	f200 8156 	bhi.w	8007e44 <USBH_HandleControl+0x2c8>
 8007b98:	a201      	add	r2, pc, #4	; (adr r2, 8007ba0 <USBH_HandleControl+0x24>)
 8007b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9e:	bf00      	nop
 8007ba0:	08007bcd 	.word	0x08007bcd
 8007ba4:	08007be7 	.word	0x08007be7
 8007ba8:	08007c51 	.word	0x08007c51
 8007bac:	08007c77 	.word	0x08007c77
 8007bb0:	08007caf 	.word	0x08007caf
 8007bb4:	08007cd9 	.word	0x08007cd9
 8007bb8:	08007d2b 	.word	0x08007d2b
 8007bbc:	08007d4d 	.word	0x08007d4d
 8007bc0:	08007d89 	.word	0x08007d89
 8007bc4:	08007daf 	.word	0x08007daf
 8007bc8:	08007ded 	.word	0x08007ded
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f103 0110 	add.w	r1, r3, #16
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	795b      	ldrb	r3, [r3, #5]
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 f943 	bl	8007e64 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2202      	movs	r2, #2
 8007be2:	761a      	strb	r2, [r3, #24]
      break;
 8007be4:	e139      	b.n	8007e5a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	795b      	ldrb	r3, [r3, #5]
 8007bea:	4619      	mov	r1, r3
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 fcc5 	bl	800857c <USBH_LL_GetURBState>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007bf6:	7bbb      	ldrb	r3, [r7, #14]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d11e      	bne.n	8007c3a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	7c1b      	ldrb	r3, [r3, #16]
 8007c00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007c04:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	8adb      	ldrh	r3, [r3, #22]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00a      	beq.n	8007c24 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007c0e:	7b7b      	ldrb	r3, [r7, #13]
 8007c10:	2b80      	cmp	r3, #128	; 0x80
 8007c12:	d103      	bne.n	8007c1c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2203      	movs	r2, #3
 8007c18:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007c1a:	e115      	b.n	8007e48 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2205      	movs	r2, #5
 8007c20:	761a      	strb	r2, [r3, #24]
      break;
 8007c22:	e111      	b.n	8007e48 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007c24:	7b7b      	ldrb	r3, [r7, #13]
 8007c26:	2b80      	cmp	r3, #128	; 0x80
 8007c28:	d103      	bne.n	8007c32 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2209      	movs	r2, #9
 8007c2e:	761a      	strb	r2, [r3, #24]
      break;
 8007c30:	e10a      	b.n	8007e48 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2207      	movs	r2, #7
 8007c36:	761a      	strb	r2, [r3, #24]
      break;
 8007c38:	e106      	b.n	8007e48 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007c3a:	7bbb      	ldrb	r3, [r7, #14]
 8007c3c:	2b04      	cmp	r3, #4
 8007c3e:	d003      	beq.n	8007c48 <USBH_HandleControl+0xcc>
 8007c40:	7bbb      	ldrb	r3, [r7, #14]
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	f040 8100 	bne.w	8007e48 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	220b      	movs	r2, #11
 8007c4c:	761a      	strb	r2, [r3, #24]
      break;
 8007c4e:	e0fb      	b.n	8007e48 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c56:	b29a      	uxth	r2, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6899      	ldr	r1, [r3, #8]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	899a      	ldrh	r2, [r3, #12]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	791b      	ldrb	r3, [r3, #4]
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f93a 	bl	8007ee2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2204      	movs	r2, #4
 8007c72:	761a      	strb	r2, [r3, #24]
      break;
 8007c74:	e0f1      	b.n	8007e5a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	791b      	ldrb	r3, [r3, #4]
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 fc7d 	bl	800857c <USBH_LL_GetURBState>
 8007c82:	4603      	mov	r3, r0
 8007c84:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007c86:	7bbb      	ldrb	r3, [r7, #14]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d102      	bne.n	8007c92 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2209      	movs	r2, #9
 8007c90:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007c92:	7bbb      	ldrb	r3, [r7, #14]
 8007c94:	2b05      	cmp	r3, #5
 8007c96:	d102      	bne.n	8007c9e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007c98:	2303      	movs	r3, #3
 8007c9a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007c9c:	e0d6      	b.n	8007e4c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007c9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ca0:	2b04      	cmp	r3, #4
 8007ca2:	f040 80d3 	bne.w	8007e4c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	220b      	movs	r2, #11
 8007caa:	761a      	strb	r2, [r3, #24]
      break;
 8007cac:	e0ce      	b.n	8007e4c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6899      	ldr	r1, [r3, #8]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	899a      	ldrh	r2, [r3, #12]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	795b      	ldrb	r3, [r3, #5]
 8007cba:	2001      	movs	r0, #1
 8007cbc:	9000      	str	r0, [sp, #0]
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f8ea 	bl	8007e98 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2206      	movs	r2, #6
 8007cd4:	761a      	strb	r2, [r3, #24]
      break;
 8007cd6:	e0c0      	b.n	8007e5a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	795b      	ldrb	r3, [r3, #5]
 8007cdc:	4619      	mov	r1, r3
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fc4c 	bl	800857c <USBH_LL_GetURBState>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007ce8:	7bbb      	ldrb	r3, [r7, #14]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d103      	bne.n	8007cf6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2207      	movs	r2, #7
 8007cf2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007cf4:	e0ac      	b.n	8007e50 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007cf6:	7bbb      	ldrb	r3, [r7, #14]
 8007cf8:	2b05      	cmp	r3, #5
 8007cfa:	d105      	bne.n	8007d08 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	220c      	movs	r2, #12
 8007d00:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007d02:	2303      	movs	r3, #3
 8007d04:	73fb      	strb	r3, [r7, #15]
      break;
 8007d06:	e0a3      	b.n	8007e50 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007d08:	7bbb      	ldrb	r3, [r7, #14]
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d103      	bne.n	8007d16 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2205      	movs	r2, #5
 8007d12:	761a      	strb	r2, [r3, #24]
      break;
 8007d14:	e09c      	b.n	8007e50 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007d16:	7bbb      	ldrb	r3, [r7, #14]
 8007d18:	2b04      	cmp	r3, #4
 8007d1a:	f040 8099 	bne.w	8007e50 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	220b      	movs	r2, #11
 8007d22:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007d24:	2302      	movs	r3, #2
 8007d26:	73fb      	strb	r3, [r7, #15]
      break;
 8007d28:	e092      	b.n	8007e50 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	791b      	ldrb	r3, [r3, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	2100      	movs	r1, #0
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f8d5 	bl	8007ee2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d3e:	b29a      	uxth	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2208      	movs	r2, #8
 8007d48:	761a      	strb	r2, [r3, #24]

      break;
 8007d4a:	e086      	b.n	8007e5a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	791b      	ldrb	r3, [r3, #4]
 8007d50:	4619      	mov	r1, r3
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fc12 	bl	800857c <USBH_LL_GetURBState>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007d5c:	7bbb      	ldrb	r3, [r7, #14]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d105      	bne.n	8007d6e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	220d      	movs	r2, #13
 8007d66:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007d6c:	e072      	b.n	8007e54 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007d6e:	7bbb      	ldrb	r3, [r7, #14]
 8007d70:	2b04      	cmp	r3, #4
 8007d72:	d103      	bne.n	8007d7c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	220b      	movs	r2, #11
 8007d78:	761a      	strb	r2, [r3, #24]
      break;
 8007d7a:	e06b      	b.n	8007e54 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007d7c:	7bbb      	ldrb	r3, [r7, #14]
 8007d7e:	2b05      	cmp	r3, #5
 8007d80:	d168      	bne.n	8007e54 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007d82:	2303      	movs	r3, #3
 8007d84:	73fb      	strb	r3, [r7, #15]
      break;
 8007d86:	e065      	b.n	8007e54 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	795b      	ldrb	r3, [r3, #5]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	9200      	str	r2, [sp, #0]
 8007d90:	2200      	movs	r2, #0
 8007d92:	2100      	movs	r1, #0
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 f87f 	bl	8007e98 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	220a      	movs	r2, #10
 8007daa:	761a      	strb	r2, [r3, #24]
      break;
 8007dac:	e055      	b.n	8007e5a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	795b      	ldrb	r3, [r3, #5]
 8007db2:	4619      	mov	r1, r3
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 fbe1 	bl	800857c <USBH_LL_GetURBState>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007dbe:	7bbb      	ldrb	r3, [r7, #14]
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d105      	bne.n	8007dd0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	220d      	movs	r2, #13
 8007dcc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007dce:	e043      	b.n	8007e58 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007dd0:	7bbb      	ldrb	r3, [r7, #14]
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d103      	bne.n	8007dde <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2209      	movs	r2, #9
 8007dda:	761a      	strb	r2, [r3, #24]
      break;
 8007ddc:	e03c      	b.n	8007e58 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007dde:	7bbb      	ldrb	r3, [r7, #14]
 8007de0:	2b04      	cmp	r3, #4
 8007de2:	d139      	bne.n	8007e58 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	220b      	movs	r2, #11
 8007de8:	761a      	strb	r2, [r3, #24]
      break;
 8007dea:	e035      	b.n	8007e58 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	7e5b      	ldrb	r3, [r3, #25]
 8007df0:	3301      	adds	r3, #1
 8007df2:	b2da      	uxtb	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	765a      	strb	r2, [r3, #25]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	7e5b      	ldrb	r3, [r3, #25]
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d806      	bhi.n	8007e0e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007e0c:	e025      	b.n	8007e5a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e14:	2106      	movs	r1, #6
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	795b      	ldrb	r3, [r3, #5]
 8007e24:	4619      	mov	r1, r3
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f90c 	bl	8008044 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	791b      	ldrb	r3, [r3, #4]
 8007e30:	4619      	mov	r1, r3
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 f906 	bl	8008044 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007e3e:	2302      	movs	r3, #2
 8007e40:	73fb      	strb	r3, [r7, #15]
      break;
 8007e42:	e00a      	b.n	8007e5a <USBH_HandleControl+0x2de>

    default:
      break;
 8007e44:	bf00      	nop
 8007e46:	e008      	b.n	8007e5a <USBH_HandleControl+0x2de>
      break;
 8007e48:	bf00      	nop
 8007e4a:	e006      	b.n	8007e5a <USBH_HandleControl+0x2de>
      break;
 8007e4c:	bf00      	nop
 8007e4e:	e004      	b.n	8007e5a <USBH_HandleControl+0x2de>
      break;
 8007e50:	bf00      	nop
 8007e52:	e002      	b.n	8007e5a <USBH_HandleControl+0x2de>
      break;
 8007e54:	bf00      	nop
 8007e56:	e000      	b.n	8007e5a <USBH_HandleControl+0x2de>
      break;
 8007e58:	bf00      	nop
  }

  return status;
 8007e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b088      	sub	sp, #32
 8007e68:	af04      	add	r7, sp, #16
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	4613      	mov	r3, r2
 8007e70:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007e72:	79f9      	ldrb	r1, [r7, #7]
 8007e74:	2300      	movs	r3, #0
 8007e76:	9303      	str	r3, [sp, #12]
 8007e78:	2308      	movs	r3, #8
 8007e7a:	9302      	str	r3, [sp, #8]
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	9301      	str	r3, [sp, #4]
 8007e80:	2300      	movs	r3, #0
 8007e82:	9300      	str	r3, [sp, #0]
 8007e84:	2300      	movs	r3, #0
 8007e86:	2200      	movs	r2, #0
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f000 fb46 	bl	800851a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007e8e:	2300      	movs	r3, #0
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b088      	sub	sp, #32
 8007e9c:	af04      	add	r7, sp, #16
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	4611      	mov	r1, r2
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	80fb      	strh	r3, [r7, #6]
 8007eaa:	4613      	mov	r3, r2
 8007eac:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d001      	beq.n	8007ebc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007ebc:	7979      	ldrb	r1, [r7, #5]
 8007ebe:	7e3b      	ldrb	r3, [r7, #24]
 8007ec0:	9303      	str	r3, [sp, #12]
 8007ec2:	88fb      	ldrh	r3, [r7, #6]
 8007ec4:	9302      	str	r3, [sp, #8]
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	9301      	str	r3, [sp, #4]
 8007eca:	2301      	movs	r3, #1
 8007ecc:	9300      	str	r3, [sp, #0]
 8007ece:	2300      	movs	r3, #0
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f000 fb21 	bl	800851a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b088      	sub	sp, #32
 8007ee6:	af04      	add	r7, sp, #16
 8007ee8:	60f8      	str	r0, [r7, #12]
 8007eea:	60b9      	str	r1, [r7, #8]
 8007eec:	4611      	mov	r1, r2
 8007eee:	461a      	mov	r2, r3
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	80fb      	strh	r3, [r7, #6]
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007ef8:	7979      	ldrb	r1, [r7, #5]
 8007efa:	2300      	movs	r3, #0
 8007efc:	9303      	str	r3, [sp, #12]
 8007efe:	88fb      	ldrh	r3, [r7, #6]
 8007f00:	9302      	str	r3, [sp, #8]
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	9301      	str	r3, [sp, #4]
 8007f06:	2301      	movs	r3, #1
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f000 fb03 	bl	800851a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007f14:	2300      	movs	r3, #0

}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b088      	sub	sp, #32
 8007f22:	af04      	add	r7, sp, #16
 8007f24:	60f8      	str	r0, [r7, #12]
 8007f26:	60b9      	str	r1, [r7, #8]
 8007f28:	4611      	mov	r1, r2
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	80fb      	strh	r3, [r7, #6]
 8007f30:	4613      	mov	r3, r2
 8007f32:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d001      	beq.n	8007f42 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007f42:	7979      	ldrb	r1, [r7, #5]
 8007f44:	7e3b      	ldrb	r3, [r7, #24]
 8007f46:	9303      	str	r3, [sp, #12]
 8007f48:	88fb      	ldrh	r3, [r7, #6]
 8007f4a:	9302      	str	r3, [sp, #8]
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	9301      	str	r3, [sp, #4]
 8007f50:	2301      	movs	r3, #1
 8007f52:	9300      	str	r3, [sp, #0]
 8007f54:	2302      	movs	r3, #2
 8007f56:	2200      	movs	r2, #0
 8007f58:	68f8      	ldr	r0, [r7, #12]
 8007f5a:	f000 fade 	bl	800851a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b088      	sub	sp, #32
 8007f6c:	af04      	add	r7, sp, #16
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	4611      	mov	r1, r2
 8007f74:	461a      	mov	r2, r3
 8007f76:	460b      	mov	r3, r1
 8007f78:	80fb      	strh	r3, [r7, #6]
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007f7e:	7979      	ldrb	r1, [r7, #5]
 8007f80:	2300      	movs	r3, #0
 8007f82:	9303      	str	r3, [sp, #12]
 8007f84:	88fb      	ldrh	r3, [r7, #6]
 8007f86:	9302      	str	r3, [sp, #8]
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	9301      	str	r3, [sp, #4]
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	2302      	movs	r3, #2
 8007f92:	2201      	movs	r2, #1
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f000 fac0 	bl	800851a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af04      	add	r7, sp, #16
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	4608      	mov	r0, r1
 8007fae:	4611      	mov	r1, r2
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	70fb      	strb	r3, [r7, #3]
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	70bb      	strb	r3, [r7, #2]
 8007fba:	4613      	mov	r3, r2
 8007fbc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007fbe:	7878      	ldrb	r0, [r7, #1]
 8007fc0:	78ba      	ldrb	r2, [r7, #2]
 8007fc2:	78f9      	ldrb	r1, [r7, #3]
 8007fc4:	8b3b      	ldrh	r3, [r7, #24]
 8007fc6:	9302      	str	r3, [sp, #8]
 8007fc8:	7d3b      	ldrb	r3, [r7, #20]
 8007fca:	9301      	str	r3, [sp, #4]
 8007fcc:	7c3b      	ldrb	r3, [r7, #16]
 8007fce:	9300      	str	r3, [sp, #0]
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 fa53 	bl	800847e <USBH_LL_OpenPipe>

  return USBH_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3708      	adds	r7, #8
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b082      	sub	sp, #8
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
 8007fea:	460b      	mov	r3, r1
 8007fec:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007fee:	78fb      	ldrb	r3, [r7, #3]
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 fa72 	bl	80084dc <USBH_LL_ClosePipe>

  return USBH_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b084      	sub	sp, #16
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
 800800a:	460b      	mov	r3, r1
 800800c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 f836 	bl	8008080 <USBH_GetFreePipe>
 8008014:	4603      	mov	r3, r0
 8008016:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008018:	89fb      	ldrh	r3, [r7, #14]
 800801a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800801e:	4293      	cmp	r3, r2
 8008020:	d00a      	beq.n	8008038 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008022:	78fa      	ldrb	r2, [r7, #3]
 8008024:	89fb      	ldrh	r3, [r7, #14]
 8008026:	f003 030f 	and.w	r3, r3, #15
 800802a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800802e:	6879      	ldr	r1, [r7, #4]
 8008030:	33e0      	adds	r3, #224	; 0xe0
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	440b      	add	r3, r1
 8008036:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008038:	89fb      	ldrh	r3, [r7, #14]
 800803a:	b2db      	uxtb	r3, r3
}
 800803c:	4618      	mov	r0, r3
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	460b      	mov	r3, r1
 800804e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008050:	78fb      	ldrb	r3, [r7, #3]
 8008052:	2b0a      	cmp	r3, #10
 8008054:	d80d      	bhi.n	8008072 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008056:	78fb      	ldrb	r3, [r7, #3]
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	33e0      	adds	r3, #224	; 0xe0
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	4413      	add	r3, r2
 8008060:	685a      	ldr	r2, [r3, #4]
 8008062:	78fb      	ldrb	r3, [r7, #3]
 8008064:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008068:	6879      	ldr	r1, [r7, #4]
 800806a:	33e0      	adds	r3, #224	; 0xe0
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	440b      	add	r3, r1
 8008070:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008088:	2300      	movs	r3, #0
 800808a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800808c:	2300      	movs	r3, #0
 800808e:	73fb      	strb	r3, [r7, #15]
 8008090:	e00f      	b.n	80080b2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008092:	7bfb      	ldrb	r3, [r7, #15]
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	33e0      	adds	r3, #224	; 0xe0
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	4413      	add	r3, r2
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d102      	bne.n	80080ac <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80080a6:	7bfb      	ldrb	r3, [r7, #15]
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	e007      	b.n	80080bc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80080ac:	7bfb      	ldrb	r3, [r7, #15]
 80080ae:	3301      	adds	r3, #1
 80080b0:	73fb      	strb	r3, [r7, #15]
 80080b2:	7bfb      	ldrb	r3, [r7, #15]
 80080b4:	2b0a      	cmp	r3, #10
 80080b6:	d9ec      	bls.n	8008092 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80080b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3714      	adds	r7, #20
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80080cc:	2201      	movs	r2, #1
 80080ce:	490e      	ldr	r1, [pc, #56]	; (8008108 <MX_USB_HOST_Init+0x40>)
 80080d0:	480e      	ldr	r0, [pc, #56]	; (800810c <MX_USB_HOST_Init+0x44>)
 80080d2:	f7fe fca1 	bl	8006a18 <USBH_Init>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d001      	beq.n	80080e0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80080dc:	f7f8 fd02 	bl	8000ae4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80080e0:	490b      	ldr	r1, [pc, #44]	; (8008110 <MX_USB_HOST_Init+0x48>)
 80080e2:	480a      	ldr	r0, [pc, #40]	; (800810c <MX_USB_HOST_Init+0x44>)
 80080e4:	f7fe fd26 	bl	8006b34 <USBH_RegisterClass>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d001      	beq.n	80080f2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80080ee:	f7f8 fcf9 	bl	8000ae4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80080f2:	4806      	ldr	r0, [pc, #24]	; (800810c <MX_USB_HOST_Init+0x44>)
 80080f4:	f7fe fdaa 	bl	8006c4c <USBH_Start>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d001      	beq.n	8008102 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80080fe:	f7f8 fcf1 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008102:	bf00      	nop
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	08008129 	.word	0x08008129
 800810c:	20000174 	.word	0x20000174
 8008110:	2000000c 	.word	0x2000000c

08008114 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008118:	4802      	ldr	r0, [pc, #8]	; (8008124 <MX_USB_HOST_Process+0x10>)
 800811a:	f7fe fda7 	bl	8006c6c <USBH_Process>
}
 800811e:	bf00      	nop
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	20000174 	.word	0x20000174

08008128 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	460b      	mov	r3, r1
 8008132:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008134:	78fb      	ldrb	r3, [r7, #3]
 8008136:	3b01      	subs	r3, #1
 8008138:	2b04      	cmp	r3, #4
 800813a:	d819      	bhi.n	8008170 <USBH_UserProcess+0x48>
 800813c:	a201      	add	r2, pc, #4	; (adr r2, 8008144 <USBH_UserProcess+0x1c>)
 800813e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008142:	bf00      	nop
 8008144:	08008171 	.word	0x08008171
 8008148:	08008161 	.word	0x08008161
 800814c:	08008171 	.word	0x08008171
 8008150:	08008169 	.word	0x08008169
 8008154:	08008159 	.word	0x08008159
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008158:	4b09      	ldr	r3, [pc, #36]	; (8008180 <USBH_UserProcess+0x58>)
 800815a:	2203      	movs	r2, #3
 800815c:	701a      	strb	r2, [r3, #0]
  break;
 800815e:	e008      	b.n	8008172 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008160:	4b07      	ldr	r3, [pc, #28]	; (8008180 <USBH_UserProcess+0x58>)
 8008162:	2202      	movs	r2, #2
 8008164:	701a      	strb	r2, [r3, #0]
  break;
 8008166:	e004      	b.n	8008172 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008168:	4b05      	ldr	r3, [pc, #20]	; (8008180 <USBH_UserProcess+0x58>)
 800816a:	2201      	movs	r2, #1
 800816c:	701a      	strb	r2, [r3, #0]
  break;
 800816e:	e000      	b.n	8008172 <USBH_UserProcess+0x4a>

  default:
  break;
 8008170:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008172:	bf00      	nop
 8008174:	370c      	adds	r7, #12
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	200000b0 	.word	0x200000b0

08008184 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b08a      	sub	sp, #40	; 0x28
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800818c:	f107 0314 	add.w	r3, r7, #20
 8008190:	2200      	movs	r2, #0
 8008192:	601a      	str	r2, [r3, #0]
 8008194:	605a      	str	r2, [r3, #4]
 8008196:	609a      	str	r2, [r3, #8]
 8008198:	60da      	str	r2, [r3, #12]
 800819a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081a4:	d147      	bne.n	8008236 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081a6:	2300      	movs	r3, #0
 80081a8:	613b      	str	r3, [r7, #16]
 80081aa:	4b25      	ldr	r3, [pc, #148]	; (8008240 <HAL_HCD_MspInit+0xbc>)
 80081ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ae:	4a24      	ldr	r2, [pc, #144]	; (8008240 <HAL_HCD_MspInit+0xbc>)
 80081b0:	f043 0301 	orr.w	r3, r3, #1
 80081b4:	6313      	str	r3, [r2, #48]	; 0x30
 80081b6:	4b22      	ldr	r3, [pc, #136]	; (8008240 <HAL_HCD_MspInit+0xbc>)
 80081b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ba:	f003 0301 	and.w	r3, r3, #1
 80081be:	613b      	str	r3, [r7, #16]
 80081c0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80081c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80081c8:	2300      	movs	r3, #0
 80081ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081cc:	2300      	movs	r3, #0
 80081ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80081d0:	f107 0314 	add.w	r3, r7, #20
 80081d4:	4619      	mov	r1, r3
 80081d6:	481b      	ldr	r0, [pc, #108]	; (8008244 <HAL_HCD_MspInit+0xc0>)
 80081d8:	f7f9 f8d2 	bl	8001380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80081dc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80081e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081e2:	2302      	movs	r3, #2
 80081e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081e6:	2300      	movs	r3, #0
 80081e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081ea:	2300      	movs	r3, #0
 80081ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80081ee:	230a      	movs	r3, #10
 80081f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081f2:	f107 0314 	add.w	r3, r7, #20
 80081f6:	4619      	mov	r1, r3
 80081f8:	4812      	ldr	r0, [pc, #72]	; (8008244 <HAL_HCD_MspInit+0xc0>)
 80081fa:	f7f9 f8c1 	bl	8001380 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80081fe:	4b10      	ldr	r3, [pc, #64]	; (8008240 <HAL_HCD_MspInit+0xbc>)
 8008200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008202:	4a0f      	ldr	r2, [pc, #60]	; (8008240 <HAL_HCD_MspInit+0xbc>)
 8008204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008208:	6353      	str	r3, [r2, #52]	; 0x34
 800820a:	2300      	movs	r3, #0
 800820c:	60fb      	str	r3, [r7, #12]
 800820e:	4b0c      	ldr	r3, [pc, #48]	; (8008240 <HAL_HCD_MspInit+0xbc>)
 8008210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008212:	4a0b      	ldr	r2, [pc, #44]	; (8008240 <HAL_HCD_MspInit+0xbc>)
 8008214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008218:	6453      	str	r3, [r2, #68]	; 0x44
 800821a:	4b09      	ldr	r3, [pc, #36]	; (8008240 <HAL_HCD_MspInit+0xbc>)
 800821c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800821e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008222:	60fb      	str	r3, [r7, #12]
 8008224:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008226:	2200      	movs	r2, #0
 8008228:	2100      	movs	r1, #0
 800822a:	2043      	movs	r0, #67	; 0x43
 800822c:	f7f8 ffdf 	bl	80011ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008230:	2043      	movs	r0, #67	; 0x43
 8008232:	f7f8 fff8 	bl	8001226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008236:	bf00      	nop
 8008238:	3728      	adds	r7, #40	; 0x28
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	40023800 	.word	0x40023800
 8008244:	40020000 	.word	0x40020000

08008248 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008256:	4618      	mov	r0, r3
 8008258:	f7ff f8db 	bl	8007412 <USBH_LL_IncTimer>
}
 800825c:	bf00      	nop
 800825e:	3708      	adds	r7, #8
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008272:	4618      	mov	r0, r3
 8008274:	f7ff f913 	bl	800749e <USBH_LL_Connect>
}
 8008278:	bf00      	nop
 800827a:	3708      	adds	r7, #8
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800828e:	4618      	mov	r0, r3
 8008290:	f7ff f91c 	bl	80074cc <USBH_LL_Disconnect>
}
 8008294:	bf00      	nop
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	460b      	mov	r3, r1
 80082a6:	70fb      	strb	r3, [r7, #3]
 80082a8:	4613      	mov	r3, r2
 80082aa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80082ac:	bf00      	nop
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7ff f8cd 	bl	8007466 <USBH_LL_PortEnabled>
}
 80082cc:	bf00      	nop
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7ff f8cd 	bl	8007482 <USBH_LL_PortDisabled>
}
 80082e8:	bf00      	nop
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d12a      	bne.n	8008358 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008302:	4a18      	ldr	r2, [pc, #96]	; (8008364 <USBH_LL_Init+0x74>)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a15      	ldr	r2, [pc, #84]	; (8008364 <USBH_LL_Init+0x74>)
 800830e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008312:	4b14      	ldr	r3, [pc, #80]	; (8008364 <USBH_LL_Init+0x74>)
 8008314:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008318:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800831a:	4b12      	ldr	r3, [pc, #72]	; (8008364 <USBH_LL_Init+0x74>)
 800831c:	2208      	movs	r2, #8
 800831e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008320:	4b10      	ldr	r3, [pc, #64]	; (8008364 <USBH_LL_Init+0x74>)
 8008322:	2201      	movs	r2, #1
 8008324:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008326:	4b0f      	ldr	r3, [pc, #60]	; (8008364 <USBH_LL_Init+0x74>)
 8008328:	2200      	movs	r2, #0
 800832a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800832c:	4b0d      	ldr	r3, [pc, #52]	; (8008364 <USBH_LL_Init+0x74>)
 800832e:	2202      	movs	r2, #2
 8008330:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008332:	4b0c      	ldr	r3, [pc, #48]	; (8008364 <USBH_LL_Init+0x74>)
 8008334:	2200      	movs	r2, #0
 8008336:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008338:	480a      	ldr	r0, [pc, #40]	; (8008364 <USBH_LL_Init+0x74>)
 800833a:	f7f9 f9d6 	bl	80016ea <HAL_HCD_Init>
 800833e:	4603      	mov	r3, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d001      	beq.n	8008348 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008344:	f7f8 fbce 	bl	8000ae4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008348:	4806      	ldr	r0, [pc, #24]	; (8008364 <USBH_LL_Init+0x74>)
 800834a:	f7f9 fdba 	bl	8001ec2 <HAL_HCD_GetCurrentFrame>
 800834e:	4603      	mov	r3, r0
 8008350:	4619      	mov	r1, r3
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f7ff f84e 	bl	80073f4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3708      	adds	r7, #8
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	2000054c 	.word	0x2000054c

08008368 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008370:	2300      	movs	r3, #0
 8008372:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008374:	2300      	movs	r3, #0
 8008376:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800837e:	4618      	mov	r0, r3
 8008380:	f7f9 fd29 	bl	8001dd6 <HAL_HCD_Start>
 8008384:	4603      	mov	r3, r0
 8008386:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008388:	7bfb      	ldrb	r3, [r7, #15]
 800838a:	4618      	mov	r0, r3
 800838c:	f000 f95c 	bl	8008648 <USBH_Get_USB_Status>
 8008390:	4603      	mov	r3, r0
 8008392:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008394:	7bbb      	ldrb	r3, [r7, #14]
}
 8008396:	4618      	mov	r0, r3
 8008398:	3710      	adds	r7, #16
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b084      	sub	sp, #16
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083a6:	2300      	movs	r3, #0
 80083a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80083aa:	2300      	movs	r3, #0
 80083ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7f9 fd31 	bl	8001e1c <HAL_HCD_Stop>
 80083ba:	4603      	mov	r3, r0
 80083bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80083be:	7bfb      	ldrb	r3, [r7, #15]
 80083c0:	4618      	mov	r0, r3
 80083c2:	f000 f941 	bl	8008648 <USBH_Get_USB_Status>
 80083c6:	4603      	mov	r3, r0
 80083c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80083dc:	2301      	movs	r3, #1
 80083de:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7f9 fd79 	bl	8001ede <HAL_HCD_GetCurrentSpeed>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d00c      	beq.n	800840c <USBH_LL_GetSpeed+0x38>
 80083f2:	2b02      	cmp	r3, #2
 80083f4:	d80d      	bhi.n	8008412 <USBH_LL_GetSpeed+0x3e>
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d002      	beq.n	8008400 <USBH_LL_GetSpeed+0x2c>
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d003      	beq.n	8008406 <USBH_LL_GetSpeed+0x32>
 80083fe:	e008      	b.n	8008412 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008400:	2300      	movs	r3, #0
 8008402:	73fb      	strb	r3, [r7, #15]
    break;
 8008404:	e008      	b.n	8008418 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008406:	2301      	movs	r3, #1
 8008408:	73fb      	strb	r3, [r7, #15]
    break;
 800840a:	e005      	b.n	8008418 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800840c:	2302      	movs	r3, #2
 800840e:	73fb      	strb	r3, [r7, #15]
    break;
 8008410:	e002      	b.n	8008418 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008412:	2301      	movs	r3, #1
 8008414:	73fb      	strb	r3, [r7, #15]
    break;
 8008416:	bf00      	nop
  }
  return  speed;
 8008418:	7bfb      	ldrb	r3, [r7, #15]
}
 800841a:	4618      	mov	r0, r3
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b084      	sub	sp, #16
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800842a:	2300      	movs	r3, #0
 800842c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800842e:	2300      	movs	r3, #0
 8008430:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008438:	4618      	mov	r0, r3
 800843a:	f7f9 fd0c 	bl	8001e56 <HAL_HCD_ResetPort>
 800843e:	4603      	mov	r3, r0
 8008440:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008442:	7bfb      	ldrb	r3, [r7, #15]
 8008444:	4618      	mov	r0, r3
 8008446:	f000 f8ff 	bl	8008648 <USBH_Get_USB_Status>
 800844a:	4603      	mov	r3, r0
 800844c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800844e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008450:	4618      	mov	r0, r3
 8008452:	3710      	adds	r7, #16
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	460b      	mov	r3, r1
 8008462:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800846a:	78fa      	ldrb	r2, [r7, #3]
 800846c:	4611      	mov	r1, r2
 800846e:	4618      	mov	r0, r3
 8008470:	f7f9 fd13 	bl	8001e9a <HAL_HCD_HC_GetXferCount>
 8008474:	4603      	mov	r3, r0
}
 8008476:	4618      	mov	r0, r3
 8008478:	3708      	adds	r7, #8
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800847e:	b590      	push	{r4, r7, lr}
 8008480:	b089      	sub	sp, #36	; 0x24
 8008482:	af04      	add	r7, sp, #16
 8008484:	6078      	str	r0, [r7, #4]
 8008486:	4608      	mov	r0, r1
 8008488:	4611      	mov	r1, r2
 800848a:	461a      	mov	r2, r3
 800848c:	4603      	mov	r3, r0
 800848e:	70fb      	strb	r3, [r7, #3]
 8008490:	460b      	mov	r3, r1
 8008492:	70bb      	strb	r3, [r7, #2]
 8008494:	4613      	mov	r3, r2
 8008496:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008498:	2300      	movs	r3, #0
 800849a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800849c:	2300      	movs	r3, #0
 800849e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80084a6:	787c      	ldrb	r4, [r7, #1]
 80084a8:	78ba      	ldrb	r2, [r7, #2]
 80084aa:	78f9      	ldrb	r1, [r7, #3]
 80084ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80084ae:	9302      	str	r3, [sp, #8]
 80084b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80084b4:	9301      	str	r3, [sp, #4]
 80084b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80084ba:	9300      	str	r3, [sp, #0]
 80084bc:	4623      	mov	r3, r4
 80084be:	f7f9 f976 	bl	80017ae <HAL_HCD_HC_Init>
 80084c2:	4603      	mov	r3, r0
 80084c4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80084c6:	7bfb      	ldrb	r3, [r7, #15]
 80084c8:	4618      	mov	r0, r3
 80084ca:	f000 f8bd 	bl	8008648 <USBH_Get_USB_Status>
 80084ce:	4603      	mov	r3, r0
 80084d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3714      	adds	r7, #20
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd90      	pop	{r4, r7, pc}

080084dc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	460b      	mov	r3, r1
 80084e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084e8:	2300      	movs	r3, #0
 80084ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084ec:	2300      	movs	r3, #0
 80084ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80084f6:	78fa      	ldrb	r2, [r7, #3]
 80084f8:	4611      	mov	r1, r2
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7f9 f9e6 	bl	80018cc <HAL_HCD_HC_Halt>
 8008500:	4603      	mov	r3, r0
 8008502:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008504:	7bfb      	ldrb	r3, [r7, #15]
 8008506:	4618      	mov	r0, r3
 8008508:	f000 f89e 	bl	8008648 <USBH_Get_USB_Status>
 800850c:	4603      	mov	r3, r0
 800850e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008510:	7bbb      	ldrb	r3, [r7, #14]
}
 8008512:	4618      	mov	r0, r3
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800851a:	b590      	push	{r4, r7, lr}
 800851c:	b089      	sub	sp, #36	; 0x24
 800851e:	af04      	add	r7, sp, #16
 8008520:	6078      	str	r0, [r7, #4]
 8008522:	4608      	mov	r0, r1
 8008524:	4611      	mov	r1, r2
 8008526:	461a      	mov	r2, r3
 8008528:	4603      	mov	r3, r0
 800852a:	70fb      	strb	r3, [r7, #3]
 800852c:	460b      	mov	r3, r1
 800852e:	70bb      	strb	r3, [r7, #2]
 8008530:	4613      	mov	r3, r2
 8008532:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008534:	2300      	movs	r3, #0
 8008536:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008538:	2300      	movs	r3, #0
 800853a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008542:	787c      	ldrb	r4, [r7, #1]
 8008544:	78ba      	ldrb	r2, [r7, #2]
 8008546:	78f9      	ldrb	r1, [r7, #3]
 8008548:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800854c:	9303      	str	r3, [sp, #12]
 800854e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008550:	9302      	str	r3, [sp, #8]
 8008552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008554:	9301      	str	r3, [sp, #4]
 8008556:	f897 3020 	ldrb.w	r3, [r7, #32]
 800855a:	9300      	str	r3, [sp, #0]
 800855c:	4623      	mov	r3, r4
 800855e:	f7f9 f9d9 	bl	8001914 <HAL_HCD_HC_SubmitRequest>
 8008562:	4603      	mov	r3, r0
 8008564:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008566:	7bfb      	ldrb	r3, [r7, #15]
 8008568:	4618      	mov	r0, r3
 800856a:	f000 f86d 	bl	8008648 <USBH_Get_USB_Status>
 800856e:	4603      	mov	r3, r0
 8008570:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008572:	7bbb      	ldrb	r3, [r7, #14]
}
 8008574:	4618      	mov	r0, r3
 8008576:	3714      	adds	r7, #20
 8008578:	46bd      	mov	sp, r7
 800857a:	bd90      	pop	{r4, r7, pc}

0800857c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	460b      	mov	r3, r1
 8008586:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800858e:	78fa      	ldrb	r2, [r7, #3]
 8008590:	4611      	mov	r1, r2
 8008592:	4618      	mov	r0, r3
 8008594:	f7f9 fc6d 	bl	8001e72 <HAL_HCD_HC_GetURBState>
 8008598:	4603      	mov	r3, r0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b082      	sub	sp, #8
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	460b      	mov	r3, r1
 80085ac:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d103      	bne.n	80085c0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80085b8:	78fb      	ldrb	r3, [r7, #3]
 80085ba:	4618      	mov	r0, r3
 80085bc:	f000 f870 	bl	80086a0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80085c0:	20c8      	movs	r0, #200	; 0xc8
 80085c2:	f7f8 fd15 	bl	8000ff0 <HAL_Delay>
  return USBH_OK;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3708      	adds	r7, #8
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b085      	sub	sp, #20
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	460b      	mov	r3, r1
 80085da:	70fb      	strb	r3, [r7, #3]
 80085dc:	4613      	mov	r3, r2
 80085de:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80085e6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80085e8:	78fb      	ldrb	r3, [r7, #3]
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	212c      	movs	r1, #44	; 0x2c
 80085ee:	fb01 f303 	mul.w	r3, r1, r3
 80085f2:	4413      	add	r3, r2
 80085f4:	333b      	adds	r3, #59	; 0x3b
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d009      	beq.n	8008610 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80085fc:	78fb      	ldrb	r3, [r7, #3]
 80085fe:	68fa      	ldr	r2, [r7, #12]
 8008600:	212c      	movs	r1, #44	; 0x2c
 8008602:	fb01 f303 	mul.w	r3, r1, r3
 8008606:	4413      	add	r3, r2
 8008608:	3354      	adds	r3, #84	; 0x54
 800860a:	78ba      	ldrb	r2, [r7, #2]
 800860c:	701a      	strb	r2, [r3, #0]
 800860e:	e008      	b.n	8008622 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008610:	78fb      	ldrb	r3, [r7, #3]
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	212c      	movs	r1, #44	; 0x2c
 8008616:	fb01 f303 	mul.w	r3, r1, r3
 800861a:	4413      	add	r3, r2
 800861c:	3355      	adds	r3, #85	; 0x55
 800861e:	78ba      	ldrb	r2, [r7, #2]
 8008620:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	3714      	adds	r7, #20
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f7f8 fcd9 	bl	8000ff0 <HAL_Delay>
}
 800863e:	bf00      	nop
 8008640:	3708      	adds	r7, #8
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
	...

08008648 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008648:	b480      	push	{r7}
 800864a:	b085      	sub	sp, #20
 800864c:	af00      	add	r7, sp, #0
 800864e:	4603      	mov	r3, r0
 8008650:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008652:	2300      	movs	r3, #0
 8008654:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008656:	79fb      	ldrb	r3, [r7, #7]
 8008658:	2b03      	cmp	r3, #3
 800865a:	d817      	bhi.n	800868c <USBH_Get_USB_Status+0x44>
 800865c:	a201      	add	r2, pc, #4	; (adr r2, 8008664 <USBH_Get_USB_Status+0x1c>)
 800865e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008662:	bf00      	nop
 8008664:	08008675 	.word	0x08008675
 8008668:	0800867b 	.word	0x0800867b
 800866c:	08008681 	.word	0x08008681
 8008670:	08008687 	.word	0x08008687
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008674:	2300      	movs	r3, #0
 8008676:	73fb      	strb	r3, [r7, #15]
    break;
 8008678:	e00b      	b.n	8008692 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800867a:	2302      	movs	r3, #2
 800867c:	73fb      	strb	r3, [r7, #15]
    break;
 800867e:	e008      	b.n	8008692 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008680:	2301      	movs	r3, #1
 8008682:	73fb      	strb	r3, [r7, #15]
    break;
 8008684:	e005      	b.n	8008692 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008686:	2302      	movs	r3, #2
 8008688:	73fb      	strb	r3, [r7, #15]
    break;
 800868a:	e002      	b.n	8008692 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800868c:	2302      	movs	r3, #2
 800868e:	73fb      	strb	r3, [r7, #15]
    break;
 8008690:	bf00      	nop
  }
  return usb_status;
 8008692:	7bfb      	ldrb	r3, [r7, #15]
}
 8008694:	4618      	mov	r0, r3
 8008696:	3714      	adds	r7, #20
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	4603      	mov	r3, r0
 80086a8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80086aa:	79fb      	ldrb	r3, [r7, #7]
 80086ac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80086ae:	79fb      	ldrb	r3, [r7, #7]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d102      	bne.n	80086ba <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80086b4:	2301      	movs	r3, #1
 80086b6:	73fb      	strb	r3, [r7, #15]
 80086b8:	e001      	b.n	80086be <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80086ba:	2300      	movs	r3, #0
 80086bc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80086be:	7bfb      	ldrb	r3, [r7, #15]
 80086c0:	461a      	mov	r2, r3
 80086c2:	2101      	movs	r1, #1
 80086c4:	4803      	ldr	r0, [pc, #12]	; (80086d4 <MX_DriverVbusFS+0x34>)
 80086c6:	f7f8 fff7 	bl	80016b8 <HAL_GPIO_WritePin>
}
 80086ca:	bf00      	nop
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	40020800 	.word	0x40020800

080086d8 <__errno>:
 80086d8:	4b01      	ldr	r3, [pc, #4]	; (80086e0 <__errno+0x8>)
 80086da:	6818      	ldr	r0, [r3, #0]
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	2000002c 	.word	0x2000002c

080086e4 <__libc_init_array>:
 80086e4:	b570      	push	{r4, r5, r6, lr}
 80086e6:	4d0d      	ldr	r5, [pc, #52]	; (800871c <__libc_init_array+0x38>)
 80086e8:	4c0d      	ldr	r4, [pc, #52]	; (8008720 <__libc_init_array+0x3c>)
 80086ea:	1b64      	subs	r4, r4, r5
 80086ec:	10a4      	asrs	r4, r4, #2
 80086ee:	2600      	movs	r6, #0
 80086f0:	42a6      	cmp	r6, r4
 80086f2:	d109      	bne.n	8008708 <__libc_init_array+0x24>
 80086f4:	4d0b      	ldr	r5, [pc, #44]	; (8008724 <__libc_init_array+0x40>)
 80086f6:	4c0c      	ldr	r4, [pc, #48]	; (8008728 <__libc_init_array+0x44>)
 80086f8:	f000 f8f8 	bl	80088ec <_init>
 80086fc:	1b64      	subs	r4, r4, r5
 80086fe:	10a4      	asrs	r4, r4, #2
 8008700:	2600      	movs	r6, #0
 8008702:	42a6      	cmp	r6, r4
 8008704:	d105      	bne.n	8008712 <__libc_init_array+0x2e>
 8008706:	bd70      	pop	{r4, r5, r6, pc}
 8008708:	f855 3b04 	ldr.w	r3, [r5], #4
 800870c:	4798      	blx	r3
 800870e:	3601      	adds	r6, #1
 8008710:	e7ee      	b.n	80086f0 <__libc_init_array+0xc>
 8008712:	f855 3b04 	ldr.w	r3, [r5], #4
 8008716:	4798      	blx	r3
 8008718:	3601      	adds	r6, #1
 800871a:	e7f2      	b.n	8008702 <__libc_init_array+0x1e>
 800871c:	08008928 	.word	0x08008928
 8008720:	08008928 	.word	0x08008928
 8008724:	08008928 	.word	0x08008928
 8008728:	0800892c 	.word	0x0800892c

0800872c <malloc>:
 800872c:	4b02      	ldr	r3, [pc, #8]	; (8008738 <malloc+0xc>)
 800872e:	4601      	mov	r1, r0
 8008730:	6818      	ldr	r0, [r3, #0]
 8008732:	f000 b863 	b.w	80087fc <_malloc_r>
 8008736:	bf00      	nop
 8008738:	2000002c 	.word	0x2000002c

0800873c <free>:
 800873c:	4b02      	ldr	r3, [pc, #8]	; (8008748 <free+0xc>)
 800873e:	4601      	mov	r1, r0
 8008740:	6818      	ldr	r0, [r3, #0]
 8008742:	f000 b80b 	b.w	800875c <_free_r>
 8008746:	bf00      	nop
 8008748:	2000002c 	.word	0x2000002c

0800874c <memset>:
 800874c:	4402      	add	r2, r0
 800874e:	4603      	mov	r3, r0
 8008750:	4293      	cmp	r3, r2
 8008752:	d100      	bne.n	8008756 <memset+0xa>
 8008754:	4770      	bx	lr
 8008756:	f803 1b01 	strb.w	r1, [r3], #1
 800875a:	e7f9      	b.n	8008750 <memset+0x4>

0800875c <_free_r>:
 800875c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800875e:	2900      	cmp	r1, #0
 8008760:	d048      	beq.n	80087f4 <_free_r+0x98>
 8008762:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008766:	9001      	str	r0, [sp, #4]
 8008768:	2b00      	cmp	r3, #0
 800876a:	f1a1 0404 	sub.w	r4, r1, #4
 800876e:	bfb8      	it	lt
 8008770:	18e4      	addlt	r4, r4, r3
 8008772:	f000 f8ad 	bl	80088d0 <__malloc_lock>
 8008776:	4a20      	ldr	r2, [pc, #128]	; (80087f8 <_free_r+0x9c>)
 8008778:	9801      	ldr	r0, [sp, #4]
 800877a:	6813      	ldr	r3, [r2, #0]
 800877c:	4615      	mov	r5, r2
 800877e:	b933      	cbnz	r3, 800878e <_free_r+0x32>
 8008780:	6063      	str	r3, [r4, #4]
 8008782:	6014      	str	r4, [r2, #0]
 8008784:	b003      	add	sp, #12
 8008786:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800878a:	f000 b8a7 	b.w	80088dc <__malloc_unlock>
 800878e:	42a3      	cmp	r3, r4
 8008790:	d90b      	bls.n	80087aa <_free_r+0x4e>
 8008792:	6821      	ldr	r1, [r4, #0]
 8008794:	1862      	adds	r2, r4, r1
 8008796:	4293      	cmp	r3, r2
 8008798:	bf04      	itt	eq
 800879a:	681a      	ldreq	r2, [r3, #0]
 800879c:	685b      	ldreq	r3, [r3, #4]
 800879e:	6063      	str	r3, [r4, #4]
 80087a0:	bf04      	itt	eq
 80087a2:	1852      	addeq	r2, r2, r1
 80087a4:	6022      	streq	r2, [r4, #0]
 80087a6:	602c      	str	r4, [r5, #0]
 80087a8:	e7ec      	b.n	8008784 <_free_r+0x28>
 80087aa:	461a      	mov	r2, r3
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	b10b      	cbz	r3, 80087b4 <_free_r+0x58>
 80087b0:	42a3      	cmp	r3, r4
 80087b2:	d9fa      	bls.n	80087aa <_free_r+0x4e>
 80087b4:	6811      	ldr	r1, [r2, #0]
 80087b6:	1855      	adds	r5, r2, r1
 80087b8:	42a5      	cmp	r5, r4
 80087ba:	d10b      	bne.n	80087d4 <_free_r+0x78>
 80087bc:	6824      	ldr	r4, [r4, #0]
 80087be:	4421      	add	r1, r4
 80087c0:	1854      	adds	r4, r2, r1
 80087c2:	42a3      	cmp	r3, r4
 80087c4:	6011      	str	r1, [r2, #0]
 80087c6:	d1dd      	bne.n	8008784 <_free_r+0x28>
 80087c8:	681c      	ldr	r4, [r3, #0]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	6053      	str	r3, [r2, #4]
 80087ce:	4421      	add	r1, r4
 80087d0:	6011      	str	r1, [r2, #0]
 80087d2:	e7d7      	b.n	8008784 <_free_r+0x28>
 80087d4:	d902      	bls.n	80087dc <_free_r+0x80>
 80087d6:	230c      	movs	r3, #12
 80087d8:	6003      	str	r3, [r0, #0]
 80087da:	e7d3      	b.n	8008784 <_free_r+0x28>
 80087dc:	6825      	ldr	r5, [r4, #0]
 80087de:	1961      	adds	r1, r4, r5
 80087e0:	428b      	cmp	r3, r1
 80087e2:	bf04      	itt	eq
 80087e4:	6819      	ldreq	r1, [r3, #0]
 80087e6:	685b      	ldreq	r3, [r3, #4]
 80087e8:	6063      	str	r3, [r4, #4]
 80087ea:	bf04      	itt	eq
 80087ec:	1949      	addeq	r1, r1, r5
 80087ee:	6021      	streq	r1, [r4, #0]
 80087f0:	6054      	str	r4, [r2, #4]
 80087f2:	e7c7      	b.n	8008784 <_free_r+0x28>
 80087f4:	b003      	add	sp, #12
 80087f6:	bd30      	pop	{r4, r5, pc}
 80087f8:	200000b4 	.word	0x200000b4

080087fc <_malloc_r>:
 80087fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087fe:	1ccd      	adds	r5, r1, #3
 8008800:	f025 0503 	bic.w	r5, r5, #3
 8008804:	3508      	adds	r5, #8
 8008806:	2d0c      	cmp	r5, #12
 8008808:	bf38      	it	cc
 800880a:	250c      	movcc	r5, #12
 800880c:	2d00      	cmp	r5, #0
 800880e:	4606      	mov	r6, r0
 8008810:	db01      	blt.n	8008816 <_malloc_r+0x1a>
 8008812:	42a9      	cmp	r1, r5
 8008814:	d903      	bls.n	800881e <_malloc_r+0x22>
 8008816:	230c      	movs	r3, #12
 8008818:	6033      	str	r3, [r6, #0]
 800881a:	2000      	movs	r0, #0
 800881c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800881e:	f000 f857 	bl	80088d0 <__malloc_lock>
 8008822:	4921      	ldr	r1, [pc, #132]	; (80088a8 <_malloc_r+0xac>)
 8008824:	680a      	ldr	r2, [r1, #0]
 8008826:	4614      	mov	r4, r2
 8008828:	b99c      	cbnz	r4, 8008852 <_malloc_r+0x56>
 800882a:	4f20      	ldr	r7, [pc, #128]	; (80088ac <_malloc_r+0xb0>)
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	b923      	cbnz	r3, 800883a <_malloc_r+0x3e>
 8008830:	4621      	mov	r1, r4
 8008832:	4630      	mov	r0, r6
 8008834:	f000 f83c 	bl	80088b0 <_sbrk_r>
 8008838:	6038      	str	r0, [r7, #0]
 800883a:	4629      	mov	r1, r5
 800883c:	4630      	mov	r0, r6
 800883e:	f000 f837 	bl	80088b0 <_sbrk_r>
 8008842:	1c43      	adds	r3, r0, #1
 8008844:	d123      	bne.n	800888e <_malloc_r+0x92>
 8008846:	230c      	movs	r3, #12
 8008848:	6033      	str	r3, [r6, #0]
 800884a:	4630      	mov	r0, r6
 800884c:	f000 f846 	bl	80088dc <__malloc_unlock>
 8008850:	e7e3      	b.n	800881a <_malloc_r+0x1e>
 8008852:	6823      	ldr	r3, [r4, #0]
 8008854:	1b5b      	subs	r3, r3, r5
 8008856:	d417      	bmi.n	8008888 <_malloc_r+0x8c>
 8008858:	2b0b      	cmp	r3, #11
 800885a:	d903      	bls.n	8008864 <_malloc_r+0x68>
 800885c:	6023      	str	r3, [r4, #0]
 800885e:	441c      	add	r4, r3
 8008860:	6025      	str	r5, [r4, #0]
 8008862:	e004      	b.n	800886e <_malloc_r+0x72>
 8008864:	6863      	ldr	r3, [r4, #4]
 8008866:	42a2      	cmp	r2, r4
 8008868:	bf0c      	ite	eq
 800886a:	600b      	streq	r3, [r1, #0]
 800886c:	6053      	strne	r3, [r2, #4]
 800886e:	4630      	mov	r0, r6
 8008870:	f000 f834 	bl	80088dc <__malloc_unlock>
 8008874:	f104 000b 	add.w	r0, r4, #11
 8008878:	1d23      	adds	r3, r4, #4
 800887a:	f020 0007 	bic.w	r0, r0, #7
 800887e:	1ac2      	subs	r2, r0, r3
 8008880:	d0cc      	beq.n	800881c <_malloc_r+0x20>
 8008882:	1a1b      	subs	r3, r3, r0
 8008884:	50a3      	str	r3, [r4, r2]
 8008886:	e7c9      	b.n	800881c <_malloc_r+0x20>
 8008888:	4622      	mov	r2, r4
 800888a:	6864      	ldr	r4, [r4, #4]
 800888c:	e7cc      	b.n	8008828 <_malloc_r+0x2c>
 800888e:	1cc4      	adds	r4, r0, #3
 8008890:	f024 0403 	bic.w	r4, r4, #3
 8008894:	42a0      	cmp	r0, r4
 8008896:	d0e3      	beq.n	8008860 <_malloc_r+0x64>
 8008898:	1a21      	subs	r1, r4, r0
 800889a:	4630      	mov	r0, r6
 800889c:	f000 f808 	bl	80088b0 <_sbrk_r>
 80088a0:	3001      	adds	r0, #1
 80088a2:	d1dd      	bne.n	8008860 <_malloc_r+0x64>
 80088a4:	e7cf      	b.n	8008846 <_malloc_r+0x4a>
 80088a6:	bf00      	nop
 80088a8:	200000b4 	.word	0x200000b4
 80088ac:	200000b8 	.word	0x200000b8

080088b0 <_sbrk_r>:
 80088b0:	b538      	push	{r3, r4, r5, lr}
 80088b2:	4d06      	ldr	r5, [pc, #24]	; (80088cc <_sbrk_r+0x1c>)
 80088b4:	2300      	movs	r3, #0
 80088b6:	4604      	mov	r4, r0
 80088b8:	4608      	mov	r0, r1
 80088ba:	602b      	str	r3, [r5, #0]
 80088bc:	f7f8 f9a2 	bl	8000c04 <_sbrk>
 80088c0:	1c43      	adds	r3, r0, #1
 80088c2:	d102      	bne.n	80088ca <_sbrk_r+0x1a>
 80088c4:	682b      	ldr	r3, [r5, #0]
 80088c6:	b103      	cbz	r3, 80088ca <_sbrk_r+0x1a>
 80088c8:	6023      	str	r3, [r4, #0]
 80088ca:	bd38      	pop	{r3, r4, r5, pc}
 80088cc:	20000850 	.word	0x20000850

080088d0 <__malloc_lock>:
 80088d0:	4801      	ldr	r0, [pc, #4]	; (80088d8 <__malloc_lock+0x8>)
 80088d2:	f000 b809 	b.w	80088e8 <__retarget_lock_acquire_recursive>
 80088d6:	bf00      	nop
 80088d8:	20000858 	.word	0x20000858

080088dc <__malloc_unlock>:
 80088dc:	4801      	ldr	r0, [pc, #4]	; (80088e4 <__malloc_unlock+0x8>)
 80088de:	f000 b804 	b.w	80088ea <__retarget_lock_release_recursive>
 80088e2:	bf00      	nop
 80088e4:	20000858 	.word	0x20000858

080088e8 <__retarget_lock_acquire_recursive>:
 80088e8:	4770      	bx	lr

080088ea <__retarget_lock_release_recursive>:
 80088ea:	4770      	bx	lr

080088ec <_init>:
 80088ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ee:	bf00      	nop
 80088f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088f2:	bc08      	pop	{r3}
 80088f4:	469e      	mov	lr, r3
 80088f6:	4770      	bx	lr

080088f8 <_fini>:
 80088f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088fa:	bf00      	nop
 80088fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088fe:	bc08      	pop	{r3}
 8008900:	469e      	mov	lr, r3
 8008902:	4770      	bx	lr
